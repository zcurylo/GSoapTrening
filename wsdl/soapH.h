/* soapH.h
   Generated by gSOAP 2.8.23 from media.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IANA_IfTypes
#define SOAP_TYPE_ns2__IANA_IfTypes (790)
#endif

#define soap_default_ns2__IANA_IfTypes(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IANA_IfTypes(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns2__IANA_IfTypes(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IANA_IfTypes(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_ns2__IANA_IfTypes
#define soap_write_ns2__IANA_IfTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IANA_IfTypes(soap, data), 0) || soap_put_ns2__IANA_IfTypes(soap, data, "ns2:IANA-IfTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns2__IANA_IfTypes(struct soap*, int *, const char*, const char*);

#ifndef soap_read_ns2__IANA_IfTypes
#define soap_read_ns2__IANA_IfTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IANA_IfTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data), 0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data), 0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data), 0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedLONG64(soap, data), 0) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data), 0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns7__FaultCodesType
#define SOAP_TYPE_ns7__FaultCodesType (924)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns7__FaultCodesType(struct soap*, enum ns7__FaultCodesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__FaultCodesType(struct soap*, const char*, int, const enum ns7__FaultCodesType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__FaultCodesType2s(struct soap*, enum ns7__FaultCodesType);
SOAP_FMAC3 enum ns7__FaultCodesType * SOAP_FMAC4 soap_in_ns7__FaultCodesType(struct soap*, const char*, enum ns7__FaultCodesType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__FaultCodesType(struct soap*, const char*, enum ns7__FaultCodesType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__FaultCodesType(struct soap*, const enum ns7__FaultCodesType *, const char*, const char*);

#ifndef soap_write_ns7__FaultCodesType
#define soap_write_ns7__FaultCodesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns7__FaultCodesType(soap, data), 0) || soap_put_ns7__FaultCodesType(soap, data, "ns7:FaultCodesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns7__FaultCodesType * SOAP_FMAC4 soap_get_ns7__FaultCodesType(struct soap*, enum ns7__FaultCodesType *, const char*, const char*);

#ifndef soap_read_ns7__FaultCodesType
#define soap_read_ns7__FaultCodesType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__FaultCodesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns7__RelationshipType
#define SOAP_TYPE_ns7__RelationshipType (922)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns7__RelationshipType(struct soap*, enum ns7__RelationshipType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__RelationshipType(struct soap*, const char*, int, const enum ns7__RelationshipType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__RelationshipType2s(struct soap*, enum ns7__RelationshipType);
SOAP_FMAC3 enum ns7__RelationshipType * SOAP_FMAC4 soap_in_ns7__RelationshipType(struct soap*, const char*, enum ns7__RelationshipType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__RelationshipType(struct soap*, const char*, enum ns7__RelationshipType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__RelationshipType(struct soap*, const enum ns7__RelationshipType *, const char*, const char*);

#ifndef soap_write_ns7__RelationshipType
#define soap_write_ns7__RelationshipType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns7__RelationshipType(soap, data), 0) || soap_put_ns7__RelationshipType(soap, data, "ns7:RelationshipType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns7__RelationshipType * SOAP_FMAC4 soap_get_ns7__RelationshipType(struct soap*, enum ns7__RelationshipType *, const char*, const char*);

#ifndef soap_read_ns7__RelationshipType
#define soap_read_ns7__RelationshipType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__RelationshipType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__OSDType
#define SOAP_TYPE_ns2__OSDType (914)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__OSDType(struct soap*, enum ns2__OSDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDType(struct soap*, const char*, int, const enum ns2__OSDType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__OSDType2s(struct soap*, enum ns2__OSDType);
SOAP_FMAC3 enum ns2__OSDType * SOAP_FMAC4 soap_in_ns2__OSDType(struct soap*, const char*, enum ns2__OSDType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__OSDType(struct soap*, const char*, enum ns2__OSDType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__OSDType(struct soap*, const enum ns2__OSDType *, const char*, const char*);

#ifndef soap_write_ns2__OSDType
#define soap_write_ns2__OSDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__OSDType(soap, data), 0) || soap_put_ns2__OSDType(soap, data, "ns2:OSDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__OSDType * SOAP_FMAC4 soap_get_ns2__OSDType(struct soap*, enum ns2__OSDType *, const char*, const char*);

#ifndef soap_read_ns2__OSDType
#define soap_read_ns2__OSDType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ModeOfOperation
#define SOAP_TYPE_ns2__ModeOfOperation (910)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ModeOfOperation(struct soap*, enum ns2__ModeOfOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ModeOfOperation(struct soap*, const char*, int, const enum ns2__ModeOfOperation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ModeOfOperation2s(struct soap*, enum ns2__ModeOfOperation);
SOAP_FMAC3 enum ns2__ModeOfOperation * SOAP_FMAC4 soap_in_ns2__ModeOfOperation(struct soap*, const char*, enum ns2__ModeOfOperation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ModeOfOperation(struct soap*, const char*, enum ns2__ModeOfOperation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ModeOfOperation(struct soap*, const enum ns2__ModeOfOperation *, const char*, const char*);

#ifndef soap_write_ns2__ModeOfOperation
#define soap_write_ns2__ModeOfOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ModeOfOperation(soap, data), 0) || soap_put_ns2__ModeOfOperation(soap, data, "ns2:ModeOfOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ModeOfOperation * SOAP_FMAC4 soap_get_ns2__ModeOfOperation(struct soap*, enum ns2__ModeOfOperation *, const char*, const char*);

#ifndef soap_read_ns2__ModeOfOperation
#define soap_read_ns2__ModeOfOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ModeOfOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__TrackType
#define SOAP_TYPE_ns2__TrackType (904)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__TrackType(struct soap*, enum ns2__TrackType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackType(struct soap*, const char*, int, const enum ns2__TrackType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__TrackType2s(struct soap*, enum ns2__TrackType);
SOAP_FMAC3 enum ns2__TrackType * SOAP_FMAC4 soap_in_ns2__TrackType(struct soap*, const char*, enum ns2__TrackType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__TrackType(struct soap*, const char*, enum ns2__TrackType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TrackType(struct soap*, const enum ns2__TrackType *, const char*, const char*);

#ifndef soap_write_ns2__TrackType
#define soap_write_ns2__TrackType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__TrackType(soap, data), 0) || soap_put_ns2__TrackType(soap, data, "ns2:TrackType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__TrackType * SOAP_FMAC4 soap_get_ns2__TrackType(struct soap*, enum ns2__TrackType *, const char*, const char*);

#ifndef soap_read_ns2__TrackType
#define soap_read_ns2__TrackType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__RecordingStatus
#define SOAP_TYPE_ns2__RecordingStatus (902)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RecordingStatus(struct soap*, enum ns2__RecordingStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingStatus(struct soap*, const char*, int, const enum ns2__RecordingStatus *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__RecordingStatus2s(struct soap*, enum ns2__RecordingStatus);
SOAP_FMAC3 enum ns2__RecordingStatus * SOAP_FMAC4 soap_in_ns2__RecordingStatus(struct soap*, const char*, enum ns2__RecordingStatus *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__RecordingStatus(struct soap*, const char*, enum ns2__RecordingStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RecordingStatus(struct soap*, const enum ns2__RecordingStatus *, const char*, const char*);

#ifndef soap_write_ns2__RecordingStatus
#define soap_write_ns2__RecordingStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RecordingStatus(soap, data), 0) || soap_put_ns2__RecordingStatus(soap, data, "ns2:RecordingStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__RecordingStatus * SOAP_FMAC4 soap_get_ns2__RecordingStatus(struct soap*, enum ns2__RecordingStatus *, const char*, const char*);

#ifndef soap_read_ns2__RecordingStatus
#define soap_read_ns2__RecordingStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__SearchState
#define SOAP_TYPE_ns2__SearchState (900)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SearchState(struct soap*, enum ns2__SearchState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SearchState(struct soap*, const char*, int, const enum ns2__SearchState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__SearchState2s(struct soap*, enum ns2__SearchState);
SOAP_FMAC3 enum ns2__SearchState * SOAP_FMAC4 soap_in_ns2__SearchState(struct soap*, const char*, enum ns2__SearchState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__SearchState(struct soap*, const char*, enum ns2__SearchState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SearchState(struct soap*, const enum ns2__SearchState *, const char*, const char*);

#ifndef soap_write_ns2__SearchState
#define soap_write_ns2__SearchState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__SearchState(soap, data), 0) || soap_put_ns2__SearchState(soap, data, "ns2:SearchState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__SearchState * SOAP_FMAC4 soap_get_ns2__SearchState(struct soap*, enum ns2__SearchState *, const char*, const char*);

#ifndef soap_read_ns2__SearchState
#define soap_read_ns2__SearchState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SearchState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ReceiverState
#define SOAP_TYPE_ns2__ReceiverState (894)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ReceiverState(struct soap*, enum ns2__ReceiverState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverState(struct soap*, const char*, int, const enum ns2__ReceiverState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ReceiverState2s(struct soap*, enum ns2__ReceiverState);
SOAP_FMAC3 enum ns2__ReceiverState * SOAP_FMAC4 soap_in_ns2__ReceiverState(struct soap*, const char*, enum ns2__ReceiverState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ReceiverState(struct soap*, const char*, enum ns2__ReceiverState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReceiverState(struct soap*, const enum ns2__ReceiverState *, const char*, const char*);

#ifndef soap_write_ns2__ReceiverState
#define soap_write_ns2__ReceiverState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ReceiverState(soap, data), 0) || soap_put_ns2__ReceiverState(soap, data, "ns2:ReceiverState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ReceiverState * SOAP_FMAC4 soap_get_ns2__ReceiverState(struct soap*, enum ns2__ReceiverState *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverState
#define soap_read_ns2__ReceiverState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ReceiverMode
#define SOAP_TYPE_ns2__ReceiverMode (892)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ReceiverMode(struct soap*, enum ns2__ReceiverMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverMode(struct soap*, const char*, int, const enum ns2__ReceiverMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ReceiverMode2s(struct soap*, enum ns2__ReceiverMode);
SOAP_FMAC3 enum ns2__ReceiverMode * SOAP_FMAC4 soap_in_ns2__ReceiverMode(struct soap*, const char*, enum ns2__ReceiverMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ReceiverMode(struct soap*, const char*, enum ns2__ReceiverMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReceiverMode(struct soap*, const enum ns2__ReceiverMode *, const char*, const char*);

#ifndef soap_write_ns2__ReceiverMode
#define soap_write_ns2__ReceiverMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ReceiverMode(soap, data), 0) || soap_put_ns2__ReceiverMode(soap, data, "ns2:ReceiverMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ReceiverMode * SOAP_FMAC4 soap_get_ns2__ReceiverMode(struct soap*, enum ns2__ReceiverMode *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverMode
#define soap_read_ns2__ReceiverMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ClassType
#define SOAP_TYPE_ns2__ClassType (890)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ClassType(struct soap*, enum ns2__ClassType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClassType(struct soap*, const char*, int, const enum ns2__ClassType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ClassType2s(struct soap*, enum ns2__ClassType);
SOAP_FMAC3 enum ns2__ClassType * SOAP_FMAC4 soap_in_ns2__ClassType(struct soap*, const char*, enum ns2__ClassType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ClassType(struct soap*, const char*, enum ns2__ClassType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ClassType(struct soap*, const enum ns2__ClassType *, const char*, const char*);

#ifndef soap_write_ns2__ClassType
#define soap_write_ns2__ClassType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ClassType(soap, data), 0) || soap_put_ns2__ClassType(soap, data, "ns2:ClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ClassType * SOAP_FMAC4 soap_get_ns2__ClassType(struct soap*, enum ns2__ClassType *, const char*, const char*);

#ifndef soap_read_ns2__ClassType
#define soap_read_ns2__ClassType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ClassType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Direction
#define SOAP_TYPE_ns2__Direction (888)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Direction(struct soap*, enum ns2__Direction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Direction(struct soap*, const char*, int, const enum ns2__Direction *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Direction2s(struct soap*, enum ns2__Direction);
SOAP_FMAC3 enum ns2__Direction * SOAP_FMAC4 soap_in_ns2__Direction(struct soap*, const char*, enum ns2__Direction *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Direction(struct soap*, const char*, enum ns2__Direction *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Direction(struct soap*, const enum ns2__Direction *, const char*, const char*);

#ifndef soap_write_ns2__Direction
#define soap_write_ns2__Direction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Direction(soap, data), 0) || soap_put_ns2__Direction(soap, data, "ns2:Direction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Direction * SOAP_FMAC4 soap_get_ns2__Direction(struct soap*, enum ns2__Direction *, const char*, const char*);

#ifndef soap_read_ns2__Direction
#define soap_read_ns2__Direction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Direction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__PropertyOperation
#define SOAP_TYPE_ns2__PropertyOperation (886)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__PropertyOperation(struct soap*, enum ns2__PropertyOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PropertyOperation(struct soap*, const char*, int, const enum ns2__PropertyOperation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__PropertyOperation2s(struct soap*, enum ns2__PropertyOperation);
SOAP_FMAC3 enum ns2__PropertyOperation * SOAP_FMAC4 soap_in_ns2__PropertyOperation(struct soap*, const char*, enum ns2__PropertyOperation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__PropertyOperation(struct soap*, const char*, enum ns2__PropertyOperation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__PropertyOperation(struct soap*, const enum ns2__PropertyOperation *, const char*, const char*);

#ifndef soap_write_ns2__PropertyOperation
#define soap_write_ns2__PropertyOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__PropertyOperation(soap, data), 0) || soap_put_ns2__PropertyOperation(soap, data, "ns2:PropertyOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__PropertyOperation * SOAP_FMAC4 soap_get_ns2__PropertyOperation(struct soap*, enum ns2__PropertyOperation *, const char*, const char*);

#ifndef soap_read_ns2__PropertyOperation
#define soap_read_ns2__PropertyOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PropertyOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__DefoggingMode
#define SOAP_TYPE_ns2__DefoggingMode (882)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__DefoggingMode(struct soap*, enum ns2__DefoggingMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DefoggingMode(struct soap*, const char*, int, const enum ns2__DefoggingMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__DefoggingMode2s(struct soap*, enum ns2__DefoggingMode);
SOAP_FMAC3 enum ns2__DefoggingMode * SOAP_FMAC4 soap_in_ns2__DefoggingMode(struct soap*, const char*, enum ns2__DefoggingMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__DefoggingMode(struct soap*, const char*, enum ns2__DefoggingMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__DefoggingMode(struct soap*, const enum ns2__DefoggingMode *, const char*, const char*);

#ifndef soap_write_ns2__DefoggingMode
#define soap_write_ns2__DefoggingMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__DefoggingMode(soap, data), 0) || soap_put_ns2__DefoggingMode(soap, data, "ns2:DefoggingMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__DefoggingMode * SOAP_FMAC4 soap_get_ns2__DefoggingMode(struct soap*, enum ns2__DefoggingMode *, const char*, const char*);

#ifndef soap_read_ns2__DefoggingMode
#define soap_read_ns2__DefoggingMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DefoggingMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ToneCompensationMode
#define SOAP_TYPE_ns2__ToneCompensationMode (880)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ToneCompensationMode(struct soap*, enum ns2__ToneCompensationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ToneCompensationMode(struct soap*, const char*, int, const enum ns2__ToneCompensationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ToneCompensationMode2s(struct soap*, enum ns2__ToneCompensationMode);
SOAP_FMAC3 enum ns2__ToneCompensationMode * SOAP_FMAC4 soap_in_ns2__ToneCompensationMode(struct soap*, const char*, enum ns2__ToneCompensationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ToneCompensationMode(struct soap*, const char*, enum ns2__ToneCompensationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ToneCompensationMode(struct soap*, const enum ns2__ToneCompensationMode *, const char*, const char*);

#ifndef soap_write_ns2__ToneCompensationMode
#define soap_write_ns2__ToneCompensationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ToneCompensationMode(soap, data), 0) || soap_put_ns2__ToneCompensationMode(soap, data, "ns2:ToneCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ToneCompensationMode * SOAP_FMAC4 soap_get_ns2__ToneCompensationMode(struct soap*, enum ns2__ToneCompensationMode *, const char*, const char*);

#ifndef soap_read_ns2__ToneCompensationMode
#define soap_read_ns2__ToneCompensationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ToneCompensationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_ns2__IrCutFilterAutoBoundaryType (878)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__IrCutFilterAutoBoundaryType(struct soap*, enum ns2__IrCutFilterAutoBoundaryType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterAutoBoundaryType(struct soap*, const char*, int, const enum ns2__IrCutFilterAutoBoundaryType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__IrCutFilterAutoBoundaryType2s(struct soap*, enum ns2__IrCutFilterAutoBoundaryType);
SOAP_FMAC3 enum ns2__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_in_ns2__IrCutFilterAutoBoundaryType(struct soap*, const char*, enum ns2__IrCutFilterAutoBoundaryType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__IrCutFilterAutoBoundaryType(struct soap*, const char*, enum ns2__IrCutFilterAutoBoundaryType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IrCutFilterAutoBoundaryType(struct soap*, const enum ns2__IrCutFilterAutoBoundaryType *, const char*, const char*);

#ifndef soap_write_ns2__IrCutFilterAutoBoundaryType
#define soap_write_ns2__IrCutFilterAutoBoundaryType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IrCutFilterAutoBoundaryType(soap, data), 0) || soap_put_ns2__IrCutFilterAutoBoundaryType(soap, data, "ns2:IrCutFilterAutoBoundaryType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_get_ns2__IrCutFilterAutoBoundaryType(struct soap*, enum ns2__IrCutFilterAutoBoundaryType *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterAutoBoundaryType
#define soap_read_ns2__IrCutFilterAutoBoundaryType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterAutoBoundaryType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ImageStabilizationMode
#define SOAP_TYPE_ns2__ImageStabilizationMode (876)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ImageStabilizationMode(struct soap*, enum ns2__ImageStabilizationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImageStabilizationMode(struct soap*, const char*, int, const enum ns2__ImageStabilizationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ImageStabilizationMode2s(struct soap*, enum ns2__ImageStabilizationMode);
SOAP_FMAC3 enum ns2__ImageStabilizationMode * SOAP_FMAC4 soap_in_ns2__ImageStabilizationMode(struct soap*, const char*, enum ns2__ImageStabilizationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ImageStabilizationMode(struct soap*, const char*, enum ns2__ImageStabilizationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ImageStabilizationMode(struct soap*, const enum ns2__ImageStabilizationMode *, const char*, const char*);

#ifndef soap_write_ns2__ImageStabilizationMode
#define soap_write_ns2__ImageStabilizationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ImageStabilizationMode(soap, data), 0) || soap_put_ns2__ImageStabilizationMode(soap, data, "ns2:ImageStabilizationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ImageStabilizationMode * SOAP_FMAC4 soap_get_ns2__ImageStabilizationMode(struct soap*, enum ns2__ImageStabilizationMode *, const char*, const char*);

#ifndef soap_read_ns2__ImageStabilizationMode
#define soap_read_ns2__ImageStabilizationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImageStabilizationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IrCutFilterMode
#define SOAP_TYPE_ns2__IrCutFilterMode (874)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__IrCutFilterMode(struct soap*, enum ns2__IrCutFilterMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterMode(struct soap*, const char*, int, const enum ns2__IrCutFilterMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__IrCutFilterMode2s(struct soap*, enum ns2__IrCutFilterMode);
SOAP_FMAC3 enum ns2__IrCutFilterMode * SOAP_FMAC4 soap_in_ns2__IrCutFilterMode(struct soap*, const char*, enum ns2__IrCutFilterMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__IrCutFilterMode(struct soap*, const char*, enum ns2__IrCutFilterMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IrCutFilterMode(struct soap*, const enum ns2__IrCutFilterMode *, const char*, const char*);

#ifndef soap_write_ns2__IrCutFilterMode
#define soap_write_ns2__IrCutFilterMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IrCutFilterMode(soap, data), 0) || soap_put_ns2__IrCutFilterMode(soap, data, "ns2:IrCutFilterMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IrCutFilterMode * SOAP_FMAC4 soap_get_ns2__IrCutFilterMode(struct soap*, enum ns2__IrCutFilterMode *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterMode
#define soap_read_ns2__IrCutFilterMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__WhiteBalanceMode
#define SOAP_TYPE_ns2__WhiteBalanceMode (872)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__WhiteBalanceMode(struct soap*, enum ns2__WhiteBalanceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalanceMode(struct soap*, const char*, int, const enum ns2__WhiteBalanceMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__WhiteBalanceMode2s(struct soap*, enum ns2__WhiteBalanceMode);
SOAP_FMAC3 enum ns2__WhiteBalanceMode * SOAP_FMAC4 soap_in_ns2__WhiteBalanceMode(struct soap*, const char*, enum ns2__WhiteBalanceMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__WhiteBalanceMode(struct soap*, const char*, enum ns2__WhiteBalanceMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__WhiteBalanceMode(struct soap*, const enum ns2__WhiteBalanceMode *, const char*, const char*);

#ifndef soap_write_ns2__WhiteBalanceMode
#define soap_write_ns2__WhiteBalanceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__WhiteBalanceMode(soap, data), 0) || soap_put_ns2__WhiteBalanceMode(soap, data, "ns2:WhiteBalanceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__WhiteBalanceMode * SOAP_FMAC4 soap_get_ns2__WhiteBalanceMode(struct soap*, enum ns2__WhiteBalanceMode *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalanceMode
#define soap_read_ns2__WhiteBalanceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalanceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Enabled
#define SOAP_TYPE_ns2__Enabled (870)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Enabled(struct soap*, enum ns2__Enabled *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Enabled(struct soap*, const char*, int, const enum ns2__Enabled *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Enabled2s(struct soap*, enum ns2__Enabled);
SOAP_FMAC3 enum ns2__Enabled * SOAP_FMAC4 soap_in_ns2__Enabled(struct soap*, const char*, enum ns2__Enabled *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Enabled(struct soap*, const char*, enum ns2__Enabled *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Enabled(struct soap*, const enum ns2__Enabled *, const char*, const char*);

#ifndef soap_write_ns2__Enabled
#define soap_write_ns2__Enabled(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Enabled(soap, data), 0) || soap_put_ns2__Enabled(soap, data, "ns2:Enabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Enabled * SOAP_FMAC4 soap_get_ns2__Enabled(struct soap*, enum ns2__Enabled *, const char*, const char*);

#ifndef soap_read_ns2__Enabled
#define soap_read_ns2__Enabled(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Enabled(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ExposureMode
#define SOAP_TYPE_ns2__ExposureMode (868)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ExposureMode(struct soap*, enum ns2__ExposureMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExposureMode(struct soap*, const char*, int, const enum ns2__ExposureMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ExposureMode2s(struct soap*, enum ns2__ExposureMode);
SOAP_FMAC3 enum ns2__ExposureMode * SOAP_FMAC4 soap_in_ns2__ExposureMode(struct soap*, const char*, enum ns2__ExposureMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ExposureMode(struct soap*, const char*, enum ns2__ExposureMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ExposureMode(struct soap*, const enum ns2__ExposureMode *, const char*, const char*);

#ifndef soap_write_ns2__ExposureMode
#define soap_write_ns2__ExposureMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ExposureMode(soap, data), 0) || soap_put_ns2__ExposureMode(soap, data, "ns2:ExposureMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ExposureMode * SOAP_FMAC4 soap_get_ns2__ExposureMode(struct soap*, enum ns2__ExposureMode *, const char*, const char*);

#ifndef soap_read_ns2__ExposureMode
#define soap_read_ns2__ExposureMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ExposureMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ExposurePriority
#define SOAP_TYPE_ns2__ExposurePriority (866)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ExposurePriority(struct soap*, enum ns2__ExposurePriority *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExposurePriority(struct soap*, const char*, int, const enum ns2__ExposurePriority *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ExposurePriority2s(struct soap*, enum ns2__ExposurePriority);
SOAP_FMAC3 enum ns2__ExposurePriority * SOAP_FMAC4 soap_in_ns2__ExposurePriority(struct soap*, const char*, enum ns2__ExposurePriority *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ExposurePriority(struct soap*, const char*, enum ns2__ExposurePriority *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ExposurePriority(struct soap*, const enum ns2__ExposurePriority *, const char*, const char*);

#ifndef soap_write_ns2__ExposurePriority
#define soap_write_ns2__ExposurePriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ExposurePriority(soap, data), 0) || soap_put_ns2__ExposurePriority(soap, data, "ns2:ExposurePriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ExposurePriority * SOAP_FMAC4 soap_get_ns2__ExposurePriority(struct soap*, enum ns2__ExposurePriority *, const char*, const char*);

#ifndef soap_read_ns2__ExposurePriority
#define soap_read_ns2__ExposurePriority(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ExposurePriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__BacklightCompensationMode
#define SOAP_TYPE_ns2__BacklightCompensationMode (864)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__BacklightCompensationMode(struct soap*, enum ns2__BacklightCompensationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BacklightCompensationMode(struct soap*, const char*, int, const enum ns2__BacklightCompensationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__BacklightCompensationMode2s(struct soap*, enum ns2__BacklightCompensationMode);
SOAP_FMAC3 enum ns2__BacklightCompensationMode * SOAP_FMAC4 soap_in_ns2__BacklightCompensationMode(struct soap*, const char*, enum ns2__BacklightCompensationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__BacklightCompensationMode(struct soap*, const char*, enum ns2__BacklightCompensationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__BacklightCompensationMode(struct soap*, const enum ns2__BacklightCompensationMode *, const char*, const char*);

#ifndef soap_write_ns2__BacklightCompensationMode
#define soap_write_ns2__BacklightCompensationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__BacklightCompensationMode(soap, data), 0) || soap_put_ns2__BacklightCompensationMode(soap, data, "ns2:BacklightCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__BacklightCompensationMode * SOAP_FMAC4 soap_get_ns2__BacklightCompensationMode(struct soap*, enum ns2__BacklightCompensationMode *, const char*, const char*);

#ifndef soap_read_ns2__BacklightCompensationMode
#define soap_read_ns2__BacklightCompensationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BacklightCompensationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__WideDynamicMode
#define SOAP_TYPE_ns2__WideDynamicMode (862)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__WideDynamicMode(struct soap*, enum ns2__WideDynamicMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WideDynamicMode(struct soap*, const char*, int, const enum ns2__WideDynamicMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__WideDynamicMode2s(struct soap*, enum ns2__WideDynamicMode);
SOAP_FMAC3 enum ns2__WideDynamicMode * SOAP_FMAC4 soap_in_ns2__WideDynamicMode(struct soap*, const char*, enum ns2__WideDynamicMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__WideDynamicMode(struct soap*, const char*, enum ns2__WideDynamicMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__WideDynamicMode(struct soap*, const enum ns2__WideDynamicMode *, const char*, const char*);

#ifndef soap_write_ns2__WideDynamicMode
#define soap_write_ns2__WideDynamicMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__WideDynamicMode(soap, data), 0) || soap_put_ns2__WideDynamicMode(soap, data, "ns2:WideDynamicMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__WideDynamicMode * SOAP_FMAC4 soap_get_ns2__WideDynamicMode(struct soap*, enum ns2__WideDynamicMode *, const char*, const char*);

#ifndef soap_read_ns2__WideDynamicMode
#define soap_read_ns2__WideDynamicMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WideDynamicMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__AutoFocusMode
#define SOAP_TYPE_ns2__AutoFocusMode (860)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__AutoFocusMode(struct soap*, enum ns2__AutoFocusMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AutoFocusMode(struct soap*, const char*, int, const enum ns2__AutoFocusMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__AutoFocusMode2s(struct soap*, enum ns2__AutoFocusMode);
SOAP_FMAC3 enum ns2__AutoFocusMode * SOAP_FMAC4 soap_in_ns2__AutoFocusMode(struct soap*, const char*, enum ns2__AutoFocusMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__AutoFocusMode(struct soap*, const char*, enum ns2__AutoFocusMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AutoFocusMode(struct soap*, const enum ns2__AutoFocusMode *, const char*, const char*);

#ifndef soap_write_ns2__AutoFocusMode
#define soap_write_ns2__AutoFocusMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__AutoFocusMode(soap, data), 0) || soap_put_ns2__AutoFocusMode(soap, data, "ns2:AutoFocusMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__AutoFocusMode * SOAP_FMAC4 soap_get_ns2__AutoFocusMode(struct soap*, enum ns2__AutoFocusMode *, const char*, const char*);

#ifndef soap_read_ns2__AutoFocusMode
#define soap_read_ns2__AutoFocusMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AutoFocusMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__PTZPresetTourOperation
#define SOAP_TYPE_ns2__PTZPresetTourOperation (858)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__PTZPresetTourOperation(struct soap*, enum ns2__PTZPresetTourOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourOperation(struct soap*, const char*, int, const enum ns2__PTZPresetTourOperation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__PTZPresetTourOperation2s(struct soap*, enum ns2__PTZPresetTourOperation);
SOAP_FMAC3 enum ns2__PTZPresetTourOperation * SOAP_FMAC4 soap_in_ns2__PTZPresetTourOperation(struct soap*, const char*, enum ns2__PTZPresetTourOperation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__PTZPresetTourOperation(struct soap*, const char*, enum ns2__PTZPresetTourOperation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__PTZPresetTourOperation(struct soap*, const enum ns2__PTZPresetTourOperation *, const char*, const char*);

#ifndef soap_write_ns2__PTZPresetTourOperation
#define soap_write_ns2__PTZPresetTourOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__PTZPresetTourOperation(soap, data), 0) || soap_put_ns2__PTZPresetTourOperation(soap, data, "ns2:PTZPresetTourOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__PTZPresetTourOperation * SOAP_FMAC4 soap_get_ns2__PTZPresetTourOperation(struct soap*, enum ns2__PTZPresetTourOperation *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourOperation
#define soap_read_ns2__PTZPresetTourOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__PTZPresetTourDirection
#define SOAP_TYPE_ns2__PTZPresetTourDirection (856)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__PTZPresetTourDirection(struct soap*, enum ns2__PTZPresetTourDirection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourDirection(struct soap*, const char*, int, const enum ns2__PTZPresetTourDirection *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__PTZPresetTourDirection2s(struct soap*, enum ns2__PTZPresetTourDirection);
SOAP_FMAC3 enum ns2__PTZPresetTourDirection * SOAP_FMAC4 soap_in_ns2__PTZPresetTourDirection(struct soap*, const char*, enum ns2__PTZPresetTourDirection *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__PTZPresetTourDirection(struct soap*, const char*, enum ns2__PTZPresetTourDirection *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__PTZPresetTourDirection(struct soap*, const enum ns2__PTZPresetTourDirection *, const char*, const char*);

#ifndef soap_write_ns2__PTZPresetTourDirection
#define soap_write_ns2__PTZPresetTourDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__PTZPresetTourDirection(soap, data), 0) || soap_put_ns2__PTZPresetTourDirection(soap, data, "ns2:PTZPresetTourDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__PTZPresetTourDirection * SOAP_FMAC4 soap_get_ns2__PTZPresetTourDirection(struct soap*, enum ns2__PTZPresetTourDirection *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourDirection
#define soap_read_ns2__PTZPresetTourDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__PTZPresetTourState
#define SOAP_TYPE_ns2__PTZPresetTourState (854)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__PTZPresetTourState(struct soap*, enum ns2__PTZPresetTourState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourState(struct soap*, const char*, int, const enum ns2__PTZPresetTourState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__PTZPresetTourState2s(struct soap*, enum ns2__PTZPresetTourState);
SOAP_FMAC3 enum ns2__PTZPresetTourState * SOAP_FMAC4 soap_in_ns2__PTZPresetTourState(struct soap*, const char*, enum ns2__PTZPresetTourState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__PTZPresetTourState(struct soap*, const char*, enum ns2__PTZPresetTourState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__PTZPresetTourState(struct soap*, const enum ns2__PTZPresetTourState *, const char*, const char*);

#ifndef soap_write_ns2__PTZPresetTourState
#define soap_write_ns2__PTZPresetTourState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__PTZPresetTourState(soap, data), 0) || soap_put_ns2__PTZPresetTourState(soap, data, "ns2:PTZPresetTourState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__PTZPresetTourState * SOAP_FMAC4 soap_get_ns2__PTZPresetTourState(struct soap*, enum ns2__PTZPresetTourState *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourState
#define soap_read_ns2__PTZPresetTourState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__MoveStatus
#define SOAP_TYPE_ns2__MoveStatus (852)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__MoveStatus(struct soap*, enum ns2__MoveStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MoveStatus(struct soap*, const char*, int, const enum ns2__MoveStatus *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__MoveStatus2s(struct soap*, enum ns2__MoveStatus);
SOAP_FMAC3 enum ns2__MoveStatus * SOAP_FMAC4 soap_in_ns2__MoveStatus(struct soap*, const char*, enum ns2__MoveStatus *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__MoveStatus(struct soap*, const char*, enum ns2__MoveStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__MoveStatus(struct soap*, const enum ns2__MoveStatus *, const char*, const char*);

#ifndef soap_write_ns2__MoveStatus
#define soap_write_ns2__MoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__MoveStatus(soap, data), 0) || soap_put_ns2__MoveStatus(soap, data, "ns2:MoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__MoveStatus * SOAP_FMAC4 soap_get_ns2__MoveStatus(struct soap*, enum ns2__MoveStatus *, const char*, const char*);

#ifndef soap_read_ns2__MoveStatus
#define soap_read_ns2__MoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ReverseMode
#define SOAP_TYPE_ns2__ReverseMode (848)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ReverseMode(struct soap*, enum ns2__ReverseMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReverseMode(struct soap*, const char*, int, const enum ns2__ReverseMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ReverseMode2s(struct soap*, enum ns2__ReverseMode);
SOAP_FMAC3 enum ns2__ReverseMode * SOAP_FMAC4 soap_in_ns2__ReverseMode(struct soap*, const char*, enum ns2__ReverseMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ReverseMode(struct soap*, const char*, enum ns2__ReverseMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReverseMode(struct soap*, const enum ns2__ReverseMode *, const char*, const char*);

#ifndef soap_write_ns2__ReverseMode
#define soap_write_ns2__ReverseMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ReverseMode(soap, data), 0) || soap_put_ns2__ReverseMode(soap, data, "ns2:ReverseMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ReverseMode * SOAP_FMAC4 soap_get_ns2__ReverseMode(struct soap*, enum ns2__ReverseMode *, const char*, const char*);

#ifndef soap_read_ns2__ReverseMode
#define soap_read_ns2__ReverseMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReverseMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__EFlipMode
#define SOAP_TYPE_ns2__EFlipMode (846)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EFlipMode(struct soap*, enum ns2__EFlipMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EFlipMode(struct soap*, const char*, int, const enum ns2__EFlipMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__EFlipMode2s(struct soap*, enum ns2__EFlipMode);
SOAP_FMAC3 enum ns2__EFlipMode * SOAP_FMAC4 soap_in_ns2__EFlipMode(struct soap*, const char*, enum ns2__EFlipMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__EFlipMode(struct soap*, const char*, enum ns2__EFlipMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EFlipMode(struct soap*, const enum ns2__EFlipMode *, const char*, const char*);

#ifndef soap_write_ns2__EFlipMode
#define soap_write_ns2__EFlipMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__EFlipMode(soap, data), 0) || soap_put_ns2__EFlipMode(soap, data, "ns2:EFlipMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__EFlipMode * SOAP_FMAC4 soap_get_ns2__EFlipMode(struct soap*, enum ns2__EFlipMode *, const char*, const char*);

#ifndef soap_read_ns2__EFlipMode
#define soap_read_ns2__EFlipMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EFlipMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__RelayMode
#define SOAP_TYPE_ns2__RelayMode (844)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RelayMode(struct soap*, enum ns2__RelayMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayMode(struct soap*, const char*, int, const enum ns2__RelayMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__RelayMode2s(struct soap*, enum ns2__RelayMode);
SOAP_FMAC3 enum ns2__RelayMode * SOAP_FMAC4 soap_in_ns2__RelayMode(struct soap*, const char*, enum ns2__RelayMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__RelayMode(struct soap*, const char*, enum ns2__RelayMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RelayMode(struct soap*, const enum ns2__RelayMode *, const char*, const char*);

#ifndef soap_write_ns2__RelayMode
#define soap_write_ns2__RelayMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RelayMode(soap, data), 0) || soap_put_ns2__RelayMode(soap, data, "ns2:RelayMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__RelayMode * SOAP_FMAC4 soap_get_ns2__RelayMode(struct soap*, enum ns2__RelayMode *, const char*, const char*);

#ifndef soap_read_ns2__RelayMode
#define soap_read_ns2__RelayMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__RelayIdleState
#define SOAP_TYPE_ns2__RelayIdleState (842)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RelayIdleState(struct soap*, enum ns2__RelayIdleState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayIdleState(struct soap*, const char*, int, const enum ns2__RelayIdleState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__RelayIdleState2s(struct soap*, enum ns2__RelayIdleState);
SOAP_FMAC3 enum ns2__RelayIdleState * SOAP_FMAC4 soap_in_ns2__RelayIdleState(struct soap*, const char*, enum ns2__RelayIdleState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__RelayIdleState(struct soap*, const char*, enum ns2__RelayIdleState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RelayIdleState(struct soap*, const enum ns2__RelayIdleState *, const char*, const char*);

#ifndef soap_write_ns2__RelayIdleState
#define soap_write_ns2__RelayIdleState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RelayIdleState(soap, data), 0) || soap_put_ns2__RelayIdleState(soap, data, "ns2:RelayIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__RelayIdleState * SOAP_FMAC4 soap_get_ns2__RelayIdleState(struct soap*, enum ns2__RelayIdleState *, const char*, const char*);

#ifndef soap_read_ns2__RelayIdleState
#define soap_read_ns2__RelayIdleState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayIdleState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__RelayLogicalState
#define SOAP_TYPE_ns2__RelayLogicalState (840)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RelayLogicalState(struct soap*, enum ns2__RelayLogicalState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayLogicalState(struct soap*, const char*, int, const enum ns2__RelayLogicalState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__RelayLogicalState2s(struct soap*, enum ns2__RelayLogicalState);
SOAP_FMAC3 enum ns2__RelayLogicalState * SOAP_FMAC4 soap_in_ns2__RelayLogicalState(struct soap*, const char*, enum ns2__RelayLogicalState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__RelayLogicalState(struct soap*, const char*, enum ns2__RelayLogicalState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RelayLogicalState(struct soap*, const enum ns2__RelayLogicalState *, const char*, const char*);

#ifndef soap_write_ns2__RelayLogicalState
#define soap_write_ns2__RelayLogicalState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RelayLogicalState(soap, data), 0) || soap_put_ns2__RelayLogicalState(soap, data, "ns2:RelayLogicalState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__RelayLogicalState * SOAP_FMAC4 soap_get_ns2__RelayLogicalState(struct soap*, enum ns2__RelayLogicalState *, const char*, const char*);

#ifndef soap_read_ns2__RelayLogicalState
#define soap_read_ns2__RelayLogicalState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayLogicalState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__UserLevel
#define SOAP_TYPE_ns2__UserLevel (838)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__UserLevel(struct soap*, enum ns2__UserLevel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UserLevel(struct soap*, const char*, int, const enum ns2__UserLevel *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__UserLevel2s(struct soap*, enum ns2__UserLevel);
SOAP_FMAC3 enum ns2__UserLevel * SOAP_FMAC4 soap_in_ns2__UserLevel(struct soap*, const char*, enum ns2__UserLevel *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__UserLevel(struct soap*, const char*, enum ns2__UserLevel *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__UserLevel(struct soap*, const enum ns2__UserLevel *, const char*, const char*);

#ifndef soap_write_ns2__UserLevel
#define soap_write_ns2__UserLevel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__UserLevel(soap, data), 0) || soap_put_ns2__UserLevel(soap, data, "ns2:UserLevel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__UserLevel * SOAP_FMAC4 soap_get_ns2__UserLevel(struct soap*, enum ns2__UserLevel *, const char*, const char*);

#ifndef soap_read_ns2__UserLevel
#define soap_read_ns2__UserLevel(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__UserLevel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__SetDateTimeType
#define SOAP_TYPE_ns2__SetDateTimeType (836)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetDateTimeType(struct soap*, enum ns2__SetDateTimeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetDateTimeType(struct soap*, const char*, int, const enum ns2__SetDateTimeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__SetDateTimeType2s(struct soap*, enum ns2__SetDateTimeType);
SOAP_FMAC3 enum ns2__SetDateTimeType * SOAP_FMAC4 soap_in_ns2__SetDateTimeType(struct soap*, const char*, enum ns2__SetDateTimeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__SetDateTimeType(struct soap*, const char*, enum ns2__SetDateTimeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetDateTimeType(struct soap*, const enum ns2__SetDateTimeType *, const char*, const char*);

#ifndef soap_write_ns2__SetDateTimeType
#define soap_write_ns2__SetDateTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__SetDateTimeType(soap, data), 0) || soap_put_ns2__SetDateTimeType(soap, data, "ns2:SetDateTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__SetDateTimeType * SOAP_FMAC4 soap_get_ns2__SetDateTimeType(struct soap*, enum ns2__SetDateTimeType *, const char*, const char*);

#ifndef soap_read_ns2__SetDateTimeType
#define soap_read_ns2__SetDateTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SetDateTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__FactoryDefaultType
#define SOAP_TYPE_ns2__FactoryDefaultType (834)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__FactoryDefaultType(struct soap*, enum ns2__FactoryDefaultType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FactoryDefaultType(struct soap*, const char*, int, const enum ns2__FactoryDefaultType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__FactoryDefaultType2s(struct soap*, enum ns2__FactoryDefaultType);
SOAP_FMAC3 enum ns2__FactoryDefaultType * SOAP_FMAC4 soap_in_ns2__FactoryDefaultType(struct soap*, const char*, enum ns2__FactoryDefaultType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__FactoryDefaultType(struct soap*, const char*, enum ns2__FactoryDefaultType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FactoryDefaultType(struct soap*, const enum ns2__FactoryDefaultType *, const char*, const char*);

#ifndef soap_write_ns2__FactoryDefaultType
#define soap_write_ns2__FactoryDefaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__FactoryDefaultType(soap, data), 0) || soap_put_ns2__FactoryDefaultType(soap, data, "ns2:FactoryDefaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__FactoryDefaultType * SOAP_FMAC4 soap_get_ns2__FactoryDefaultType(struct soap*, enum ns2__FactoryDefaultType *, const char*, const char*);

#ifndef soap_read_ns2__FactoryDefaultType
#define soap_read_ns2__FactoryDefaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FactoryDefaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__SystemLogType
#define SOAP_TYPE_ns2__SystemLogType (832)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SystemLogType(struct soap*, enum ns2__SystemLogType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemLogType(struct soap*, const char*, int, const enum ns2__SystemLogType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__SystemLogType2s(struct soap*, enum ns2__SystemLogType);
SOAP_FMAC3 enum ns2__SystemLogType * SOAP_FMAC4 soap_in_ns2__SystemLogType(struct soap*, const char*, enum ns2__SystemLogType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__SystemLogType(struct soap*, const char*, enum ns2__SystemLogType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SystemLogType(struct soap*, const enum ns2__SystemLogType *, const char*, const char*);

#ifndef soap_write_ns2__SystemLogType
#define soap_write_ns2__SystemLogType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__SystemLogType(soap, data), 0) || soap_put_ns2__SystemLogType(soap, data, "ns2:SystemLogType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__SystemLogType * SOAP_FMAC4 soap_get_ns2__SystemLogType(struct soap*, enum ns2__SystemLogType *, const char*, const char*);

#ifndef soap_read_ns2__SystemLogType
#define soap_read_ns2__SystemLogType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemLogType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__CapabilityCategory
#define SOAP_TYPE_ns2__CapabilityCategory (830)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__CapabilityCategory(struct soap*, enum ns2__CapabilityCategory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CapabilityCategory(struct soap*, const char*, int, const enum ns2__CapabilityCategory *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__CapabilityCategory2s(struct soap*, enum ns2__CapabilityCategory);
SOAP_FMAC3 enum ns2__CapabilityCategory * SOAP_FMAC4 soap_in_ns2__CapabilityCategory(struct soap*, const char*, enum ns2__CapabilityCategory *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__CapabilityCategory(struct soap*, const char*, enum ns2__CapabilityCategory *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__CapabilityCategory(struct soap*, const enum ns2__CapabilityCategory *, const char*, const char*);

#ifndef soap_write_ns2__CapabilityCategory
#define soap_write_ns2__CapabilityCategory(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__CapabilityCategory(soap, data), 0) || soap_put_ns2__CapabilityCategory(soap, data, "ns2:CapabilityCategory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__CapabilityCategory * SOAP_FMAC4 soap_get_ns2__CapabilityCategory(struct soap*, enum ns2__CapabilityCategory *, const char*, const char*);

#ifndef soap_read_ns2__CapabilityCategory
#define soap_read_ns2__CapabilityCategory(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CapabilityCategory(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Dot11AuthAndMangementSuite
#define SOAP_TYPE_ns2__Dot11AuthAndMangementSuite (828)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Dot11AuthAndMangementSuite(struct soap*, enum ns2__Dot11AuthAndMangementSuite *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const enum ns2__Dot11AuthAndMangementSuite *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Dot11AuthAndMangementSuite2s(struct soap*, enum ns2__Dot11AuthAndMangementSuite);
SOAP_FMAC3 enum ns2__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_in_ns2__Dot11AuthAndMangementSuite(struct soap*, const char*, enum ns2__Dot11AuthAndMangementSuite *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Dot11AuthAndMangementSuite(struct soap*, const char*, enum ns2__Dot11AuthAndMangementSuite *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11AuthAndMangementSuite(struct soap*, const enum ns2__Dot11AuthAndMangementSuite *, const char*, const char*);

#ifndef soap_write_ns2__Dot11AuthAndMangementSuite
#define soap_write_ns2__Dot11AuthAndMangementSuite(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Dot11AuthAndMangementSuite(soap, data), 0) || soap_put_ns2__Dot11AuthAndMangementSuite(soap, data, "ns2:Dot11AuthAndMangementSuite", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_get_ns2__Dot11AuthAndMangementSuite(struct soap*, enum ns2__Dot11AuthAndMangementSuite *, const char*, const char*);

#ifndef soap_read_ns2__Dot11AuthAndMangementSuite
#define soap_read_ns2__Dot11AuthAndMangementSuite(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11AuthAndMangementSuite(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Dot11SignalStrength
#define SOAP_TYPE_ns2__Dot11SignalStrength (826)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Dot11SignalStrength(struct soap*, enum ns2__Dot11SignalStrength *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SignalStrength(struct soap*, const char*, int, const enum ns2__Dot11SignalStrength *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Dot11SignalStrength2s(struct soap*, enum ns2__Dot11SignalStrength);
SOAP_FMAC3 enum ns2__Dot11SignalStrength * SOAP_FMAC4 soap_in_ns2__Dot11SignalStrength(struct soap*, const char*, enum ns2__Dot11SignalStrength *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Dot11SignalStrength(struct soap*, const char*, enum ns2__Dot11SignalStrength *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11SignalStrength(struct soap*, const enum ns2__Dot11SignalStrength *, const char*, const char*);

#ifndef soap_write_ns2__Dot11SignalStrength
#define soap_write_ns2__Dot11SignalStrength(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Dot11SignalStrength(soap, data), 0) || soap_put_ns2__Dot11SignalStrength(soap, data, "ns2:Dot11SignalStrength", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11SignalStrength * SOAP_FMAC4 soap_get_ns2__Dot11SignalStrength(struct soap*, enum ns2__Dot11SignalStrength *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SignalStrength
#define soap_read_ns2__Dot11SignalStrength(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SignalStrength(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Dot11Cipher
#define SOAP_TYPE_ns2__Dot11Cipher (820)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Dot11Cipher(struct soap*, enum ns2__Dot11Cipher *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11Cipher(struct soap*, const char*, int, const enum ns2__Dot11Cipher *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Dot11Cipher2s(struct soap*, enum ns2__Dot11Cipher);
SOAP_FMAC3 enum ns2__Dot11Cipher * SOAP_FMAC4 soap_in_ns2__Dot11Cipher(struct soap*, const char*, enum ns2__Dot11Cipher *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Dot11Cipher(struct soap*, const char*, enum ns2__Dot11Cipher *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11Cipher(struct soap*, const enum ns2__Dot11Cipher *, const char*, const char*);

#ifndef soap_write_ns2__Dot11Cipher
#define soap_write_ns2__Dot11Cipher(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Dot11Cipher(soap, data), 0) || soap_put_ns2__Dot11Cipher(soap, data, "ns2:Dot11Cipher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11Cipher * SOAP_FMAC4 soap_get_ns2__Dot11Cipher(struct soap*, enum ns2__Dot11Cipher *, const char*, const char*);

#ifndef soap_read_ns2__Dot11Cipher
#define soap_read_ns2__Dot11Cipher(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11Cipher(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Dot11SecurityMode
#define SOAP_TYPE_ns2__Dot11SecurityMode (818)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Dot11SecurityMode(struct soap*, enum ns2__Dot11SecurityMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SecurityMode(struct soap*, const char*, int, const enum ns2__Dot11SecurityMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Dot11SecurityMode2s(struct soap*, enum ns2__Dot11SecurityMode);
SOAP_FMAC3 enum ns2__Dot11SecurityMode * SOAP_FMAC4 soap_in_ns2__Dot11SecurityMode(struct soap*, const char*, enum ns2__Dot11SecurityMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Dot11SecurityMode(struct soap*, const char*, enum ns2__Dot11SecurityMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11SecurityMode(struct soap*, const enum ns2__Dot11SecurityMode *, const char*, const char*);

#ifndef soap_write_ns2__Dot11SecurityMode
#define soap_write_ns2__Dot11SecurityMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Dot11SecurityMode(soap, data), 0) || soap_put_ns2__Dot11SecurityMode(soap, data, "ns2:Dot11SecurityMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11SecurityMode * SOAP_FMAC4 soap_get_ns2__Dot11SecurityMode(struct soap*, enum ns2__Dot11SecurityMode *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SecurityMode
#define soap_read_ns2__Dot11SecurityMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SecurityMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Dot11StationMode
#define SOAP_TYPE_ns2__Dot11StationMode (816)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Dot11StationMode(struct soap*, enum ns2__Dot11StationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11StationMode(struct soap*, const char*, int, const enum ns2__Dot11StationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Dot11StationMode2s(struct soap*, enum ns2__Dot11StationMode);
SOAP_FMAC3 enum ns2__Dot11StationMode * SOAP_FMAC4 soap_in_ns2__Dot11StationMode(struct soap*, const char*, enum ns2__Dot11StationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Dot11StationMode(struct soap*, const char*, enum ns2__Dot11StationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11StationMode(struct soap*, const enum ns2__Dot11StationMode *, const char*, const char*);

#ifndef soap_write_ns2__Dot11StationMode
#define soap_write_ns2__Dot11StationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Dot11StationMode(soap, data), 0) || soap_put_ns2__Dot11StationMode(soap, data, "ns2:Dot11StationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11StationMode * SOAP_FMAC4 soap_get_ns2__Dot11StationMode(struct soap*, enum ns2__Dot11StationMode *, const char*, const char*);

#ifndef soap_read_ns2__Dot11StationMode
#define soap_read_ns2__Dot11StationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11StationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__DynamicDNSType
#define SOAP_TYPE_ns2__DynamicDNSType (812)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__DynamicDNSType(struct soap*, enum ns2__DynamicDNSType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DynamicDNSType(struct soap*, const char*, int, const enum ns2__DynamicDNSType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__DynamicDNSType2s(struct soap*, enum ns2__DynamicDNSType);
SOAP_FMAC3 enum ns2__DynamicDNSType * SOAP_FMAC4 soap_in_ns2__DynamicDNSType(struct soap*, const char*, enum ns2__DynamicDNSType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__DynamicDNSType(struct soap*, const char*, enum ns2__DynamicDNSType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__DynamicDNSType(struct soap*, const enum ns2__DynamicDNSType *, const char*, const char*);

#ifndef soap_write_ns2__DynamicDNSType
#define soap_write_ns2__DynamicDNSType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__DynamicDNSType(soap, data), 0) || soap_put_ns2__DynamicDNSType(soap, data, "ns2:DynamicDNSType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__DynamicDNSType * SOAP_FMAC4 soap_get_ns2__DynamicDNSType(struct soap*, enum ns2__DynamicDNSType *, const char*, const char*);

#ifndef soap_read_ns2__DynamicDNSType
#define soap_read_ns2__DynamicDNSType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DynamicDNSType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IPAddressFilterType
#define SOAP_TYPE_ns2__IPAddressFilterType (810)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__IPAddressFilterType(struct soap*, enum ns2__IPAddressFilterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPAddressFilterType(struct soap*, const char*, int, const enum ns2__IPAddressFilterType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__IPAddressFilterType2s(struct soap*, enum ns2__IPAddressFilterType);
SOAP_FMAC3 enum ns2__IPAddressFilterType * SOAP_FMAC4 soap_in_ns2__IPAddressFilterType(struct soap*, const char*, enum ns2__IPAddressFilterType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__IPAddressFilterType(struct soap*, const char*, enum ns2__IPAddressFilterType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IPAddressFilterType(struct soap*, const enum ns2__IPAddressFilterType *, const char*, const char*);

#ifndef soap_write_ns2__IPAddressFilterType
#define soap_write_ns2__IPAddressFilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IPAddressFilterType(soap, data), 0) || soap_put_ns2__IPAddressFilterType(soap, data, "ns2:IPAddressFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IPAddressFilterType * SOAP_FMAC4 soap_get_ns2__IPAddressFilterType(struct soap*, enum ns2__IPAddressFilterType *, const char*, const char*);

#ifndef soap_read_ns2__IPAddressFilterType
#define soap_read_ns2__IPAddressFilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPAddressFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IPType
#define SOAP_TYPE_ns2__IPType (804)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__IPType(struct soap*, enum ns2__IPType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPType(struct soap*, const char*, int, const enum ns2__IPType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__IPType2s(struct soap*, enum ns2__IPType);
SOAP_FMAC3 enum ns2__IPType * SOAP_FMAC4 soap_in_ns2__IPType(struct soap*, const char*, enum ns2__IPType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__IPType(struct soap*, const char*, enum ns2__IPType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IPType(struct soap*, const enum ns2__IPType *, const char*, const char*);

#ifndef soap_write_ns2__IPType
#define soap_write_ns2__IPType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IPType(soap, data), 0) || soap_put_ns2__IPType(soap, data, "ns2:IPType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IPType * SOAP_FMAC4 soap_get_ns2__IPType(struct soap*, enum ns2__IPType *, const char*, const char*);

#ifndef soap_read_ns2__IPType
#define soap_read_ns2__IPType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__NetworkHostType
#define SOAP_TYPE_ns2__NetworkHostType (796)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__NetworkHostType(struct soap*, enum ns2__NetworkHostType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkHostType(struct soap*, const char*, int, const enum ns2__NetworkHostType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__NetworkHostType2s(struct soap*, enum ns2__NetworkHostType);
SOAP_FMAC3 enum ns2__NetworkHostType * SOAP_FMAC4 soap_in_ns2__NetworkHostType(struct soap*, const char*, enum ns2__NetworkHostType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__NetworkHostType(struct soap*, const char*, enum ns2__NetworkHostType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__NetworkHostType(struct soap*, const enum ns2__NetworkHostType *, const char*, const char*);

#ifndef soap_write_ns2__NetworkHostType
#define soap_write_ns2__NetworkHostType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__NetworkHostType(soap, data), 0) || soap_put_ns2__NetworkHostType(soap, data, "ns2:NetworkHostType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__NetworkHostType * SOAP_FMAC4 soap_get_ns2__NetworkHostType(struct soap*, enum ns2__NetworkHostType *, const char*, const char*);

#ifndef soap_read_ns2__NetworkHostType
#define soap_read_ns2__NetworkHostType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkHostType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__NetworkProtocolType
#define SOAP_TYPE_ns2__NetworkProtocolType (794)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__NetworkProtocolType(struct soap*, enum ns2__NetworkProtocolType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkProtocolType(struct soap*, const char*, int, const enum ns2__NetworkProtocolType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__NetworkProtocolType2s(struct soap*, enum ns2__NetworkProtocolType);
SOAP_FMAC3 enum ns2__NetworkProtocolType * SOAP_FMAC4 soap_in_ns2__NetworkProtocolType(struct soap*, const char*, enum ns2__NetworkProtocolType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__NetworkProtocolType(struct soap*, const char*, enum ns2__NetworkProtocolType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__NetworkProtocolType(struct soap*, const enum ns2__NetworkProtocolType *, const char*, const char*);

#ifndef soap_write_ns2__NetworkProtocolType
#define soap_write_ns2__NetworkProtocolType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__NetworkProtocolType(soap, data), 0) || soap_put_ns2__NetworkProtocolType(soap, data, "ns2:NetworkProtocolType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__NetworkProtocolType * SOAP_FMAC4 soap_get_ns2__NetworkProtocolType(struct soap*, enum ns2__NetworkProtocolType *, const char*, const char*);

#ifndef soap_read_ns2__NetworkProtocolType
#define soap_read_ns2__NetworkProtocolType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkProtocolType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__IPv6DHCPConfiguration
#define SOAP_TYPE_ns2__IPv6DHCPConfiguration (792)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__IPv6DHCPConfiguration(struct soap*, enum ns2__IPv6DHCPConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6DHCPConfiguration(struct soap*, const char*, int, const enum ns2__IPv6DHCPConfiguration *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__IPv6DHCPConfiguration2s(struct soap*, enum ns2__IPv6DHCPConfiguration);
SOAP_FMAC3 enum ns2__IPv6DHCPConfiguration * SOAP_FMAC4 soap_in_ns2__IPv6DHCPConfiguration(struct soap*, const char*, enum ns2__IPv6DHCPConfiguration *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__IPv6DHCPConfiguration(struct soap*, const char*, enum ns2__IPv6DHCPConfiguration *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IPv6DHCPConfiguration(struct soap*, const enum ns2__IPv6DHCPConfiguration *, const char*, const char*);

#ifndef soap_write_ns2__IPv6DHCPConfiguration
#define soap_write_ns2__IPv6DHCPConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IPv6DHCPConfiguration(soap, data), 0) || soap_put_ns2__IPv6DHCPConfiguration(soap, data, "ns2:IPv6DHCPConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IPv6DHCPConfiguration * SOAP_FMAC4 soap_get_ns2__IPv6DHCPConfiguration(struct soap*, enum ns2__IPv6DHCPConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__IPv6DHCPConfiguration
#define soap_read_ns2__IPv6DHCPConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6DHCPConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Duplex
#define SOAP_TYPE_ns2__Duplex (788)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Duplex(struct soap*, enum ns2__Duplex *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Duplex(struct soap*, const char*, int, const enum ns2__Duplex *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Duplex2s(struct soap*, enum ns2__Duplex);
SOAP_FMAC3 enum ns2__Duplex * SOAP_FMAC4 soap_in_ns2__Duplex(struct soap*, const char*, enum ns2__Duplex *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Duplex(struct soap*, const char*, enum ns2__Duplex *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Duplex(struct soap*, const enum ns2__Duplex *, const char*, const char*);

#ifndef soap_write_ns2__Duplex
#define soap_write_ns2__Duplex(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Duplex(soap, data), 0) || soap_put_ns2__Duplex(soap, data, "ns2:Duplex", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Duplex * SOAP_FMAC4 soap_get_ns2__Duplex(struct soap*, enum ns2__Duplex *, const char*, const char*);

#ifndef soap_read_ns2__Duplex
#define soap_read_ns2__Duplex(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Duplex(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__DiscoveryMode
#define SOAP_TYPE_ns2__DiscoveryMode (784)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__DiscoveryMode(struct soap*, enum ns2__DiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DiscoveryMode(struct soap*, const char*, int, const enum ns2__DiscoveryMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__DiscoveryMode2s(struct soap*, enum ns2__DiscoveryMode);
SOAP_FMAC3 enum ns2__DiscoveryMode * SOAP_FMAC4 soap_in_ns2__DiscoveryMode(struct soap*, const char*, enum ns2__DiscoveryMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__DiscoveryMode(struct soap*, const char*, enum ns2__DiscoveryMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__DiscoveryMode(struct soap*, const enum ns2__DiscoveryMode *, const char*, const char*);

#ifndef soap_write_ns2__DiscoveryMode
#define soap_write_ns2__DiscoveryMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__DiscoveryMode(soap, data), 0) || soap_put_ns2__DiscoveryMode(soap, data, "ns2:DiscoveryMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__DiscoveryMode * SOAP_FMAC4 soap_get_ns2__DiscoveryMode(struct soap*, enum ns2__DiscoveryMode *, const char*, const char*);

#ifndef soap_read_ns2__DiscoveryMode
#define soap_read_ns2__DiscoveryMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DiscoveryMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ScopeDefinition
#define SOAP_TYPE_ns2__ScopeDefinition (782)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ScopeDefinition(struct soap*, enum ns2__ScopeDefinition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ScopeDefinition(struct soap*, const char*, int, const enum ns2__ScopeDefinition *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ScopeDefinition2s(struct soap*, enum ns2__ScopeDefinition);
SOAP_FMAC3 enum ns2__ScopeDefinition * SOAP_FMAC4 soap_in_ns2__ScopeDefinition(struct soap*, const char*, enum ns2__ScopeDefinition *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ScopeDefinition(struct soap*, const char*, enum ns2__ScopeDefinition *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ScopeDefinition(struct soap*, const enum ns2__ScopeDefinition *, const char*, const char*);

#ifndef soap_write_ns2__ScopeDefinition
#define soap_write_ns2__ScopeDefinition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ScopeDefinition(soap, data), 0) || soap_put_ns2__ScopeDefinition(soap, data, "ns2:ScopeDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ScopeDefinition * SOAP_FMAC4 soap_get_ns2__ScopeDefinition(struct soap*, enum ns2__ScopeDefinition *, const char*, const char*);

#ifndef soap_read_ns2__ScopeDefinition
#define soap_read_ns2__ScopeDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ScopeDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__TransportProtocol
#define SOAP_TYPE_ns2__TransportProtocol (780)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__TransportProtocol(struct soap*, enum ns2__TransportProtocol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TransportProtocol(struct soap*, const char*, int, const enum ns2__TransportProtocol *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__TransportProtocol2s(struct soap*, enum ns2__TransportProtocol);
SOAP_FMAC3 enum ns2__TransportProtocol * SOAP_FMAC4 soap_in_ns2__TransportProtocol(struct soap*, const char*, enum ns2__TransportProtocol *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__TransportProtocol(struct soap*, const char*, enum ns2__TransportProtocol *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TransportProtocol(struct soap*, const enum ns2__TransportProtocol *, const char*, const char*);

#ifndef soap_write_ns2__TransportProtocol
#define soap_write_ns2__TransportProtocol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__TransportProtocol(soap, data), 0) || soap_put_ns2__TransportProtocol(soap, data, "ns2:TransportProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__TransportProtocol * SOAP_FMAC4 soap_get_ns2__TransportProtocol(struct soap*, enum ns2__TransportProtocol *, const char*, const char*);

#ifndef soap_read_ns2__TransportProtocol
#define soap_read_ns2__TransportProtocol(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TransportProtocol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__StreamType
#define SOAP_TYPE_ns2__StreamType (778)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__StreamType(struct soap*, enum ns2__StreamType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StreamType(struct soap*, const char*, int, const enum ns2__StreamType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__StreamType2s(struct soap*, enum ns2__StreamType);
SOAP_FMAC3 enum ns2__StreamType * SOAP_FMAC4 soap_in_ns2__StreamType(struct soap*, const char*, enum ns2__StreamType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__StreamType(struct soap*, const char*, enum ns2__StreamType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__StreamType(struct soap*, const enum ns2__StreamType *, const char*, const char*);

#ifndef soap_write_ns2__StreamType
#define soap_write_ns2__StreamType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__StreamType(soap, data), 0) || soap_put_ns2__StreamType(soap, data, "ns2:StreamType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__StreamType * SOAP_FMAC4 soap_get_ns2__StreamType(struct soap*, enum ns2__StreamType *, const char*, const char*);

#ifndef soap_read_ns2__StreamType
#define soap_read_ns2__StreamType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StreamType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__MetadataCompressionType
#define SOAP_TYPE_ns2__MetadataCompressionType (776)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__MetadataCompressionType(struct soap*, enum ns2__MetadataCompressionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataCompressionType(struct soap*, const char*, int, const enum ns2__MetadataCompressionType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__MetadataCompressionType2s(struct soap*, enum ns2__MetadataCompressionType);
SOAP_FMAC3 enum ns2__MetadataCompressionType * SOAP_FMAC4 soap_in_ns2__MetadataCompressionType(struct soap*, const char*, enum ns2__MetadataCompressionType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__MetadataCompressionType(struct soap*, const char*, enum ns2__MetadataCompressionType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__MetadataCompressionType(struct soap*, const enum ns2__MetadataCompressionType *, const char*, const char*);

#ifndef soap_write_ns2__MetadataCompressionType
#define soap_write_ns2__MetadataCompressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__MetadataCompressionType(soap, data), 0) || soap_put_ns2__MetadataCompressionType(soap, data, "ns2:MetadataCompressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__MetadataCompressionType * SOAP_FMAC4 soap_get_ns2__MetadataCompressionType(struct soap*, enum ns2__MetadataCompressionType *, const char*, const char*);

#ifndef soap_read_ns2__MetadataCompressionType
#define soap_read_ns2__MetadataCompressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataCompressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__AudioEncoding
#define SOAP_TYPE_ns2__AudioEncoding (774)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__AudioEncoding(struct soap*, enum ns2__AudioEncoding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioEncoding(struct soap*, const char*, int, const enum ns2__AudioEncoding *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__AudioEncoding2s(struct soap*, enum ns2__AudioEncoding);
SOAP_FMAC3 enum ns2__AudioEncoding * SOAP_FMAC4 soap_in_ns2__AudioEncoding(struct soap*, const char*, enum ns2__AudioEncoding *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__AudioEncoding(struct soap*, const char*, enum ns2__AudioEncoding *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AudioEncoding(struct soap*, const enum ns2__AudioEncoding *, const char*, const char*);

#ifndef soap_write_ns2__AudioEncoding
#define soap_write_ns2__AudioEncoding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__AudioEncoding(soap, data), 0) || soap_put_ns2__AudioEncoding(soap, data, "ns2:AudioEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__AudioEncoding * SOAP_FMAC4 soap_get_ns2__AudioEncoding(struct soap*, enum ns2__AudioEncoding *, const char*, const char*);

#ifndef soap_read_ns2__AudioEncoding
#define soap_read_ns2__AudioEncoding(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioEncoding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__H264Profile
#define SOAP_TYPE_ns2__H264Profile (772)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__H264Profile(struct soap*, enum ns2__H264Profile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__H264Profile(struct soap*, const char*, int, const enum ns2__H264Profile *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__H264Profile2s(struct soap*, enum ns2__H264Profile);
SOAP_FMAC3 enum ns2__H264Profile * SOAP_FMAC4 soap_in_ns2__H264Profile(struct soap*, const char*, enum ns2__H264Profile *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__H264Profile(struct soap*, const char*, enum ns2__H264Profile *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__H264Profile(struct soap*, const enum ns2__H264Profile *, const char*, const char*);

#ifndef soap_write_ns2__H264Profile
#define soap_write_ns2__H264Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__H264Profile(soap, data), 0) || soap_put_ns2__H264Profile(soap, data, "ns2:H264Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__H264Profile * SOAP_FMAC4 soap_get_ns2__H264Profile(struct soap*, enum ns2__H264Profile *, const char*, const char*);

#ifndef soap_read_ns2__H264Profile
#define soap_read_ns2__H264Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__H264Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Mpeg4Profile
#define SOAP_TYPE_ns2__Mpeg4Profile (770)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Mpeg4Profile(struct soap*, enum ns2__Mpeg4Profile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Mpeg4Profile(struct soap*, const char*, int, const enum ns2__Mpeg4Profile *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Mpeg4Profile2s(struct soap*, enum ns2__Mpeg4Profile);
SOAP_FMAC3 enum ns2__Mpeg4Profile * SOAP_FMAC4 soap_in_ns2__Mpeg4Profile(struct soap*, const char*, enum ns2__Mpeg4Profile *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Mpeg4Profile(struct soap*, const char*, enum ns2__Mpeg4Profile *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Mpeg4Profile(struct soap*, const enum ns2__Mpeg4Profile *, const char*, const char*);

#ifndef soap_write_ns2__Mpeg4Profile
#define soap_write_ns2__Mpeg4Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Mpeg4Profile(soap, data), 0) || soap_put_ns2__Mpeg4Profile(soap, data, "ns2:Mpeg4Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Mpeg4Profile * SOAP_FMAC4 soap_get_ns2__Mpeg4Profile(struct soap*, enum ns2__Mpeg4Profile *, const char*, const char*);

#ifndef soap_read_ns2__Mpeg4Profile
#define soap_read_ns2__Mpeg4Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Mpeg4Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__VideoEncoding
#define SOAP_TYPE_ns2__VideoEncoding (768)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__VideoEncoding(struct soap*, enum ns2__VideoEncoding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoEncoding(struct soap*, const char*, int, const enum ns2__VideoEncoding *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__VideoEncoding2s(struct soap*, enum ns2__VideoEncoding);
SOAP_FMAC3 enum ns2__VideoEncoding * SOAP_FMAC4 soap_in_ns2__VideoEncoding(struct soap*, const char*, enum ns2__VideoEncoding *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__VideoEncoding(struct soap*, const char*, enum ns2__VideoEncoding *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__VideoEncoding(struct soap*, const enum ns2__VideoEncoding *, const char*, const char*);

#ifndef soap_write_ns2__VideoEncoding
#define soap_write_ns2__VideoEncoding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__VideoEncoding(soap, data), 0) || soap_put_ns2__VideoEncoding(soap, data, "ns2:VideoEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__VideoEncoding * SOAP_FMAC4 soap_get_ns2__VideoEncoding(struct soap*, enum ns2__VideoEncoding *, const char*, const char*);

#ifndef soap_read_ns2__VideoEncoding
#define soap_read_ns2__VideoEncoding(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoEncoding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__RotateMode
#define SOAP_TYPE_ns2__RotateMode (766)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RotateMode(struct soap*, enum ns2__RotateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RotateMode(struct soap*, const char*, int, const enum ns2__RotateMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__RotateMode2s(struct soap*, enum ns2__RotateMode);
SOAP_FMAC3 enum ns2__RotateMode * SOAP_FMAC4 soap_in_ns2__RotateMode(struct soap*, const char*, enum ns2__RotateMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__RotateMode(struct soap*, const char*, enum ns2__RotateMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RotateMode(struct soap*, const enum ns2__RotateMode *, const char*, const char*);

#ifndef soap_write_ns2__RotateMode
#define soap_write_ns2__RotateMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RotateMode(soap, data), 0) || soap_put_ns2__RotateMode(soap, data, "ns2:RotateMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__RotateMode * SOAP_FMAC4 soap_get_ns2__RotateMode(struct soap*, enum ns2__RotateMode *, const char*, const char*);

#ifndef soap_read_ns2__RotateMode
#define soap_read_ns2__RotateMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RotateMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data), 0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns6__TopicNamespaceType_Topic
#define SOAP_TYPE__ns6__TopicNamespaceType_Topic (1669)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns6__TopicNamespaceType_Topic(struct soap*, const char*, int, const _ns6__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC3 _ns6__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__ns6__TopicNamespaceType_Topic(struct soap*, const char*, _ns6__TopicNamespaceType_Topic *, const char*);

#ifndef soap_write__ns6__TopicNamespaceType_Topic
#define soap_write__ns6__TopicNamespaceType_Topic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:TopicNamespaceType-Topic", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns6__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__ns6__TopicNamespaceType_Topic(struct soap*, _ns6__TopicNamespaceType_Topic *, const char*, const char*);

#ifndef soap_read__ns6__TopicNamespaceType_Topic
#define soap_read__ns6__TopicNamespaceType_Topic(soap, data) ( soap_begin_recv(soap) || !soap_get__ns6__TopicNamespaceType_Topic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns6__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__ns6__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline _ns6__TopicNamespaceType_Topic * soap_new__ns6__TopicNamespaceType_Topic(struct soap *soap, int n = -1) { return soap_instantiate__ns6__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL); }

inline _ns6__TopicNamespaceType_Topic * soap_new_req__ns6__TopicNamespaceType_Topic(struct soap *soap, const std::string& name) { _ns6__TopicNamespaceType_Topic *_p = soap_instantiate__ns6__TopicNamespaceType_Topic(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns6__TopicNamespaceType_Topic::name = name; } return _p; }

inline _ns6__TopicNamespaceType_Topic * soap_new_set__ns6__TopicNamespaceType_Topic(struct soap *soap, ns6__Documentation *documentation, char *__anyAttribute, ns6__QueryExpressionType *MessagePattern, const std::vector<ns6__TopicType * >& Topic, const std::vector<char * >& __any, const std::string& name, std::string *messageTypes, bool final_, std::string *parent) { _ns6__TopicNamespaceType_Topic *_p = soap_instantiate__ns6__TopicNamespaceType_Topic(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns6__TopicNamespaceType_Topic::documentation = documentation; _p->_ns6__TopicNamespaceType_Topic::__anyAttribute = __anyAttribute; _p->_ns6__TopicNamespaceType_Topic::MessagePattern = MessagePattern; _p->_ns6__TopicNamespaceType_Topic::Topic = Topic; _p->_ns6__TopicNamespaceType_Topic::__any = __any; _p->_ns6__TopicNamespaceType_Topic::name = name; _p->_ns6__TopicNamespaceType_Topic::messageTypes = messageTypes; _p->_ns6__TopicNamespaceType_Topic::final_ = final_; _p->_ns6__TopicNamespaceType_Topic::parent = parent; } return _p; }

inline void soap_delete__ns6__TopicNamespaceType_Topic(struct soap *soap, _ns6__TopicNamespaceType_Topic *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns6__TopicNamespaceType_Topic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__ResumeFailedFaultType_FaultCause
#define SOAP_TYPE__ns3__ResumeFailedFaultType_FaultCause (1667)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeFailedFaultType_FaultCause(struct soap*, const char*, int, const _ns3__ResumeFailedFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__ResumeFailedFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__ResumeFailedFaultType_FaultCause(struct soap*, const char*, _ns3__ResumeFailedFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__ResumeFailedFaultType_FaultCause
#define soap_write__ns3__ResumeFailedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResumeFailedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeFailedFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__ResumeFailedFaultType_FaultCause(struct soap*, _ns3__ResumeFailedFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__ResumeFailedFaultType_FaultCause
#define soap_read__ns3__ResumeFailedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__ResumeFailedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ResumeFailedFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__ResumeFailedFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeFailedFaultType_FaultCause * soap_new__ns3__ResumeFailedFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ResumeFailedFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__ResumeFailedFaultType_FaultCause * soap_new_req__ns3__ResumeFailedFaultType_FaultCause(struct soap *soap) { _ns3__ResumeFailedFaultType_FaultCause *_p = soap_instantiate__ns3__ResumeFailedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__ResumeFailedFaultType_FaultCause * soap_new_set__ns3__ResumeFailedFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__ResumeFailedFaultType_FaultCause *_p = soap_instantiate__ns3__ResumeFailedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeFailedFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__ResumeFailedFaultType_FaultCause(struct soap *soap, _ns3__ResumeFailedFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ResumeFailedFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__ResumeFailedFaultType_Description
#define SOAP_TYPE__ns3__ResumeFailedFaultType_Description (1664)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeFailedFaultType_Description(struct soap*, const char*, int, const _ns3__ResumeFailedFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__ResumeFailedFaultType_Description * SOAP_FMAC4 soap_in__ns3__ResumeFailedFaultType_Description(struct soap*, const char*, _ns3__ResumeFailedFaultType_Description *, const char*);

#ifndef soap_write__ns3__ResumeFailedFaultType_Description
#define soap_write__ns3__ResumeFailedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResumeFailedFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeFailedFaultType_Description * SOAP_FMAC4 soap_get__ns3__ResumeFailedFaultType_Description(struct soap*, _ns3__ResumeFailedFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__ResumeFailedFaultType_Description
#define soap_read__ns3__ResumeFailedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__ResumeFailedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ResumeFailedFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__ResumeFailedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeFailedFaultType_Description * soap_new__ns3__ResumeFailedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ResumeFailedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__ResumeFailedFaultType_Description * soap_new_req__ns3__ResumeFailedFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__ResumeFailedFaultType_Description *_p = soap_instantiate__ns3__ResumeFailedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeFailedFaultType_Description::__item = __item; } return _p; }

inline _ns3__ResumeFailedFaultType_Description * soap_new_set__ns3__ResumeFailedFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__ResumeFailedFaultType_Description *_p = soap_instantiate__ns3__ResumeFailedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeFailedFaultType_Description::__item = __item; _p->_ns3__ResumeFailedFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__ResumeFailedFaultType_Description(struct soap *soap, _ns3__ResumeFailedFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ResumeFailedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__ResumeFailedFaultType_ErrorCode
#define SOAP_TYPE__ns3__ResumeFailedFaultType_ErrorCode (1662)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeFailedFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__ResumeFailedFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__ResumeFailedFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__ResumeFailedFaultType_ErrorCode(struct soap*, const char*, _ns3__ResumeFailedFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__ResumeFailedFaultType_ErrorCode
#define soap_write__ns3__ResumeFailedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResumeFailedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeFailedFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__ResumeFailedFaultType_ErrorCode(struct soap*, _ns3__ResumeFailedFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__ResumeFailedFaultType_ErrorCode
#define soap_read__ns3__ResumeFailedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__ResumeFailedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ResumeFailedFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__ResumeFailedFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeFailedFaultType_ErrorCode * soap_new__ns3__ResumeFailedFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ResumeFailedFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__ResumeFailedFaultType_ErrorCode * soap_new_req__ns3__ResumeFailedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__ResumeFailedFaultType_ErrorCode *_p = soap_instantiate__ns3__ResumeFailedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeFailedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__ResumeFailedFaultType_ErrorCode * soap_new_set__ns3__ResumeFailedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__ResumeFailedFaultType_ErrorCode *_p = soap_instantiate__ns3__ResumeFailedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeFailedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__ResumeFailedFaultType_ErrorCode(struct soap *soap, _ns3__ResumeFailedFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ResumeFailedFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__PauseFailedFaultType_FaultCause
#define SOAP_TYPE__ns3__PauseFailedFaultType_FaultCause (1660)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseFailedFaultType_FaultCause(struct soap*, const char*, int, const _ns3__PauseFailedFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__PauseFailedFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__PauseFailedFaultType_FaultCause(struct soap*, const char*, _ns3__PauseFailedFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__PauseFailedFaultType_FaultCause
#define soap_write__ns3__PauseFailedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PauseFailedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseFailedFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__PauseFailedFaultType_FaultCause(struct soap*, _ns3__PauseFailedFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__PauseFailedFaultType_FaultCause
#define soap_read__ns3__PauseFailedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__PauseFailedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__PauseFailedFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__PauseFailedFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseFailedFaultType_FaultCause * soap_new__ns3__PauseFailedFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__PauseFailedFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__PauseFailedFaultType_FaultCause * soap_new_req__ns3__PauseFailedFaultType_FaultCause(struct soap *soap) { _ns3__PauseFailedFaultType_FaultCause *_p = soap_instantiate__ns3__PauseFailedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__PauseFailedFaultType_FaultCause * soap_new_set__ns3__PauseFailedFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__PauseFailedFaultType_FaultCause *_p = soap_instantiate__ns3__PauseFailedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseFailedFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__PauseFailedFaultType_FaultCause(struct soap *soap, _ns3__PauseFailedFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__PauseFailedFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__PauseFailedFaultType_Description
#define SOAP_TYPE__ns3__PauseFailedFaultType_Description (1657)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseFailedFaultType_Description(struct soap*, const char*, int, const _ns3__PauseFailedFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__PauseFailedFaultType_Description * SOAP_FMAC4 soap_in__ns3__PauseFailedFaultType_Description(struct soap*, const char*, _ns3__PauseFailedFaultType_Description *, const char*);

#ifndef soap_write__ns3__PauseFailedFaultType_Description
#define soap_write__ns3__PauseFailedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PauseFailedFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseFailedFaultType_Description * SOAP_FMAC4 soap_get__ns3__PauseFailedFaultType_Description(struct soap*, _ns3__PauseFailedFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__PauseFailedFaultType_Description
#define soap_read__ns3__PauseFailedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__PauseFailedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__PauseFailedFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__PauseFailedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseFailedFaultType_Description * soap_new__ns3__PauseFailedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__PauseFailedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__PauseFailedFaultType_Description * soap_new_req__ns3__PauseFailedFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__PauseFailedFaultType_Description *_p = soap_instantiate__ns3__PauseFailedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseFailedFaultType_Description::__item = __item; } return _p; }

inline _ns3__PauseFailedFaultType_Description * soap_new_set__ns3__PauseFailedFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__PauseFailedFaultType_Description *_p = soap_instantiate__ns3__PauseFailedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseFailedFaultType_Description::__item = __item; _p->_ns3__PauseFailedFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__PauseFailedFaultType_Description(struct soap *soap, _ns3__PauseFailedFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__PauseFailedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__PauseFailedFaultType_ErrorCode
#define SOAP_TYPE__ns3__PauseFailedFaultType_ErrorCode (1655)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseFailedFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__PauseFailedFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__PauseFailedFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__PauseFailedFaultType_ErrorCode(struct soap*, const char*, _ns3__PauseFailedFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__PauseFailedFaultType_ErrorCode
#define soap_write__ns3__PauseFailedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PauseFailedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseFailedFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__PauseFailedFaultType_ErrorCode(struct soap*, _ns3__PauseFailedFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__PauseFailedFaultType_ErrorCode
#define soap_read__ns3__PauseFailedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__PauseFailedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__PauseFailedFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__PauseFailedFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseFailedFaultType_ErrorCode * soap_new__ns3__PauseFailedFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__PauseFailedFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__PauseFailedFaultType_ErrorCode * soap_new_req__ns3__PauseFailedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__PauseFailedFaultType_ErrorCode *_p = soap_instantiate__ns3__PauseFailedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseFailedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__PauseFailedFaultType_ErrorCode * soap_new_set__ns3__PauseFailedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__PauseFailedFaultType_ErrorCode *_p = soap_instantiate__ns3__PauseFailedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseFailedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__PauseFailedFaultType_ErrorCode(struct soap *soap, _ns3__PauseFailedFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__PauseFailedFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToDestroySubscriptionFaultType_FaultCause
#define SOAP_TYPE__ns3__UnableToDestroySubscriptionFaultType_FaultCause (1653)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnableToDestroySubscriptionFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnableToDestroySubscriptionFaultType_FaultCause
#define soap_write__ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnableToDestroySubscriptionFaultType_FaultCause
#define soap_read__ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToDestroySubscriptionFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToDestroySubscriptionFaultType_FaultCause * soap_new__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToDestroySubscriptionFaultType_FaultCause * soap_new_req__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap *soap) { _ns3__UnableToDestroySubscriptionFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnableToDestroySubscriptionFaultType_FaultCause * soap_new_set__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnableToDestroySubscriptionFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroySubscriptionFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap *soap, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToDestroySubscriptionFaultType_Description
#define SOAP_TYPE__ns3__UnableToDestroySubscriptionFaultType_Description (1650)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const char*, int, const _ns3__UnableToDestroySubscriptionFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const char*, _ns3__UnableToDestroySubscriptionFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnableToDestroySubscriptionFaultType_Description
#define soap_write__ns3__UnableToDestroySubscriptionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnableToDestroySubscriptionFaultType_Description
#define soap_read__ns3__UnableToDestroySubscriptionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToDestroySubscriptionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToDestroySubscriptionFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToDestroySubscriptionFaultType_Description * soap_new__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToDestroySubscriptionFaultType_Description * soap_new_req__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnableToDestroySubscriptionFaultType_Description *_p = soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroySubscriptionFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnableToDestroySubscriptionFaultType_Description * soap_new_set__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnableToDestroySubscriptionFaultType_Description *_p = soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroySubscriptionFaultType_Description::__item = __item; _p->_ns3__UnableToDestroySubscriptionFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap *soap, _ns3__UnableToDestroySubscriptionFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToDestroySubscriptionFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnableToDestroySubscriptionFaultType_ErrorCode (1648)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnableToDestroySubscriptionFaultType_ErrorCode
#define soap_write__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnableToDestroySubscriptionFaultType_ErrorCode
#define soap_read__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToDestroySubscriptionFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToDestroySubscriptionFaultType_ErrorCode * soap_new__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToDestroySubscriptionFaultType_ErrorCode * soap_new_req__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroySubscriptionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnableToDestroySubscriptionFaultType_ErrorCode * soap_new_set__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroySubscriptionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap *soap, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnacceptableTerminationTimeFaultType_FaultCause
#define SOAP_TYPE__ns3__UnacceptableTerminationTimeFaultType_FaultCause (1646)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnacceptableTerminationTimeFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, const char*, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnacceptableTerminationTimeFaultType_FaultCause
#define soap_write__ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnacceptableTerminationTimeFaultType_FaultCause
#define soap_read__ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnacceptableTerminationTimeFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnacceptableTerminationTimeFaultType_FaultCause * soap_new__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnacceptableTerminationTimeFaultType_FaultCause * soap_new_req__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap *soap) { _ns3__UnacceptableTerminationTimeFaultType_FaultCause *_p = soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnacceptableTerminationTimeFaultType_FaultCause * soap_new_set__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnacceptableTerminationTimeFaultType_FaultCause *_p = soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableTerminationTimeFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap *soap, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnacceptableTerminationTimeFaultType_Description
#define SOAP_TYPE__ns3__UnacceptableTerminationTimeFaultType_Description (1643)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const char*, int, const _ns3__UnacceptableTerminationTimeFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const char*, _ns3__UnacceptableTerminationTimeFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnacceptableTerminationTimeFaultType_Description
#define soap_write__ns3__UnacceptableTerminationTimeFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnacceptableTerminationTimeFaultType_Description
#define soap_read__ns3__UnacceptableTerminationTimeFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnacceptableTerminationTimeFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnacceptableTerminationTimeFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnacceptableTerminationTimeFaultType_Description * soap_new__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnacceptableTerminationTimeFaultType_Description * soap_new_req__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnacceptableTerminationTimeFaultType_Description *_p = soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableTerminationTimeFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnacceptableTerminationTimeFaultType_Description * soap_new_set__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnacceptableTerminationTimeFaultType_Description *_p = soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableTerminationTimeFaultType_Description::__item = __item; _p->_ns3__UnacceptableTerminationTimeFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap *soap, _ns3__UnacceptableTerminationTimeFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnacceptableTerminationTimeFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnacceptableTerminationTimeFaultType_ErrorCode (1641)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, const char*, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnacceptableTerminationTimeFaultType_ErrorCode
#define soap_write__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnacceptableTerminationTimeFaultType_ErrorCode
#define soap_read__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnacceptableTerminationTimeFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnacceptableTerminationTimeFaultType_ErrorCode * soap_new__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnacceptableTerminationTimeFaultType_ErrorCode * soap_new_req__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *_p = soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableTerminationTimeFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnacceptableTerminationTimeFaultType_ErrorCode * soap_new_set__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *_p = soap_instantiate__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableTerminationTimeFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap *soap, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToCreatePullPointFaultType_FaultCause
#define SOAP_TYPE__ns3__UnableToCreatePullPointFaultType_FaultCause (1639)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnableToCreatePullPointFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToCreatePullPointFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnableToCreatePullPointFaultType_FaultCause
#define soap_write__ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToCreatePullPointFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, _ns3__UnableToCreatePullPointFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnableToCreatePullPointFaultType_FaultCause
#define soap_read__ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToCreatePullPointFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToCreatePullPointFaultType_FaultCause * soap_new__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToCreatePullPointFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToCreatePullPointFaultType_FaultCause * soap_new_req__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap *soap) { _ns3__UnableToCreatePullPointFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToCreatePullPointFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnableToCreatePullPointFaultType_FaultCause * soap_new_set__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnableToCreatePullPointFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToCreatePullPointFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToCreatePullPointFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap *soap, _ns3__UnableToCreatePullPointFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToCreatePullPointFaultType_Description
#define SOAP_TYPE__ns3__UnableToCreatePullPointFaultType_Description (1636)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const char*, int, const _ns3__UnableToCreatePullPointFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const char*, _ns3__UnableToCreatePullPointFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnableToCreatePullPointFaultType_Description
#define soap_write__ns3__UnableToCreatePullPointFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToCreatePullPointFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnableToCreatePullPointFaultType_Description(struct soap*, _ns3__UnableToCreatePullPointFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnableToCreatePullPointFaultType_Description
#define soap_read__ns3__UnableToCreatePullPointFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToCreatePullPointFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToCreatePullPointFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnableToCreatePullPointFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToCreatePullPointFaultType_Description * soap_new__ns3__UnableToCreatePullPointFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToCreatePullPointFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToCreatePullPointFaultType_Description * soap_new_req__ns3__UnableToCreatePullPointFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnableToCreatePullPointFaultType_Description *_p = soap_instantiate__ns3__UnableToCreatePullPointFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToCreatePullPointFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnableToCreatePullPointFaultType_Description * soap_new_set__ns3__UnableToCreatePullPointFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnableToCreatePullPointFaultType_Description *_p = soap_instantiate__ns3__UnableToCreatePullPointFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToCreatePullPointFaultType_Description::__item = __item; _p->_ns3__UnableToCreatePullPointFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnableToCreatePullPointFaultType_Description(struct soap *soap, _ns3__UnableToCreatePullPointFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToCreatePullPointFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToCreatePullPointFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnableToCreatePullPointFaultType_ErrorCode (1634)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnableToCreatePullPointFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToCreatePullPointFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnableToCreatePullPointFaultType_ErrorCode
#define soap_write__ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToCreatePullPointFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToCreatePullPointFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnableToCreatePullPointFaultType_ErrorCode
#define soap_read__ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToCreatePullPointFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToCreatePullPointFaultType_ErrorCode * soap_new__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToCreatePullPointFaultType_ErrorCode * soap_new_req__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToCreatePullPointFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToCreatePullPointFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnableToCreatePullPointFaultType_ErrorCode * soap_new_set__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToCreatePullPointFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToCreatePullPointFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap *soap, _ns3__UnableToCreatePullPointFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToDestroyPullPointFaultType_FaultCause
#define SOAP_TYPE__ns3__UnableToDestroyPullPointFaultType_FaultCause (1632)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnableToDestroyPullPointFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToDestroyPullPointFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnableToDestroyPullPointFaultType_FaultCause
#define soap_write__ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, _ns3__UnableToDestroyPullPointFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnableToDestroyPullPointFaultType_FaultCause
#define soap_read__ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToDestroyPullPointFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToDestroyPullPointFaultType_FaultCause * soap_new__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToDestroyPullPointFaultType_FaultCause * soap_new_req__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap *soap) { _ns3__UnableToDestroyPullPointFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnableToDestroyPullPointFaultType_FaultCause * soap_new_set__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnableToDestroyPullPointFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroyPullPointFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap *soap, _ns3__UnableToDestroyPullPointFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToDestroyPullPointFaultType_Description
#define SOAP_TYPE__ns3__UnableToDestroyPullPointFaultType_Description (1629)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const char*, int, const _ns3__UnableToDestroyPullPointFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const char*, _ns3__UnableToDestroyPullPointFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnableToDestroyPullPointFaultType_Description
#define soap_write__ns3__UnableToDestroyPullPointFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, _ns3__UnableToDestroyPullPointFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnableToDestroyPullPointFaultType_Description
#define soap_read__ns3__UnableToDestroyPullPointFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToDestroyPullPointFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToDestroyPullPointFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToDestroyPullPointFaultType_Description * soap_new__ns3__UnableToDestroyPullPointFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToDestroyPullPointFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToDestroyPullPointFaultType_Description * soap_new_req__ns3__UnableToDestroyPullPointFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnableToDestroyPullPointFaultType_Description *_p = soap_instantiate__ns3__UnableToDestroyPullPointFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroyPullPointFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnableToDestroyPullPointFaultType_Description * soap_new_set__ns3__UnableToDestroyPullPointFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnableToDestroyPullPointFaultType_Description *_p = soap_instantiate__ns3__UnableToDestroyPullPointFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroyPullPointFaultType_Description::__item = __item; _p->_ns3__UnableToDestroyPullPointFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnableToDestroyPullPointFaultType_Description(struct soap *soap, _ns3__UnableToDestroyPullPointFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToDestroyPullPointFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnableToDestroyPullPointFaultType_ErrorCode (1627)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnableToDestroyPullPointFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnableToDestroyPullPointFaultType_ErrorCode
#define soap_write__ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnableToDestroyPullPointFaultType_ErrorCode
#define soap_read__ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToDestroyPullPointFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToDestroyPullPointFaultType_ErrorCode * soap_new__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToDestroyPullPointFaultType_ErrorCode * soap_new_req__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToDestroyPullPointFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroyPullPointFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnableToDestroyPullPointFaultType_ErrorCode * soap_new_set__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToDestroyPullPointFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToDestroyPullPointFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap *soap, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToGetMessagesFaultType_FaultCause
#define SOAP_TYPE__ns3__UnableToGetMessagesFaultType_FaultCause (1625)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnableToGetMessagesFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToGetMessagesFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnableToGetMessagesFaultType_FaultCause
#define soap_write__ns3__UnableToGetMessagesFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToGetMessagesFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, _ns3__UnableToGetMessagesFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnableToGetMessagesFaultType_FaultCause
#define soap_read__ns3__UnableToGetMessagesFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToGetMessagesFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToGetMessagesFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToGetMessagesFaultType_FaultCause * soap_new__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToGetMessagesFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToGetMessagesFaultType_FaultCause * soap_new_req__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap *soap) { _ns3__UnableToGetMessagesFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToGetMessagesFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnableToGetMessagesFaultType_FaultCause * soap_new_set__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnableToGetMessagesFaultType_FaultCause *_p = soap_instantiate__ns3__UnableToGetMessagesFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToGetMessagesFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap *soap, _ns3__UnableToGetMessagesFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToGetMessagesFaultType_Description
#define SOAP_TYPE__ns3__UnableToGetMessagesFaultType_Description (1622)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToGetMessagesFaultType_Description(struct soap*, const char*, int, const _ns3__UnableToGetMessagesFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnableToGetMessagesFaultType_Description(struct soap*, const char*, _ns3__UnableToGetMessagesFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnableToGetMessagesFaultType_Description
#define soap_write__ns3__UnableToGetMessagesFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToGetMessagesFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnableToGetMessagesFaultType_Description(struct soap*, _ns3__UnableToGetMessagesFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnableToGetMessagesFaultType_Description
#define soap_read__ns3__UnableToGetMessagesFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToGetMessagesFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToGetMessagesFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnableToGetMessagesFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToGetMessagesFaultType_Description * soap_new__ns3__UnableToGetMessagesFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToGetMessagesFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToGetMessagesFaultType_Description * soap_new_req__ns3__UnableToGetMessagesFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnableToGetMessagesFaultType_Description *_p = soap_instantiate__ns3__UnableToGetMessagesFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToGetMessagesFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnableToGetMessagesFaultType_Description * soap_new_set__ns3__UnableToGetMessagesFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnableToGetMessagesFaultType_Description *_p = soap_instantiate__ns3__UnableToGetMessagesFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToGetMessagesFaultType_Description::__item = __item; _p->_ns3__UnableToGetMessagesFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnableToGetMessagesFaultType_Description(struct soap *soap, _ns3__UnableToGetMessagesFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToGetMessagesFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnableToGetMessagesFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnableToGetMessagesFaultType_ErrorCode (1620)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnableToGetMessagesFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToGetMessagesFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnableToGetMessagesFaultType_ErrorCode
#define soap_write__ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToGetMessagesFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, _ns3__UnableToGetMessagesFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnableToGetMessagesFaultType_ErrorCode
#define soap_read__ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnableToGetMessagesFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnableToGetMessagesFaultType_ErrorCode * soap_new__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnableToGetMessagesFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnableToGetMessagesFaultType_ErrorCode * soap_new_req__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToGetMessagesFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToGetMessagesFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToGetMessagesFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnableToGetMessagesFaultType_ErrorCode * soap_new_set__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnableToGetMessagesFaultType_ErrorCode *_p = soap_instantiate__ns3__UnableToGetMessagesFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnableToGetMessagesFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap *soap, _ns3__UnableToGetMessagesFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NoCurrentMessageOnTopicFaultType_FaultCause
#define SOAP_TYPE__ns3__NoCurrentMessageOnTopicFaultType_FaultCause (1618)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, const char*, int, const _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, const char*, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__NoCurrentMessageOnTopicFaultType_FaultCause
#define soap_write__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__NoCurrentMessageOnTopicFaultType_FaultCause
#define soap_read__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NoCurrentMessageOnTopicFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NoCurrentMessageOnTopicFaultType_FaultCause * soap_new__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__NoCurrentMessageOnTopicFaultType_FaultCause * soap_new_req__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap *soap) { _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *_p = soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__NoCurrentMessageOnTopicFaultType_FaultCause * soap_new_set__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *_p = soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NoCurrentMessageOnTopicFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap *soap, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NoCurrentMessageOnTopicFaultType_Description
#define SOAP_TYPE__ns3__NoCurrentMessageOnTopicFaultType_Description (1615)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const char*, int, const _ns3__NoCurrentMessageOnTopicFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_Description * SOAP_FMAC4 soap_in__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const char*, _ns3__NoCurrentMessageOnTopicFaultType_Description *, const char*);

#ifndef soap_write__ns3__NoCurrentMessageOnTopicFaultType_Description
#define soap_write__ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_Description * SOAP_FMAC4 soap_get__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__NoCurrentMessageOnTopicFaultType_Description
#define soap_read__ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NoCurrentMessageOnTopicFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NoCurrentMessageOnTopicFaultType_Description * soap_new__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__NoCurrentMessageOnTopicFaultType_Description * soap_new_req__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__NoCurrentMessageOnTopicFaultType_Description *_p = soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NoCurrentMessageOnTopicFaultType_Description::__item = __item; } return _p; }

inline _ns3__NoCurrentMessageOnTopicFaultType_Description * soap_new_set__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__NoCurrentMessageOnTopicFaultType_Description *_p = soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NoCurrentMessageOnTopicFaultType_Description::__item = __item; _p->_ns3__NoCurrentMessageOnTopicFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap *soap, _ns3__NoCurrentMessageOnTopicFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode
#define SOAP_TYPE__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode (1613)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, const char*, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode
#define soap_write__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode
#define soap_read__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode * soap_new__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode * soap_new_req__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *_p = soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode * soap_new_set__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *_p = soap_instantiate__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap *soap, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause
#define SOAP_TYPE__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause (1611)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, const char*, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause
#define soap_write__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause
#define soap_read__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause * soap_new__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause * soap_new_req__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap *soap) { _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *_p = soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause * soap_new_set__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *_p = soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap *soap, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define SOAP_TYPE__ns3__UnacceptableInitialTerminationTimeFaultType_Description (1608)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const char*, int, const _ns3__UnacceptableInitialTerminationTimeFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const char*, _ns3__UnacceptableInitialTerminationTimeFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define soap_write__ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define soap_read__ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnacceptableInitialTerminationTimeFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnacceptableInitialTerminationTimeFaultType_Description * soap_new__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnacceptableInitialTerminationTimeFaultType_Description * soap_new_req__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnacceptableInitialTerminationTimeFaultType_Description *_p = soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableInitialTerminationTimeFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnacceptableInitialTerminationTimeFaultType_Description * soap_new_set__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnacceptableInitialTerminationTimeFaultType_Description *_p = soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableInitialTerminationTimeFaultType_Description::__item = __item; _p->_ns3__UnacceptableInitialTerminationTimeFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap *soap, _ns3__UnacceptableInitialTerminationTimeFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode (1606)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, const char*, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode
#define soap_write__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode
#define soap_read__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode * soap_new__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode * soap_new_req__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *_p = soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode * soap_new_set__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *_p = soap_instantiate__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap *soap, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NotifyMessageNotSupportedFaultType_FaultCause
#define SOAP_TYPE__ns3__NotifyMessageNotSupportedFaultType_FaultCause (1604)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, const char*, int, const _ns3__NotifyMessageNotSupportedFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, const char*, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__NotifyMessageNotSupportedFaultType_FaultCause
#define soap_write__ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__NotifyMessageNotSupportedFaultType_FaultCause
#define soap_read__ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NotifyMessageNotSupportedFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotifyMessageNotSupportedFaultType_FaultCause * soap_new__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__NotifyMessageNotSupportedFaultType_FaultCause * soap_new_req__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap *soap) { _ns3__NotifyMessageNotSupportedFaultType_FaultCause *_p = soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__NotifyMessageNotSupportedFaultType_FaultCause * soap_new_set__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__NotifyMessageNotSupportedFaultType_FaultCause *_p = soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotifyMessageNotSupportedFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap *soap, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NotifyMessageNotSupportedFaultType_Description
#define SOAP_TYPE__ns3__NotifyMessageNotSupportedFaultType_Description (1601)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const char*, int, const _ns3__NotifyMessageNotSupportedFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_Description * SOAP_FMAC4 soap_in__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const char*, _ns3__NotifyMessageNotSupportedFaultType_Description *, const char*);

#ifndef soap_write__ns3__NotifyMessageNotSupportedFaultType_Description
#define soap_write__ns3__NotifyMessageNotSupportedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_Description * SOAP_FMAC4 soap_get__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__NotifyMessageNotSupportedFaultType_Description
#define soap_read__ns3__NotifyMessageNotSupportedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NotifyMessageNotSupportedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NotifyMessageNotSupportedFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotifyMessageNotSupportedFaultType_Description * soap_new__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__NotifyMessageNotSupportedFaultType_Description * soap_new_req__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__NotifyMessageNotSupportedFaultType_Description *_p = soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotifyMessageNotSupportedFaultType_Description::__item = __item; } return _p; }

inline _ns3__NotifyMessageNotSupportedFaultType_Description * soap_new_set__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__NotifyMessageNotSupportedFaultType_Description *_p = soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotifyMessageNotSupportedFaultType_Description::__item = __item; _p->_ns3__NotifyMessageNotSupportedFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap *soap, _ns3__NotifyMessageNotSupportedFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NotifyMessageNotSupportedFaultType_ErrorCode
#define SOAP_TYPE__ns3__NotifyMessageNotSupportedFaultType_ErrorCode (1599)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, const char*, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__NotifyMessageNotSupportedFaultType_ErrorCode
#define soap_write__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__NotifyMessageNotSupportedFaultType_ErrorCode
#define soap_read__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NotifyMessageNotSupportedFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotifyMessageNotSupportedFaultType_ErrorCode * soap_new__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__NotifyMessageNotSupportedFaultType_ErrorCode * soap_new_req__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *_p = soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotifyMessageNotSupportedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__NotifyMessageNotSupportedFaultType_ErrorCode * soap_new_set__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *_p = soap_instantiate__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotifyMessageNotSupportedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap *soap, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnsupportedPolicyRequestFaultType_FaultCause
#define SOAP_TYPE__ns3__UnsupportedPolicyRequestFaultType_FaultCause (1597)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnsupportedPolicyRequestFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, const char*, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnsupportedPolicyRequestFaultType_FaultCause
#define soap_write__ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnsupportedPolicyRequestFaultType_FaultCause
#define soap_read__ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnsupportedPolicyRequestFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnsupportedPolicyRequestFaultType_FaultCause * soap_new__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnsupportedPolicyRequestFaultType_FaultCause * soap_new_req__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap *soap) { _ns3__UnsupportedPolicyRequestFaultType_FaultCause *_p = soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnsupportedPolicyRequestFaultType_FaultCause * soap_new_set__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnsupportedPolicyRequestFaultType_FaultCause *_p = soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnsupportedPolicyRequestFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap *soap, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnsupportedPolicyRequestFaultType_Description
#define SOAP_TYPE__ns3__UnsupportedPolicyRequestFaultType_Description (1594)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const char*, int, const _ns3__UnsupportedPolicyRequestFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const char*, _ns3__UnsupportedPolicyRequestFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnsupportedPolicyRequestFaultType_Description
#define soap_write__ns3__UnsupportedPolicyRequestFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnsupportedPolicyRequestFaultType_Description
#define soap_read__ns3__UnsupportedPolicyRequestFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnsupportedPolicyRequestFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnsupportedPolicyRequestFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnsupportedPolicyRequestFaultType_Description * soap_new__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnsupportedPolicyRequestFaultType_Description * soap_new_req__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnsupportedPolicyRequestFaultType_Description *_p = soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnsupportedPolicyRequestFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnsupportedPolicyRequestFaultType_Description * soap_new_set__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnsupportedPolicyRequestFaultType_Description *_p = soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnsupportedPolicyRequestFaultType_Description::__item = __item; _p->_ns3__UnsupportedPolicyRequestFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap *soap, _ns3__UnsupportedPolicyRequestFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnsupportedPolicyRequestFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnsupportedPolicyRequestFaultType_ErrorCode (1592)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, const char*, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnsupportedPolicyRequestFaultType_ErrorCode
#define soap_write__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnsupportedPolicyRequestFaultType_ErrorCode
#define soap_read__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnsupportedPolicyRequestFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnsupportedPolicyRequestFaultType_ErrorCode * soap_new__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnsupportedPolicyRequestFaultType_ErrorCode * soap_new_req__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *_p = soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnsupportedPolicyRequestFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnsupportedPolicyRequestFaultType_ErrorCode * soap_new_set__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *_p = soap_instantiate__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnsupportedPolicyRequestFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap *soap, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnrecognizedPolicyRequestFaultType_FaultCause
#define SOAP_TYPE__ns3__UnrecognizedPolicyRequestFaultType_FaultCause (1590)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, const char*, int, const _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, const char*, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__UnrecognizedPolicyRequestFaultType_FaultCause
#define soap_write__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__UnrecognizedPolicyRequestFaultType_FaultCause
#define soap_read__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnrecognizedPolicyRequestFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnrecognizedPolicyRequestFaultType_FaultCause * soap_new__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__UnrecognizedPolicyRequestFaultType_FaultCause * soap_new_req__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap *soap) { _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *_p = soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnrecognizedPolicyRequestFaultType_FaultCause * soap_new_set__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *_p = soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnrecognizedPolicyRequestFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap *soap, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnrecognizedPolicyRequestFaultType_Description
#define SOAP_TYPE__ns3__UnrecognizedPolicyRequestFaultType_Description (1587)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const char*, int, const _ns3__UnrecognizedPolicyRequestFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_Description * SOAP_FMAC4 soap_in__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const char*, _ns3__UnrecognizedPolicyRequestFaultType_Description *, const char*);

#ifndef soap_write__ns3__UnrecognizedPolicyRequestFaultType_Description
#define soap_write__ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_Description * SOAP_FMAC4 soap_get__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__UnrecognizedPolicyRequestFaultType_Description
#define soap_read__ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnrecognizedPolicyRequestFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnrecognizedPolicyRequestFaultType_Description * soap_new__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__UnrecognizedPolicyRequestFaultType_Description * soap_new_req__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__UnrecognizedPolicyRequestFaultType_Description *_p = soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnrecognizedPolicyRequestFaultType_Description::__item = __item; } return _p; }

inline _ns3__UnrecognizedPolicyRequestFaultType_Description * soap_new_set__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__UnrecognizedPolicyRequestFaultType_Description *_p = soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnrecognizedPolicyRequestFaultType_Description::__item = __item; _p->_ns3__UnrecognizedPolicyRequestFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap *soap, _ns3__UnrecognizedPolicyRequestFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode
#define SOAP_TYPE__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode (1585)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, const char*, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode
#define soap_write__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode
#define soap_read__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode * soap_new__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode * soap_new_req__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *_p = soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode * soap_new_set__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *_p = soap_instantiate__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap *soap, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidMessageContentExpressionFaultType_FaultCause
#define SOAP_TYPE__ns3__InvalidMessageContentExpressionFaultType_FaultCause (1583)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, const char*, int, const _ns3__InvalidMessageContentExpressionFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__InvalidMessageContentExpressionFaultType_FaultCause
#define soap_write__ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__InvalidMessageContentExpressionFaultType_FaultCause
#define soap_read__ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidMessageContentExpressionFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidMessageContentExpressionFaultType_FaultCause * soap_new__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidMessageContentExpressionFaultType_FaultCause * soap_new_req__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap *soap) { _ns3__InvalidMessageContentExpressionFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__InvalidMessageContentExpressionFaultType_FaultCause * soap_new_set__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__InvalidMessageContentExpressionFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidMessageContentExpressionFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap *soap, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidMessageContentExpressionFaultType_Description
#define SOAP_TYPE__ns3__InvalidMessageContentExpressionFaultType_Description (1580)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const char*, int, const _ns3__InvalidMessageContentExpressionFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_Description * SOAP_FMAC4 soap_in__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const char*, _ns3__InvalidMessageContentExpressionFaultType_Description *, const char*);

#ifndef soap_write__ns3__InvalidMessageContentExpressionFaultType_Description
#define soap_write__ns3__InvalidMessageContentExpressionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_Description * SOAP_FMAC4 soap_get__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__InvalidMessageContentExpressionFaultType_Description
#define soap_read__ns3__InvalidMessageContentExpressionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidMessageContentExpressionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidMessageContentExpressionFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidMessageContentExpressionFaultType_Description * soap_new__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidMessageContentExpressionFaultType_Description * soap_new_req__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__InvalidMessageContentExpressionFaultType_Description *_p = soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidMessageContentExpressionFaultType_Description::__item = __item; } return _p; }

inline _ns3__InvalidMessageContentExpressionFaultType_Description * soap_new_set__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__InvalidMessageContentExpressionFaultType_Description *_p = soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidMessageContentExpressionFaultType_Description::__item = __item; _p->_ns3__InvalidMessageContentExpressionFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap *soap, _ns3__InvalidMessageContentExpressionFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidMessageContentExpressionFaultType_ErrorCode
#define SOAP_TYPE__ns3__InvalidMessageContentExpressionFaultType_ErrorCode (1578)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__InvalidMessageContentExpressionFaultType_ErrorCode
#define soap_write__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__InvalidMessageContentExpressionFaultType_ErrorCode
#define soap_read__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidMessageContentExpressionFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidMessageContentExpressionFaultType_ErrorCode * soap_new__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidMessageContentExpressionFaultType_ErrorCode * soap_new_req__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidMessageContentExpressionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__InvalidMessageContentExpressionFaultType_ErrorCode * soap_new_set__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidMessageContentExpressionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap *soap, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause
#define SOAP_TYPE__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause (1576)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, const char*, int, const _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause
#define soap_write__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause
#define soap_read__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause * soap_new__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause * soap_new_req__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap *soap) { _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause * soap_new_set__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap *soap, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define SOAP_TYPE__ns3__InvalidProducerPropertiesExpressionFaultType_Description (1573)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const char*, int, const _ns3__InvalidProducerPropertiesExpressionFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_Description * SOAP_FMAC4 soap_in__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const char*, _ns3__InvalidProducerPropertiesExpressionFaultType_Description *, const char*);

#ifndef soap_write__ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define soap_write__ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_Description * SOAP_FMAC4 soap_get__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define soap_read__ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidProducerPropertiesExpressionFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidProducerPropertiesExpressionFaultType_Description * soap_new__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidProducerPropertiesExpressionFaultType_Description * soap_new_req__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__InvalidProducerPropertiesExpressionFaultType_Description *_p = soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidProducerPropertiesExpressionFaultType_Description::__item = __item; } return _p; }

inline _ns3__InvalidProducerPropertiesExpressionFaultType_Description * soap_new_set__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__InvalidProducerPropertiesExpressionFaultType_Description *_p = soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidProducerPropertiesExpressionFaultType_Description::__item = __item; _p->_ns3__InvalidProducerPropertiesExpressionFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap *soap, _ns3__InvalidProducerPropertiesExpressionFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode
#define SOAP_TYPE__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode (1571)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode
#define soap_write__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode
#define soap_read__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode * soap_new__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode * soap_new_req__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode * soap_new_set__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap *soap, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__MultipleTopicsSpecifiedFaultType_FaultCause
#define SOAP_TYPE__ns3__MultipleTopicsSpecifiedFaultType_FaultCause (1569)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, const char*, int, const _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, const char*, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__MultipleTopicsSpecifiedFaultType_FaultCause
#define soap_write__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__MultipleTopicsSpecifiedFaultType_FaultCause
#define soap_read__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__MultipleTopicsSpecifiedFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__MultipleTopicsSpecifiedFaultType_FaultCause * soap_new__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__MultipleTopicsSpecifiedFaultType_FaultCause * soap_new_req__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap *soap) { _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *_p = soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__MultipleTopicsSpecifiedFaultType_FaultCause * soap_new_set__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *_p = soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__MultipleTopicsSpecifiedFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap *soap, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__MultipleTopicsSpecifiedFaultType_Description
#define SOAP_TYPE__ns3__MultipleTopicsSpecifiedFaultType_Description (1566)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const char*, int, const _ns3__MultipleTopicsSpecifiedFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_Description * SOAP_FMAC4 soap_in__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const char*, _ns3__MultipleTopicsSpecifiedFaultType_Description *, const char*);

#ifndef soap_write__ns3__MultipleTopicsSpecifiedFaultType_Description
#define soap_write__ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_Description * SOAP_FMAC4 soap_get__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__MultipleTopicsSpecifiedFaultType_Description
#define soap_read__ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__MultipleTopicsSpecifiedFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__MultipleTopicsSpecifiedFaultType_Description * soap_new__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__MultipleTopicsSpecifiedFaultType_Description * soap_new_req__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__MultipleTopicsSpecifiedFaultType_Description *_p = soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__MultipleTopicsSpecifiedFaultType_Description::__item = __item; } return _p; }

inline _ns3__MultipleTopicsSpecifiedFaultType_Description * soap_new_set__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__MultipleTopicsSpecifiedFaultType_Description *_p = soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__MultipleTopicsSpecifiedFaultType_Description::__item = __item; _p->_ns3__MultipleTopicsSpecifiedFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap *soap, _ns3__MultipleTopicsSpecifiedFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode
#define SOAP_TYPE__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode (1564)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, const char*, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode
#define soap_write__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode
#define soap_read__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode * soap_new__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode * soap_new_req__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *_p = soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode * soap_new_set__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *_p = soap_instantiate__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap *soap, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__TopicNotSupportedFaultType_FaultCause
#define SOAP_TYPE__ns3__TopicNotSupportedFaultType_FaultCause (1562)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, const char*, int, const _ns3__TopicNotSupportedFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, const char*, _ns3__TopicNotSupportedFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__TopicNotSupportedFaultType_FaultCause
#define soap_write__ns3__TopicNotSupportedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicNotSupportedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, _ns3__TopicNotSupportedFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__TopicNotSupportedFaultType_FaultCause
#define soap_read__ns3__TopicNotSupportedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__TopicNotSupportedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__TopicNotSupportedFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__TopicNotSupportedFaultType_FaultCause * soap_new__ns3__TopicNotSupportedFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__TopicNotSupportedFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__TopicNotSupportedFaultType_FaultCause * soap_new_req__ns3__TopicNotSupportedFaultType_FaultCause(struct soap *soap) { _ns3__TopicNotSupportedFaultType_FaultCause *_p = soap_instantiate__ns3__TopicNotSupportedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__TopicNotSupportedFaultType_FaultCause * soap_new_set__ns3__TopicNotSupportedFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__TopicNotSupportedFaultType_FaultCause *_p = soap_instantiate__ns3__TopicNotSupportedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicNotSupportedFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__TopicNotSupportedFaultType_FaultCause(struct soap *soap, _ns3__TopicNotSupportedFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__TopicNotSupportedFaultType_Description
#define SOAP_TYPE__ns3__TopicNotSupportedFaultType_Description (1559)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TopicNotSupportedFaultType_Description(struct soap*, const char*, int, const _ns3__TopicNotSupportedFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_Description * SOAP_FMAC4 soap_in__ns3__TopicNotSupportedFaultType_Description(struct soap*, const char*, _ns3__TopicNotSupportedFaultType_Description *, const char*);

#ifndef soap_write__ns3__TopicNotSupportedFaultType_Description
#define soap_write__ns3__TopicNotSupportedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicNotSupportedFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_Description * SOAP_FMAC4 soap_get__ns3__TopicNotSupportedFaultType_Description(struct soap*, _ns3__TopicNotSupportedFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__TopicNotSupportedFaultType_Description
#define soap_read__ns3__TopicNotSupportedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__TopicNotSupportedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__TopicNotSupportedFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__TopicNotSupportedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__TopicNotSupportedFaultType_Description * soap_new__ns3__TopicNotSupportedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__TopicNotSupportedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__TopicNotSupportedFaultType_Description * soap_new_req__ns3__TopicNotSupportedFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__TopicNotSupportedFaultType_Description *_p = soap_instantiate__ns3__TopicNotSupportedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicNotSupportedFaultType_Description::__item = __item; } return _p; }

inline _ns3__TopicNotSupportedFaultType_Description * soap_new_set__ns3__TopicNotSupportedFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__TopicNotSupportedFaultType_Description *_p = soap_instantiate__ns3__TopicNotSupportedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicNotSupportedFaultType_Description::__item = __item; _p->_ns3__TopicNotSupportedFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__TopicNotSupportedFaultType_Description(struct soap *soap, _ns3__TopicNotSupportedFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TopicNotSupportedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__TopicNotSupportedFaultType_ErrorCode
#define SOAP_TYPE__ns3__TopicNotSupportedFaultType_ErrorCode (1557)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__TopicNotSupportedFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, const char*, _ns3__TopicNotSupportedFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__TopicNotSupportedFaultType_ErrorCode
#define soap_write__ns3__TopicNotSupportedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicNotSupportedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, _ns3__TopicNotSupportedFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__TopicNotSupportedFaultType_ErrorCode
#define soap_read__ns3__TopicNotSupportedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__TopicNotSupportedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__TopicNotSupportedFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__TopicNotSupportedFaultType_ErrorCode * soap_new__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__TopicNotSupportedFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__TopicNotSupportedFaultType_ErrorCode * soap_new_req__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__TopicNotSupportedFaultType_ErrorCode *_p = soap_instantiate__ns3__TopicNotSupportedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicNotSupportedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__TopicNotSupportedFaultType_ErrorCode * soap_new_set__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__TopicNotSupportedFaultType_ErrorCode *_p = soap_instantiate__ns3__TopicNotSupportedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicNotSupportedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap *soap, _ns3__TopicNotSupportedFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidTopicExpressionFaultType_FaultCause
#define SOAP_TYPE__ns3__InvalidTopicExpressionFaultType_FaultCause (1555)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, const char*, int, const _ns3__InvalidTopicExpressionFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidTopicExpressionFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__InvalidTopicExpressionFaultType_FaultCause
#define soap_write__ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidTopicExpressionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidTopicExpressionFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__InvalidTopicExpressionFaultType_FaultCause
#define soap_read__ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidTopicExpressionFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidTopicExpressionFaultType_FaultCause * soap_new__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidTopicExpressionFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidTopicExpressionFaultType_FaultCause * soap_new_req__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap *soap) { _ns3__InvalidTopicExpressionFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidTopicExpressionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__InvalidTopicExpressionFaultType_FaultCause * soap_new_set__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__InvalidTopicExpressionFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidTopicExpressionFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidTopicExpressionFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap *soap, _ns3__InvalidTopicExpressionFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidTopicExpressionFaultType_Description
#define SOAP_TYPE__ns3__InvalidTopicExpressionFaultType_Description (1552)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const char*, int, const _ns3__InvalidTopicExpressionFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_Description * SOAP_FMAC4 soap_in__ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const char*, _ns3__InvalidTopicExpressionFaultType_Description *, const char*);

#ifndef soap_write__ns3__InvalidTopicExpressionFaultType_Description
#define soap_write__ns3__InvalidTopicExpressionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidTopicExpressionFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_Description * SOAP_FMAC4 soap_get__ns3__InvalidTopicExpressionFaultType_Description(struct soap*, _ns3__InvalidTopicExpressionFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__InvalidTopicExpressionFaultType_Description
#define soap_read__ns3__InvalidTopicExpressionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidTopicExpressionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidTopicExpressionFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__InvalidTopicExpressionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidTopicExpressionFaultType_Description * soap_new__ns3__InvalidTopicExpressionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidTopicExpressionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidTopicExpressionFaultType_Description * soap_new_req__ns3__InvalidTopicExpressionFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__InvalidTopicExpressionFaultType_Description *_p = soap_instantiate__ns3__InvalidTopicExpressionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidTopicExpressionFaultType_Description::__item = __item; } return _p; }

inline _ns3__InvalidTopicExpressionFaultType_Description * soap_new_set__ns3__InvalidTopicExpressionFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__InvalidTopicExpressionFaultType_Description *_p = soap_instantiate__ns3__InvalidTopicExpressionFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidTopicExpressionFaultType_Description::__item = __item; _p->_ns3__InvalidTopicExpressionFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__InvalidTopicExpressionFaultType_Description(struct soap *soap, _ns3__InvalidTopicExpressionFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidTopicExpressionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidTopicExpressionFaultType_ErrorCode
#define SOAP_TYPE__ns3__InvalidTopicExpressionFaultType_ErrorCode (1550)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__InvalidTopicExpressionFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidTopicExpressionFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__InvalidTopicExpressionFaultType_ErrorCode
#define soap_write__ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidTopicExpressionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidTopicExpressionFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__InvalidTopicExpressionFaultType_ErrorCode
#define soap_read__ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidTopicExpressionFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidTopicExpressionFaultType_ErrorCode * soap_new__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidTopicExpressionFaultType_ErrorCode * soap_new_req__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidTopicExpressionFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidTopicExpressionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__InvalidTopicExpressionFaultType_ErrorCode * soap_new_set__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidTopicExpressionFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidTopicExpressionFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap *soap, _ns3__InvalidTopicExpressionFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__TopicExpressionDialectUnknownFaultType_FaultCause
#define SOAP_TYPE__ns3__TopicExpressionDialectUnknownFaultType_FaultCause (1548)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, const char*, int, const _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, const char*, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__TopicExpressionDialectUnknownFaultType_FaultCause
#define soap_write__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__TopicExpressionDialectUnknownFaultType_FaultCause
#define soap_read__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__TopicExpressionDialectUnknownFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__TopicExpressionDialectUnknownFaultType_FaultCause * soap_new__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__TopicExpressionDialectUnknownFaultType_FaultCause * soap_new_req__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap *soap) { _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *_p = soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__TopicExpressionDialectUnknownFaultType_FaultCause * soap_new_set__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *_p = soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicExpressionDialectUnknownFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap *soap, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__TopicExpressionDialectUnknownFaultType_Description
#define SOAP_TYPE__ns3__TopicExpressionDialectUnknownFaultType_Description (1545)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const char*, int, const _ns3__TopicExpressionDialectUnknownFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_Description * SOAP_FMAC4 soap_in__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const char*, _ns3__TopicExpressionDialectUnknownFaultType_Description *, const char*);

#ifndef soap_write__ns3__TopicExpressionDialectUnknownFaultType_Description
#define soap_write__ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_Description * SOAP_FMAC4 soap_get__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__TopicExpressionDialectUnknownFaultType_Description
#define soap_read__ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__TopicExpressionDialectUnknownFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__TopicExpressionDialectUnknownFaultType_Description * soap_new__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__TopicExpressionDialectUnknownFaultType_Description * soap_new_req__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__TopicExpressionDialectUnknownFaultType_Description *_p = soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicExpressionDialectUnknownFaultType_Description::__item = __item; } return _p; }

inline _ns3__TopicExpressionDialectUnknownFaultType_Description * soap_new_set__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__TopicExpressionDialectUnknownFaultType_Description *_p = soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicExpressionDialectUnknownFaultType_Description::__item = __item; _p->_ns3__TopicExpressionDialectUnknownFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap *soap, _ns3__TopicExpressionDialectUnknownFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode
#define SOAP_TYPE__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode (1543)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, const char*, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode
#define soap_write__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode
#define soap_read__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode * soap_new__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode * soap_new_req__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *_p = soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode * soap_new_set__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *_p = soap_instantiate__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap *soap, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidFilterFaultType_FaultCause
#define SOAP_TYPE__ns3__InvalidFilterFaultType_FaultCause (1540)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidFilterFaultType_FaultCause(struct soap*, const char*, int, const _ns3__InvalidFilterFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__InvalidFilterFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__InvalidFilterFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidFilterFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__InvalidFilterFaultType_FaultCause
#define soap_write__ns3__InvalidFilterFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidFilterFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidFilterFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__InvalidFilterFaultType_FaultCause(struct soap*, _ns3__InvalidFilterFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__InvalidFilterFaultType_FaultCause
#define soap_read__ns3__InvalidFilterFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidFilterFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidFilterFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__InvalidFilterFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidFilterFaultType_FaultCause * soap_new__ns3__InvalidFilterFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidFilterFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidFilterFaultType_FaultCause * soap_new_req__ns3__InvalidFilterFaultType_FaultCause(struct soap *soap) { _ns3__InvalidFilterFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidFilterFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__InvalidFilterFaultType_FaultCause * soap_new_set__ns3__InvalidFilterFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__InvalidFilterFaultType_FaultCause *_p = soap_instantiate__ns3__InvalidFilterFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidFilterFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__InvalidFilterFaultType_FaultCause(struct soap *soap, _ns3__InvalidFilterFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidFilterFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidFilterFaultType_Description
#define SOAP_TYPE__ns3__InvalidFilterFaultType_Description (1537)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidFilterFaultType_Description(struct soap*, const char*, int, const _ns3__InvalidFilterFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__InvalidFilterFaultType_Description * SOAP_FMAC4 soap_in__ns3__InvalidFilterFaultType_Description(struct soap*, const char*, _ns3__InvalidFilterFaultType_Description *, const char*);

#ifndef soap_write__ns3__InvalidFilterFaultType_Description
#define soap_write__ns3__InvalidFilterFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidFilterFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidFilterFaultType_Description * SOAP_FMAC4 soap_get__ns3__InvalidFilterFaultType_Description(struct soap*, _ns3__InvalidFilterFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__InvalidFilterFaultType_Description
#define soap_read__ns3__InvalidFilterFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidFilterFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidFilterFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__InvalidFilterFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidFilterFaultType_Description * soap_new__ns3__InvalidFilterFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidFilterFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidFilterFaultType_Description * soap_new_req__ns3__InvalidFilterFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__InvalidFilterFaultType_Description *_p = soap_instantiate__ns3__InvalidFilterFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidFilterFaultType_Description::__item = __item; } return _p; }

inline _ns3__InvalidFilterFaultType_Description * soap_new_set__ns3__InvalidFilterFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__InvalidFilterFaultType_Description *_p = soap_instantiate__ns3__InvalidFilterFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidFilterFaultType_Description::__item = __item; _p->_ns3__InvalidFilterFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__InvalidFilterFaultType_Description(struct soap *soap, _ns3__InvalidFilterFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidFilterFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__InvalidFilterFaultType_ErrorCode
#define SOAP_TYPE__ns3__InvalidFilterFaultType_ErrorCode (1535)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__InvalidFilterFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__InvalidFilterFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__InvalidFilterFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__InvalidFilterFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidFilterFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__InvalidFilterFaultType_ErrorCode
#define soap_write__ns3__InvalidFilterFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidFilterFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidFilterFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__InvalidFilterFaultType_ErrorCode(struct soap*, _ns3__InvalidFilterFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__InvalidFilterFaultType_ErrorCode
#define soap_read__ns3__InvalidFilterFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__InvalidFilterFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__InvalidFilterFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__InvalidFilterFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__InvalidFilterFaultType_ErrorCode * soap_new__ns3__InvalidFilterFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__InvalidFilterFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__InvalidFilterFaultType_ErrorCode * soap_new_req__ns3__InvalidFilterFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidFilterFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidFilterFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidFilterFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__InvalidFilterFaultType_ErrorCode * soap_new_set__ns3__InvalidFilterFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__InvalidFilterFaultType_ErrorCode *_p = soap_instantiate__ns3__InvalidFilterFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__InvalidFilterFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__InvalidFilterFaultType_ErrorCode(struct soap *soap, _ns3__InvalidFilterFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__InvalidFilterFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__SubscribeCreationFailedFaultType_FaultCause
#define SOAP_TYPE__ns3__SubscribeCreationFailedFaultType_FaultCause (1533)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, const char*, int, const _ns3__SubscribeCreationFailedFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_FaultCause * SOAP_FMAC4 soap_in__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, const char*, _ns3__SubscribeCreationFailedFaultType_FaultCause *, const char*);

#ifndef soap_write__ns3__SubscribeCreationFailedFaultType_FaultCause
#define soap_write__ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscribeCreationFailedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_FaultCause * SOAP_FMAC4 soap_get__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, _ns3__SubscribeCreationFailedFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns3__SubscribeCreationFailedFaultType_FaultCause
#define soap_read__ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SubscribeCreationFailedFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscribeCreationFailedFaultType_FaultCause * soap_new__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SubscribeCreationFailedFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns3__SubscribeCreationFailedFaultType_FaultCause * soap_new_req__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap *soap) { _ns3__SubscribeCreationFailedFaultType_FaultCause *_p = soap_instantiate__ns3__SubscribeCreationFailedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__SubscribeCreationFailedFaultType_FaultCause * soap_new_set__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap *soap, char *__any) { _ns3__SubscribeCreationFailedFaultType_FaultCause *_p = soap_instantiate__ns3__SubscribeCreationFailedFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeCreationFailedFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap *soap, _ns3__SubscribeCreationFailedFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__SubscribeCreationFailedFaultType_Description
#define SOAP_TYPE__ns3__SubscribeCreationFailedFaultType_Description (1530)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const char*, int, const _ns3__SubscribeCreationFailedFaultType_Description *, const char*);
SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_Description * SOAP_FMAC4 soap_in__ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const char*, _ns3__SubscribeCreationFailedFaultType_Description *, const char*);

#ifndef soap_write__ns3__SubscribeCreationFailedFaultType_Description
#define soap_write__ns3__SubscribeCreationFailedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscribeCreationFailedFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_Description * SOAP_FMAC4 soap_get__ns3__SubscribeCreationFailedFaultType_Description(struct soap*, _ns3__SubscribeCreationFailedFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns3__SubscribeCreationFailedFaultType_Description
#define soap_read__ns3__SubscribeCreationFailedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__SubscribeCreationFailedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SubscribeCreationFailedFaultType_Description * SOAP_FMAC2 soap_instantiate__ns3__SubscribeCreationFailedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscribeCreationFailedFaultType_Description * soap_new__ns3__SubscribeCreationFailedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SubscribeCreationFailedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns3__SubscribeCreationFailedFaultType_Description * soap_new_req__ns3__SubscribeCreationFailedFaultType_Description(struct soap *soap, const std::string& __item) { _ns3__SubscribeCreationFailedFaultType_Description *_p = soap_instantiate__ns3__SubscribeCreationFailedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeCreationFailedFaultType_Description::__item = __item; } return _p; }

inline _ns3__SubscribeCreationFailedFaultType_Description * soap_new_set__ns3__SubscribeCreationFailedFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns3__SubscribeCreationFailedFaultType_Description *_p = soap_instantiate__ns3__SubscribeCreationFailedFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeCreationFailedFaultType_Description::__item = __item; _p->_ns3__SubscribeCreationFailedFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns3__SubscribeCreationFailedFaultType_Description(struct soap *soap, _ns3__SubscribeCreationFailedFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SubscribeCreationFailedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__SubscribeCreationFailedFaultType_ErrorCode
#define SOAP_TYPE__ns3__SubscribeCreationFailedFaultType_ErrorCode (1528)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, const char*, int, const _ns3__SubscribeCreationFailedFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, const char*, _ns3__SubscribeCreationFailedFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns3__SubscribeCreationFailedFaultType_ErrorCode
#define soap_write__ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscribeCreationFailedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, _ns3__SubscribeCreationFailedFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns3__SubscribeCreationFailedFaultType_ErrorCode
#define soap_read__ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SubscribeCreationFailedFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscribeCreationFailedFaultType_ErrorCode * soap_new__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns3__SubscribeCreationFailedFaultType_ErrorCode * soap_new_req__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__SubscribeCreationFailedFaultType_ErrorCode *_p = soap_instantiate__ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeCreationFailedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns3__SubscribeCreationFailedFaultType_ErrorCode * soap_new_set__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns3__SubscribeCreationFailedFaultType_ErrorCode *_p = soap_instantiate__ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeCreationFailedFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap *soap, _ns3__SubscribeCreationFailedFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns5__BaseFaultType_FaultCause
#define SOAP_TYPE__ns5__BaseFaultType_FaultCause (1486)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__BaseFaultType_FaultCause(struct soap*, const char*, int, const _ns5__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns5__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__ns5__BaseFaultType_FaultCause(struct soap*, const char*, _ns5__BaseFaultType_FaultCause *, const char*);

#ifndef soap_write__ns5__BaseFaultType_FaultCause
#define soap_write__ns5__BaseFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns5:BaseFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__ns5__BaseFaultType_FaultCause(struct soap*, _ns5__BaseFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__ns5__BaseFaultType_FaultCause
#define soap_read__ns5__BaseFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__ns5__BaseFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns5__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__BaseFaultType_FaultCause * soap_new__ns5__BaseFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__ns5__BaseFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _ns5__BaseFaultType_FaultCause * soap_new_req__ns5__BaseFaultType_FaultCause(struct soap *soap) { _ns5__BaseFaultType_FaultCause *_p = soap_instantiate__ns5__BaseFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns5__BaseFaultType_FaultCause * soap_new_set__ns5__BaseFaultType_FaultCause(struct soap *soap, char *__any) { _ns5__BaseFaultType_FaultCause *_p = soap_instantiate__ns5__BaseFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__BaseFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__ns5__BaseFaultType_FaultCause(struct soap *soap, _ns5__BaseFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__BaseFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns5__BaseFaultType_Description
#define SOAP_TYPE__ns5__BaseFaultType_Description (1482)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__BaseFaultType_Description(struct soap*, const char*, int, const _ns5__BaseFaultType_Description *, const char*);
SOAP_FMAC3 _ns5__BaseFaultType_Description * SOAP_FMAC4 soap_in__ns5__BaseFaultType_Description(struct soap*, const char*, _ns5__BaseFaultType_Description *, const char*);

#ifndef soap_write__ns5__BaseFaultType_Description
#define soap_write__ns5__BaseFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns5:BaseFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__BaseFaultType_Description * SOAP_FMAC4 soap_get__ns5__BaseFaultType_Description(struct soap*, _ns5__BaseFaultType_Description *, const char*, const char*);

#ifndef soap_read__ns5__BaseFaultType_Description
#define soap_read__ns5__BaseFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__ns5__BaseFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__ns5__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__BaseFaultType_Description * soap_new__ns5__BaseFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__ns5__BaseFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _ns5__BaseFaultType_Description * soap_new_req__ns5__BaseFaultType_Description(struct soap *soap, const std::string& __item) { _ns5__BaseFaultType_Description *_p = soap_instantiate__ns5__BaseFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__BaseFaultType_Description::__item = __item; } return _p; }

inline _ns5__BaseFaultType_Description * soap_new_set__ns5__BaseFaultType_Description(struct soap *soap, const std::string& __item, std::string *xml__lang) { _ns5__BaseFaultType_Description *_p = soap_instantiate__ns5__BaseFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__BaseFaultType_Description::__item = __item; _p->_ns5__BaseFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__ns5__BaseFaultType_Description(struct soap *soap, _ns5__BaseFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__BaseFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns5__BaseFaultType_ErrorCode
#define SOAP_TYPE__ns5__BaseFaultType_ErrorCode (1480)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__BaseFaultType_ErrorCode(struct soap*, const char*, int, const _ns5__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns5__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns5__BaseFaultType_ErrorCode(struct soap*, const char*, _ns5__BaseFaultType_ErrorCode *, const char*);

#ifndef soap_write__ns5__BaseFaultType_ErrorCode
#define soap_write__ns5__BaseFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns5:BaseFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns5__BaseFaultType_ErrorCode(struct soap*, _ns5__BaseFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__ns5__BaseFaultType_ErrorCode
#define soap_read__ns5__BaseFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns5__BaseFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns5__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__BaseFaultType_ErrorCode * soap_new__ns5__BaseFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__ns5__BaseFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _ns5__BaseFaultType_ErrorCode * soap_new_req__ns5__BaseFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns5__BaseFaultType_ErrorCode *_p = soap_instantiate__ns5__BaseFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__BaseFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _ns5__BaseFaultType_ErrorCode * soap_new_set__ns5__BaseFaultType_ErrorCode(struct soap *soap, const std::string& dialect) { _ns5__BaseFaultType_ErrorCode *_p = soap_instantiate__ns5__BaseFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__BaseFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__ns5__BaseFaultType_ErrorCode(struct soap *soap, _ns5__BaseFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__BaseFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy (1477)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Subscribe_SubscriptionPolicy(struct soap*, const char*, int, const _ns3__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__ns3__Subscribe_SubscriptionPolicy(struct soap*, const char*, _ns3__Subscribe_SubscriptionPolicy *, const char*);

#ifndef soap_write__ns3__Subscribe_SubscriptionPolicy
#define soap_write__ns3__Subscribe_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:Subscribe-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read__ns3__Subscribe_SubscriptionPolicy
#define soap_read__ns3__Subscribe_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__Subscribe_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__ns3__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Subscribe_SubscriptionPolicy * soap_new__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate__ns3__Subscribe_SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline _ns3__Subscribe_SubscriptionPolicy * soap_new_req__ns3__Subscribe_SubscriptionPolicy(struct soap *soap) { _ns3__Subscribe_SubscriptionPolicy *_p = soap_instantiate__ns3__Subscribe_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__Subscribe_SubscriptionPolicy * soap_new_set__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, const std::vector<char * >& __any) { _ns3__Subscribe_SubscriptionPolicy *_p = soap_instantiate__ns3__Subscribe_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Subscribe_SubscriptionPolicy::__any = __any; } return _p; }

inline void soap_delete__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, _ns3__Subscribe_SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Subscribe_SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NotificationMessageHolderType_Message
#define SOAP_TYPE__ns3__NotificationMessageHolderType_Message (1471)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotificationMessageHolderType_Message(struct soap*, const char*, int, const _ns3__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC3 _ns3__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__ns3__NotificationMessageHolderType_Message(struct soap*, const char*, _ns3__NotificationMessageHolderType_Message *, const char*);

#ifndef soap_write__ns3__NotificationMessageHolderType_Message
#define soap_write__ns3__NotificationMessageHolderType_Message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotificationMessageHolderType-Message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__ns3__NotificationMessageHolderType_Message(struct soap*, _ns3__NotificationMessageHolderType_Message *, const char*, const char*);

#ifndef soap_read__ns3__NotificationMessageHolderType_Message
#define soap_read__ns3__NotificationMessageHolderType_Message(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NotificationMessageHolderType_Message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__ns3__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotificationMessageHolderType_Message * soap_new__ns3__NotificationMessageHolderType_Message(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NotificationMessageHolderType_Message(soap, n, NULL, NULL, NULL); }

inline _ns3__NotificationMessageHolderType_Message * soap_new_req__ns3__NotificationMessageHolderType_Message(struct soap *soap) { _ns3__NotificationMessageHolderType_Message *_p = soap_instantiate__ns3__NotificationMessageHolderType_Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__NotificationMessageHolderType_Message * soap_new_set__ns3__NotificationMessageHolderType_Message(struct soap *soap, char *__any) { _ns3__NotificationMessageHolderType_Message *_p = soap_instantiate__ns3__NotificationMessageHolderType_Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotificationMessageHolderType_Message::__any = __any; } return _p; }

inline void soap_delete__ns3__NotificationMessageHolderType_Message(struct soap *soap, _ns3__NotificationMessageHolderType_Message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NotificationMessageHolderType_Message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns2__union_EventStream
#define SOAP_TYPE___ns2__union_EventStream (1371)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__union_EventStream(struct soap*, const char*, int, const __ns2__union_EventStream *, const char*);
SOAP_FMAC3 __ns2__union_EventStream * SOAP_FMAC4 soap_in___ns2__union_EventStream(struct soap*, const char*, __ns2__union_EventStream *, const char*);

#ifndef soap_write___ns2__union_EventStream
#define soap_write___ns2__union_EventStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "-ns2:union-EventStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_EventStream * SOAP_FMAC4 soap_get___ns2__union_EventStream(struct soap*, __ns2__union_EventStream *, const char*, const char*);

#ifndef soap_read___ns2__union_EventStream
#define soap_read___ns2__union_EventStream(soap, data) ( soap_begin_recv(soap) || !soap_get___ns2__union_EventStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 __ns2__union_EventStream * SOAP_FMAC2 soap_instantiate___ns2__union_EventStream(struct soap*, int, const char*, const char*, size_t*);

inline __ns2__union_EventStream * soap_new___ns2__union_EventStream(struct soap *soap, int n = -1) { return soap_instantiate___ns2__union_EventStream(soap, n, NULL, NULL, NULL); }

inline __ns2__union_EventStream * soap_new_req___ns2__union_EventStream(struct soap *soap, const union _ns2__union_EventStream& union_EventStream) { __ns2__union_EventStream *_p = soap_instantiate___ns2__union_EventStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_EventStream::union_EventStream = union_EventStream; } return _p; }

inline __ns2__union_EventStream * soap_new_set___ns2__union_EventStream(struct soap *soap, int __union_EventStream, const union _ns2__union_EventStream& union_EventStream) { __ns2__union_EventStream *_p = soap_instantiate___ns2__union_EventStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_EventStream::__union_EventStream = __union_EventStream; _p->__ns2__union_EventStream::union_EventStream = union_EventStream; } return _p; }

inline void soap_delete___ns2__union_EventStream(struct soap *soap, __ns2__union_EventStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__union_EventStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns2__union_PTZStream
#define SOAP_TYPE___ns2__union_PTZStream (1367)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__union_PTZStream(struct soap*, const char*, int, const __ns2__union_PTZStream *, const char*);
SOAP_FMAC3 __ns2__union_PTZStream * SOAP_FMAC4 soap_in___ns2__union_PTZStream(struct soap*, const char*, __ns2__union_PTZStream *, const char*);

#ifndef soap_write___ns2__union_PTZStream
#define soap_write___ns2__union_PTZStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "-ns2:union-PTZStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_PTZStream * SOAP_FMAC4 soap_get___ns2__union_PTZStream(struct soap*, __ns2__union_PTZStream *, const char*, const char*);

#ifndef soap_read___ns2__union_PTZStream
#define soap_read___ns2__union_PTZStream(soap, data) ( soap_begin_recv(soap) || !soap_get___ns2__union_PTZStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 __ns2__union_PTZStream * SOAP_FMAC2 soap_instantiate___ns2__union_PTZStream(struct soap*, int, const char*, const char*, size_t*);

inline __ns2__union_PTZStream * soap_new___ns2__union_PTZStream(struct soap *soap, int n = -1) { return soap_instantiate___ns2__union_PTZStream(soap, n, NULL, NULL, NULL); }

inline __ns2__union_PTZStream * soap_new_req___ns2__union_PTZStream(struct soap *soap, const union _ns2__union_PTZStream& union_PTZStream) { __ns2__union_PTZStream *_p = soap_instantiate___ns2__union_PTZStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_PTZStream::union_PTZStream = union_PTZStream; } return _p; }

inline __ns2__union_PTZStream * soap_new_set___ns2__union_PTZStream(struct soap *soap, int __union_PTZStream, const union _ns2__union_PTZStream& union_PTZStream) { __ns2__union_PTZStream *_p = soap_instantiate___ns2__union_PTZStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_PTZStream::__union_PTZStream = __union_PTZStream; _p->__ns2__union_PTZStream::union_PTZStream = union_PTZStream; } return _p; }

inline void soap_delete___ns2__union_PTZStream(struct soap *soap, __ns2__union_PTZStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__union_PTZStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns2__union_VideoAnalyticsStream
#define SOAP_TYPE___ns2__union_VideoAnalyticsStream (1362)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__union_VideoAnalyticsStream(struct soap*, const char*, int, const __ns2__union_VideoAnalyticsStream *, const char*);
SOAP_FMAC3 __ns2__union_VideoAnalyticsStream * SOAP_FMAC4 soap_in___ns2__union_VideoAnalyticsStream(struct soap*, const char*, __ns2__union_VideoAnalyticsStream *, const char*);

#ifndef soap_write___ns2__union_VideoAnalyticsStream
#define soap_write___ns2__union_VideoAnalyticsStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "-ns2:union-VideoAnalyticsStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_VideoAnalyticsStream * SOAP_FMAC4 soap_get___ns2__union_VideoAnalyticsStream(struct soap*, __ns2__union_VideoAnalyticsStream *, const char*, const char*);

#ifndef soap_read___ns2__union_VideoAnalyticsStream
#define soap_read___ns2__union_VideoAnalyticsStream(soap, data) ( soap_begin_recv(soap) || !soap_get___ns2__union_VideoAnalyticsStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 __ns2__union_VideoAnalyticsStream * SOAP_FMAC2 soap_instantiate___ns2__union_VideoAnalyticsStream(struct soap*, int, const char*, const char*, size_t*);

inline __ns2__union_VideoAnalyticsStream * soap_new___ns2__union_VideoAnalyticsStream(struct soap *soap, int n = -1) { return soap_instantiate___ns2__union_VideoAnalyticsStream(soap, n, NULL, NULL, NULL); }

inline __ns2__union_VideoAnalyticsStream * soap_new_req___ns2__union_VideoAnalyticsStream(struct soap *soap, const union _ns2__union_VideoAnalyticsStream& union_VideoAnalyticsStream) { __ns2__union_VideoAnalyticsStream *_p = soap_instantiate___ns2__union_VideoAnalyticsStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_VideoAnalyticsStream::union_VideoAnalyticsStream = union_VideoAnalyticsStream; } return _p; }

inline __ns2__union_VideoAnalyticsStream * soap_new_set___ns2__union_VideoAnalyticsStream(struct soap *soap, int __union_VideoAnalyticsStream, const union _ns2__union_VideoAnalyticsStream& union_VideoAnalyticsStream) { __ns2__union_VideoAnalyticsStream *_p = soap_instantiate___ns2__union_VideoAnalyticsStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_VideoAnalyticsStream::__union_VideoAnalyticsStream = __union_VideoAnalyticsStream; _p->__ns2__union_VideoAnalyticsStream::union_VideoAnalyticsStream = union_VideoAnalyticsStream; } return _p; }

inline void soap_delete___ns2__union_VideoAnalyticsStream(struct soap *soap, __ns2__union_VideoAnalyticsStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__union_VideoAnalyticsStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns2__union_MetadataStream
#define SOAP_TYPE___ns2__union_MetadataStream (1350)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__union_MetadataStream(struct soap*, const char*, int, const __ns2__union_MetadataStream *, const char*);
SOAP_FMAC3 __ns2__union_MetadataStream * SOAP_FMAC4 soap_in___ns2__union_MetadataStream(struct soap*, const char*, __ns2__union_MetadataStream *, const char*);

#ifndef soap_write___ns2__union_MetadataStream
#define soap_write___ns2__union_MetadataStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "-ns2:union-MetadataStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_MetadataStream * SOAP_FMAC4 soap_get___ns2__union_MetadataStream(struct soap*, __ns2__union_MetadataStream *, const char*, const char*);

#ifndef soap_read___ns2__union_MetadataStream
#define soap_read___ns2__union_MetadataStream(soap, data) ( soap_begin_recv(soap) || !soap_get___ns2__union_MetadataStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 __ns2__union_MetadataStream * SOAP_FMAC2 soap_instantiate___ns2__union_MetadataStream(struct soap*, int, const char*, const char*, size_t*);

inline __ns2__union_MetadataStream * soap_new___ns2__union_MetadataStream(struct soap *soap, int n = -1) { return soap_instantiate___ns2__union_MetadataStream(soap, n, NULL, NULL, NULL); }

inline __ns2__union_MetadataStream * soap_new_req___ns2__union_MetadataStream(struct soap *soap, const union _ns2__union_MetadataStream& union_MetadataStream) { __ns2__union_MetadataStream *_p = soap_instantiate___ns2__union_MetadataStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_MetadataStream::union_MetadataStream = union_MetadataStream; } return _p; }

inline __ns2__union_MetadataStream * soap_new_set___ns2__union_MetadataStream(struct soap *soap, int __union_MetadataStream, const union _ns2__union_MetadataStream& union_MetadataStream) { __ns2__union_MetadataStream *_p = soap_instantiate___ns2__union_MetadataStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_MetadataStream::__union_MetadataStream = __union_MetadataStream; _p->__ns2__union_MetadataStream::union_MetadataStream = union_MetadataStream; } return _p; }

inline void soap_delete___ns2__union_MetadataStream(struct soap *soap, __ns2__union_MetadataStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__union_MetadataStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ConfigDescription_Messages
#define SOAP_TYPE__ns2__ConfigDescription_Messages (1337)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ConfigDescription_Messages(struct soap*, const char*, int, const _ns2__ConfigDescription_Messages *, const char*);
SOAP_FMAC3 _ns2__ConfigDescription_Messages * SOAP_FMAC4 soap_in__ns2__ConfigDescription_Messages(struct soap*, const char*, _ns2__ConfigDescription_Messages *, const char*);

#ifndef soap_write__ns2__ConfigDescription_Messages
#define soap_write__ns2__ConfigDescription_Messages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ConfigDescription-Messages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ConfigDescription_Messages * SOAP_FMAC4 soap_get__ns2__ConfigDescription_Messages(struct soap*, _ns2__ConfigDescription_Messages *, const char*, const char*);

#ifndef soap_read__ns2__ConfigDescription_Messages
#define soap_read__ns2__ConfigDescription_Messages(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ConfigDescription_Messages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ConfigDescription_Messages * SOAP_FMAC2 soap_instantiate__ns2__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ConfigDescription_Messages * soap_new__ns2__ConfigDescription_Messages(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ConfigDescription_Messages(soap, n, NULL, NULL, NULL); }

inline _ns2__ConfigDescription_Messages * soap_new_req__ns2__ConfigDescription_Messages(struct soap *soap, const std::string& ParentTopic) { _ns2__ConfigDescription_Messages *_p = soap_instantiate__ns2__ConfigDescription_Messages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ConfigDescription_Messages::ParentTopic = ParentTopic; } return _p; }

inline _ns2__ConfigDescription_Messages * soap_new_set__ns2__ConfigDescription_Messages(struct soap *soap, ns2__ItemListDescription *Source, ns2__ItemListDescription *Key, ns2__ItemListDescription *Data, ns2__MessageDescriptionExtension *Extension, bool *IsProperty, char *__anyAttribute, const std::string& ParentTopic) { _ns2__ConfigDescription_Messages *_p = soap_instantiate__ns2__ConfigDescription_Messages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ConfigDescription_Messages::Source = Source; _p->_ns2__ConfigDescription_Messages::Key = Key; _p->_ns2__ConfigDescription_Messages::Data = Data; _p->_ns2__ConfigDescription_Messages::Extension = Extension; _p->_ns2__ConfigDescription_Messages::IsProperty = IsProperty; _p->_ns2__ConfigDescription_Messages::__anyAttribute = __anyAttribute; _p->_ns2__ConfigDescription_Messages::ParentTopic = ParentTopic; } return _p; }

inline void soap_delete__ns2__ConfigDescription_Messages(struct soap *soap, _ns2__ConfigDescription_Messages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ConfigDescription_Messages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__Behaviour_Idle
#define SOAP_TYPE__ns2__Behaviour_Idle (1322)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__Behaviour_Idle(struct soap*, const char*, int, const _ns2__Behaviour_Idle *, const char*);
SOAP_FMAC3 _ns2__Behaviour_Idle * SOAP_FMAC4 soap_in__ns2__Behaviour_Idle(struct soap*, const char*, _ns2__Behaviour_Idle *, const char*);

#ifndef soap_write__ns2__Behaviour_Idle
#define soap_write__ns2__Behaviour_Idle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Behaviour-Idle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__Behaviour_Idle * SOAP_FMAC4 soap_get__ns2__Behaviour_Idle(struct soap*, _ns2__Behaviour_Idle *, const char*, const char*);

#ifndef soap_read__ns2__Behaviour_Idle
#define soap_read__ns2__Behaviour_Idle(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__Behaviour_Idle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__Behaviour_Idle * SOAP_FMAC2 soap_instantiate__ns2__Behaviour_Idle(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__Behaviour_Idle * soap_new__ns2__Behaviour_Idle(struct soap *soap, int n = -1) { return soap_instantiate__ns2__Behaviour_Idle(soap, n, NULL, NULL, NULL); }

inline _ns2__Behaviour_Idle * soap_new_req__ns2__Behaviour_Idle(struct soap *soap) { _ns2__Behaviour_Idle *_p = soap_instantiate__ns2__Behaviour_Idle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns2__Behaviour_Idle * soap_new_set__ns2__Behaviour_Idle(struct soap *soap, const std::vector<char * >& __any) { _ns2__Behaviour_Idle *_p = soap_instantiate__ns2__Behaviour_Idle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__Behaviour_Idle::__any = __any; } return _p; }

inline void soap_delete__ns2__Behaviour_Idle(struct soap *soap, _ns2__Behaviour_Idle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__Behaviour_Idle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__Behaviour_Removed
#define SOAP_TYPE__ns2__Behaviour_Removed (1320)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__Behaviour_Removed(struct soap*, const char*, int, const _ns2__Behaviour_Removed *, const char*);
SOAP_FMAC3 _ns2__Behaviour_Removed * SOAP_FMAC4 soap_in__ns2__Behaviour_Removed(struct soap*, const char*, _ns2__Behaviour_Removed *, const char*);

#ifndef soap_write__ns2__Behaviour_Removed
#define soap_write__ns2__Behaviour_Removed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Behaviour-Removed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__Behaviour_Removed * SOAP_FMAC4 soap_get__ns2__Behaviour_Removed(struct soap*, _ns2__Behaviour_Removed *, const char*, const char*);

#ifndef soap_read__ns2__Behaviour_Removed
#define soap_read__ns2__Behaviour_Removed(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__Behaviour_Removed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__Behaviour_Removed * SOAP_FMAC2 soap_instantiate__ns2__Behaviour_Removed(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__Behaviour_Removed * soap_new__ns2__Behaviour_Removed(struct soap *soap, int n = -1) { return soap_instantiate__ns2__Behaviour_Removed(soap, n, NULL, NULL, NULL); }

inline _ns2__Behaviour_Removed * soap_new_req__ns2__Behaviour_Removed(struct soap *soap) { _ns2__Behaviour_Removed *_p = soap_instantiate__ns2__Behaviour_Removed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns2__Behaviour_Removed * soap_new_set__ns2__Behaviour_Removed(struct soap *soap, const std::vector<char * >& __any) { _ns2__Behaviour_Removed *_p = soap_instantiate__ns2__Behaviour_Removed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__Behaviour_Removed::__any = __any; } return _p; }

inline void soap_delete__ns2__Behaviour_Removed(struct soap *soap, _ns2__Behaviour_Removed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__Behaviour_Removed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ClassDescriptor_ClassCandidate
#define SOAP_TYPE__ns2__ClassDescriptor_ClassCandidate (1302)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ClassDescriptor_ClassCandidate(struct soap*, const char*, int, const _ns2__ClassDescriptor_ClassCandidate *, const char*);
SOAP_FMAC3 _ns2__ClassDescriptor_ClassCandidate * SOAP_FMAC4 soap_in__ns2__ClassDescriptor_ClassCandidate(struct soap*, const char*, _ns2__ClassDescriptor_ClassCandidate *, const char*);

#ifndef soap_write__ns2__ClassDescriptor_ClassCandidate
#define soap_write__ns2__ClassDescriptor_ClassCandidate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ClassDescriptor-ClassCandidate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ClassDescriptor_ClassCandidate * SOAP_FMAC4 soap_get__ns2__ClassDescriptor_ClassCandidate(struct soap*, _ns2__ClassDescriptor_ClassCandidate *, const char*, const char*);

#ifndef soap_read__ns2__ClassDescriptor_ClassCandidate
#define soap_read__ns2__ClassDescriptor_ClassCandidate(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ClassDescriptor_ClassCandidate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ClassDescriptor_ClassCandidate * SOAP_FMAC2 soap_instantiate__ns2__ClassDescriptor_ClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ClassDescriptor_ClassCandidate * soap_new__ns2__ClassDescriptor_ClassCandidate(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ClassDescriptor_ClassCandidate(soap, n, NULL, NULL, NULL); }

inline _ns2__ClassDescriptor_ClassCandidate * soap_new_req__ns2__ClassDescriptor_ClassCandidate(struct soap *soap, enum ns2__ClassType Type, float Likelihood) { _ns2__ClassDescriptor_ClassCandidate *_p = soap_instantiate__ns2__ClassDescriptor_ClassCandidate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ClassDescriptor_ClassCandidate::Type = Type; _p->_ns2__ClassDescriptor_ClassCandidate::Likelihood = Likelihood; } return _p; }

inline _ns2__ClassDescriptor_ClassCandidate * soap_new_set__ns2__ClassDescriptor_ClassCandidate(struct soap *soap, enum ns2__ClassType Type, float Likelihood) { _ns2__ClassDescriptor_ClassCandidate *_p = soap_instantiate__ns2__ClassDescriptor_ClassCandidate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ClassDescriptor_ClassCandidate::Type = Type; _p->_ns2__ClassDescriptor_ClassCandidate::Likelihood = Likelihood; } return _p; }

inline void soap_delete__ns2__ClassDescriptor_ClassCandidate(struct soap *soap, _ns2__ClassDescriptor_ClassCandidate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ClassDescriptor_ClassCandidate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ColorDescriptor_ColorCluster
#define SOAP_TYPE__ns2__ColorDescriptor_ColorCluster (1296)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ColorDescriptor_ColorCluster(struct soap*, const char*, int, const _ns2__ColorDescriptor_ColorCluster *, const char*);
SOAP_FMAC3 _ns2__ColorDescriptor_ColorCluster * SOAP_FMAC4 soap_in__ns2__ColorDescriptor_ColorCluster(struct soap*, const char*, _ns2__ColorDescriptor_ColorCluster *, const char*);

#ifndef soap_write__ns2__ColorDescriptor_ColorCluster
#define soap_write__ns2__ColorDescriptor_ColorCluster(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ColorDescriptor-ColorCluster", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ColorDescriptor_ColorCluster * SOAP_FMAC4 soap_get__ns2__ColorDescriptor_ColorCluster(struct soap*, _ns2__ColorDescriptor_ColorCluster *, const char*, const char*);

#ifndef soap_read__ns2__ColorDescriptor_ColorCluster
#define soap_read__ns2__ColorDescriptor_ColorCluster(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ColorDescriptor_ColorCluster(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ColorDescriptor_ColorCluster * SOAP_FMAC2 soap_instantiate__ns2__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ColorDescriptor_ColorCluster * soap_new__ns2__ColorDescriptor_ColorCluster(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ColorDescriptor_ColorCluster(soap, n, NULL, NULL, NULL); }

inline _ns2__ColorDescriptor_ColorCluster * soap_new_req__ns2__ColorDescriptor_ColorCluster(struct soap *soap, ns2__Color *Color) { _ns2__ColorDescriptor_ColorCluster *_p = soap_instantiate__ns2__ColorDescriptor_ColorCluster(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ColorDescriptor_ColorCluster::Color = Color; } return _p; }

inline _ns2__ColorDescriptor_ColorCluster * soap_new_set__ns2__ColorDescriptor_ColorCluster(struct soap *soap, ns2__Color *Color, float *Weight, ns2__ColorCovariance *Covariance) { _ns2__ColorDescriptor_ColorCluster *_p = soap_instantiate__ns2__ColorDescriptor_ColorCluster(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ColorDescriptor_ColorCluster::Color = Color; _p->_ns2__ColorDescriptor_ColorCluster::Weight = Weight; _p->_ns2__ColorDescriptor_ColorCluster::Covariance = Covariance; } return _p; }

inline void soap_delete__ns2__ColorDescriptor_ColorCluster(struct soap *soap, _ns2__ColorDescriptor_ColorCluster *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ColorDescriptor_ColorCluster(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__ns2__ItemListDescription_ElementItemDescription (1282)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ItemListDescription_ElementItemDescription(struct soap*, const char*, int, const _ns2__ItemListDescription_ElementItemDescription *, const char*);
SOAP_FMAC3 _ns2__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_in__ns2__ItemListDescription_ElementItemDescription(struct soap*, const char*, _ns2__ItemListDescription_ElementItemDescription *, const char*);

#ifndef soap_write__ns2__ItemListDescription_ElementItemDescription
#define soap_write__ns2__ItemListDescription_ElementItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemListDescription-ElementItemDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_get__ns2__ItemListDescription_ElementItemDescription(struct soap*, _ns2__ItemListDescription_ElementItemDescription *, const char*, const char*);

#ifndef soap_read__ns2__ItemListDescription_ElementItemDescription
#define soap_read__ns2__ItemListDescription_ElementItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ItemListDescription_ElementItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ItemListDescription_ElementItemDescription * SOAP_FMAC2 soap_instantiate__ns2__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ItemListDescription_ElementItemDescription * soap_new__ns2__ItemListDescription_ElementItemDescription(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ItemListDescription_ElementItemDescription(soap, n, NULL, NULL, NULL); }

inline _ns2__ItemListDescription_ElementItemDescription * soap_new_req__ns2__ItemListDescription_ElementItemDescription(struct soap *soap, const std::string& Name, const std::string& Type) { _ns2__ItemListDescription_ElementItemDescription *_p = soap_instantiate__ns2__ItemListDescription_ElementItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemListDescription_ElementItemDescription::Name = Name; _p->_ns2__ItemListDescription_ElementItemDescription::Type = Type; } return _p; }

inline _ns2__ItemListDescription_ElementItemDescription * soap_new_set__ns2__ItemListDescription_ElementItemDescription(struct soap *soap, const std::string& Name, const std::string& Type) { _ns2__ItemListDescription_ElementItemDescription *_p = soap_instantiate__ns2__ItemListDescription_ElementItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemListDescription_ElementItemDescription::Name = Name; _p->_ns2__ItemListDescription_ElementItemDescription::Type = Type; } return _p; }

inline void soap_delete__ns2__ItemListDescription_ElementItemDescription(struct soap *soap, _ns2__ItemListDescription_ElementItemDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ItemListDescription_ElementItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__ns2__ItemListDescription_SimpleItemDescription (1279)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ItemListDescription_SimpleItemDescription(struct soap*, const char*, int, const _ns2__ItemListDescription_SimpleItemDescription *, const char*);
SOAP_FMAC3 _ns2__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_in__ns2__ItemListDescription_SimpleItemDescription(struct soap*, const char*, _ns2__ItemListDescription_SimpleItemDescription *, const char*);

#ifndef soap_write__ns2__ItemListDescription_SimpleItemDescription
#define soap_write__ns2__ItemListDescription_SimpleItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemListDescription-SimpleItemDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_get__ns2__ItemListDescription_SimpleItemDescription(struct soap*, _ns2__ItemListDescription_SimpleItemDescription *, const char*, const char*);

#ifndef soap_read__ns2__ItemListDescription_SimpleItemDescription
#define soap_read__ns2__ItemListDescription_SimpleItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ItemListDescription_SimpleItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ItemListDescription_SimpleItemDescription * SOAP_FMAC2 soap_instantiate__ns2__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ItemListDescription_SimpleItemDescription * soap_new__ns2__ItemListDescription_SimpleItemDescription(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ItemListDescription_SimpleItemDescription(soap, n, NULL, NULL, NULL); }

inline _ns2__ItemListDescription_SimpleItemDescription * soap_new_req__ns2__ItemListDescription_SimpleItemDescription(struct soap *soap, const std::string& Name, const std::string& Type) { _ns2__ItemListDescription_SimpleItemDescription *_p = soap_instantiate__ns2__ItemListDescription_SimpleItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemListDescription_SimpleItemDescription::Name = Name; _p->_ns2__ItemListDescription_SimpleItemDescription::Type = Type; } return _p; }

inline _ns2__ItemListDescription_SimpleItemDescription * soap_new_set__ns2__ItemListDescription_SimpleItemDescription(struct soap *soap, const std::string& Name, const std::string& Type) { _ns2__ItemListDescription_SimpleItemDescription *_p = soap_instantiate__ns2__ItemListDescription_SimpleItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemListDescription_SimpleItemDescription::Name = Name; _p->_ns2__ItemListDescription_SimpleItemDescription::Type = Type; } return _p; }

inline void soap_delete__ns2__ItemListDescription_SimpleItemDescription(struct soap *soap, _ns2__ItemListDescription_SimpleItemDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ItemListDescription_SimpleItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ItemList_ElementItem
#define SOAP_TYPE__ns2__ItemList_ElementItem (1273)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ItemList_ElementItem(struct soap*, const char*, int, const _ns2__ItemList_ElementItem *, const char*);
SOAP_FMAC3 _ns2__ItemList_ElementItem * SOAP_FMAC4 soap_in__ns2__ItemList_ElementItem(struct soap*, const char*, _ns2__ItemList_ElementItem *, const char*);

#ifndef soap_write__ns2__ItemList_ElementItem
#define soap_write__ns2__ItemList_ElementItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemList-ElementItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ItemList_ElementItem * SOAP_FMAC4 soap_get__ns2__ItemList_ElementItem(struct soap*, _ns2__ItemList_ElementItem *, const char*, const char*);

#ifndef soap_read__ns2__ItemList_ElementItem
#define soap_read__ns2__ItemList_ElementItem(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ItemList_ElementItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__ns2__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ItemList_ElementItem * soap_new__ns2__ItemList_ElementItem(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ItemList_ElementItem(soap, n, NULL, NULL, NULL); }

inline _ns2__ItemList_ElementItem * soap_new_req__ns2__ItemList_ElementItem(struct soap *soap, const std::string& Name) { _ns2__ItemList_ElementItem *_p = soap_instantiate__ns2__ItemList_ElementItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemList_ElementItem::Name = Name; } return _p; }

inline _ns2__ItemList_ElementItem * soap_new_set__ns2__ItemList_ElementItem(struct soap *soap, char *__any, const std::string& Name) { _ns2__ItemList_ElementItem *_p = soap_instantiate__ns2__ItemList_ElementItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemList_ElementItem::__any = __any; _p->_ns2__ItemList_ElementItem::Name = Name; } return _p; }

inline void soap_delete__ns2__ItemList_ElementItem(struct soap *soap, _ns2__ItemList_ElementItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ItemList_ElementItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__ItemList_SimpleItem
#define SOAP_TYPE__ns2__ItemList_SimpleItem (1270)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ItemList_SimpleItem(struct soap*, const char*, int, const _ns2__ItemList_SimpleItem *, const char*);
SOAP_FMAC3 _ns2__ItemList_SimpleItem * SOAP_FMAC4 soap_in__ns2__ItemList_SimpleItem(struct soap*, const char*, _ns2__ItemList_SimpleItem *, const char*);

#ifndef soap_write__ns2__ItemList_SimpleItem
#define soap_write__ns2__ItemList_SimpleItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemList-SimpleItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__ItemList_SimpleItem * SOAP_FMAC4 soap_get__ns2__ItemList_SimpleItem(struct soap*, _ns2__ItemList_SimpleItem *, const char*, const char*);

#ifndef soap_read__ns2__ItemList_SimpleItem
#define soap_read__ns2__ItemList_SimpleItem(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__ItemList_SimpleItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__ns2__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ItemList_SimpleItem * soap_new__ns2__ItemList_SimpleItem(struct soap *soap, int n = -1) { return soap_instantiate__ns2__ItemList_SimpleItem(soap, n, NULL, NULL, NULL); }

inline _ns2__ItemList_SimpleItem * soap_new_req__ns2__ItemList_SimpleItem(struct soap *soap, const std::string& Name, const std::string& Value) { _ns2__ItemList_SimpleItem *_p = soap_instantiate__ns2__ItemList_SimpleItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemList_SimpleItem::Name = Name; _p->_ns2__ItemList_SimpleItem::Value = Value; } return _p; }

inline _ns2__ItemList_SimpleItem * soap_new_set__ns2__ItemList_SimpleItem(struct soap *soap, const std::string& Name, const std::string& Value) { _ns2__ItemList_SimpleItem *_p = soap_instantiate__ns2__ItemList_SimpleItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__ItemList_SimpleItem::Name = Name; _p->_ns2__ItemList_SimpleItem::Value = Value; } return _p; }

inline void soap_delete__ns2__ItemList_SimpleItem(struct soap *soap, _ns2__ItemList_SimpleItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__ItemList_SimpleItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__ns2__EventSubscription_SubscriptionPolicy (1018)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__EventSubscription_SubscriptionPolicy(struct soap*, const char*, int, const _ns2__EventSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _ns2__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__ns2__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _ns2__EventSubscription_SubscriptionPolicy *, const char*);

#ifndef soap_write__ns2__EventSubscription_SubscriptionPolicy
#define soap_write__ns2__EventSubscription_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EventSubscription-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__ns2__EventSubscription_SubscriptionPolicy(struct soap*, _ns2__EventSubscription_SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read__ns2__EventSubscription_SubscriptionPolicy
#define soap_read__ns2__EventSubscription_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__EventSubscription_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__ns2__EventSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__EventSubscription_SubscriptionPolicy * soap_new__ns2__EventSubscription_SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate__ns2__EventSubscription_SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline _ns2__EventSubscription_SubscriptionPolicy * soap_new_req__ns2__EventSubscription_SubscriptionPolicy(struct soap *soap) { _ns2__EventSubscription_SubscriptionPolicy *_p = soap_instantiate__ns2__EventSubscription_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns2__EventSubscription_SubscriptionPolicy * soap_new_set__ns2__EventSubscription_SubscriptionPolicy(struct soap *soap, const std::vector<char * >& __any) { _ns2__EventSubscription_SubscriptionPolicy *_p = soap_instantiate__ns2__EventSubscription_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__EventSubscription_SubscriptionPolicy::__any = __any; } return _p; }

inline void soap_delete__ns2__EventSubscription_SubscriptionPolicy(struct soap *soap, _ns2__EventSubscription_SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__EventSubscription_SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobReference__
#define SOAP_TYPE_ns2__RecordingJobReference__ (935)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobReference__(struct soap*, const char*, int, const ns2__RecordingJobReference__ *, const char*);
SOAP_FMAC3 ns2__RecordingJobReference__ * SOAP_FMAC4 soap_in_ns2__RecordingJobReference__(struct soap*, const char*, ns2__RecordingJobReference__ *, const char*);

#ifndef soap_write_ns2__RecordingJobReference__
#define soap_write_ns2__RecordingJobReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobReference__ * SOAP_FMAC4 soap_get_ns2__RecordingJobReference__(struct soap*, ns2__RecordingJobReference__ *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobReference__
#define soap_read_ns2__RecordingJobReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobReference__ * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobReference__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobReference__ * soap_new_ns2__RecordingJobReference__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobReference__(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobReference__ * soap_new_req_ns2__RecordingJobReference__(struct soap *soap, const std::string& __item) { ns2__RecordingJobReference__ *_p = soap_instantiate_ns2__RecordingJobReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobReference__::__item = __item; } return _p; }

inline ns2__RecordingJobReference__ * soap_new_set_ns2__RecordingJobReference__(struct soap *soap, const std::string& __item, char *__item1) { ns2__RecordingJobReference__ *_p = soap_instantiate_ns2__RecordingJobReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobReference__(struct soap *soap, ns2__RecordingJobReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobReference
#define SOAP_TYPE_ns2__RecordingJobReference (934)
#endif

#define soap_default_ns2__RecordingJobReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RecordingJobReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__RecordingJobReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RecordingJobReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__RecordingJobReference
#define soap_write_ns2__RecordingJobReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RecordingJobReference(soap, data), 0) || soap_put_ns2__RecordingJobReference(soap, data, "ns2:RecordingJobReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__RecordingJobReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobReference
#define soap_read_ns2__RecordingJobReference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__RecordingJobReference soap_instantiate_std__string


#define soap_copy_ns2__RecordingJobReference soap_copy_std__string

#ifndef SOAP_TYPE_ns2__JobToken__
#define SOAP_TYPE_ns2__JobToken__ (933)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JobToken__(struct soap*, const char*, int, const ns2__JobToken__ *, const char*);
SOAP_FMAC3 ns2__JobToken__ * SOAP_FMAC4 soap_in_ns2__JobToken__(struct soap*, const char*, ns2__JobToken__ *, const char*);

#ifndef soap_write_ns2__JobToken__
#define soap_write_ns2__JobToken__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:JobToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JobToken__ * SOAP_FMAC4 soap_get_ns2__JobToken__(struct soap*, ns2__JobToken__ *, const char*, const char*);

#ifndef soap_read_ns2__JobToken__
#define soap_read_ns2__JobToken__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__JobToken__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__JobToken__ * SOAP_FMAC2 soap_instantiate_ns2__JobToken__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__JobToken__ * soap_new_ns2__JobToken__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__JobToken__(soap, n, NULL, NULL, NULL); }

inline ns2__JobToken__ * soap_new_req_ns2__JobToken__(struct soap *soap, const std::string& __item) { ns2__JobToken__ *_p = soap_instantiate_ns2__JobToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JobToken__::__item = __item; } return _p; }

inline ns2__JobToken__ * soap_new_set_ns2__JobToken__(struct soap *soap, const std::string& __item, char *__item1) { ns2__JobToken__ *_p = soap_instantiate_ns2__JobToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JobToken__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__JobToken__(struct soap *soap, ns2__JobToken__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__JobToken__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__JobToken
#define SOAP_TYPE_ns2__JobToken (932)
#endif

#define soap_default_ns2__JobToken(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__JobToken(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JobToken(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__JobToken(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__JobToken(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__JobToken
#define soap_write_ns2__JobToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__JobToken(soap, data), 0) || soap_put_ns2__JobToken(soap, data, "ns2:JobToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__JobToken(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__JobToken
#define soap_read_ns2__JobToken(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__JobToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__JobToken soap_instantiate_std__string


#define soap_copy_ns2__JobToken soap_copy_std__string

#ifndef SOAP_TYPE_ns2__TrackReference__
#define SOAP_TYPE_ns2__TrackReference__ (931)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackReference__(struct soap*, const char*, int, const ns2__TrackReference__ *, const char*);
SOAP_FMAC3 ns2__TrackReference__ * SOAP_FMAC4 soap_in_ns2__TrackReference__(struct soap*, const char*, ns2__TrackReference__ *, const char*);

#ifndef soap_write_ns2__TrackReference__
#define soap_write_ns2__TrackReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TrackReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackReference__ * SOAP_FMAC4 soap_get_ns2__TrackReference__(struct soap*, ns2__TrackReference__ *, const char*, const char*);

#ifndef soap_read_ns2__TrackReference__
#define soap_read_ns2__TrackReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TrackReference__ * SOAP_FMAC2 soap_instantiate_ns2__TrackReference__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TrackReference__ * soap_new_ns2__TrackReference__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TrackReference__(soap, n, NULL, NULL, NULL); }

inline ns2__TrackReference__ * soap_new_req_ns2__TrackReference__(struct soap *soap, const std::string& __item) { ns2__TrackReference__ *_p = soap_instantiate_ns2__TrackReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackReference__::__item = __item; } return _p; }

inline ns2__TrackReference__ * soap_new_set_ns2__TrackReference__(struct soap *soap, const std::string& __item, char *__item1) { ns2__TrackReference__ *_p = soap_instantiate_ns2__TrackReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TrackReference__(struct soap *soap, ns2__TrackReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TrackReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TrackReference
#define SOAP_TYPE_ns2__TrackReference (930)
#endif

#define soap_default_ns2__TrackReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__TrackReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__TrackReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TrackReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__TrackReference
#define soap_write_ns2__TrackReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__TrackReference(soap, data), 0) || soap_put_ns2__TrackReference(soap, data, "ns2:TrackReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__TrackReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__TrackReference
#define soap_read_ns2__TrackReference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__TrackReference soap_instantiate_std__string


#define soap_copy_ns2__TrackReference soap_copy_std__string

#ifndef SOAP_TYPE_ns2__RecordingReference__
#define SOAP_TYPE_ns2__RecordingReference__ (929)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingReference__(struct soap*, const char*, int, const ns2__RecordingReference__ *, const char*);
SOAP_FMAC3 ns2__RecordingReference__ * SOAP_FMAC4 soap_in_ns2__RecordingReference__(struct soap*, const char*, ns2__RecordingReference__ *, const char*);

#ifndef soap_write_ns2__RecordingReference__
#define soap_write_ns2__RecordingReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingReference__ * SOAP_FMAC4 soap_get_ns2__RecordingReference__(struct soap*, ns2__RecordingReference__ *, const char*, const char*);

#ifndef soap_read_ns2__RecordingReference__
#define soap_read_ns2__RecordingReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingReference__ * SOAP_FMAC2 soap_instantiate_ns2__RecordingReference__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingReference__ * soap_new_ns2__RecordingReference__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingReference__(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingReference__ * soap_new_req_ns2__RecordingReference__(struct soap *soap, const std::string& __item) { ns2__RecordingReference__ *_p = soap_instantiate_ns2__RecordingReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingReference__::__item = __item; } return _p; }

inline ns2__RecordingReference__ * soap_new_set_ns2__RecordingReference__(struct soap *soap, const std::string& __item, char *__item1) { ns2__RecordingReference__ *_p = soap_instantiate_ns2__RecordingReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingReference__(struct soap *soap, ns2__RecordingReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingReference
#define SOAP_TYPE_ns2__RecordingReference (928)
#endif

#define soap_default_ns2__RecordingReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RecordingReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__RecordingReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RecordingReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__RecordingReference
#define soap_write_ns2__RecordingReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RecordingReference(soap, data), 0) || soap_put_ns2__RecordingReference(soap, data, "ns2:RecordingReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__RecordingReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__RecordingReference
#define soap_read_ns2__RecordingReference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__RecordingReference soap_instantiate_std__string


#define soap_copy_ns2__RecordingReference soap_copy_std__string

#ifndef SOAP_TYPE_ns2__ReceiverReference__
#define SOAP_TYPE_ns2__ReceiverReference__ (927)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverReference__(struct soap*, const char*, int, const ns2__ReceiverReference__ *, const char*);
SOAP_FMAC3 ns2__ReceiverReference__ * SOAP_FMAC4 soap_in_ns2__ReceiverReference__(struct soap*, const char*, ns2__ReceiverReference__ *, const char*);

#ifndef soap_write_ns2__ReceiverReference__
#define soap_write_ns2__ReceiverReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReceiverReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverReference__ * SOAP_FMAC4 soap_get_ns2__ReceiverReference__(struct soap*, ns2__ReceiverReference__ *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverReference__
#define soap_read_ns2__ReceiverReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReceiverReference__ * SOAP_FMAC2 soap_instantiate_ns2__ReceiverReference__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReceiverReference__ * soap_new_ns2__ReceiverReference__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReceiverReference__(soap, n, NULL, NULL, NULL); }

inline ns2__ReceiverReference__ * soap_new_req_ns2__ReceiverReference__(struct soap *soap, const std::string& __item) { ns2__ReceiverReference__ *_p = soap_instantiate_ns2__ReceiverReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverReference__::__item = __item; } return _p; }

inline ns2__ReceiverReference__ * soap_new_set_ns2__ReceiverReference__(struct soap *soap, const std::string& __item, char *__item1) { ns2__ReceiverReference__ *_p = soap_instantiate_ns2__ReceiverReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReceiverReference__(struct soap *soap, ns2__ReceiverReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReceiverReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReceiverReference
#define SOAP_TYPE_ns2__ReceiverReference (926)
#endif

#define soap_default_ns2__ReceiverReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ReceiverReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__ReceiverReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReceiverReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__ReceiverReference
#define soap_write_ns2__ReceiverReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ReceiverReference(soap, data), 0) || soap_put_ns2__ReceiverReference(soap, data, "ns2:ReceiverReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__ReceiverReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverReference
#define soap_read_ns2__ReceiverReference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__ReceiverReference soap_instantiate_std__string


#define soap_copy_ns2__ReceiverReference soap_copy_std__string

#ifndef SOAP_TYPE_ns7__FaultCodesType_
#define SOAP_TYPE_ns7__FaultCodesType_ (925)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__FaultCodesType_(struct soap*, const char*, int, const ns7__FaultCodesType_ *, const char*);
SOAP_FMAC3 ns7__FaultCodesType_ * SOAP_FMAC4 soap_in_ns7__FaultCodesType_(struct soap*, const char*, ns7__FaultCodesType_ *, const char*);

#ifndef soap_write_ns7__FaultCodesType_
#define soap_write_ns7__FaultCodesType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:FaultCodesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__FaultCodesType_ * SOAP_FMAC4 soap_get_ns7__FaultCodesType_(struct soap*, ns7__FaultCodesType_ *, const char*, const char*);

#ifndef soap_read_ns7__FaultCodesType_
#define soap_read_ns7__FaultCodesType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__FaultCodesType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__FaultCodesType_ * SOAP_FMAC2 soap_instantiate_ns7__FaultCodesType_(struct soap*, int, const char*, const char*, size_t*);

inline ns7__FaultCodesType_ * soap_new_ns7__FaultCodesType_(struct soap *soap, int n = -1) { return soap_instantiate_ns7__FaultCodesType_(soap, n, NULL, NULL, NULL); }

inline ns7__FaultCodesType_ * soap_new_req_ns7__FaultCodesType_(struct soap *soap, enum ns7__FaultCodesType __item) { ns7__FaultCodesType_ *_p = soap_instantiate_ns7__FaultCodesType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__FaultCodesType_::__item = __item; } return _p; }

inline ns7__FaultCodesType_ * soap_new_set_ns7__FaultCodesType_(struct soap *soap, enum ns7__FaultCodesType __item, char *__item1) { ns7__FaultCodesType_ *_p = soap_instantiate_ns7__FaultCodesType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__FaultCodesType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__FaultCodesType_(struct soap *soap, ns7__FaultCodesType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__FaultCodesType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__RelationshipType_
#define SOAP_TYPE_ns7__RelationshipType_ (923)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__RelationshipType_(struct soap*, const char*, int, const ns7__RelationshipType_ *, const char*);
SOAP_FMAC3 ns7__RelationshipType_ * SOAP_FMAC4 soap_in_ns7__RelationshipType_(struct soap*, const char*, ns7__RelationshipType_ *, const char*);

#ifndef soap_write_ns7__RelationshipType_
#define soap_write_ns7__RelationshipType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:RelationshipType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__RelationshipType_ * SOAP_FMAC4 soap_get_ns7__RelationshipType_(struct soap*, ns7__RelationshipType_ *, const char*, const char*);

#ifndef soap_read_ns7__RelationshipType_
#define soap_read_ns7__RelationshipType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__RelationshipType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__RelationshipType_ * SOAP_FMAC2 soap_instantiate_ns7__RelationshipType_(struct soap*, int, const char*, const char*, size_t*);

inline ns7__RelationshipType_ * soap_new_ns7__RelationshipType_(struct soap *soap, int n = -1) { return soap_instantiate_ns7__RelationshipType_(soap, n, NULL, NULL, NULL); }

inline ns7__RelationshipType_ * soap_new_req_ns7__RelationshipType_(struct soap *soap, enum ns7__RelationshipType __item) { ns7__RelationshipType_ *_p = soap_instantiate_ns7__RelationshipType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__RelationshipType_::__item = __item; } return _p; }

inline ns7__RelationshipType_ * soap_new_set_ns7__RelationshipType_(struct soap *soap, enum ns7__RelationshipType __item, char *__item1) { ns7__RelationshipType_ *_p = soap_instantiate_ns7__RelationshipType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__RelationshipType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__RelationshipType_(struct soap *soap, ns7__RelationshipType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__RelationshipType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__SimpleTopicExpression__
#define SOAP_TYPE_ns6__SimpleTopicExpression__ (921)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SimpleTopicExpression__(struct soap*, const char*, int, const ns6__SimpleTopicExpression__ *, const char*);
SOAP_FMAC3 ns6__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_ns6__SimpleTopicExpression__(struct soap*, const char*, ns6__SimpleTopicExpression__ *, const char*);

#ifndef soap_write_ns6__SimpleTopicExpression__
#define soap_write_ns6__SimpleTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:SimpleTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_ns6__SimpleTopicExpression__(struct soap*, ns6__SimpleTopicExpression__ *, const char*, const char*);

#ifndef soap_read_ns6__SimpleTopicExpression__
#define soap_read_ns6__SimpleTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__SimpleTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_ns6__SimpleTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SimpleTopicExpression__ * soap_new_ns6__SimpleTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_ns6__SimpleTopicExpression__(soap, n, NULL, NULL, NULL); }

inline ns6__SimpleTopicExpression__ * soap_new_req_ns6__SimpleTopicExpression__(struct soap *soap, const std::string& __item) { ns6__SimpleTopicExpression__ *_p = soap_instantiate_ns6__SimpleTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__SimpleTopicExpression__::__item = __item; } return _p; }

inline ns6__SimpleTopicExpression__ * soap_new_set_ns6__SimpleTopicExpression__(struct soap *soap, const std::string& __item, char *__item1) { ns6__SimpleTopicExpression__ *_p = soap_instantiate_ns6__SimpleTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__SimpleTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns6__SimpleTopicExpression__(struct soap *soap, ns6__SimpleTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__SimpleTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__SimpleTopicExpression
#define SOAP_TYPE_ns6__SimpleTopicExpression (920)
#endif

#define soap_default_ns6__SimpleTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__SimpleTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SimpleTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__SimpleTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__SimpleTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns6__SimpleTopicExpression
#define soap_write_ns6__SimpleTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns6__SimpleTopicExpression(soap, data), 0) || soap_put_ns6__SimpleTopicExpression(soap, data, "ns6:SimpleTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__SimpleTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns6__SimpleTopicExpression
#define soap_read_ns6__SimpleTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__SimpleTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns6__SimpleTopicExpression soap_instantiate_std__string


#define soap_copy_ns6__SimpleTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_ns6__ConcreteTopicExpression__
#define SOAP_TYPE_ns6__ConcreteTopicExpression__ (919)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ConcreteTopicExpression__(struct soap*, const char*, int, const ns6__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC3 ns6__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_ns6__ConcreteTopicExpression__(struct soap*, const char*, ns6__ConcreteTopicExpression__ *, const char*);

#ifndef soap_write_ns6__ConcreteTopicExpression__
#define soap_write_ns6__ConcreteTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_ns6__ConcreteTopicExpression__(struct soap*, ns6__ConcreteTopicExpression__ *, const char*, const char*);

#ifndef soap_read_ns6__ConcreteTopicExpression__
#define soap_read_ns6__ConcreteTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__ConcreteTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_ns6__ConcreteTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ConcreteTopicExpression__ * soap_new_ns6__ConcreteTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_ns6__ConcreteTopicExpression__(soap, n, NULL, NULL, NULL); }

inline ns6__ConcreteTopicExpression__ * soap_new_req_ns6__ConcreteTopicExpression__(struct soap *soap, const std::string& __item) { ns6__ConcreteTopicExpression__ *_p = soap_instantiate_ns6__ConcreteTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__ConcreteTopicExpression__::__item = __item; } return _p; }

inline ns6__ConcreteTopicExpression__ * soap_new_set_ns6__ConcreteTopicExpression__(struct soap *soap, const std::string& __item, char *__item1) { ns6__ConcreteTopicExpression__ *_p = soap_instantiate_ns6__ConcreteTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__ConcreteTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns6__ConcreteTopicExpression__(struct soap *soap, ns6__ConcreteTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__ConcreteTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__ConcreteTopicExpression
#define SOAP_TYPE_ns6__ConcreteTopicExpression (918)
#endif

#define soap_default_ns6__ConcreteTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__ConcreteTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ConcreteTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__ConcreteTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__ConcreteTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns6__ConcreteTopicExpression
#define soap_write_ns6__ConcreteTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns6__ConcreteTopicExpression(soap, data), 0) || soap_put_ns6__ConcreteTopicExpression(soap, data, "ns6:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__ConcreteTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns6__ConcreteTopicExpression
#define soap_read_ns6__ConcreteTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__ConcreteTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns6__ConcreteTopicExpression soap_instantiate_std__string


#define soap_copy_ns6__ConcreteTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_ns6__FullTopicExpression__
#define SOAP_TYPE_ns6__FullTopicExpression__ (917)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__FullTopicExpression__(struct soap*, const char*, int, const ns6__FullTopicExpression__ *, const char*);
SOAP_FMAC3 ns6__FullTopicExpression__ * SOAP_FMAC4 soap_in_ns6__FullTopicExpression__(struct soap*, const char*, ns6__FullTopicExpression__ *, const char*);

#ifndef soap_write_ns6__FullTopicExpression__
#define soap_write_ns6__FullTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:FullTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__FullTopicExpression__ * SOAP_FMAC4 soap_get_ns6__FullTopicExpression__(struct soap*, ns6__FullTopicExpression__ *, const char*, const char*);

#ifndef soap_read_ns6__FullTopicExpression__
#define soap_read_ns6__FullTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__FullTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_ns6__FullTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns6__FullTopicExpression__ * soap_new_ns6__FullTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_ns6__FullTopicExpression__(soap, n, NULL, NULL, NULL); }

inline ns6__FullTopicExpression__ * soap_new_req_ns6__FullTopicExpression__(struct soap *soap, const std::string& __item) { ns6__FullTopicExpression__ *_p = soap_instantiate_ns6__FullTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__FullTopicExpression__::__item = __item; } return _p; }

inline ns6__FullTopicExpression__ * soap_new_set_ns6__FullTopicExpression__(struct soap *soap, const std::string& __item, char *__item1) { ns6__FullTopicExpression__ *_p = soap_instantiate_ns6__FullTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__FullTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns6__FullTopicExpression__(struct soap *soap, ns6__FullTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__FullTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__FullTopicExpression
#define SOAP_TYPE_ns6__FullTopicExpression (916)
#endif

#define soap_default_ns6__FullTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__FullTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__FullTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__FullTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__FullTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns6__FullTopicExpression
#define soap_write_ns6__FullTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns6__FullTopicExpression(soap, data), 0) || soap_put_ns6__FullTopicExpression(soap, data, "ns6:FullTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__FullTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns6__FullTopicExpression
#define soap_read_ns6__FullTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__FullTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns6__FullTopicExpression soap_instantiate_std__string


#define soap_copy_ns6__FullTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_ns2__OSDType_
#define SOAP_TYPE_ns2__OSDType_ (915)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDType_(struct soap*, const char*, int, const ns2__OSDType_ *, const char*);
SOAP_FMAC3 ns2__OSDType_ * SOAP_FMAC4 soap_in_ns2__OSDType_(struct soap*, const char*, ns2__OSDType_ *, const char*);

#ifndef soap_write_ns2__OSDType_
#define soap_write_ns2__OSDType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDType_ * SOAP_FMAC4 soap_get_ns2__OSDType_(struct soap*, ns2__OSDType_ *, const char*, const char*);

#ifndef soap_read_ns2__OSDType_
#define soap_read_ns2__OSDType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDType_ * SOAP_FMAC2 soap_instantiate_ns2__OSDType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDType_ * soap_new_ns2__OSDType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDType_(soap, n, NULL, NULL, NULL); }

inline ns2__OSDType_ * soap_new_req_ns2__OSDType_(struct soap *soap, enum ns2__OSDType __item) { ns2__OSDType_ *_p = soap_instantiate_ns2__OSDType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDType_::__item = __item; } return _p; }

inline ns2__OSDType_ * soap_new_set_ns2__OSDType_(struct soap *soap, enum ns2__OSDType __item, char *__item1) { ns2__OSDType_ *_p = soap_instantiate_ns2__OSDType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDType_(struct soap *soap, ns2__OSDType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioClassType__
#define SOAP_TYPE_ns2__AudioClassType__ (913)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioClassType__(struct soap*, const char*, int, const ns2__AudioClassType__ *, const char*);
SOAP_FMAC3 ns2__AudioClassType__ * SOAP_FMAC4 soap_in_ns2__AudioClassType__(struct soap*, const char*, ns2__AudioClassType__ *, const char*);

#ifndef soap_write_ns2__AudioClassType__
#define soap_write_ns2__AudioClassType__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioClassType__ * SOAP_FMAC4 soap_get_ns2__AudioClassType__(struct soap*, ns2__AudioClassType__ *, const char*, const char*);

#ifndef soap_read_ns2__AudioClassType__
#define soap_read_ns2__AudioClassType__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioClassType__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioClassType__ * SOAP_FMAC2 soap_instantiate_ns2__AudioClassType__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioClassType__ * soap_new_ns2__AudioClassType__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioClassType__(soap, n, NULL, NULL, NULL); }

inline ns2__AudioClassType__ * soap_new_req_ns2__AudioClassType__(struct soap *soap, const std::string& __item) { ns2__AudioClassType__ *_p = soap_instantiate_ns2__AudioClassType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioClassType__::__item = __item; } return _p; }

inline ns2__AudioClassType__ * soap_new_set_ns2__AudioClassType__(struct soap *soap, const std::string& __item, char *__item1) { ns2__AudioClassType__ *_p = soap_instantiate_ns2__AudioClassType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioClassType__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioClassType__(struct soap *soap, ns2__AudioClassType__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioClassType__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioClassType
#define SOAP_TYPE_ns2__AudioClassType (912)
#endif

#define soap_default_ns2__AudioClassType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__AudioClassType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioClassType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__AudioClassType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AudioClassType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__AudioClassType
#define soap_write_ns2__AudioClassType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__AudioClassType(soap, data), 0) || soap_put_ns2__AudioClassType(soap, data, "ns2:AudioClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__AudioClassType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__AudioClassType
#define soap_read_ns2__AudioClassType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioClassType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__AudioClassType soap_instantiate_std__string


#define soap_copy_ns2__AudioClassType soap_copy_std__string

#ifndef SOAP_TYPE_ns2__ModeOfOperation_
#define SOAP_TYPE_ns2__ModeOfOperation_ (911)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ModeOfOperation_(struct soap*, const char*, int, const ns2__ModeOfOperation_ *, const char*);
SOAP_FMAC3 ns2__ModeOfOperation_ * SOAP_FMAC4 soap_in_ns2__ModeOfOperation_(struct soap*, const char*, ns2__ModeOfOperation_ *, const char*);

#ifndef soap_write_ns2__ModeOfOperation_
#define soap_write_ns2__ModeOfOperation_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ModeOfOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ModeOfOperation_ * SOAP_FMAC4 soap_get_ns2__ModeOfOperation_(struct soap*, ns2__ModeOfOperation_ *, const char*, const char*);

#ifndef soap_read_ns2__ModeOfOperation_
#define soap_read_ns2__ModeOfOperation_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ModeOfOperation_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ModeOfOperation_ * SOAP_FMAC2 soap_instantiate_ns2__ModeOfOperation_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ModeOfOperation_ * soap_new_ns2__ModeOfOperation_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ModeOfOperation_(soap, n, NULL, NULL, NULL); }

inline ns2__ModeOfOperation_ * soap_new_req_ns2__ModeOfOperation_(struct soap *soap, enum ns2__ModeOfOperation __item) { ns2__ModeOfOperation_ *_p = soap_instantiate_ns2__ModeOfOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ModeOfOperation_::__item = __item; } return _p; }

inline ns2__ModeOfOperation_ * soap_new_set_ns2__ModeOfOperation_(struct soap *soap, enum ns2__ModeOfOperation __item, char *__item1) { ns2__ModeOfOperation_ *_p = soap_instantiate_ns2__ModeOfOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ModeOfOperation_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ModeOfOperation_(struct soap *soap, ns2__ModeOfOperation_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ModeOfOperation_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobState__
#define SOAP_TYPE_ns2__RecordingJobState__ (909)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobState__(struct soap*, const char*, int, const ns2__RecordingJobState__ *, const char*);
SOAP_FMAC3 ns2__RecordingJobState__ * SOAP_FMAC4 soap_in_ns2__RecordingJobState__(struct soap*, const char*, ns2__RecordingJobState__ *, const char*);

#ifndef soap_write_ns2__RecordingJobState__
#define soap_write_ns2__RecordingJobState__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobState__ * SOAP_FMAC4 soap_get_ns2__RecordingJobState__(struct soap*, ns2__RecordingJobState__ *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobState__
#define soap_read_ns2__RecordingJobState__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobState__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobState__ * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobState__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobState__ * soap_new_ns2__RecordingJobState__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobState__(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobState__ * soap_new_req_ns2__RecordingJobState__(struct soap *soap, const std::string& __item) { ns2__RecordingJobState__ *_p = soap_instantiate_ns2__RecordingJobState__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobState__::__item = __item; } return _p; }

inline ns2__RecordingJobState__ * soap_new_set_ns2__RecordingJobState__(struct soap *soap, const std::string& __item, char *__item1) { ns2__RecordingJobState__ *_p = soap_instantiate_ns2__RecordingJobState__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobState__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobState__(struct soap *soap, ns2__RecordingJobState__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobState__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobState
#define SOAP_TYPE_ns2__RecordingJobState (908)
#endif

#define soap_default_ns2__RecordingJobState(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RecordingJobState(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobState(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__RecordingJobState(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RecordingJobState(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__RecordingJobState
#define soap_write_ns2__RecordingJobState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RecordingJobState(soap, data), 0) || soap_put_ns2__RecordingJobState(soap, data, "ns2:RecordingJobState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__RecordingJobState(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobState
#define soap_read_ns2__RecordingJobState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__RecordingJobState soap_instantiate_std__string


#define soap_copy_ns2__RecordingJobState soap_copy_std__string

#ifndef SOAP_TYPE_ns2__RecordingJobMode__
#define SOAP_TYPE_ns2__RecordingJobMode__ (907)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobMode__(struct soap*, const char*, int, const ns2__RecordingJobMode__ *, const char*);
SOAP_FMAC3 ns2__RecordingJobMode__ * SOAP_FMAC4 soap_in_ns2__RecordingJobMode__(struct soap*, const char*, ns2__RecordingJobMode__ *, const char*);

#ifndef soap_write_ns2__RecordingJobMode__
#define soap_write_ns2__RecordingJobMode__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobMode__ * SOAP_FMAC4 soap_get_ns2__RecordingJobMode__(struct soap*, ns2__RecordingJobMode__ *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobMode__
#define soap_read_ns2__RecordingJobMode__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobMode__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobMode__ * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobMode__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobMode__ * soap_new_ns2__RecordingJobMode__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobMode__(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobMode__ * soap_new_req_ns2__RecordingJobMode__(struct soap *soap, const std::string& __item) { ns2__RecordingJobMode__ *_p = soap_instantiate_ns2__RecordingJobMode__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobMode__::__item = __item; } return _p; }

inline ns2__RecordingJobMode__ * soap_new_set_ns2__RecordingJobMode__(struct soap *soap, const std::string& __item, char *__item1) { ns2__RecordingJobMode__ *_p = soap_instantiate_ns2__RecordingJobMode__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobMode__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobMode__(struct soap *soap, ns2__RecordingJobMode__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobMode__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobMode
#define SOAP_TYPE_ns2__RecordingJobMode (906)
#endif

#define soap_default_ns2__RecordingJobMode(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RecordingJobMode(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobMode(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__RecordingJobMode(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RecordingJobMode(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__RecordingJobMode
#define soap_write_ns2__RecordingJobMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__RecordingJobMode(soap, data), 0) || soap_put_ns2__RecordingJobMode(soap, data, "ns2:RecordingJobMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__RecordingJobMode(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobMode
#define soap_read_ns2__RecordingJobMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__RecordingJobMode soap_instantiate_std__string


#define soap_copy_ns2__RecordingJobMode soap_copy_std__string

#ifndef SOAP_TYPE_ns2__TrackType_
#define SOAP_TYPE_ns2__TrackType_ (905)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackType_(struct soap*, const char*, int, const ns2__TrackType_ *, const char*);
SOAP_FMAC3 ns2__TrackType_ * SOAP_FMAC4 soap_in_ns2__TrackType_(struct soap*, const char*, ns2__TrackType_ *, const char*);

#ifndef soap_write_ns2__TrackType_
#define soap_write_ns2__TrackType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TrackType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackType_ * SOAP_FMAC4 soap_get_ns2__TrackType_(struct soap*, ns2__TrackType_ *, const char*, const char*);

#ifndef soap_read_ns2__TrackType_
#define soap_read_ns2__TrackType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TrackType_ * SOAP_FMAC2 soap_instantiate_ns2__TrackType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TrackType_ * soap_new_ns2__TrackType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TrackType_(soap, n, NULL, NULL, NULL); }

inline ns2__TrackType_ * soap_new_req_ns2__TrackType_(struct soap *soap, enum ns2__TrackType __item) { ns2__TrackType_ *_p = soap_instantiate_ns2__TrackType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackType_::__item = __item; } return _p; }

inline ns2__TrackType_ * soap_new_set_ns2__TrackType_(struct soap *soap, enum ns2__TrackType __item, char *__item1) { ns2__TrackType_ *_p = soap_instantiate_ns2__TrackType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TrackType_(struct soap *soap, ns2__TrackType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TrackType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingStatus_
#define SOAP_TYPE_ns2__RecordingStatus_ (903)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingStatus_(struct soap*, const char*, int, const ns2__RecordingStatus_ *, const char*);
SOAP_FMAC3 ns2__RecordingStatus_ * SOAP_FMAC4 soap_in_ns2__RecordingStatus_(struct soap*, const char*, ns2__RecordingStatus_ *, const char*);

#ifndef soap_write_ns2__RecordingStatus_
#define soap_write_ns2__RecordingStatus_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingStatus_ * SOAP_FMAC4 soap_get_ns2__RecordingStatus_(struct soap*, ns2__RecordingStatus_ *, const char*, const char*);

#ifndef soap_read_ns2__RecordingStatus_
#define soap_read_ns2__RecordingStatus_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingStatus_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingStatus_ * SOAP_FMAC2 soap_instantiate_ns2__RecordingStatus_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingStatus_ * soap_new_ns2__RecordingStatus_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingStatus_(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingStatus_ * soap_new_req_ns2__RecordingStatus_(struct soap *soap, enum ns2__RecordingStatus __item) { ns2__RecordingStatus_ *_p = soap_instantiate_ns2__RecordingStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingStatus_::__item = __item; } return _p; }

inline ns2__RecordingStatus_ * soap_new_set_ns2__RecordingStatus_(struct soap *soap, enum ns2__RecordingStatus __item, char *__item1) { ns2__RecordingStatus_ *_p = soap_instantiate_ns2__RecordingStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingStatus_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingStatus_(struct soap *soap, ns2__RecordingStatus_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingStatus_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SearchState_
#define SOAP_TYPE_ns2__SearchState_ (901)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SearchState_(struct soap*, const char*, int, const ns2__SearchState_ *, const char*);
SOAP_FMAC3 ns2__SearchState_ * SOAP_FMAC4 soap_in_ns2__SearchState_(struct soap*, const char*, ns2__SearchState_ *, const char*);

#ifndef soap_write_ns2__SearchState_
#define soap_write_ns2__SearchState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SearchState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SearchState_ * SOAP_FMAC4 soap_get_ns2__SearchState_(struct soap*, ns2__SearchState_ *, const char*, const char*);

#ifndef soap_read_ns2__SearchState_
#define soap_read_ns2__SearchState_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SearchState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SearchState_ * SOAP_FMAC2 soap_instantiate_ns2__SearchState_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SearchState_ * soap_new_ns2__SearchState_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SearchState_(soap, n, NULL, NULL, NULL); }

inline ns2__SearchState_ * soap_new_req_ns2__SearchState_(struct soap *soap, enum ns2__SearchState __item) { ns2__SearchState_ *_p = soap_instantiate_ns2__SearchState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SearchState_::__item = __item; } return _p; }

inline ns2__SearchState_ * soap_new_set_ns2__SearchState_(struct soap *soap, enum ns2__SearchState __item, char *__item1) { ns2__SearchState_ *_p = soap_instantiate_ns2__SearchState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SearchState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SearchState_(struct soap *soap, ns2__SearchState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SearchState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__XPathExpression__
#define SOAP_TYPE_ns2__XPathExpression__ (899)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__XPathExpression__(struct soap*, const char*, int, const ns2__XPathExpression__ *, const char*);
SOAP_FMAC3 ns2__XPathExpression__ * SOAP_FMAC4 soap_in_ns2__XPathExpression__(struct soap*, const char*, ns2__XPathExpression__ *, const char*);

#ifndef soap_write_ns2__XPathExpression__
#define soap_write_ns2__XPathExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:XPathExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__XPathExpression__ * SOAP_FMAC4 soap_get_ns2__XPathExpression__(struct soap*, ns2__XPathExpression__ *, const char*, const char*);

#ifndef soap_read_ns2__XPathExpression__
#define soap_read_ns2__XPathExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__XPathExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__XPathExpression__ * SOAP_FMAC2 soap_instantiate_ns2__XPathExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__XPathExpression__ * soap_new_ns2__XPathExpression__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__XPathExpression__(soap, n, NULL, NULL, NULL); }

inline ns2__XPathExpression__ * soap_new_req_ns2__XPathExpression__(struct soap *soap, const std::string& __item) { ns2__XPathExpression__ *_p = soap_instantiate_ns2__XPathExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__XPathExpression__::__item = __item; } return _p; }

inline ns2__XPathExpression__ * soap_new_set_ns2__XPathExpression__(struct soap *soap, const std::string& __item, char *__item1) { ns2__XPathExpression__ *_p = soap_instantiate_ns2__XPathExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__XPathExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__XPathExpression__(struct soap *soap, ns2__XPathExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__XPathExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__XPathExpression
#define SOAP_TYPE_ns2__XPathExpression (898)
#endif

#define soap_default_ns2__XPathExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__XPathExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__XPathExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__XPathExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__XPathExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__XPathExpression
#define soap_write_ns2__XPathExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__XPathExpression(soap, data), 0) || soap_put_ns2__XPathExpression(soap, data, "ns2:XPathExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__XPathExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__XPathExpression
#define soap_read_ns2__XPathExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__XPathExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__XPathExpression soap_instantiate_std__string


#define soap_copy_ns2__XPathExpression soap_copy_std__string

#ifndef SOAP_TYPE_ns2__Description__
#define SOAP_TYPE_ns2__Description__ (897)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Description__(struct soap*, const char*, int, const ns2__Description__ *, const char*);
SOAP_FMAC3 ns2__Description__ * SOAP_FMAC4 soap_in_ns2__Description__(struct soap*, const char*, ns2__Description__ *, const char*);

#ifndef soap_write_ns2__Description__
#define soap_write_ns2__Description__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Description__ * SOAP_FMAC4 soap_get_ns2__Description__(struct soap*, ns2__Description__ *, const char*, const char*);

#ifndef soap_read_ns2__Description__
#define soap_read_ns2__Description__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Description__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Description__ * SOAP_FMAC2 soap_instantiate_ns2__Description__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Description__ * soap_new_ns2__Description__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Description__(soap, n, NULL, NULL, NULL); }

inline ns2__Description__ * soap_new_req_ns2__Description__(struct soap *soap, const std::string& __item) { ns2__Description__ *_p = soap_instantiate_ns2__Description__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Description__::__item = __item; } return _p; }

inline ns2__Description__ * soap_new_set_ns2__Description__(struct soap *soap, const std::string& __item, char *__item1) { ns2__Description__ *_p = soap_instantiate_ns2__Description__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Description__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Description__(struct soap *soap, ns2__Description__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Description__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Description
#define SOAP_TYPE_ns2__Description (896)
#endif

#define soap_default_ns2__Description(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Description(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Description(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__Description(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Description(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__Description
#define soap_write_ns2__Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Description(soap, data), 0) || soap_put_ns2__Description(soap, data, "ns2:Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__Description(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__Description
#define soap_read_ns2__Description(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__Description soap_instantiate_std__string


#define soap_copy_ns2__Description soap_copy_std__string

#ifndef SOAP_TYPE_ns2__ReceiverState_
#define SOAP_TYPE_ns2__ReceiverState_ (895)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverState_(struct soap*, const char*, int, const ns2__ReceiverState_ *, const char*);
SOAP_FMAC3 ns2__ReceiverState_ * SOAP_FMAC4 soap_in_ns2__ReceiverState_(struct soap*, const char*, ns2__ReceiverState_ *, const char*);

#ifndef soap_write_ns2__ReceiverState_
#define soap_write_ns2__ReceiverState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReceiverState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverState_ * SOAP_FMAC4 soap_get_ns2__ReceiverState_(struct soap*, ns2__ReceiverState_ *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverState_
#define soap_read_ns2__ReceiverState_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReceiverState_ * SOAP_FMAC2 soap_instantiate_ns2__ReceiverState_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReceiverState_ * soap_new_ns2__ReceiverState_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReceiverState_(soap, n, NULL, NULL, NULL); }

inline ns2__ReceiverState_ * soap_new_req_ns2__ReceiverState_(struct soap *soap, enum ns2__ReceiverState __item) { ns2__ReceiverState_ *_p = soap_instantiate_ns2__ReceiverState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverState_::__item = __item; } return _p; }

inline ns2__ReceiverState_ * soap_new_set_ns2__ReceiverState_(struct soap *soap, enum ns2__ReceiverState __item, char *__item1) { ns2__ReceiverState_ *_p = soap_instantiate_ns2__ReceiverState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReceiverState_(struct soap *soap, ns2__ReceiverState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReceiverState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReceiverMode_
#define SOAP_TYPE_ns2__ReceiverMode_ (893)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverMode_(struct soap*, const char*, int, const ns2__ReceiverMode_ *, const char*);
SOAP_FMAC3 ns2__ReceiverMode_ * SOAP_FMAC4 soap_in_ns2__ReceiverMode_(struct soap*, const char*, ns2__ReceiverMode_ *, const char*);

#ifndef soap_write_ns2__ReceiverMode_
#define soap_write_ns2__ReceiverMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReceiverMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverMode_ * SOAP_FMAC4 soap_get_ns2__ReceiverMode_(struct soap*, ns2__ReceiverMode_ *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverMode_
#define soap_read_ns2__ReceiverMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReceiverMode_ * SOAP_FMAC2 soap_instantiate_ns2__ReceiverMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReceiverMode_ * soap_new_ns2__ReceiverMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReceiverMode_(soap, n, NULL, NULL, NULL); }

inline ns2__ReceiverMode_ * soap_new_req_ns2__ReceiverMode_(struct soap *soap, enum ns2__ReceiverMode __item) { ns2__ReceiverMode_ *_p = soap_instantiate_ns2__ReceiverMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverMode_::__item = __item; } return _p; }

inline ns2__ReceiverMode_ * soap_new_set_ns2__ReceiverMode_(struct soap *soap, enum ns2__ReceiverMode __item, char *__item1) { ns2__ReceiverMode_ *_p = soap_instantiate_ns2__ReceiverMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReceiverMode_(struct soap *soap, ns2__ReceiverMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReceiverMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ClassType_
#define SOAP_TYPE_ns2__ClassType_ (891)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClassType_(struct soap*, const char*, int, const ns2__ClassType_ *, const char*);
SOAP_FMAC3 ns2__ClassType_ * SOAP_FMAC4 soap_in_ns2__ClassType_(struct soap*, const char*, ns2__ClassType_ *, const char*);

#ifndef soap_write_ns2__ClassType_
#define soap_write_ns2__ClassType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassType_ * SOAP_FMAC4 soap_get_ns2__ClassType_(struct soap*, ns2__ClassType_ *, const char*, const char*);

#ifndef soap_read_ns2__ClassType_
#define soap_read_ns2__ClassType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ClassType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ClassType_ * SOAP_FMAC2 soap_instantiate_ns2__ClassType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ClassType_ * soap_new_ns2__ClassType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ClassType_(soap, n, NULL, NULL, NULL); }

inline ns2__ClassType_ * soap_new_req_ns2__ClassType_(struct soap *soap, enum ns2__ClassType __item) { ns2__ClassType_ *_p = soap_instantiate_ns2__ClassType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ClassType_::__item = __item; } return _p; }

inline ns2__ClassType_ * soap_new_set_ns2__ClassType_(struct soap *soap, enum ns2__ClassType __item, char *__item1) { ns2__ClassType_ *_p = soap_instantiate_ns2__ClassType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ClassType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ClassType_(struct soap *soap, ns2__ClassType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ClassType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Direction_
#define SOAP_TYPE_ns2__Direction_ (889)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Direction_(struct soap*, const char*, int, const ns2__Direction_ *, const char*);
SOAP_FMAC3 ns2__Direction_ * SOAP_FMAC4 soap_in_ns2__Direction_(struct soap*, const char*, ns2__Direction_ *, const char*);

#ifndef soap_write_ns2__Direction_
#define soap_write_ns2__Direction_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Direction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Direction_ * SOAP_FMAC4 soap_get_ns2__Direction_(struct soap*, ns2__Direction_ *, const char*, const char*);

#ifndef soap_read_ns2__Direction_
#define soap_read_ns2__Direction_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Direction_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Direction_ * SOAP_FMAC2 soap_instantiate_ns2__Direction_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Direction_ * soap_new_ns2__Direction_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Direction_(soap, n, NULL, NULL, NULL); }

inline ns2__Direction_ * soap_new_req_ns2__Direction_(struct soap *soap, enum ns2__Direction __item) { ns2__Direction_ *_p = soap_instantiate_ns2__Direction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Direction_::__item = __item; } return _p; }

inline ns2__Direction_ * soap_new_set_ns2__Direction_(struct soap *soap, enum ns2__Direction __item, char *__item1) { ns2__Direction_ *_p = soap_instantiate_ns2__Direction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Direction_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Direction_(struct soap *soap, ns2__Direction_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Direction_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PropertyOperation_
#define SOAP_TYPE_ns2__PropertyOperation_ (887)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PropertyOperation_(struct soap*, const char*, int, const ns2__PropertyOperation_ *, const char*);
SOAP_FMAC3 ns2__PropertyOperation_ * SOAP_FMAC4 soap_in_ns2__PropertyOperation_(struct soap*, const char*, ns2__PropertyOperation_ *, const char*);

#ifndef soap_write_ns2__PropertyOperation_
#define soap_write_ns2__PropertyOperation_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PropertyOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PropertyOperation_ * SOAP_FMAC4 soap_get_ns2__PropertyOperation_(struct soap*, ns2__PropertyOperation_ *, const char*, const char*);

#ifndef soap_read_ns2__PropertyOperation_
#define soap_read_ns2__PropertyOperation_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PropertyOperation_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PropertyOperation_ * SOAP_FMAC2 soap_instantiate_ns2__PropertyOperation_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PropertyOperation_ * soap_new_ns2__PropertyOperation_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PropertyOperation_(soap, n, NULL, NULL, NULL); }

inline ns2__PropertyOperation_ * soap_new_req_ns2__PropertyOperation_(struct soap *soap, enum ns2__PropertyOperation __item) { ns2__PropertyOperation_ *_p = soap_instantiate_ns2__PropertyOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PropertyOperation_::__item = __item; } return _p; }

inline ns2__PropertyOperation_ * soap_new_set_ns2__PropertyOperation_(struct soap *soap, enum ns2__PropertyOperation __item, char *__item1) { ns2__PropertyOperation_ *_p = soap_instantiate_ns2__PropertyOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PropertyOperation_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PropertyOperation_(struct soap *soap, ns2__PropertyOperation_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PropertyOperation_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TopicNamespaceLocation__
#define SOAP_TYPE_ns2__TopicNamespaceLocation__ (885)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TopicNamespaceLocation__(struct soap*, const char*, int, const ns2__TopicNamespaceLocation__ *, const char*);
SOAP_FMAC3 ns2__TopicNamespaceLocation__ * SOAP_FMAC4 soap_in_ns2__TopicNamespaceLocation__(struct soap*, const char*, ns2__TopicNamespaceLocation__ *, const char*);

#ifndef soap_write_ns2__TopicNamespaceLocation__
#define soap_write_ns2__TopicNamespaceLocation__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TopicNamespaceLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TopicNamespaceLocation__ * SOAP_FMAC4 soap_get_ns2__TopicNamespaceLocation__(struct soap*, ns2__TopicNamespaceLocation__ *, const char*, const char*);

#ifndef soap_read_ns2__TopicNamespaceLocation__
#define soap_read_ns2__TopicNamespaceLocation__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TopicNamespaceLocation__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TopicNamespaceLocation__ * SOAP_FMAC2 soap_instantiate_ns2__TopicNamespaceLocation__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TopicNamespaceLocation__ * soap_new_ns2__TopicNamespaceLocation__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TopicNamespaceLocation__(soap, n, NULL, NULL, NULL); }

inline ns2__TopicNamespaceLocation__ * soap_new_req_ns2__TopicNamespaceLocation__(struct soap *soap, const std::string& __item) { ns2__TopicNamespaceLocation__ *_p = soap_instantiate_ns2__TopicNamespaceLocation__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TopicNamespaceLocation__::__item = __item; } return _p; }

inline ns2__TopicNamespaceLocation__ * soap_new_set_ns2__TopicNamespaceLocation__(struct soap *soap, const std::string& __item, char *__item1) { ns2__TopicNamespaceLocation__ *_p = soap_instantiate_ns2__TopicNamespaceLocation__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TopicNamespaceLocation__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TopicNamespaceLocation__(struct soap *soap, ns2__TopicNamespaceLocation__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TopicNamespaceLocation__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TopicNamespaceLocation
#define SOAP_TYPE_ns2__TopicNamespaceLocation (884)
#endif

#define soap_default_ns2__TopicNamespaceLocation(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__TopicNamespaceLocation(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TopicNamespaceLocation(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__TopicNamespaceLocation(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TopicNamespaceLocation(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__TopicNamespaceLocation
#define soap_write_ns2__TopicNamespaceLocation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__TopicNamespaceLocation(soap, data), 0) || soap_put_ns2__TopicNamespaceLocation(soap, data, "ns2:TopicNamespaceLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__TopicNamespaceLocation(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__TopicNamespaceLocation
#define soap_read_ns2__TopicNamespaceLocation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TopicNamespaceLocation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__TopicNamespaceLocation soap_instantiate_std__string


#define soap_copy_ns2__TopicNamespaceLocation soap_copy_std__string

#ifndef SOAP_TYPE_ns2__DefoggingMode_
#define SOAP_TYPE_ns2__DefoggingMode_ (883)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DefoggingMode_(struct soap*, const char*, int, const ns2__DefoggingMode_ *, const char*);
SOAP_FMAC3 ns2__DefoggingMode_ * SOAP_FMAC4 soap_in_ns2__DefoggingMode_(struct soap*, const char*, ns2__DefoggingMode_ *, const char*);

#ifndef soap_write_ns2__DefoggingMode_
#define soap_write_ns2__DefoggingMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DefoggingMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DefoggingMode_ * SOAP_FMAC4 soap_get_ns2__DefoggingMode_(struct soap*, ns2__DefoggingMode_ *, const char*, const char*);

#ifndef soap_read_ns2__DefoggingMode_
#define soap_read_ns2__DefoggingMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DefoggingMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DefoggingMode_ * SOAP_FMAC2 soap_instantiate_ns2__DefoggingMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DefoggingMode_ * soap_new_ns2__DefoggingMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DefoggingMode_(soap, n, NULL, NULL, NULL); }

inline ns2__DefoggingMode_ * soap_new_req_ns2__DefoggingMode_(struct soap *soap, enum ns2__DefoggingMode __item) { ns2__DefoggingMode_ *_p = soap_instantiate_ns2__DefoggingMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DefoggingMode_::__item = __item; } return _p; }

inline ns2__DefoggingMode_ * soap_new_set_ns2__DefoggingMode_(struct soap *soap, enum ns2__DefoggingMode __item, char *__item1) { ns2__DefoggingMode_ *_p = soap_instantiate_ns2__DefoggingMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DefoggingMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DefoggingMode_(struct soap *soap, ns2__DefoggingMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DefoggingMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ToneCompensationMode_
#define SOAP_TYPE_ns2__ToneCompensationMode_ (881)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ToneCompensationMode_(struct soap*, const char*, int, const ns2__ToneCompensationMode_ *, const char*);
SOAP_FMAC3 ns2__ToneCompensationMode_ * SOAP_FMAC4 soap_in_ns2__ToneCompensationMode_(struct soap*, const char*, ns2__ToneCompensationMode_ *, const char*);

#ifndef soap_write_ns2__ToneCompensationMode_
#define soap_write_ns2__ToneCompensationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ToneCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensationMode_ * SOAP_FMAC4 soap_get_ns2__ToneCompensationMode_(struct soap*, ns2__ToneCompensationMode_ *, const char*, const char*);

#ifndef soap_read_ns2__ToneCompensationMode_
#define soap_read_ns2__ToneCompensationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ToneCompensationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ToneCompensationMode_ * SOAP_FMAC2 soap_instantiate_ns2__ToneCompensationMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ToneCompensationMode_ * soap_new_ns2__ToneCompensationMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ToneCompensationMode_(soap, n, NULL, NULL, NULL); }

inline ns2__ToneCompensationMode_ * soap_new_req_ns2__ToneCompensationMode_(struct soap *soap, enum ns2__ToneCompensationMode __item) { ns2__ToneCompensationMode_ *_p = soap_instantiate_ns2__ToneCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensationMode_::__item = __item; } return _p; }

inline ns2__ToneCompensationMode_ * soap_new_set_ns2__ToneCompensationMode_(struct soap *soap, enum ns2__ToneCompensationMode __item, char *__item1) { ns2__ToneCompensationMode_ *_p = soap_instantiate_ns2__ToneCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ToneCompensationMode_(struct soap *soap, ns2__ToneCompensationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ToneCompensationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IrCutFilterAutoBoundaryType_
#define SOAP_TYPE_ns2__IrCutFilterAutoBoundaryType_ (879)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterAutoBoundaryType_(struct soap*, const char*, int, const ns2__IrCutFilterAutoBoundaryType_ *, const char*);
SOAP_FMAC3 ns2__IrCutFilterAutoBoundaryType_ * SOAP_FMAC4 soap_in_ns2__IrCutFilterAutoBoundaryType_(struct soap*, const char*, ns2__IrCutFilterAutoBoundaryType_ *, const char*);

#ifndef soap_write_ns2__IrCutFilterAutoBoundaryType_
#define soap_write_ns2__IrCutFilterAutoBoundaryType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IrCutFilterAutoBoundaryType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoBoundaryType_ * SOAP_FMAC4 soap_get_ns2__IrCutFilterAutoBoundaryType_(struct soap*, ns2__IrCutFilterAutoBoundaryType_ *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterAutoBoundaryType_
#define soap_read_ns2__IrCutFilterAutoBoundaryType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterAutoBoundaryType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IrCutFilterAutoBoundaryType_ * SOAP_FMAC2 soap_instantiate_ns2__IrCutFilterAutoBoundaryType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IrCutFilterAutoBoundaryType_ * soap_new_ns2__IrCutFilterAutoBoundaryType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IrCutFilterAutoBoundaryType_(soap, n, NULL, NULL, NULL); }

inline ns2__IrCutFilterAutoBoundaryType_ * soap_new_req_ns2__IrCutFilterAutoBoundaryType_(struct soap *soap, enum ns2__IrCutFilterAutoBoundaryType __item) { ns2__IrCutFilterAutoBoundaryType_ *_p = soap_instantiate_ns2__IrCutFilterAutoBoundaryType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoBoundaryType_::__item = __item; } return _p; }

inline ns2__IrCutFilterAutoBoundaryType_ * soap_new_set_ns2__IrCutFilterAutoBoundaryType_(struct soap *soap, enum ns2__IrCutFilterAutoBoundaryType __item, char *__item1) { ns2__IrCutFilterAutoBoundaryType_ *_p = soap_instantiate_ns2__IrCutFilterAutoBoundaryType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoBoundaryType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IrCutFilterAutoBoundaryType_(struct soap *soap, ns2__IrCutFilterAutoBoundaryType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IrCutFilterAutoBoundaryType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImageStabilizationMode_
#define SOAP_TYPE_ns2__ImageStabilizationMode_ (877)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImageStabilizationMode_(struct soap*, const char*, int, const ns2__ImageStabilizationMode_ *, const char*);
SOAP_FMAC3 ns2__ImageStabilizationMode_ * SOAP_FMAC4 soap_in_ns2__ImageStabilizationMode_(struct soap*, const char*, ns2__ImageStabilizationMode_ *, const char*);

#ifndef soap_write_ns2__ImageStabilizationMode_
#define soap_write_ns2__ImageStabilizationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImageStabilizationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationMode_ * SOAP_FMAC4 soap_get_ns2__ImageStabilizationMode_(struct soap*, ns2__ImageStabilizationMode_ *, const char*, const char*);

#ifndef soap_read_ns2__ImageStabilizationMode_
#define soap_read_ns2__ImageStabilizationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImageStabilizationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImageStabilizationMode_ * SOAP_FMAC2 soap_instantiate_ns2__ImageStabilizationMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImageStabilizationMode_ * soap_new_ns2__ImageStabilizationMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImageStabilizationMode_(soap, n, NULL, NULL, NULL); }

inline ns2__ImageStabilizationMode_ * soap_new_req_ns2__ImageStabilizationMode_(struct soap *soap, enum ns2__ImageStabilizationMode __item) { ns2__ImageStabilizationMode_ *_p = soap_instantiate_ns2__ImageStabilizationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilizationMode_::__item = __item; } return _p; }

inline ns2__ImageStabilizationMode_ * soap_new_set_ns2__ImageStabilizationMode_(struct soap *soap, enum ns2__ImageStabilizationMode __item, char *__item1) { ns2__ImageStabilizationMode_ *_p = soap_instantiate_ns2__ImageStabilizationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilizationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImageStabilizationMode_(struct soap *soap, ns2__ImageStabilizationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImageStabilizationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IrCutFilterMode_
#define SOAP_TYPE_ns2__IrCutFilterMode_ (875)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterMode_(struct soap*, const char*, int, const ns2__IrCutFilterMode_ *, const char*);
SOAP_FMAC3 ns2__IrCutFilterMode_ * SOAP_FMAC4 soap_in_ns2__IrCutFilterMode_(struct soap*, const char*, ns2__IrCutFilterMode_ *, const char*);

#ifndef soap_write_ns2__IrCutFilterMode_
#define soap_write_ns2__IrCutFilterMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IrCutFilterMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterMode_ * SOAP_FMAC4 soap_get_ns2__IrCutFilterMode_(struct soap*, ns2__IrCutFilterMode_ *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterMode_
#define soap_read_ns2__IrCutFilterMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IrCutFilterMode_ * SOAP_FMAC2 soap_instantiate_ns2__IrCutFilterMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IrCutFilterMode_ * soap_new_ns2__IrCutFilterMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IrCutFilterMode_(soap, n, NULL, NULL, NULL); }

inline ns2__IrCutFilterMode_ * soap_new_req_ns2__IrCutFilterMode_(struct soap *soap, enum ns2__IrCutFilterMode __item) { ns2__IrCutFilterMode_ *_p = soap_instantiate_ns2__IrCutFilterMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterMode_::__item = __item; } return _p; }

inline ns2__IrCutFilterMode_ * soap_new_set_ns2__IrCutFilterMode_(struct soap *soap, enum ns2__IrCutFilterMode __item, char *__item1) { ns2__IrCutFilterMode_ *_p = soap_instantiate_ns2__IrCutFilterMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IrCutFilterMode_(struct soap *soap, ns2__IrCutFilterMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IrCutFilterMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalanceMode_
#define SOAP_TYPE_ns2__WhiteBalanceMode_ (873)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalanceMode_(struct soap*, const char*, int, const ns2__WhiteBalanceMode_ *, const char*);
SOAP_FMAC3 ns2__WhiteBalanceMode_ * SOAP_FMAC4 soap_in_ns2__WhiteBalanceMode_(struct soap*, const char*, ns2__WhiteBalanceMode_ *, const char*);

#ifndef soap_write_ns2__WhiteBalanceMode_
#define soap_write_ns2__WhiteBalanceMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalanceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceMode_ * SOAP_FMAC4 soap_get_ns2__WhiteBalanceMode_(struct soap*, ns2__WhiteBalanceMode_ *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalanceMode_
#define soap_read_ns2__WhiteBalanceMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalanceMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalanceMode_ * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalanceMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalanceMode_ * soap_new_ns2__WhiteBalanceMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalanceMode_(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalanceMode_ * soap_new_req_ns2__WhiteBalanceMode_(struct soap *soap, enum ns2__WhiteBalanceMode __item) { ns2__WhiteBalanceMode_ *_p = soap_instantiate_ns2__WhiteBalanceMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceMode_::__item = __item; } return _p; }

inline ns2__WhiteBalanceMode_ * soap_new_set_ns2__WhiteBalanceMode_(struct soap *soap, enum ns2__WhiteBalanceMode __item, char *__item1) { ns2__WhiteBalanceMode_ *_p = soap_instantiate_ns2__WhiteBalanceMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalanceMode_(struct soap *soap, ns2__WhiteBalanceMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalanceMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Enabled_
#define SOAP_TYPE_ns2__Enabled_ (871)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Enabled_(struct soap*, const char*, int, const ns2__Enabled_ *, const char*);
SOAP_FMAC3 ns2__Enabled_ * SOAP_FMAC4 soap_in_ns2__Enabled_(struct soap*, const char*, ns2__Enabled_ *, const char*);

#ifndef soap_write_ns2__Enabled_
#define soap_write_ns2__Enabled_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Enabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Enabled_ * SOAP_FMAC4 soap_get_ns2__Enabled_(struct soap*, ns2__Enabled_ *, const char*, const char*);

#ifndef soap_read_ns2__Enabled_
#define soap_read_ns2__Enabled_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Enabled_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Enabled_ * SOAP_FMAC2 soap_instantiate_ns2__Enabled_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Enabled_ * soap_new_ns2__Enabled_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Enabled_(soap, n, NULL, NULL, NULL); }

inline ns2__Enabled_ * soap_new_req_ns2__Enabled_(struct soap *soap, enum ns2__Enabled __item) { ns2__Enabled_ *_p = soap_instantiate_ns2__Enabled_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Enabled_::__item = __item; } return _p; }

inline ns2__Enabled_ * soap_new_set_ns2__Enabled_(struct soap *soap, enum ns2__Enabled __item, char *__item1) { ns2__Enabled_ *_p = soap_instantiate_ns2__Enabled_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Enabled_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Enabled_(struct soap *soap, ns2__Enabled_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Enabled_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ExposureMode_
#define SOAP_TYPE_ns2__ExposureMode_ (869)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExposureMode_(struct soap*, const char*, int, const ns2__ExposureMode_ *, const char*);
SOAP_FMAC3 ns2__ExposureMode_ * SOAP_FMAC4 soap_in_ns2__ExposureMode_(struct soap*, const char*, ns2__ExposureMode_ *, const char*);

#ifndef soap_write_ns2__ExposureMode_
#define soap_write_ns2__ExposureMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ExposureMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ExposureMode_ * SOAP_FMAC4 soap_get_ns2__ExposureMode_(struct soap*, ns2__ExposureMode_ *, const char*, const char*);

#ifndef soap_read_ns2__ExposureMode_
#define soap_read_ns2__ExposureMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ExposureMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ExposureMode_ * SOAP_FMAC2 soap_instantiate_ns2__ExposureMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExposureMode_ * soap_new_ns2__ExposureMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ExposureMode_(soap, n, NULL, NULL, NULL); }

inline ns2__ExposureMode_ * soap_new_req_ns2__ExposureMode_(struct soap *soap, enum ns2__ExposureMode __item) { ns2__ExposureMode_ *_p = soap_instantiate_ns2__ExposureMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposureMode_::__item = __item; } return _p; }

inline ns2__ExposureMode_ * soap_new_set_ns2__ExposureMode_(struct soap *soap, enum ns2__ExposureMode __item, char *__item1) { ns2__ExposureMode_ *_p = soap_instantiate_ns2__ExposureMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposureMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ExposureMode_(struct soap *soap, ns2__ExposureMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ExposureMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ExposurePriority_
#define SOAP_TYPE_ns2__ExposurePriority_ (867)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExposurePriority_(struct soap*, const char*, int, const ns2__ExposurePriority_ *, const char*);
SOAP_FMAC3 ns2__ExposurePriority_ * SOAP_FMAC4 soap_in_ns2__ExposurePriority_(struct soap*, const char*, ns2__ExposurePriority_ *, const char*);

#ifndef soap_write_ns2__ExposurePriority_
#define soap_write_ns2__ExposurePriority_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ExposurePriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ExposurePriority_ * SOAP_FMAC4 soap_get_ns2__ExposurePriority_(struct soap*, ns2__ExposurePriority_ *, const char*, const char*);

#ifndef soap_read_ns2__ExposurePriority_
#define soap_read_ns2__ExposurePriority_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ExposurePriority_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ExposurePriority_ * SOAP_FMAC2 soap_instantiate_ns2__ExposurePriority_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExposurePriority_ * soap_new_ns2__ExposurePriority_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ExposurePriority_(soap, n, NULL, NULL, NULL); }

inline ns2__ExposurePriority_ * soap_new_req_ns2__ExposurePriority_(struct soap *soap, enum ns2__ExposurePriority __item) { ns2__ExposurePriority_ *_p = soap_instantiate_ns2__ExposurePriority_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposurePriority_::__item = __item; } return _p; }

inline ns2__ExposurePriority_ * soap_new_set_ns2__ExposurePriority_(struct soap *soap, enum ns2__ExposurePriority __item, char *__item1) { ns2__ExposurePriority_ *_p = soap_instantiate_ns2__ExposurePriority_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposurePriority_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ExposurePriority_(struct soap *soap, ns2__ExposurePriority_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ExposurePriority_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BacklightCompensationMode_
#define SOAP_TYPE_ns2__BacklightCompensationMode_ (865)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BacklightCompensationMode_(struct soap*, const char*, int, const ns2__BacklightCompensationMode_ *, const char*);
SOAP_FMAC3 ns2__BacklightCompensationMode_ * SOAP_FMAC4 soap_in_ns2__BacklightCompensationMode_(struct soap*, const char*, ns2__BacklightCompensationMode_ *, const char*);

#ifndef soap_write_ns2__BacklightCompensationMode_
#define soap_write_ns2__BacklightCompensationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BacklightCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensationMode_ * SOAP_FMAC4 soap_get_ns2__BacklightCompensationMode_(struct soap*, ns2__BacklightCompensationMode_ *, const char*, const char*);

#ifndef soap_read_ns2__BacklightCompensationMode_
#define soap_read_ns2__BacklightCompensationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BacklightCompensationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BacklightCompensationMode_ * SOAP_FMAC2 soap_instantiate_ns2__BacklightCompensationMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BacklightCompensationMode_ * soap_new_ns2__BacklightCompensationMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BacklightCompensationMode_(soap, n, NULL, NULL, NULL); }

inline ns2__BacklightCompensationMode_ * soap_new_req_ns2__BacklightCompensationMode_(struct soap *soap, enum ns2__BacklightCompensationMode __item) { ns2__BacklightCompensationMode_ *_p = soap_instantiate_ns2__BacklightCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensationMode_::__item = __item; } return _p; }

inline ns2__BacklightCompensationMode_ * soap_new_set_ns2__BacklightCompensationMode_(struct soap *soap, enum ns2__BacklightCompensationMode __item, char *__item1) { ns2__BacklightCompensationMode_ *_p = soap_instantiate_ns2__BacklightCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BacklightCompensationMode_(struct soap *soap, ns2__BacklightCompensationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BacklightCompensationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WideDynamicMode_
#define SOAP_TYPE_ns2__WideDynamicMode_ (863)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WideDynamicMode_(struct soap*, const char*, int, const ns2__WideDynamicMode_ *, const char*);
SOAP_FMAC3 ns2__WideDynamicMode_ * SOAP_FMAC4 soap_in_ns2__WideDynamicMode_(struct soap*, const char*, ns2__WideDynamicMode_ *, const char*);

#ifndef soap_write_ns2__WideDynamicMode_
#define soap_write_ns2__WideDynamicMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WideDynamicMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicMode_ * SOAP_FMAC4 soap_get_ns2__WideDynamicMode_(struct soap*, ns2__WideDynamicMode_ *, const char*, const char*);

#ifndef soap_read_ns2__WideDynamicMode_
#define soap_read_ns2__WideDynamicMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WideDynamicMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WideDynamicMode_ * SOAP_FMAC2 soap_instantiate_ns2__WideDynamicMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WideDynamicMode_ * soap_new_ns2__WideDynamicMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WideDynamicMode_(soap, n, NULL, NULL, NULL); }

inline ns2__WideDynamicMode_ * soap_new_req_ns2__WideDynamicMode_(struct soap *soap, enum ns2__WideDynamicMode __item) { ns2__WideDynamicMode_ *_p = soap_instantiate_ns2__WideDynamicMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicMode_::__item = __item; } return _p; }

inline ns2__WideDynamicMode_ * soap_new_set_ns2__WideDynamicMode_(struct soap *soap, enum ns2__WideDynamicMode __item, char *__item1) { ns2__WideDynamicMode_ *_p = soap_instantiate_ns2__WideDynamicMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WideDynamicMode_(struct soap *soap, ns2__WideDynamicMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WideDynamicMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AutoFocusMode_
#define SOAP_TYPE_ns2__AutoFocusMode_ (861)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AutoFocusMode_(struct soap*, const char*, int, const ns2__AutoFocusMode_ *, const char*);
SOAP_FMAC3 ns2__AutoFocusMode_ * SOAP_FMAC4 soap_in_ns2__AutoFocusMode_(struct soap*, const char*, ns2__AutoFocusMode_ *, const char*);

#ifndef soap_write_ns2__AutoFocusMode_
#define soap_write_ns2__AutoFocusMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AutoFocusMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AutoFocusMode_ * SOAP_FMAC4 soap_get_ns2__AutoFocusMode_(struct soap*, ns2__AutoFocusMode_ *, const char*, const char*);

#ifndef soap_read_ns2__AutoFocusMode_
#define soap_read_ns2__AutoFocusMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AutoFocusMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AutoFocusMode_ * SOAP_FMAC2 soap_instantiate_ns2__AutoFocusMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AutoFocusMode_ * soap_new_ns2__AutoFocusMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AutoFocusMode_(soap, n, NULL, NULL, NULL); }

inline ns2__AutoFocusMode_ * soap_new_req_ns2__AutoFocusMode_(struct soap *soap, enum ns2__AutoFocusMode __item) { ns2__AutoFocusMode_ *_p = soap_instantiate_ns2__AutoFocusMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AutoFocusMode_::__item = __item; } return _p; }

inline ns2__AutoFocusMode_ * soap_new_set_ns2__AutoFocusMode_(struct soap *soap, enum ns2__AutoFocusMode __item, char *__item1) { ns2__AutoFocusMode_ *_p = soap_instantiate_ns2__AutoFocusMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AutoFocusMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AutoFocusMode_(struct soap *soap, ns2__AutoFocusMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AutoFocusMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourOperation_
#define SOAP_TYPE_ns2__PTZPresetTourOperation_ (859)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourOperation_(struct soap*, const char*, int, const ns2__PTZPresetTourOperation_ *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourOperation_ * SOAP_FMAC4 soap_in_ns2__PTZPresetTourOperation_(struct soap*, const char*, ns2__PTZPresetTourOperation_ *, const char*);

#ifndef soap_write_ns2__PTZPresetTourOperation_
#define soap_write_ns2__PTZPresetTourOperation_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourOperation_ * SOAP_FMAC4 soap_get_ns2__PTZPresetTourOperation_(struct soap*, ns2__PTZPresetTourOperation_ *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourOperation_
#define soap_read_ns2__PTZPresetTourOperation_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourOperation_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourOperation_ * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourOperation_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourOperation_ * soap_new_ns2__PTZPresetTourOperation_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourOperation_(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourOperation_ * soap_new_req_ns2__PTZPresetTourOperation_(struct soap *soap, enum ns2__PTZPresetTourOperation __item) { ns2__PTZPresetTourOperation_ *_p = soap_instantiate_ns2__PTZPresetTourOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourOperation_::__item = __item; } return _p; }

inline ns2__PTZPresetTourOperation_ * soap_new_set_ns2__PTZPresetTourOperation_(struct soap *soap, enum ns2__PTZPresetTourOperation __item, char *__item1) { ns2__PTZPresetTourOperation_ *_p = soap_instantiate_ns2__PTZPresetTourOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourOperation_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourOperation_(struct soap *soap, ns2__PTZPresetTourOperation_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourOperation_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourDirection_
#define SOAP_TYPE_ns2__PTZPresetTourDirection_ (857)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourDirection_(struct soap*, const char*, int, const ns2__PTZPresetTourDirection_ *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourDirection_ * SOAP_FMAC4 soap_in_ns2__PTZPresetTourDirection_(struct soap*, const char*, ns2__PTZPresetTourDirection_ *, const char*);

#ifndef soap_write_ns2__PTZPresetTourDirection_
#define soap_write_ns2__PTZPresetTourDirection_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourDirection_ * SOAP_FMAC4 soap_get_ns2__PTZPresetTourDirection_(struct soap*, ns2__PTZPresetTourDirection_ *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourDirection_
#define soap_read_ns2__PTZPresetTourDirection_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourDirection_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourDirection_ * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourDirection_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourDirection_ * soap_new_ns2__PTZPresetTourDirection_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourDirection_(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourDirection_ * soap_new_req_ns2__PTZPresetTourDirection_(struct soap *soap, enum ns2__PTZPresetTourDirection __item) { ns2__PTZPresetTourDirection_ *_p = soap_instantiate_ns2__PTZPresetTourDirection_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourDirection_::__item = __item; } return _p; }

inline ns2__PTZPresetTourDirection_ * soap_new_set_ns2__PTZPresetTourDirection_(struct soap *soap, enum ns2__PTZPresetTourDirection __item, char *__item1) { ns2__PTZPresetTourDirection_ *_p = soap_instantiate_ns2__PTZPresetTourDirection_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourDirection_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourDirection_(struct soap *soap, ns2__PTZPresetTourDirection_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourDirection_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourState_
#define SOAP_TYPE_ns2__PTZPresetTourState_ (855)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourState_(struct soap*, const char*, int, const ns2__PTZPresetTourState_ *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourState_ * SOAP_FMAC4 soap_in_ns2__PTZPresetTourState_(struct soap*, const char*, ns2__PTZPresetTourState_ *, const char*);

#ifndef soap_write_ns2__PTZPresetTourState_
#define soap_write_ns2__PTZPresetTourState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourState_ * SOAP_FMAC4 soap_get_ns2__PTZPresetTourState_(struct soap*, ns2__PTZPresetTourState_ *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourState_
#define soap_read_ns2__PTZPresetTourState_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourState_ * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourState_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourState_ * soap_new_ns2__PTZPresetTourState_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourState_(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourState_ * soap_new_req_ns2__PTZPresetTourState_(struct soap *soap, enum ns2__PTZPresetTourState __item) { ns2__PTZPresetTourState_ *_p = soap_instantiate_ns2__PTZPresetTourState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourState_::__item = __item; } return _p; }

inline ns2__PTZPresetTourState_ * soap_new_set_ns2__PTZPresetTourState_(struct soap *soap, enum ns2__PTZPresetTourState __item, char *__item1) { ns2__PTZPresetTourState_ *_p = soap_instantiate_ns2__PTZPresetTourState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourState_(struct soap *soap, ns2__PTZPresetTourState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MoveStatus_
#define SOAP_TYPE_ns2__MoveStatus_ (853)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MoveStatus_(struct soap*, const char*, int, const ns2__MoveStatus_ *, const char*);
SOAP_FMAC3 ns2__MoveStatus_ * SOAP_FMAC4 soap_in_ns2__MoveStatus_(struct soap*, const char*, ns2__MoveStatus_ *, const char*);

#ifndef soap_write_ns2__MoveStatus_
#define soap_write_ns2__MoveStatus_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MoveStatus_ * SOAP_FMAC4 soap_get_ns2__MoveStatus_(struct soap*, ns2__MoveStatus_ *, const char*, const char*);

#ifndef soap_read_ns2__MoveStatus_
#define soap_read_ns2__MoveStatus_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MoveStatus_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MoveStatus_ * SOAP_FMAC2 soap_instantiate_ns2__MoveStatus_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MoveStatus_ * soap_new_ns2__MoveStatus_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MoveStatus_(soap, n, NULL, NULL, NULL); }

inline ns2__MoveStatus_ * soap_new_req_ns2__MoveStatus_(struct soap *soap, enum ns2__MoveStatus __item) { ns2__MoveStatus_ *_p = soap_instantiate_ns2__MoveStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MoveStatus_::__item = __item; } return _p; }

inline ns2__MoveStatus_ * soap_new_set_ns2__MoveStatus_(struct soap *soap, enum ns2__MoveStatus __item, char *__item1) { ns2__MoveStatus_ *_p = soap_instantiate_ns2__MoveStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MoveStatus_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MoveStatus_(struct soap *soap, ns2__MoveStatus_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MoveStatus_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AuxiliaryData__
#define SOAP_TYPE_ns2__AuxiliaryData__ (851)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AuxiliaryData__(struct soap*, const char*, int, const ns2__AuxiliaryData__ *, const char*);
SOAP_FMAC3 ns2__AuxiliaryData__ * SOAP_FMAC4 soap_in_ns2__AuxiliaryData__(struct soap*, const char*, ns2__AuxiliaryData__ *, const char*);

#ifndef soap_write_ns2__AuxiliaryData__
#define soap_write_ns2__AuxiliaryData__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AuxiliaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AuxiliaryData__ * SOAP_FMAC4 soap_get_ns2__AuxiliaryData__(struct soap*, ns2__AuxiliaryData__ *, const char*, const char*);

#ifndef soap_read_ns2__AuxiliaryData__
#define soap_read_ns2__AuxiliaryData__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AuxiliaryData__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AuxiliaryData__ * SOAP_FMAC2 soap_instantiate_ns2__AuxiliaryData__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AuxiliaryData__ * soap_new_ns2__AuxiliaryData__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AuxiliaryData__(soap, n, NULL, NULL, NULL); }

inline ns2__AuxiliaryData__ * soap_new_req_ns2__AuxiliaryData__(struct soap *soap, const std::string& __item) { ns2__AuxiliaryData__ *_p = soap_instantiate_ns2__AuxiliaryData__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AuxiliaryData__::__item = __item; } return _p; }

inline ns2__AuxiliaryData__ * soap_new_set_ns2__AuxiliaryData__(struct soap *soap, const std::string& __item, char *__item1) { ns2__AuxiliaryData__ *_p = soap_instantiate_ns2__AuxiliaryData__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AuxiliaryData__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AuxiliaryData__(struct soap *soap, ns2__AuxiliaryData__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AuxiliaryData__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AuxiliaryData
#define SOAP_TYPE_ns2__AuxiliaryData (850)
#endif

#define soap_default_ns2__AuxiliaryData(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__AuxiliaryData(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__AuxiliaryData
#define soap_write_ns2__AuxiliaryData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__AuxiliaryData(soap, data), 0) || soap_put_ns2__AuxiliaryData(soap, data, "ns2:AuxiliaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__AuxiliaryData
#define soap_read_ns2__AuxiliaryData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AuxiliaryData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__AuxiliaryData soap_instantiate_std__string


#define soap_copy_ns2__AuxiliaryData soap_copy_std__string

#ifndef SOAP_TYPE_ns2__ReverseMode_
#define SOAP_TYPE_ns2__ReverseMode_ (849)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReverseMode_(struct soap*, const char*, int, const ns2__ReverseMode_ *, const char*);
SOAP_FMAC3 ns2__ReverseMode_ * SOAP_FMAC4 soap_in_ns2__ReverseMode_(struct soap*, const char*, ns2__ReverseMode_ *, const char*);

#ifndef soap_write_ns2__ReverseMode_
#define soap_write_ns2__ReverseMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReverseMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReverseMode_ * SOAP_FMAC4 soap_get_ns2__ReverseMode_(struct soap*, ns2__ReverseMode_ *, const char*, const char*);

#ifndef soap_read_ns2__ReverseMode_
#define soap_read_ns2__ReverseMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReverseMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReverseMode_ * SOAP_FMAC2 soap_instantiate_ns2__ReverseMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReverseMode_ * soap_new_ns2__ReverseMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReverseMode_(soap, n, NULL, NULL, NULL); }

inline ns2__ReverseMode_ * soap_new_req_ns2__ReverseMode_(struct soap *soap, enum ns2__ReverseMode __item) { ns2__ReverseMode_ *_p = soap_instantiate_ns2__ReverseMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReverseMode_::__item = __item; } return _p; }

inline ns2__ReverseMode_ * soap_new_set_ns2__ReverseMode_(struct soap *soap, enum ns2__ReverseMode __item, char *__item1) { ns2__ReverseMode_ *_p = soap_instantiate_ns2__ReverseMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReverseMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReverseMode_(struct soap *soap, ns2__ReverseMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReverseMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EFlipMode_
#define SOAP_TYPE_ns2__EFlipMode_ (847)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EFlipMode_(struct soap*, const char*, int, const ns2__EFlipMode_ *, const char*);
SOAP_FMAC3 ns2__EFlipMode_ * SOAP_FMAC4 soap_in_ns2__EFlipMode_(struct soap*, const char*, ns2__EFlipMode_ *, const char*);

#ifndef soap_write_ns2__EFlipMode_
#define soap_write_ns2__EFlipMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EFlipMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlipMode_ * SOAP_FMAC4 soap_get_ns2__EFlipMode_(struct soap*, ns2__EFlipMode_ *, const char*, const char*);

#ifndef soap_read_ns2__EFlipMode_
#define soap_read_ns2__EFlipMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EFlipMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EFlipMode_ * SOAP_FMAC2 soap_instantiate_ns2__EFlipMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EFlipMode_ * soap_new_ns2__EFlipMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EFlipMode_(soap, n, NULL, NULL, NULL); }

inline ns2__EFlipMode_ * soap_new_req_ns2__EFlipMode_(struct soap *soap, enum ns2__EFlipMode __item) { ns2__EFlipMode_ *_p = soap_instantiate_ns2__EFlipMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EFlipMode_::__item = __item; } return _p; }

inline ns2__EFlipMode_ * soap_new_set_ns2__EFlipMode_(struct soap *soap, enum ns2__EFlipMode __item, char *__item1) { ns2__EFlipMode_ *_p = soap_instantiate_ns2__EFlipMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EFlipMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EFlipMode_(struct soap *soap, ns2__EFlipMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EFlipMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelayMode_
#define SOAP_TYPE_ns2__RelayMode_ (845)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayMode_(struct soap*, const char*, int, const ns2__RelayMode_ *, const char*);
SOAP_FMAC3 ns2__RelayMode_ * SOAP_FMAC4 soap_in_ns2__RelayMode_(struct soap*, const char*, ns2__RelayMode_ *, const char*);

#ifndef soap_write_ns2__RelayMode_
#define soap_write_ns2__RelayMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelayMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelayMode_ * SOAP_FMAC4 soap_get_ns2__RelayMode_(struct soap*, ns2__RelayMode_ *, const char*, const char*);

#ifndef soap_read_ns2__RelayMode_
#define soap_read_ns2__RelayMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelayMode_ * SOAP_FMAC2 soap_instantiate_ns2__RelayMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelayMode_ * soap_new_ns2__RelayMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelayMode_(soap, n, NULL, NULL, NULL); }

inline ns2__RelayMode_ * soap_new_req_ns2__RelayMode_(struct soap *soap, enum ns2__RelayMode __item) { ns2__RelayMode_ *_p = soap_instantiate_ns2__RelayMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayMode_::__item = __item; } return _p; }

inline ns2__RelayMode_ * soap_new_set_ns2__RelayMode_(struct soap *soap, enum ns2__RelayMode __item, char *__item1) { ns2__RelayMode_ *_p = soap_instantiate_ns2__RelayMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelayMode_(struct soap *soap, ns2__RelayMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelayMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelayIdleState_
#define SOAP_TYPE_ns2__RelayIdleState_ (843)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayIdleState_(struct soap*, const char*, int, const ns2__RelayIdleState_ *, const char*);
SOAP_FMAC3 ns2__RelayIdleState_ * SOAP_FMAC4 soap_in_ns2__RelayIdleState_(struct soap*, const char*, ns2__RelayIdleState_ *, const char*);

#ifndef soap_write_ns2__RelayIdleState_
#define soap_write_ns2__RelayIdleState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelayIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelayIdleState_ * SOAP_FMAC4 soap_get_ns2__RelayIdleState_(struct soap*, ns2__RelayIdleState_ *, const char*, const char*);

#ifndef soap_read_ns2__RelayIdleState_
#define soap_read_ns2__RelayIdleState_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayIdleState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelayIdleState_ * SOAP_FMAC2 soap_instantiate_ns2__RelayIdleState_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelayIdleState_ * soap_new_ns2__RelayIdleState_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelayIdleState_(soap, n, NULL, NULL, NULL); }

inline ns2__RelayIdleState_ * soap_new_req_ns2__RelayIdleState_(struct soap *soap, enum ns2__RelayIdleState __item) { ns2__RelayIdleState_ *_p = soap_instantiate_ns2__RelayIdleState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayIdleState_::__item = __item; } return _p; }

inline ns2__RelayIdleState_ * soap_new_set_ns2__RelayIdleState_(struct soap *soap, enum ns2__RelayIdleState __item, char *__item1) { ns2__RelayIdleState_ *_p = soap_instantiate_ns2__RelayIdleState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayIdleState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelayIdleState_(struct soap *soap, ns2__RelayIdleState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelayIdleState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelayLogicalState_
#define SOAP_TYPE_ns2__RelayLogicalState_ (841)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayLogicalState_(struct soap*, const char*, int, const ns2__RelayLogicalState_ *, const char*);
SOAP_FMAC3 ns2__RelayLogicalState_ * SOAP_FMAC4 soap_in_ns2__RelayLogicalState_(struct soap*, const char*, ns2__RelayLogicalState_ *, const char*);

#ifndef soap_write_ns2__RelayLogicalState_
#define soap_write_ns2__RelayLogicalState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelayLogicalState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelayLogicalState_ * SOAP_FMAC4 soap_get_ns2__RelayLogicalState_(struct soap*, ns2__RelayLogicalState_ *, const char*, const char*);

#ifndef soap_read_ns2__RelayLogicalState_
#define soap_read_ns2__RelayLogicalState_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayLogicalState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelayLogicalState_ * SOAP_FMAC2 soap_instantiate_ns2__RelayLogicalState_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelayLogicalState_ * soap_new_ns2__RelayLogicalState_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelayLogicalState_(soap, n, NULL, NULL, NULL); }

inline ns2__RelayLogicalState_ * soap_new_req_ns2__RelayLogicalState_(struct soap *soap, enum ns2__RelayLogicalState __item) { ns2__RelayLogicalState_ *_p = soap_instantiate_ns2__RelayLogicalState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayLogicalState_::__item = __item; } return _p; }

inline ns2__RelayLogicalState_ * soap_new_set_ns2__RelayLogicalState_(struct soap *soap, enum ns2__RelayLogicalState __item, char *__item1) { ns2__RelayLogicalState_ *_p = soap_instantiate_ns2__RelayLogicalState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayLogicalState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelayLogicalState_(struct soap *soap, ns2__RelayLogicalState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelayLogicalState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__UserLevel_
#define SOAP_TYPE_ns2__UserLevel_ (839)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UserLevel_(struct soap*, const char*, int, const ns2__UserLevel_ *, const char*);
SOAP_FMAC3 ns2__UserLevel_ * SOAP_FMAC4 soap_in_ns2__UserLevel_(struct soap*, const char*, ns2__UserLevel_ *, const char*);

#ifndef soap_write_ns2__UserLevel_
#define soap_write_ns2__UserLevel_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:UserLevel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__UserLevel_ * SOAP_FMAC4 soap_get_ns2__UserLevel_(struct soap*, ns2__UserLevel_ *, const char*, const char*);

#ifndef soap_read_ns2__UserLevel_
#define soap_read_ns2__UserLevel_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__UserLevel_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__UserLevel_ * SOAP_FMAC2 soap_instantiate_ns2__UserLevel_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UserLevel_ * soap_new_ns2__UserLevel_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__UserLevel_(soap, n, NULL, NULL, NULL); }

inline ns2__UserLevel_ * soap_new_req_ns2__UserLevel_(struct soap *soap, enum ns2__UserLevel __item) { ns2__UserLevel_ *_p = soap_instantiate_ns2__UserLevel_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__UserLevel_::__item = __item; } return _p; }

inline ns2__UserLevel_ * soap_new_set_ns2__UserLevel_(struct soap *soap, enum ns2__UserLevel __item, char *__item1) { ns2__UserLevel_ *_p = soap_instantiate_ns2__UserLevel_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__UserLevel_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__UserLevel_(struct soap *soap, ns2__UserLevel_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__UserLevel_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SetDateTimeType_
#define SOAP_TYPE_ns2__SetDateTimeType_ (837)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetDateTimeType_(struct soap*, const char*, int, const ns2__SetDateTimeType_ *, const char*);
SOAP_FMAC3 ns2__SetDateTimeType_ * SOAP_FMAC4 soap_in_ns2__SetDateTimeType_(struct soap*, const char*, ns2__SetDateTimeType_ *, const char*);

#ifndef soap_write_ns2__SetDateTimeType_
#define soap_write_ns2__SetDateTimeType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SetDateTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SetDateTimeType_ * SOAP_FMAC4 soap_get_ns2__SetDateTimeType_(struct soap*, ns2__SetDateTimeType_ *, const char*, const char*);

#ifndef soap_read_ns2__SetDateTimeType_
#define soap_read_ns2__SetDateTimeType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SetDateTimeType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SetDateTimeType_ * SOAP_FMAC2 soap_instantiate_ns2__SetDateTimeType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SetDateTimeType_ * soap_new_ns2__SetDateTimeType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SetDateTimeType_(soap, n, NULL, NULL, NULL); }

inline ns2__SetDateTimeType_ * soap_new_req_ns2__SetDateTimeType_(struct soap *soap, enum ns2__SetDateTimeType __item) { ns2__SetDateTimeType_ *_p = soap_instantiate_ns2__SetDateTimeType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SetDateTimeType_::__item = __item; } return _p; }

inline ns2__SetDateTimeType_ * soap_new_set_ns2__SetDateTimeType_(struct soap *soap, enum ns2__SetDateTimeType __item, char *__item1) { ns2__SetDateTimeType_ *_p = soap_instantiate_ns2__SetDateTimeType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SetDateTimeType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SetDateTimeType_(struct soap *soap, ns2__SetDateTimeType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetDateTimeType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FactoryDefaultType_
#define SOAP_TYPE_ns2__FactoryDefaultType_ (835)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FactoryDefaultType_(struct soap*, const char*, int, const ns2__FactoryDefaultType_ *, const char*);
SOAP_FMAC3 ns2__FactoryDefaultType_ * SOAP_FMAC4 soap_in_ns2__FactoryDefaultType_(struct soap*, const char*, ns2__FactoryDefaultType_ *, const char*);

#ifndef soap_write_ns2__FactoryDefaultType_
#define soap_write_ns2__FactoryDefaultType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FactoryDefaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FactoryDefaultType_ * SOAP_FMAC4 soap_get_ns2__FactoryDefaultType_(struct soap*, ns2__FactoryDefaultType_ *, const char*, const char*);

#ifndef soap_read_ns2__FactoryDefaultType_
#define soap_read_ns2__FactoryDefaultType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FactoryDefaultType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FactoryDefaultType_ * SOAP_FMAC2 soap_instantiate_ns2__FactoryDefaultType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FactoryDefaultType_ * soap_new_ns2__FactoryDefaultType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FactoryDefaultType_(soap, n, NULL, NULL, NULL); }

inline ns2__FactoryDefaultType_ * soap_new_req_ns2__FactoryDefaultType_(struct soap *soap, enum ns2__FactoryDefaultType __item) { ns2__FactoryDefaultType_ *_p = soap_instantiate_ns2__FactoryDefaultType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FactoryDefaultType_::__item = __item; } return _p; }

inline ns2__FactoryDefaultType_ * soap_new_set_ns2__FactoryDefaultType_(struct soap *soap, enum ns2__FactoryDefaultType __item, char *__item1) { ns2__FactoryDefaultType_ *_p = soap_instantiate_ns2__FactoryDefaultType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FactoryDefaultType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FactoryDefaultType_(struct soap *soap, ns2__FactoryDefaultType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FactoryDefaultType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemLogType_
#define SOAP_TYPE_ns2__SystemLogType_ (833)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemLogType_(struct soap*, const char*, int, const ns2__SystemLogType_ *, const char*);
SOAP_FMAC3 ns2__SystemLogType_ * SOAP_FMAC4 soap_in_ns2__SystemLogType_(struct soap*, const char*, ns2__SystemLogType_ *, const char*);

#ifndef soap_write_ns2__SystemLogType_
#define soap_write_ns2__SystemLogType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemLogType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemLogType_ * SOAP_FMAC4 soap_get_ns2__SystemLogType_(struct soap*, ns2__SystemLogType_ *, const char*, const char*);

#ifndef soap_read_ns2__SystemLogType_
#define soap_read_ns2__SystemLogType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemLogType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemLogType_ * SOAP_FMAC2 soap_instantiate_ns2__SystemLogType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemLogType_ * soap_new_ns2__SystemLogType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemLogType_(soap, n, NULL, NULL, NULL); }

inline ns2__SystemLogType_ * soap_new_req_ns2__SystemLogType_(struct soap *soap, enum ns2__SystemLogType __item) { ns2__SystemLogType_ *_p = soap_instantiate_ns2__SystemLogType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemLogType_::__item = __item; } return _p; }

inline ns2__SystemLogType_ * soap_new_set_ns2__SystemLogType_(struct soap *soap, enum ns2__SystemLogType __item, char *__item1) { ns2__SystemLogType_ *_p = soap_instantiate_ns2__SystemLogType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemLogType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemLogType_(struct soap *soap, ns2__SystemLogType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemLogType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CapabilityCategory_
#define SOAP_TYPE_ns2__CapabilityCategory_ (831)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CapabilityCategory_(struct soap*, const char*, int, const ns2__CapabilityCategory_ *, const char*);
SOAP_FMAC3 ns2__CapabilityCategory_ * SOAP_FMAC4 soap_in_ns2__CapabilityCategory_(struct soap*, const char*, ns2__CapabilityCategory_ *, const char*);

#ifndef soap_write_ns2__CapabilityCategory_
#define soap_write_ns2__CapabilityCategory_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CapabilityCategory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CapabilityCategory_ * SOAP_FMAC4 soap_get_ns2__CapabilityCategory_(struct soap*, ns2__CapabilityCategory_ *, const char*, const char*);

#ifndef soap_read_ns2__CapabilityCategory_
#define soap_read_ns2__CapabilityCategory_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CapabilityCategory_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CapabilityCategory_ * SOAP_FMAC2 soap_instantiate_ns2__CapabilityCategory_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CapabilityCategory_ * soap_new_ns2__CapabilityCategory_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CapabilityCategory_(soap, n, NULL, NULL, NULL); }

inline ns2__CapabilityCategory_ * soap_new_req_ns2__CapabilityCategory_(struct soap *soap, enum ns2__CapabilityCategory __item) { ns2__CapabilityCategory_ *_p = soap_instantiate_ns2__CapabilityCategory_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CapabilityCategory_::__item = __item; } return _p; }

inline ns2__CapabilityCategory_ * soap_new_set_ns2__CapabilityCategory_(struct soap *soap, enum ns2__CapabilityCategory __item, char *__item1) { ns2__CapabilityCategory_ *_p = soap_instantiate_ns2__CapabilityCategory_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CapabilityCategory_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CapabilityCategory_(struct soap *soap, ns2__CapabilityCategory_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CapabilityCategory_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11AuthAndMangementSuite_
#define SOAP_TYPE_ns2__Dot11AuthAndMangementSuite_ (829)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11AuthAndMangementSuite_(struct soap*, const char*, int, const ns2__Dot11AuthAndMangementSuite_ *, const char*);
SOAP_FMAC3 ns2__Dot11AuthAndMangementSuite_ * SOAP_FMAC4 soap_in_ns2__Dot11AuthAndMangementSuite_(struct soap*, const char*, ns2__Dot11AuthAndMangementSuite_ *, const char*);

#ifndef soap_write_ns2__Dot11AuthAndMangementSuite_
#define soap_write_ns2__Dot11AuthAndMangementSuite_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11AuthAndMangementSuite", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11AuthAndMangementSuite_ * SOAP_FMAC4 soap_get_ns2__Dot11AuthAndMangementSuite_(struct soap*, ns2__Dot11AuthAndMangementSuite_ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11AuthAndMangementSuite_
#define soap_read_ns2__Dot11AuthAndMangementSuite_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11AuthAndMangementSuite_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11AuthAndMangementSuite_ * SOAP_FMAC2 soap_instantiate_ns2__Dot11AuthAndMangementSuite_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11AuthAndMangementSuite_ * soap_new_ns2__Dot11AuthAndMangementSuite_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11AuthAndMangementSuite_(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11AuthAndMangementSuite_ * soap_new_req_ns2__Dot11AuthAndMangementSuite_(struct soap *soap, enum ns2__Dot11AuthAndMangementSuite __item) { ns2__Dot11AuthAndMangementSuite_ *_p = soap_instantiate_ns2__Dot11AuthAndMangementSuite_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11AuthAndMangementSuite_::__item = __item; } return _p; }

inline ns2__Dot11AuthAndMangementSuite_ * soap_new_set_ns2__Dot11AuthAndMangementSuite_(struct soap *soap, enum ns2__Dot11AuthAndMangementSuite __item, char *__item1) { ns2__Dot11AuthAndMangementSuite_ *_p = soap_instantiate_ns2__Dot11AuthAndMangementSuite_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11AuthAndMangementSuite_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11AuthAndMangementSuite_(struct soap *soap, ns2__Dot11AuthAndMangementSuite_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11AuthAndMangementSuite_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11SignalStrength_
#define SOAP_TYPE_ns2__Dot11SignalStrength_ (827)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SignalStrength_(struct soap*, const char*, int, const ns2__Dot11SignalStrength_ *, const char*);
SOAP_FMAC3 ns2__Dot11SignalStrength_ * SOAP_FMAC4 soap_in_ns2__Dot11SignalStrength_(struct soap*, const char*, ns2__Dot11SignalStrength_ *, const char*);

#ifndef soap_write_ns2__Dot11SignalStrength_
#define soap_write_ns2__Dot11SignalStrength_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11SignalStrength", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SignalStrength_ * SOAP_FMAC4 soap_get_ns2__Dot11SignalStrength_(struct soap*, ns2__Dot11SignalStrength_ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SignalStrength_
#define soap_read_ns2__Dot11SignalStrength_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SignalStrength_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11SignalStrength_ * SOAP_FMAC2 soap_instantiate_ns2__Dot11SignalStrength_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11SignalStrength_ * soap_new_ns2__Dot11SignalStrength_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11SignalStrength_(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11SignalStrength_ * soap_new_req_ns2__Dot11SignalStrength_(struct soap *soap, enum ns2__Dot11SignalStrength __item) { ns2__Dot11SignalStrength_ *_p = soap_instantiate_ns2__Dot11SignalStrength_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SignalStrength_::__item = __item; } return _p; }

inline ns2__Dot11SignalStrength_ * soap_new_set_ns2__Dot11SignalStrength_(struct soap *soap, enum ns2__Dot11SignalStrength __item, char *__item1) { ns2__Dot11SignalStrength_ *_p = soap_instantiate_ns2__Dot11SignalStrength_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SignalStrength_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11SignalStrength_(struct soap *soap, ns2__Dot11SignalStrength_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11SignalStrength_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11PSKPassphrase__
#define SOAP_TYPE_ns2__Dot11PSKPassphrase__ (825)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11PSKPassphrase__(struct soap*, const char*, int, const ns2__Dot11PSKPassphrase__ *, const char*);
SOAP_FMAC3 ns2__Dot11PSKPassphrase__ * SOAP_FMAC4 soap_in_ns2__Dot11PSKPassphrase__(struct soap*, const char*, ns2__Dot11PSKPassphrase__ *, const char*);

#ifndef soap_write_ns2__Dot11PSKPassphrase__
#define soap_write_ns2__Dot11PSKPassphrase__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11PSKPassphrase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11PSKPassphrase__ * SOAP_FMAC4 soap_get_ns2__Dot11PSKPassphrase__(struct soap*, ns2__Dot11PSKPassphrase__ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11PSKPassphrase__
#define soap_read_ns2__Dot11PSKPassphrase__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11PSKPassphrase__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11PSKPassphrase__ * SOAP_FMAC2 soap_instantiate_ns2__Dot11PSKPassphrase__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11PSKPassphrase__ * soap_new_ns2__Dot11PSKPassphrase__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11PSKPassphrase__(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11PSKPassphrase__ * soap_new_req_ns2__Dot11PSKPassphrase__(struct soap *soap, const std::string& __item) { ns2__Dot11PSKPassphrase__ *_p = soap_instantiate_ns2__Dot11PSKPassphrase__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11PSKPassphrase__::__item = __item; } return _p; }

inline ns2__Dot11PSKPassphrase__ * soap_new_set_ns2__Dot11PSKPassphrase__(struct soap *soap, const std::string& __item, char *__item1) { ns2__Dot11PSKPassphrase__ *_p = soap_instantiate_ns2__Dot11PSKPassphrase__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11PSKPassphrase__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11PSKPassphrase__(struct soap *soap, ns2__Dot11PSKPassphrase__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11PSKPassphrase__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11PSKPassphrase
#define SOAP_TYPE_ns2__Dot11PSKPassphrase (824)
#endif

#define soap_default_ns2__Dot11PSKPassphrase(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Dot11PSKPassphrase(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11PSKPassphrase(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__Dot11PSKPassphrase(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11PSKPassphrase(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__Dot11PSKPassphrase
#define soap_write_ns2__Dot11PSKPassphrase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Dot11PSKPassphrase(soap, data), 0) || soap_put_ns2__Dot11PSKPassphrase(soap, data, "ns2:Dot11PSKPassphrase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__Dot11PSKPassphrase(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__Dot11PSKPassphrase
#define soap_read_ns2__Dot11PSKPassphrase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11PSKPassphrase(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__Dot11PSKPassphrase soap_instantiate_std__string


#define soap_copy_ns2__Dot11PSKPassphrase soap_copy_std__string

#ifndef SOAP_TYPE_ns2__Dot11PSK__
#define SOAP_TYPE_ns2__Dot11PSK__ (823)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11PSK__(struct soap*, const char*, int, const ns2__Dot11PSK__ *, const char*);
SOAP_FMAC3 ns2__Dot11PSK__ * SOAP_FMAC4 soap_in_ns2__Dot11PSK__(struct soap*, const char*, ns2__Dot11PSK__ *, const char*);

#ifndef soap_write_ns2__Dot11PSK__
#define soap_write_ns2__Dot11PSK__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11PSK", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11PSK__ * SOAP_FMAC4 soap_get_ns2__Dot11PSK__(struct soap*, ns2__Dot11PSK__ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11PSK__
#define soap_read_ns2__Dot11PSK__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11PSK__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11PSK__ * SOAP_FMAC2 soap_instantiate_ns2__Dot11PSK__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11PSK__ * soap_new_ns2__Dot11PSK__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11PSK__(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11PSK__ * soap_new_req_ns2__Dot11PSK__(struct soap *soap, const xsd__hexBinary& __item) { ns2__Dot11PSK__ *_p = soap_instantiate_ns2__Dot11PSK__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11PSK__::__item = __item; } return _p; }

inline ns2__Dot11PSK__ * soap_new_set_ns2__Dot11PSK__(struct soap *soap, const xsd__hexBinary& __item, char *__item1) { ns2__Dot11PSK__ *_p = soap_instantiate_ns2__Dot11PSK__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11PSK__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11PSK__(struct soap *soap, ns2__Dot11PSK__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11PSK__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11PSK
#define SOAP_TYPE_ns2__Dot11PSK (822)
#endif

#define soap_default_ns2__Dot11PSK(soap, a) (a)->xsd__hexBinary::soap_default(soap)


#define soap_serialize_ns2__Dot11PSK(soap, a) (a)->soap_serialize(soap)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11PSK(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_ns2__Dot11PSK(struct soap*, const char*, xsd__hexBinary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11PSK(struct soap*, const xsd__hexBinary *, const char*, const char*);

#ifndef soap_write_ns2__Dot11PSK
#define soap_write_ns2__Dot11PSK(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11PSK", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_ns2__Dot11PSK(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_ns2__Dot11PSK
#define soap_read_ns2__Dot11PSK(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11PSK(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__Dot11PSK soap_instantiate_xsd__hexBinary


#define soap_copy_ns2__Dot11PSK soap_copy_xsd__hexBinary

#ifndef SOAP_TYPE_ns2__Dot11Cipher_
#define SOAP_TYPE_ns2__Dot11Cipher_ (821)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11Cipher_(struct soap*, const char*, int, const ns2__Dot11Cipher_ *, const char*);
SOAP_FMAC3 ns2__Dot11Cipher_ * SOAP_FMAC4 soap_in_ns2__Dot11Cipher_(struct soap*, const char*, ns2__Dot11Cipher_ *, const char*);

#ifndef soap_write_ns2__Dot11Cipher_
#define soap_write_ns2__Dot11Cipher_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11Cipher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11Cipher_ * SOAP_FMAC4 soap_get_ns2__Dot11Cipher_(struct soap*, ns2__Dot11Cipher_ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11Cipher_
#define soap_read_ns2__Dot11Cipher_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11Cipher_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11Cipher_ * SOAP_FMAC2 soap_instantiate_ns2__Dot11Cipher_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11Cipher_ * soap_new_ns2__Dot11Cipher_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11Cipher_(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11Cipher_ * soap_new_req_ns2__Dot11Cipher_(struct soap *soap, enum ns2__Dot11Cipher __item) { ns2__Dot11Cipher_ *_p = soap_instantiate_ns2__Dot11Cipher_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Cipher_::__item = __item; } return _p; }

inline ns2__Dot11Cipher_ * soap_new_set_ns2__Dot11Cipher_(struct soap *soap, enum ns2__Dot11Cipher __item, char *__item1) { ns2__Dot11Cipher_ *_p = soap_instantiate_ns2__Dot11Cipher_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Cipher_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11Cipher_(struct soap *soap, ns2__Dot11Cipher_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11Cipher_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11SecurityMode_
#define SOAP_TYPE_ns2__Dot11SecurityMode_ (819)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SecurityMode_(struct soap*, const char*, int, const ns2__Dot11SecurityMode_ *, const char*);
SOAP_FMAC3 ns2__Dot11SecurityMode_ * SOAP_FMAC4 soap_in_ns2__Dot11SecurityMode_(struct soap*, const char*, ns2__Dot11SecurityMode_ *, const char*);

#ifndef soap_write_ns2__Dot11SecurityMode_
#define soap_write_ns2__Dot11SecurityMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11SecurityMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SecurityMode_ * SOAP_FMAC4 soap_get_ns2__Dot11SecurityMode_(struct soap*, ns2__Dot11SecurityMode_ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SecurityMode_
#define soap_read_ns2__Dot11SecurityMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SecurityMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11SecurityMode_ * SOAP_FMAC2 soap_instantiate_ns2__Dot11SecurityMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11SecurityMode_ * soap_new_ns2__Dot11SecurityMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11SecurityMode_(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11SecurityMode_ * soap_new_req_ns2__Dot11SecurityMode_(struct soap *soap, enum ns2__Dot11SecurityMode __item) { ns2__Dot11SecurityMode_ *_p = soap_instantiate_ns2__Dot11SecurityMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SecurityMode_::__item = __item; } return _p; }

inline ns2__Dot11SecurityMode_ * soap_new_set_ns2__Dot11SecurityMode_(struct soap *soap, enum ns2__Dot11SecurityMode __item, char *__item1) { ns2__Dot11SecurityMode_ *_p = soap_instantiate_ns2__Dot11SecurityMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SecurityMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11SecurityMode_(struct soap *soap, ns2__Dot11SecurityMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11SecurityMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11StationMode_
#define SOAP_TYPE_ns2__Dot11StationMode_ (817)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11StationMode_(struct soap*, const char*, int, const ns2__Dot11StationMode_ *, const char*);
SOAP_FMAC3 ns2__Dot11StationMode_ * SOAP_FMAC4 soap_in_ns2__Dot11StationMode_(struct soap*, const char*, ns2__Dot11StationMode_ *, const char*);

#ifndef soap_write_ns2__Dot11StationMode_
#define soap_write_ns2__Dot11StationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11StationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11StationMode_ * SOAP_FMAC4 soap_get_ns2__Dot11StationMode_(struct soap*, ns2__Dot11StationMode_ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11StationMode_
#define soap_read_ns2__Dot11StationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11StationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11StationMode_ * SOAP_FMAC2 soap_instantiate_ns2__Dot11StationMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11StationMode_ * soap_new_ns2__Dot11StationMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11StationMode_(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11StationMode_ * soap_new_req_ns2__Dot11StationMode_(struct soap *soap, enum ns2__Dot11StationMode __item) { ns2__Dot11StationMode_ *_p = soap_instantiate_ns2__Dot11StationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11StationMode_::__item = __item; } return _p; }

inline ns2__Dot11StationMode_ * soap_new_set_ns2__Dot11StationMode_(struct soap *soap, enum ns2__Dot11StationMode __item, char *__item1) { ns2__Dot11StationMode_ *_p = soap_instantiate_ns2__Dot11StationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11StationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11StationMode_(struct soap *soap, ns2__Dot11StationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11StationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11SSIDType__
#define SOAP_TYPE_ns2__Dot11SSIDType__ (815)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SSIDType__(struct soap*, const char*, int, const ns2__Dot11SSIDType__ *, const char*);
SOAP_FMAC3 ns2__Dot11SSIDType__ * SOAP_FMAC4 soap_in_ns2__Dot11SSIDType__(struct soap*, const char*, ns2__Dot11SSIDType__ *, const char*);

#ifndef soap_write_ns2__Dot11SSIDType__
#define soap_write_ns2__Dot11SSIDType__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11SSIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SSIDType__ * SOAP_FMAC4 soap_get_ns2__Dot11SSIDType__(struct soap*, ns2__Dot11SSIDType__ *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SSIDType__
#define soap_read_ns2__Dot11SSIDType__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SSIDType__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11SSIDType__ * SOAP_FMAC2 soap_instantiate_ns2__Dot11SSIDType__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11SSIDType__ * soap_new_ns2__Dot11SSIDType__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11SSIDType__(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11SSIDType__ * soap_new_req_ns2__Dot11SSIDType__(struct soap *soap, const xsd__hexBinary& __item) { ns2__Dot11SSIDType__ *_p = soap_instantiate_ns2__Dot11SSIDType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SSIDType__::__item = __item; } return _p; }

inline ns2__Dot11SSIDType__ * soap_new_set_ns2__Dot11SSIDType__(struct soap *soap, const xsd__hexBinary& __item, char *__item1) { ns2__Dot11SSIDType__ *_p = soap_instantiate_ns2__Dot11SSIDType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SSIDType__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11SSIDType__(struct soap *soap, ns2__Dot11SSIDType__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11SSIDType__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11SSIDType
#define SOAP_TYPE_ns2__Dot11SSIDType (814)
#endif

#define soap_default_ns2__Dot11SSIDType(soap, a) (a)->xsd__hexBinary::soap_default(soap)


#define soap_serialize_ns2__Dot11SSIDType(soap, a) (a)->soap_serialize(soap)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SSIDType(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_ns2__Dot11SSIDType(struct soap*, const char*, xsd__hexBinary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Dot11SSIDType(struct soap*, const xsd__hexBinary *, const char*, const char*);

#ifndef soap_write_ns2__Dot11SSIDType
#define soap_write_ns2__Dot11SSIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11SSIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_ns2__Dot11SSIDType(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SSIDType
#define soap_read_ns2__Dot11SSIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SSIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__Dot11SSIDType soap_instantiate_xsd__hexBinary


#define soap_copy_ns2__Dot11SSIDType soap_copy_xsd__hexBinary

#ifndef SOAP_TYPE_ns2__DynamicDNSType_
#define SOAP_TYPE_ns2__DynamicDNSType_ (813)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DynamicDNSType_(struct soap*, const char*, int, const ns2__DynamicDNSType_ *, const char*);
SOAP_FMAC3 ns2__DynamicDNSType_ * SOAP_FMAC4 soap_in_ns2__DynamicDNSType_(struct soap*, const char*, ns2__DynamicDNSType_ *, const char*);

#ifndef soap_write_ns2__DynamicDNSType_
#define soap_write_ns2__DynamicDNSType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DynamicDNSType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DynamicDNSType_ * SOAP_FMAC4 soap_get_ns2__DynamicDNSType_(struct soap*, ns2__DynamicDNSType_ *, const char*, const char*);

#ifndef soap_read_ns2__DynamicDNSType_
#define soap_read_ns2__DynamicDNSType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DynamicDNSType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DynamicDNSType_ * SOAP_FMAC2 soap_instantiate_ns2__DynamicDNSType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DynamicDNSType_ * soap_new_ns2__DynamicDNSType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DynamicDNSType_(soap, n, NULL, NULL, NULL); }

inline ns2__DynamicDNSType_ * soap_new_req_ns2__DynamicDNSType_(struct soap *soap, enum ns2__DynamicDNSType __item) { ns2__DynamicDNSType_ *_p = soap_instantiate_ns2__DynamicDNSType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DynamicDNSType_::__item = __item; } return _p; }

inline ns2__DynamicDNSType_ * soap_new_set_ns2__DynamicDNSType_(struct soap *soap, enum ns2__DynamicDNSType __item, char *__item1) { ns2__DynamicDNSType_ *_p = soap_instantiate_ns2__DynamicDNSType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DynamicDNSType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DynamicDNSType_(struct soap *soap, ns2__DynamicDNSType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DynamicDNSType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPAddressFilterType_
#define SOAP_TYPE_ns2__IPAddressFilterType_ (811)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPAddressFilterType_(struct soap*, const char*, int, const ns2__IPAddressFilterType_ *, const char*);
SOAP_FMAC3 ns2__IPAddressFilterType_ * SOAP_FMAC4 soap_in_ns2__IPAddressFilterType_(struct soap*, const char*, ns2__IPAddressFilterType_ *, const char*);

#ifndef soap_write_ns2__IPAddressFilterType_
#define soap_write_ns2__IPAddressFilterType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPAddressFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPAddressFilterType_ * SOAP_FMAC4 soap_get_ns2__IPAddressFilterType_(struct soap*, ns2__IPAddressFilterType_ *, const char*, const char*);

#ifndef soap_read_ns2__IPAddressFilterType_
#define soap_read_ns2__IPAddressFilterType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPAddressFilterType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPAddressFilterType_ * SOAP_FMAC2 soap_instantiate_ns2__IPAddressFilterType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPAddressFilterType_ * soap_new_ns2__IPAddressFilterType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPAddressFilterType_(soap, n, NULL, NULL, NULL); }

inline ns2__IPAddressFilterType_ * soap_new_req_ns2__IPAddressFilterType_(struct soap *soap, enum ns2__IPAddressFilterType __item) { ns2__IPAddressFilterType_ *_p = soap_instantiate_ns2__IPAddressFilterType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddressFilterType_::__item = __item; } return _p; }

inline ns2__IPAddressFilterType_ * soap_new_set_ns2__IPAddressFilterType_(struct soap *soap, enum ns2__IPAddressFilterType __item, char *__item1) { ns2__IPAddressFilterType_ *_p = soap_instantiate_ns2__IPAddressFilterType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddressFilterType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPAddressFilterType_(struct soap *soap, ns2__IPAddressFilterType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPAddressFilterType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Domain__
#define SOAP_TYPE_ns2__Domain__ (809)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Domain__(struct soap*, const char*, int, const ns2__Domain__ *, const char*);
SOAP_FMAC3 ns2__Domain__ * SOAP_FMAC4 soap_in_ns2__Domain__(struct soap*, const char*, ns2__Domain__ *, const char*);

#ifndef soap_write_ns2__Domain__
#define soap_write_ns2__Domain__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Domain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Domain__ * SOAP_FMAC4 soap_get_ns2__Domain__(struct soap*, ns2__Domain__ *, const char*, const char*);

#ifndef soap_read_ns2__Domain__
#define soap_read_ns2__Domain__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Domain__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Domain__ * SOAP_FMAC2 soap_instantiate_ns2__Domain__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Domain__ * soap_new_ns2__Domain__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Domain__(soap, n, NULL, NULL, NULL); }

inline ns2__Domain__ * soap_new_req_ns2__Domain__(struct soap *soap, const std::string& __item) { ns2__Domain__ *_p = soap_instantiate_ns2__Domain__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Domain__::__item = __item; } return _p; }

inline ns2__Domain__ * soap_new_set_ns2__Domain__(struct soap *soap, const std::string& __item, char *__item1) { ns2__Domain__ *_p = soap_instantiate_ns2__Domain__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Domain__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Domain__(struct soap *soap, ns2__Domain__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Domain__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Domain
#define SOAP_TYPE_ns2__Domain (808)
#endif

#define soap_default_ns2__Domain(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Domain(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Domain(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__Domain(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Domain(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__Domain
#define soap_write_ns2__Domain(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Domain(soap, data), 0) || soap_put_ns2__Domain(soap, data, "ns2:Domain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__Domain(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__Domain
#define soap_read_ns2__Domain(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Domain(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__Domain soap_instantiate_std__string


#define soap_copy_ns2__Domain soap_copy_std__string

#ifndef SOAP_TYPE_ns2__DNSName__
#define SOAP_TYPE_ns2__DNSName__ (807)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DNSName__(struct soap*, const char*, int, const ns2__DNSName__ *, const char*);
SOAP_FMAC3 ns2__DNSName__ * SOAP_FMAC4 soap_in_ns2__DNSName__(struct soap*, const char*, ns2__DNSName__ *, const char*);

#ifndef soap_write_ns2__DNSName__
#define soap_write_ns2__DNSName__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DNSName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DNSName__ * SOAP_FMAC4 soap_get_ns2__DNSName__(struct soap*, ns2__DNSName__ *, const char*, const char*);

#ifndef soap_read_ns2__DNSName__
#define soap_read_ns2__DNSName__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DNSName__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DNSName__ * SOAP_FMAC2 soap_instantiate_ns2__DNSName__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DNSName__ * soap_new_ns2__DNSName__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DNSName__(soap, n, NULL, NULL, NULL); }

inline ns2__DNSName__ * soap_new_req_ns2__DNSName__(struct soap *soap, const std::string& __item) { ns2__DNSName__ *_p = soap_instantiate_ns2__DNSName__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DNSName__::__item = __item; } return _p; }

inline ns2__DNSName__ * soap_new_set_ns2__DNSName__(struct soap *soap, const std::string& __item, char *__item1) { ns2__DNSName__ *_p = soap_instantiate_ns2__DNSName__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DNSName__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DNSName__(struct soap *soap, ns2__DNSName__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DNSName__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DNSName
#define SOAP_TYPE_ns2__DNSName (806)
#endif

#define soap_default_ns2__DNSName(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__DNSName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DNSName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__DNSName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__DNSName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__DNSName
#define soap_write_ns2__DNSName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__DNSName(soap, data), 0) || soap_put_ns2__DNSName(soap, data, "ns2:DNSName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__DNSName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__DNSName
#define soap_read_ns2__DNSName(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DNSName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__DNSName soap_instantiate_std__string


#define soap_copy_ns2__DNSName soap_copy_std__string

#ifndef SOAP_TYPE_ns2__IPType_
#define SOAP_TYPE_ns2__IPType_ (805)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPType_(struct soap*, const char*, int, const ns2__IPType_ *, const char*);
SOAP_FMAC3 ns2__IPType_ * SOAP_FMAC4 soap_in_ns2__IPType_(struct soap*, const char*, ns2__IPType_ *, const char*);

#ifndef soap_write_ns2__IPType_
#define soap_write_ns2__IPType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPType_ * SOAP_FMAC4 soap_get_ns2__IPType_(struct soap*, ns2__IPType_ *, const char*, const char*);

#ifndef soap_read_ns2__IPType_
#define soap_read_ns2__IPType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPType_ * SOAP_FMAC2 soap_instantiate_ns2__IPType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPType_ * soap_new_ns2__IPType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPType_(soap, n, NULL, NULL, NULL); }

inline ns2__IPType_ * soap_new_req_ns2__IPType_(struct soap *soap, enum ns2__IPType __item) { ns2__IPType_ *_p = soap_instantiate_ns2__IPType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPType_::__item = __item; } return _p; }

inline ns2__IPType_ * soap_new_set_ns2__IPType_(struct soap *soap, enum ns2__IPType __item, char *__item1) { ns2__IPType_ *_p = soap_instantiate_ns2__IPType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPType_(struct soap *soap, ns2__IPType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__HwAddress__
#define SOAP_TYPE_ns2__HwAddress__ (803)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HwAddress__(struct soap*, const char*, int, const ns2__HwAddress__ *, const char*);
SOAP_FMAC3 ns2__HwAddress__ * SOAP_FMAC4 soap_in_ns2__HwAddress__(struct soap*, const char*, ns2__HwAddress__ *, const char*);

#ifndef soap_write_ns2__HwAddress__
#define soap_write_ns2__HwAddress__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:HwAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__HwAddress__ * SOAP_FMAC4 soap_get_ns2__HwAddress__(struct soap*, ns2__HwAddress__ *, const char*, const char*);

#ifndef soap_read_ns2__HwAddress__
#define soap_read_ns2__HwAddress__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__HwAddress__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__HwAddress__ * SOAP_FMAC2 soap_instantiate_ns2__HwAddress__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HwAddress__ * soap_new_ns2__HwAddress__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__HwAddress__(soap, n, NULL, NULL, NULL); }

inline ns2__HwAddress__ * soap_new_req_ns2__HwAddress__(struct soap *soap, const std::string& __item) { ns2__HwAddress__ *_p = soap_instantiate_ns2__HwAddress__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HwAddress__::__item = __item; } return _p; }

inline ns2__HwAddress__ * soap_new_set_ns2__HwAddress__(struct soap *soap, const std::string& __item, char *__item1) { ns2__HwAddress__ *_p = soap_instantiate_ns2__HwAddress__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HwAddress__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__HwAddress__(struct soap *soap, ns2__HwAddress__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__HwAddress__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__HwAddress
#define SOAP_TYPE_ns2__HwAddress (802)
#endif

#define soap_default_ns2__HwAddress(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__HwAddress(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HwAddress(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__HwAddress(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__HwAddress(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__HwAddress
#define soap_write_ns2__HwAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__HwAddress(soap, data), 0) || soap_put_ns2__HwAddress(soap, data, "ns2:HwAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__HwAddress(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__HwAddress
#define soap_read_ns2__HwAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__HwAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__HwAddress soap_instantiate_std__string


#define soap_copy_ns2__HwAddress soap_copy_std__string

#ifndef SOAP_TYPE_ns2__IPv6Address__
#define SOAP_TYPE_ns2__IPv6Address__ (801)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6Address__(struct soap*, const char*, int, const ns2__IPv6Address__ *, const char*);
SOAP_FMAC3 ns2__IPv6Address__ * SOAP_FMAC4 soap_in_ns2__IPv6Address__(struct soap*, const char*, ns2__IPv6Address__ *, const char*);

#ifndef soap_write_ns2__IPv6Address__
#define soap_write_ns2__IPv6Address__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6Address__ * SOAP_FMAC4 soap_get_ns2__IPv6Address__(struct soap*, ns2__IPv6Address__ *, const char*, const char*);

#ifndef soap_read_ns2__IPv6Address__
#define soap_read_ns2__IPv6Address__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6Address__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv6Address__ * SOAP_FMAC2 soap_instantiate_ns2__IPv6Address__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv6Address__ * soap_new_ns2__IPv6Address__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv6Address__(soap, n, NULL, NULL, NULL); }

inline ns2__IPv6Address__ * soap_new_req_ns2__IPv6Address__(struct soap *soap, const std::string& __item) { ns2__IPv6Address__ *_p = soap_instantiate_ns2__IPv6Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6Address__::__item = __item; } return _p; }

inline ns2__IPv6Address__ * soap_new_set_ns2__IPv6Address__(struct soap *soap, const std::string& __item, char *__item1) { ns2__IPv6Address__ *_p = soap_instantiate_ns2__IPv6Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6Address__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv6Address__(struct soap *soap, ns2__IPv6Address__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv6Address__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv6Address
#define SOAP_TYPE_ns2__IPv6Address (800)
#endif

#define soap_default_ns2__IPv6Address(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__IPv6Address(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6Address(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__IPv6Address(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IPv6Address(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__IPv6Address
#define soap_write_ns2__IPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IPv6Address(soap, data), 0) || soap_put_ns2__IPv6Address(soap, data, "ns2:IPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__IPv6Address(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__IPv6Address
#define soap_read_ns2__IPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__IPv6Address soap_instantiate_std__string


#define soap_copy_ns2__IPv6Address soap_copy_std__string

#ifndef SOAP_TYPE_ns2__IPv4Address__
#define SOAP_TYPE_ns2__IPv4Address__ (799)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv4Address__(struct soap*, const char*, int, const ns2__IPv4Address__ *, const char*);
SOAP_FMAC3 ns2__IPv4Address__ * SOAP_FMAC4 soap_in_ns2__IPv4Address__(struct soap*, const char*, ns2__IPv4Address__ *, const char*);

#ifndef soap_write_ns2__IPv4Address__
#define soap_write_ns2__IPv4Address__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4Address__ * SOAP_FMAC4 soap_get_ns2__IPv4Address__(struct soap*, ns2__IPv4Address__ *, const char*, const char*);

#ifndef soap_read_ns2__IPv4Address__
#define soap_read_ns2__IPv4Address__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv4Address__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv4Address__ * SOAP_FMAC2 soap_instantiate_ns2__IPv4Address__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv4Address__ * soap_new_ns2__IPv4Address__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv4Address__(soap, n, NULL, NULL, NULL); }

inline ns2__IPv4Address__ * soap_new_req_ns2__IPv4Address__(struct soap *soap, const std::string& __item) { ns2__IPv4Address__ *_p = soap_instantiate_ns2__IPv4Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4Address__::__item = __item; } return _p; }

inline ns2__IPv4Address__ * soap_new_set_ns2__IPv4Address__(struct soap *soap, const std::string& __item, char *__item1) { ns2__IPv4Address__ *_p = soap_instantiate_ns2__IPv4Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4Address__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv4Address__(struct soap *soap, ns2__IPv4Address__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv4Address__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv4Address
#define SOAP_TYPE_ns2__IPv4Address (798)
#endif

#define soap_default_ns2__IPv4Address(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__IPv4Address(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv4Address(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__IPv4Address(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IPv4Address(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__IPv4Address
#define soap_write_ns2__IPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IPv4Address(soap, data), 0) || soap_put_ns2__IPv4Address(soap, data, "ns2:IPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__IPv4Address(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__IPv4Address
#define soap_read_ns2__IPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__IPv4Address soap_instantiate_std__string


#define soap_copy_ns2__IPv4Address soap_copy_std__string

#ifndef SOAP_TYPE_ns2__NetworkHostType_
#define SOAP_TYPE_ns2__NetworkHostType_ (797)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkHostType_(struct soap*, const char*, int, const ns2__NetworkHostType_ *, const char*);
SOAP_FMAC3 ns2__NetworkHostType_ * SOAP_FMAC4 soap_in_ns2__NetworkHostType_(struct soap*, const char*, ns2__NetworkHostType_ *, const char*);

#ifndef soap_write_ns2__NetworkHostType_
#define soap_write_ns2__NetworkHostType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkHostType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkHostType_ * SOAP_FMAC4 soap_get_ns2__NetworkHostType_(struct soap*, ns2__NetworkHostType_ *, const char*, const char*);

#ifndef soap_read_ns2__NetworkHostType_
#define soap_read_ns2__NetworkHostType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkHostType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkHostType_ * SOAP_FMAC2 soap_instantiate_ns2__NetworkHostType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkHostType_ * soap_new_ns2__NetworkHostType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkHostType_(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkHostType_ * soap_new_req_ns2__NetworkHostType_(struct soap *soap, enum ns2__NetworkHostType __item) { ns2__NetworkHostType_ *_p = soap_instantiate_ns2__NetworkHostType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkHostType_::__item = __item; } return _p; }

inline ns2__NetworkHostType_ * soap_new_set_ns2__NetworkHostType_(struct soap *soap, enum ns2__NetworkHostType __item, char *__item1) { ns2__NetworkHostType_ *_p = soap_instantiate_ns2__NetworkHostType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkHostType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkHostType_(struct soap *soap, ns2__NetworkHostType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkHostType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkProtocolType_
#define SOAP_TYPE_ns2__NetworkProtocolType_ (795)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkProtocolType_(struct soap*, const char*, int, const ns2__NetworkProtocolType_ *, const char*);
SOAP_FMAC3 ns2__NetworkProtocolType_ * SOAP_FMAC4 soap_in_ns2__NetworkProtocolType_(struct soap*, const char*, ns2__NetworkProtocolType_ *, const char*);

#ifndef soap_write_ns2__NetworkProtocolType_
#define soap_write_ns2__NetworkProtocolType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkProtocolType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkProtocolType_ * SOAP_FMAC4 soap_get_ns2__NetworkProtocolType_(struct soap*, ns2__NetworkProtocolType_ *, const char*, const char*);

#ifndef soap_read_ns2__NetworkProtocolType_
#define soap_read_ns2__NetworkProtocolType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkProtocolType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkProtocolType_ * SOAP_FMAC2 soap_instantiate_ns2__NetworkProtocolType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkProtocolType_ * soap_new_ns2__NetworkProtocolType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkProtocolType_(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkProtocolType_ * soap_new_req_ns2__NetworkProtocolType_(struct soap *soap, enum ns2__NetworkProtocolType __item) { ns2__NetworkProtocolType_ *_p = soap_instantiate_ns2__NetworkProtocolType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkProtocolType_::__item = __item; } return _p; }

inline ns2__NetworkProtocolType_ * soap_new_set_ns2__NetworkProtocolType_(struct soap *soap, enum ns2__NetworkProtocolType __item, char *__item1) { ns2__NetworkProtocolType_ *_p = soap_instantiate_ns2__NetworkProtocolType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkProtocolType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkProtocolType_(struct soap *soap, ns2__NetworkProtocolType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkProtocolType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv6DHCPConfiguration_
#define SOAP_TYPE_ns2__IPv6DHCPConfiguration_ (793)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6DHCPConfiguration_(struct soap*, const char*, int, const ns2__IPv6DHCPConfiguration_ *, const char*);
SOAP_FMAC3 ns2__IPv6DHCPConfiguration_ * SOAP_FMAC4 soap_in_ns2__IPv6DHCPConfiguration_(struct soap*, const char*, ns2__IPv6DHCPConfiguration_ *, const char*);

#ifndef soap_write_ns2__IPv6DHCPConfiguration_
#define soap_write_ns2__IPv6DHCPConfiguration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv6DHCPConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6DHCPConfiguration_ * SOAP_FMAC4 soap_get_ns2__IPv6DHCPConfiguration_(struct soap*, ns2__IPv6DHCPConfiguration_ *, const char*, const char*);

#ifndef soap_read_ns2__IPv6DHCPConfiguration_
#define soap_read_ns2__IPv6DHCPConfiguration_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6DHCPConfiguration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv6DHCPConfiguration_ * SOAP_FMAC2 soap_instantiate_ns2__IPv6DHCPConfiguration_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv6DHCPConfiguration_ * soap_new_ns2__IPv6DHCPConfiguration_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv6DHCPConfiguration_(soap, n, NULL, NULL, NULL); }

inline ns2__IPv6DHCPConfiguration_ * soap_new_req_ns2__IPv6DHCPConfiguration_(struct soap *soap, enum ns2__IPv6DHCPConfiguration __item) { ns2__IPv6DHCPConfiguration_ *_p = soap_instantiate_ns2__IPv6DHCPConfiguration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6DHCPConfiguration_::__item = __item; } return _p; }

inline ns2__IPv6DHCPConfiguration_ * soap_new_set_ns2__IPv6DHCPConfiguration_(struct soap *soap, enum ns2__IPv6DHCPConfiguration __item, char *__item1) { ns2__IPv6DHCPConfiguration_ *_p = soap_instantiate_ns2__IPv6DHCPConfiguration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6DHCPConfiguration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv6DHCPConfiguration_(struct soap *soap, ns2__IPv6DHCPConfiguration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv6DHCPConfiguration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IANA_IfTypes__
#define SOAP_TYPE_ns2__IANA_IfTypes__ (791)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IANA_IfTypes__(struct soap*, const char*, int, const ns2__IANA_IfTypes__ *, const char*);
SOAP_FMAC3 ns2__IANA_IfTypes__ * SOAP_FMAC4 soap_in_ns2__IANA_IfTypes__(struct soap*, const char*, ns2__IANA_IfTypes__ *, const char*);

#ifndef soap_write_ns2__IANA_IfTypes__
#define soap_write_ns2__IANA_IfTypes__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IANA-IfTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IANA_IfTypes__ * SOAP_FMAC4 soap_get_ns2__IANA_IfTypes__(struct soap*, ns2__IANA_IfTypes__ *, const char*, const char*);

#ifndef soap_read_ns2__IANA_IfTypes__
#define soap_read_ns2__IANA_IfTypes__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IANA_IfTypes__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IANA_IfTypes__ * SOAP_FMAC2 soap_instantiate_ns2__IANA_IfTypes__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IANA_IfTypes__ * soap_new_ns2__IANA_IfTypes__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IANA_IfTypes__(soap, n, NULL, NULL, NULL); }

inline ns2__IANA_IfTypes__ * soap_new_req_ns2__IANA_IfTypes__(struct soap *soap, int __item) { ns2__IANA_IfTypes__ *_p = soap_instantiate_ns2__IANA_IfTypes__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IANA_IfTypes__::__item = __item; } return _p; }

inline ns2__IANA_IfTypes__ * soap_new_set_ns2__IANA_IfTypes__(struct soap *soap, int __item, char *__item1) { ns2__IANA_IfTypes__ *_p = soap_instantiate_ns2__IANA_IfTypes__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IANA_IfTypes__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IANA_IfTypes__(struct soap *soap, ns2__IANA_IfTypes__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IANA_IfTypes__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Duplex_
#define SOAP_TYPE_ns2__Duplex_ (789)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Duplex_(struct soap*, const char*, int, const ns2__Duplex_ *, const char*);
SOAP_FMAC3 ns2__Duplex_ * SOAP_FMAC4 soap_in_ns2__Duplex_(struct soap*, const char*, ns2__Duplex_ *, const char*);

#ifndef soap_write_ns2__Duplex_
#define soap_write_ns2__Duplex_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Duplex", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Duplex_ * SOAP_FMAC4 soap_get_ns2__Duplex_(struct soap*, ns2__Duplex_ *, const char*, const char*);

#ifndef soap_read_ns2__Duplex_
#define soap_read_ns2__Duplex_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Duplex_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Duplex_ * SOAP_FMAC2 soap_instantiate_ns2__Duplex_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Duplex_ * soap_new_ns2__Duplex_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Duplex_(soap, n, NULL, NULL, NULL); }

inline ns2__Duplex_ * soap_new_req_ns2__Duplex_(struct soap *soap, enum ns2__Duplex __item) { ns2__Duplex_ *_p = soap_instantiate_ns2__Duplex_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Duplex_::__item = __item; } return _p; }

inline ns2__Duplex_ * soap_new_set_ns2__Duplex_(struct soap *soap, enum ns2__Duplex __item, char *__item1) { ns2__Duplex_ *_p = soap_instantiate_ns2__Duplex_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Duplex_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Duplex_(struct soap *soap, ns2__Duplex_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Duplex_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceConfigPriority__
#define SOAP_TYPE_ns2__NetworkInterfaceConfigPriority__ (787)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceConfigPriority__(struct soap*, const char*, int, const ns2__NetworkInterfaceConfigPriority__ *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceConfigPriority__ * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceConfigPriority__(struct soap*, const char*, ns2__NetworkInterfaceConfigPriority__ *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceConfigPriority__
#define soap_write_ns2__NetworkInterfaceConfigPriority__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceConfigPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceConfigPriority__ * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceConfigPriority__(struct soap*, ns2__NetworkInterfaceConfigPriority__ *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceConfigPriority__
#define soap_read_ns2__NetworkInterfaceConfigPriority__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceConfigPriority__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceConfigPriority__ * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceConfigPriority__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceConfigPriority__ * soap_new_ns2__NetworkInterfaceConfigPriority__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceConfigPriority__(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceConfigPriority__ * soap_new_req_ns2__NetworkInterfaceConfigPriority__(struct soap *soap, const std::string& __item) { ns2__NetworkInterfaceConfigPriority__ *_p = soap_instantiate_ns2__NetworkInterfaceConfigPriority__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceConfigPriority__::__item = __item; } return _p; }

inline ns2__NetworkInterfaceConfigPriority__ * soap_new_set_ns2__NetworkInterfaceConfigPriority__(struct soap *soap, const std::string& __item, char *__item1) { ns2__NetworkInterfaceConfigPriority__ *_p = soap_instantiate_ns2__NetworkInterfaceConfigPriority__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceConfigPriority__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceConfigPriority__(struct soap *soap, ns2__NetworkInterfaceConfigPriority__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceConfigPriority__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceConfigPriority
#define SOAP_TYPE_ns2__NetworkInterfaceConfigPriority (786)
#endif

#define soap_default_ns2__NetworkInterfaceConfigPriority(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__NetworkInterfaceConfigPriority(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceConfigPriority(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceConfigPriority(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__NetworkInterfaceConfigPriority(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__NetworkInterfaceConfigPriority
#define soap_write_ns2__NetworkInterfaceConfigPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__NetworkInterfaceConfigPriority(soap, data), 0) || soap_put_ns2__NetworkInterfaceConfigPriority(soap, data, "ns2:NetworkInterfaceConfigPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceConfigPriority(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceConfigPriority
#define soap_read_ns2__NetworkInterfaceConfigPriority(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceConfigPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__NetworkInterfaceConfigPriority soap_instantiate_std__string


#define soap_copy_ns2__NetworkInterfaceConfigPriority soap_copy_std__string

#ifndef SOAP_TYPE_ns2__DiscoveryMode_
#define SOAP_TYPE_ns2__DiscoveryMode_ (785)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DiscoveryMode_(struct soap*, const char*, int, const ns2__DiscoveryMode_ *, const char*);
SOAP_FMAC3 ns2__DiscoveryMode_ * SOAP_FMAC4 soap_in_ns2__DiscoveryMode_(struct soap*, const char*, ns2__DiscoveryMode_ *, const char*);

#ifndef soap_write_ns2__DiscoveryMode_
#define soap_write_ns2__DiscoveryMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DiscoveryMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DiscoveryMode_ * SOAP_FMAC4 soap_get_ns2__DiscoveryMode_(struct soap*, ns2__DiscoveryMode_ *, const char*, const char*);

#ifndef soap_read_ns2__DiscoveryMode_
#define soap_read_ns2__DiscoveryMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DiscoveryMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DiscoveryMode_ * SOAP_FMAC2 soap_instantiate_ns2__DiscoveryMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DiscoveryMode_ * soap_new_ns2__DiscoveryMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DiscoveryMode_(soap, n, NULL, NULL, NULL); }

inline ns2__DiscoveryMode_ * soap_new_req_ns2__DiscoveryMode_(struct soap *soap, enum ns2__DiscoveryMode __item) { ns2__DiscoveryMode_ *_p = soap_instantiate_ns2__DiscoveryMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DiscoveryMode_::__item = __item; } return _p; }

inline ns2__DiscoveryMode_ * soap_new_set_ns2__DiscoveryMode_(struct soap *soap, enum ns2__DiscoveryMode __item, char *__item1) { ns2__DiscoveryMode_ *_p = soap_instantiate_ns2__DiscoveryMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DiscoveryMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DiscoveryMode_(struct soap *soap, ns2__DiscoveryMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DiscoveryMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ScopeDefinition_
#define SOAP_TYPE_ns2__ScopeDefinition_ (783)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ScopeDefinition_(struct soap*, const char*, int, const ns2__ScopeDefinition_ *, const char*);
SOAP_FMAC3 ns2__ScopeDefinition_ * SOAP_FMAC4 soap_in_ns2__ScopeDefinition_(struct soap*, const char*, ns2__ScopeDefinition_ *, const char*);

#ifndef soap_write_ns2__ScopeDefinition_
#define soap_write_ns2__ScopeDefinition_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ScopeDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ScopeDefinition_ * SOAP_FMAC4 soap_get_ns2__ScopeDefinition_(struct soap*, ns2__ScopeDefinition_ *, const char*, const char*);

#ifndef soap_read_ns2__ScopeDefinition_
#define soap_read_ns2__ScopeDefinition_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ScopeDefinition_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ScopeDefinition_ * SOAP_FMAC2 soap_instantiate_ns2__ScopeDefinition_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ScopeDefinition_ * soap_new_ns2__ScopeDefinition_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ScopeDefinition_(soap, n, NULL, NULL, NULL); }

inline ns2__ScopeDefinition_ * soap_new_req_ns2__ScopeDefinition_(struct soap *soap, enum ns2__ScopeDefinition __item) { ns2__ScopeDefinition_ *_p = soap_instantiate_ns2__ScopeDefinition_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ScopeDefinition_::__item = __item; } return _p; }

inline ns2__ScopeDefinition_ * soap_new_set_ns2__ScopeDefinition_(struct soap *soap, enum ns2__ScopeDefinition __item, char *__item1) { ns2__ScopeDefinition_ *_p = soap_instantiate_ns2__ScopeDefinition_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ScopeDefinition_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ScopeDefinition_(struct soap *soap, ns2__ScopeDefinition_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ScopeDefinition_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TransportProtocol_
#define SOAP_TYPE_ns2__TransportProtocol_ (781)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TransportProtocol_(struct soap*, const char*, int, const ns2__TransportProtocol_ *, const char*);
SOAP_FMAC3 ns2__TransportProtocol_ * SOAP_FMAC4 soap_in_ns2__TransportProtocol_(struct soap*, const char*, ns2__TransportProtocol_ *, const char*);

#ifndef soap_write_ns2__TransportProtocol_
#define soap_write_ns2__TransportProtocol_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TransportProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TransportProtocol_ * SOAP_FMAC4 soap_get_ns2__TransportProtocol_(struct soap*, ns2__TransportProtocol_ *, const char*, const char*);

#ifndef soap_read_ns2__TransportProtocol_
#define soap_read_ns2__TransportProtocol_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TransportProtocol_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TransportProtocol_ * SOAP_FMAC2 soap_instantiate_ns2__TransportProtocol_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TransportProtocol_ * soap_new_ns2__TransportProtocol_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TransportProtocol_(soap, n, NULL, NULL, NULL); }

inline ns2__TransportProtocol_ * soap_new_req_ns2__TransportProtocol_(struct soap *soap, enum ns2__TransportProtocol __item) { ns2__TransportProtocol_ *_p = soap_instantiate_ns2__TransportProtocol_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TransportProtocol_::__item = __item; } return _p; }

inline ns2__TransportProtocol_ * soap_new_set_ns2__TransportProtocol_(struct soap *soap, enum ns2__TransportProtocol __item, char *__item1) { ns2__TransportProtocol_ *_p = soap_instantiate_ns2__TransportProtocol_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TransportProtocol_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TransportProtocol_(struct soap *soap, ns2__TransportProtocol_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TransportProtocol_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__StreamType_
#define SOAP_TYPE_ns2__StreamType_ (779)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StreamType_(struct soap*, const char*, int, const ns2__StreamType_ *, const char*);
SOAP_FMAC3 ns2__StreamType_ * SOAP_FMAC4 soap_in_ns2__StreamType_(struct soap*, const char*, ns2__StreamType_ *, const char*);

#ifndef soap_write_ns2__StreamType_
#define soap_write_ns2__StreamType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:StreamType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__StreamType_ * SOAP_FMAC4 soap_get_ns2__StreamType_(struct soap*, ns2__StreamType_ *, const char*, const char*);

#ifndef soap_read_ns2__StreamType_
#define soap_read_ns2__StreamType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StreamType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__StreamType_ * SOAP_FMAC2 soap_instantiate_ns2__StreamType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__StreamType_ * soap_new_ns2__StreamType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__StreamType_(soap, n, NULL, NULL, NULL); }

inline ns2__StreamType_ * soap_new_req_ns2__StreamType_(struct soap *soap, enum ns2__StreamType __item) { ns2__StreamType_ *_p = soap_instantiate_ns2__StreamType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StreamType_::__item = __item; } return _p; }

inline ns2__StreamType_ * soap_new_set_ns2__StreamType_(struct soap *soap, enum ns2__StreamType __item, char *__item1) { ns2__StreamType_ *_p = soap_instantiate_ns2__StreamType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StreamType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__StreamType_(struct soap *soap, ns2__StreamType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__StreamType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataCompressionType_
#define SOAP_TYPE_ns2__MetadataCompressionType_ (777)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataCompressionType_(struct soap*, const char*, int, const ns2__MetadataCompressionType_ *, const char*);
SOAP_FMAC3 ns2__MetadataCompressionType_ * SOAP_FMAC4 soap_in_ns2__MetadataCompressionType_(struct soap*, const char*, ns2__MetadataCompressionType_ *, const char*);

#ifndef soap_write_ns2__MetadataCompressionType_
#define soap_write_ns2__MetadataCompressionType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataCompressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataCompressionType_ * SOAP_FMAC4 soap_get_ns2__MetadataCompressionType_(struct soap*, ns2__MetadataCompressionType_ *, const char*, const char*);

#ifndef soap_read_ns2__MetadataCompressionType_
#define soap_read_ns2__MetadataCompressionType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataCompressionType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataCompressionType_ * SOAP_FMAC2 soap_instantiate_ns2__MetadataCompressionType_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataCompressionType_ * soap_new_ns2__MetadataCompressionType_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataCompressionType_(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataCompressionType_ * soap_new_req_ns2__MetadataCompressionType_(struct soap *soap, enum ns2__MetadataCompressionType __item) { ns2__MetadataCompressionType_ *_p = soap_instantiate_ns2__MetadataCompressionType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataCompressionType_::__item = __item; } return _p; }

inline ns2__MetadataCompressionType_ * soap_new_set_ns2__MetadataCompressionType_(struct soap *soap, enum ns2__MetadataCompressionType __item, char *__item1) { ns2__MetadataCompressionType_ *_p = soap_instantiate_ns2__MetadataCompressionType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataCompressionType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataCompressionType_(struct soap *soap, ns2__MetadataCompressionType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataCompressionType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioEncoding_
#define SOAP_TYPE_ns2__AudioEncoding_ (775)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioEncoding_(struct soap*, const char*, int, const ns2__AudioEncoding_ *, const char*);
SOAP_FMAC3 ns2__AudioEncoding_ * SOAP_FMAC4 soap_in_ns2__AudioEncoding_(struct soap*, const char*, ns2__AudioEncoding_ *, const char*);

#ifndef soap_write_ns2__AudioEncoding_
#define soap_write_ns2__AudioEncoding_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoding_ * SOAP_FMAC4 soap_get_ns2__AudioEncoding_(struct soap*, ns2__AudioEncoding_ *, const char*, const char*);

#ifndef soap_read_ns2__AudioEncoding_
#define soap_read_ns2__AudioEncoding_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioEncoding_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioEncoding_ * SOAP_FMAC2 soap_instantiate_ns2__AudioEncoding_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioEncoding_ * soap_new_ns2__AudioEncoding_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioEncoding_(soap, n, NULL, NULL, NULL); }

inline ns2__AudioEncoding_ * soap_new_req_ns2__AudioEncoding_(struct soap *soap, enum ns2__AudioEncoding __item) { ns2__AudioEncoding_ *_p = soap_instantiate_ns2__AudioEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoding_::__item = __item; } return _p; }

inline ns2__AudioEncoding_ * soap_new_set_ns2__AudioEncoding_(struct soap *soap, enum ns2__AudioEncoding __item, char *__item1) { ns2__AudioEncoding_ *_p = soap_instantiate_ns2__AudioEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoding_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioEncoding_(struct soap *soap, ns2__AudioEncoding_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioEncoding_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__H264Profile_
#define SOAP_TYPE_ns2__H264Profile_ (773)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__H264Profile_(struct soap*, const char*, int, const ns2__H264Profile_ *, const char*);
SOAP_FMAC3 ns2__H264Profile_ * SOAP_FMAC4 soap_in_ns2__H264Profile_(struct soap*, const char*, ns2__H264Profile_ *, const char*);

#ifndef soap_write_ns2__H264Profile_
#define soap_write_ns2__H264Profile_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:H264Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Profile_ * SOAP_FMAC4 soap_get_ns2__H264Profile_(struct soap*, ns2__H264Profile_ *, const char*, const char*);

#ifndef soap_read_ns2__H264Profile_
#define soap_read_ns2__H264Profile_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__H264Profile_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__H264Profile_ * SOAP_FMAC2 soap_instantiate_ns2__H264Profile_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__H264Profile_ * soap_new_ns2__H264Profile_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__H264Profile_(soap, n, NULL, NULL, NULL); }

inline ns2__H264Profile_ * soap_new_req_ns2__H264Profile_(struct soap *soap, enum ns2__H264Profile __item) { ns2__H264Profile_ *_p = soap_instantiate_ns2__H264Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Profile_::__item = __item; } return _p; }

inline ns2__H264Profile_ * soap_new_set_ns2__H264Profile_(struct soap *soap, enum ns2__H264Profile __item, char *__item1) { ns2__H264Profile_ *_p = soap_instantiate_ns2__H264Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Profile_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__H264Profile_(struct soap *soap, ns2__H264Profile_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__H264Profile_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Mpeg4Profile_
#define SOAP_TYPE_ns2__Mpeg4Profile_ (771)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Mpeg4Profile_(struct soap*, const char*, int, const ns2__Mpeg4Profile_ *, const char*);
SOAP_FMAC3 ns2__Mpeg4Profile_ * SOAP_FMAC4 soap_in_ns2__Mpeg4Profile_(struct soap*, const char*, ns2__Mpeg4Profile_ *, const char*);

#ifndef soap_write_ns2__Mpeg4Profile_
#define soap_write_ns2__Mpeg4Profile_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Mpeg4Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Profile_ * SOAP_FMAC4 soap_get_ns2__Mpeg4Profile_(struct soap*, ns2__Mpeg4Profile_ *, const char*, const char*);

#ifndef soap_read_ns2__Mpeg4Profile_
#define soap_read_ns2__Mpeg4Profile_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Mpeg4Profile_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Mpeg4Profile_ * SOAP_FMAC2 soap_instantiate_ns2__Mpeg4Profile_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Mpeg4Profile_ * soap_new_ns2__Mpeg4Profile_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Mpeg4Profile_(soap, n, NULL, NULL, NULL); }

inline ns2__Mpeg4Profile_ * soap_new_req_ns2__Mpeg4Profile_(struct soap *soap, enum ns2__Mpeg4Profile __item) { ns2__Mpeg4Profile_ *_p = soap_instantiate_ns2__Mpeg4Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Profile_::__item = __item; } return _p; }

inline ns2__Mpeg4Profile_ * soap_new_set_ns2__Mpeg4Profile_(struct soap *soap, enum ns2__Mpeg4Profile __item, char *__item1) { ns2__Mpeg4Profile_ *_p = soap_instantiate_ns2__Mpeg4Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Profile_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Mpeg4Profile_(struct soap *soap, ns2__Mpeg4Profile_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Mpeg4Profile_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoEncoding_
#define SOAP_TYPE_ns2__VideoEncoding_ (769)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoEncoding_(struct soap*, const char*, int, const ns2__VideoEncoding_ *, const char*);
SOAP_FMAC3 ns2__VideoEncoding_ * SOAP_FMAC4 soap_in_ns2__VideoEncoding_(struct soap*, const char*, ns2__VideoEncoding_ *, const char*);

#ifndef soap_write_ns2__VideoEncoding_
#define soap_write_ns2__VideoEncoding_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoding_ * SOAP_FMAC4 soap_get_ns2__VideoEncoding_(struct soap*, ns2__VideoEncoding_ *, const char*, const char*);

#ifndef soap_read_ns2__VideoEncoding_
#define soap_read_ns2__VideoEncoding_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoEncoding_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoEncoding_ * SOAP_FMAC2 soap_instantiate_ns2__VideoEncoding_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoEncoding_ * soap_new_ns2__VideoEncoding_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoEncoding_(soap, n, NULL, NULL, NULL); }

inline ns2__VideoEncoding_ * soap_new_req_ns2__VideoEncoding_(struct soap *soap, enum ns2__VideoEncoding __item) { ns2__VideoEncoding_ *_p = soap_instantiate_ns2__VideoEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoding_::__item = __item; } return _p; }

inline ns2__VideoEncoding_ * soap_new_set_ns2__VideoEncoding_(struct soap *soap, enum ns2__VideoEncoding __item, char *__item1) { ns2__VideoEncoding_ *_p = soap_instantiate_ns2__VideoEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoding_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoEncoding_(struct soap *soap, ns2__VideoEncoding_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoEncoding_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RotateMode_
#define SOAP_TYPE_ns2__RotateMode_ (767)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RotateMode_(struct soap*, const char*, int, const ns2__RotateMode_ *, const char*);
SOAP_FMAC3 ns2__RotateMode_ * SOAP_FMAC4 soap_in_ns2__RotateMode_(struct soap*, const char*, ns2__RotateMode_ *, const char*);

#ifndef soap_write_ns2__RotateMode_
#define soap_write_ns2__RotateMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RotateMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateMode_ * SOAP_FMAC4 soap_get_ns2__RotateMode_(struct soap*, ns2__RotateMode_ *, const char*, const char*);

#ifndef soap_read_ns2__RotateMode_
#define soap_read_ns2__RotateMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RotateMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RotateMode_ * SOAP_FMAC2 soap_instantiate_ns2__RotateMode_(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RotateMode_ * soap_new_ns2__RotateMode_(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RotateMode_(soap, n, NULL, NULL, NULL); }

inline ns2__RotateMode_ * soap_new_req_ns2__RotateMode_(struct soap *soap, enum ns2__RotateMode __item) { ns2__RotateMode_ *_p = soap_instantiate_ns2__RotateMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RotateMode_::__item = __item; } return _p; }

inline ns2__RotateMode_ * soap_new_set_ns2__RotateMode_(struct soap *soap, enum ns2__RotateMode __item, char *__item1) { ns2__RotateMode_ *_p = soap_instantiate_ns2__RotateMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RotateMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RotateMode_(struct soap *soap, ns2__RotateMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RotateMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Name__
#define SOAP_TYPE_ns2__Name__ (765)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Name__(struct soap*, const char*, int, const ns2__Name__ *, const char*);
SOAP_FMAC3 ns2__Name__ * SOAP_FMAC4 soap_in_ns2__Name__(struct soap*, const char*, ns2__Name__ *, const char*);

#ifndef soap_write_ns2__Name__
#define soap_write_ns2__Name__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Name__ * SOAP_FMAC4 soap_get_ns2__Name__(struct soap*, ns2__Name__ *, const char*, const char*);

#ifndef soap_read_ns2__Name__
#define soap_read_ns2__Name__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Name__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Name__ * SOAP_FMAC2 soap_instantiate_ns2__Name__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Name__ * soap_new_ns2__Name__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Name__(soap, n, NULL, NULL, NULL); }

inline ns2__Name__ * soap_new_req_ns2__Name__(struct soap *soap, const std::string& __item) { ns2__Name__ *_p = soap_instantiate_ns2__Name__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Name__::__item = __item; } return _p; }

inline ns2__Name__ * soap_new_set_ns2__Name__(struct soap *soap, const std::string& __item, char *__item1) { ns2__Name__ *_p = soap_instantiate_ns2__Name__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Name__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Name__(struct soap *soap, ns2__Name__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Name__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Name
#define SOAP_TYPE_ns2__Name (764)
#endif

#define soap_default_ns2__Name(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Name(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Name(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__Name(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Name(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__Name
#define soap_write_ns2__Name(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Name(soap, data), 0) || soap_put_ns2__Name(soap, data, "ns2:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__Name(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__Name
#define soap_read_ns2__Name(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Name(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__Name soap_instantiate_std__string


#define soap_copy_ns2__Name soap_copy_std__string

#ifndef SOAP_TYPE_ns2__ReferenceToken__
#define SOAP_TYPE_ns2__ReferenceToken__ (763)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReferenceToken__(struct soap*, const char*, int, const ns2__ReferenceToken__ *, const char*);
SOAP_FMAC3 ns2__ReferenceToken__ * SOAP_FMAC4 soap_in_ns2__ReferenceToken__(struct soap*, const char*, ns2__ReferenceToken__ *, const char*);

#ifndef soap_write_ns2__ReferenceToken__
#define soap_write_ns2__ReferenceToken__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReferenceToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReferenceToken__ * SOAP_FMAC4 soap_get_ns2__ReferenceToken__(struct soap*, ns2__ReferenceToken__ *, const char*, const char*);

#ifndef soap_read_ns2__ReferenceToken__
#define soap_read_ns2__ReferenceToken__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReferenceToken__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReferenceToken__ * SOAP_FMAC2 soap_instantiate_ns2__ReferenceToken__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReferenceToken__ * soap_new_ns2__ReferenceToken__(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReferenceToken__(soap, n, NULL, NULL, NULL); }

inline ns2__ReferenceToken__ * soap_new_req_ns2__ReferenceToken__(struct soap *soap, const std::string& __item) { ns2__ReferenceToken__ *_p = soap_instantiate_ns2__ReferenceToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReferenceToken__::__item = __item; } return _p; }

inline ns2__ReferenceToken__ * soap_new_set_ns2__ReferenceToken__(struct soap *soap, const std::string& __item, char *__item1) { ns2__ReferenceToken__ *_p = soap_instantiate_ns2__ReferenceToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReferenceToken__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReferenceToken__(struct soap *soap, ns2__ReferenceToken__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReferenceToken__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReferenceToken
#define SOAP_TYPE_ns2__ReferenceToken (762)
#endif

#define soap_default_ns2__ReferenceToken(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ReferenceToken(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__ReferenceToken(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__ReferenceToken
#define soap_write_ns2__ReferenceToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ReferenceToken(soap, data), 0) || soap_put_ns2__ReferenceToken(soap, data, "ns2:ReferenceToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__ReferenceToken(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__ReferenceToken
#define soap_read_ns2__ReferenceToken(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReferenceToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__ReferenceToken soap_instantiate_std__string


#define soap_copy_ns2__ReferenceToken soap_copy_std__string

#ifndef SOAP_TYPE_ns7__FaultCodesOpenEnumType
#define SOAP_TYPE_ns7__FaultCodesOpenEnumType (761)
#endif

#define soap_default_ns7__FaultCodesOpenEnumType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns7__FaultCodesOpenEnumType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__FaultCodesOpenEnumType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns7__FaultCodesOpenEnumType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__FaultCodesOpenEnumType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns7__FaultCodesOpenEnumType
#define soap_write_ns7__FaultCodesOpenEnumType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns7__FaultCodesOpenEnumType(soap, data), 0) || soap_put_ns7__FaultCodesOpenEnumType(soap, data, "ns7:FaultCodesOpenEnumType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns7__FaultCodesOpenEnumType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns7__FaultCodesOpenEnumType
#define soap_read_ns7__FaultCodesOpenEnumType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__FaultCodesOpenEnumType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns7__FaultCodesOpenEnumType soap_instantiate_std__string


#define soap_copy_ns7__FaultCodesOpenEnumType soap_copy_std__string

#ifndef SOAP_TYPE_ns7__RelationshipTypeOpenEnum
#define SOAP_TYPE_ns7__RelationshipTypeOpenEnum (760)
#endif

#define soap_default_ns7__RelationshipTypeOpenEnum(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns7__RelationshipTypeOpenEnum(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__RelationshipTypeOpenEnum(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns7__RelationshipTypeOpenEnum(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__RelationshipTypeOpenEnum(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns7__RelationshipTypeOpenEnum
#define soap_write_ns7__RelationshipTypeOpenEnum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns7__RelationshipTypeOpenEnum(soap, data), 0) || soap_put_ns7__RelationshipTypeOpenEnum(soap, data, "ns7:RelationshipTypeOpenEnum", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns7__RelationshipTypeOpenEnum(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns7__RelationshipTypeOpenEnum
#define soap_read_ns7__RelationshipTypeOpenEnum(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__RelationshipTypeOpenEnum(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns7__RelationshipTypeOpenEnum soap_instantiate_std__string


#define soap_copy_ns7__RelationshipTypeOpenEnum soap_copy_std__string

#ifndef SOAP_TYPE_ns3__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_ns3__AbsoluteOrRelativeTimeType (759)
#endif

#define soap_default_ns3__AbsoluteOrRelativeTimeType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__AbsoluteOrRelativeTimeType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AbsoluteOrRelativeTimeType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AbsoluteOrRelativeTimeType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns3__AbsoluteOrRelativeTimeType
#define soap_write_ns3__AbsoluteOrRelativeTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns3__AbsoluteOrRelativeTimeType(soap, data), 0) || soap_put_ns3__AbsoluteOrRelativeTimeType(soap, data, "ns3:AbsoluteOrRelativeTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__AbsoluteOrRelativeTimeType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns3__AbsoluteOrRelativeTimeType
#define soap_read_ns3__AbsoluteOrRelativeTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__AbsoluteOrRelativeTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns3__AbsoluteOrRelativeTimeType soap_instantiate_std__string


#define soap_copy_ns3__AbsoluteOrRelativeTimeType soap_copy_std__string

#ifndef SOAP_TYPE_ns2__ReferenceTokenList
#define SOAP_TYPE_ns2__ReferenceTokenList (758)
#endif

#define soap_default_ns2__ReferenceTokenList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ReferenceTokenList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReferenceTokenList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__ReferenceTokenList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReferenceTokenList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__ReferenceTokenList
#define soap_write_ns2__ReferenceTokenList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ReferenceTokenList(soap, data), 0) || soap_put_ns2__ReferenceTokenList(soap, data, "ns2:ReferenceTokenList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__ReferenceTokenList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__ReferenceTokenList
#define soap_read_ns2__ReferenceTokenList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReferenceTokenList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__ReferenceTokenList soap_instantiate_std__string


#define soap_copy_ns2__ReferenceTokenList soap_copy_std__string

#ifndef SOAP_TYPE_ns2__StringAttrList
#define SOAP_TYPE_ns2__StringAttrList (757)
#endif

#define soap_default_ns2__StringAttrList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__StringAttrList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StringAttrList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__StringAttrList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__StringAttrList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__StringAttrList
#define soap_write_ns2__StringAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__StringAttrList(soap, data), 0) || soap_put_ns2__StringAttrList(soap, data, "ns2:StringAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__StringAttrList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__StringAttrList
#define soap_read_ns2__StringAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StringAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__StringAttrList soap_instantiate_std__string


#define soap_copy_ns2__StringAttrList soap_copy_std__string

#ifndef SOAP_TYPE_ns2__FloatAttrList
#define SOAP_TYPE_ns2__FloatAttrList (756)
#endif

#define soap_default_ns2__FloatAttrList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__FloatAttrList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FloatAttrList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__FloatAttrList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FloatAttrList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__FloatAttrList
#define soap_write_ns2__FloatAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__FloatAttrList(soap, data), 0) || soap_put_ns2__FloatAttrList(soap, data, "ns2:FloatAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__FloatAttrList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__FloatAttrList
#define soap_read_ns2__FloatAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FloatAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__FloatAttrList soap_instantiate_std__string


#define soap_copy_ns2__FloatAttrList soap_copy_std__string

#ifndef SOAP_TYPE_ns2__IntAttrList
#define SOAP_TYPE_ns2__IntAttrList (755)
#endif

#define soap_default_ns2__IntAttrList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__IntAttrList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IntAttrList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__IntAttrList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__IntAttrList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__IntAttrList
#define soap_write_ns2__IntAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__IntAttrList(soap, data), 0) || soap_put_ns2__IntAttrList(soap, data, "ns2:IntAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__IntAttrList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__IntAttrList
#define soap_read_ns2__IntAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IntAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__IntAttrList soap_instantiate_std__string


#define soap_copy_ns2__IntAttrList soap_copy_std__string

#ifndef SOAP_TYPE_ns1__EncodingTypes
#define SOAP_TYPE_ns1__EncodingTypes (754)
#endif

#define soap_default_ns1__EncodingTypes(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__EncodingTypes(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EncodingTypes(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__EncodingTypes(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__EncodingTypes(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns1__EncodingTypes
#define soap_write_ns1__EncodingTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__EncodingTypes(soap, data), 0) || soap_put_ns1__EncodingTypes(soap, data, "ns1:EncodingTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__EncodingTypes(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns1__EncodingTypes
#define soap_read_ns1__EncodingTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__EncodingTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns1__EncodingTypes soap_instantiate_std__string


#define soap_copy_ns1__EncodingTypes soap_copy_std__string

#ifndef SOAP_TYPE_ns7__ProblemActionType
#define SOAP_TYPE_ns7__ProblemActionType (753)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__ProblemActionType(struct soap*, const char*, int, const ns7__ProblemActionType *, const char*);
SOAP_FMAC3 ns7__ProblemActionType * SOAP_FMAC4 soap_in_ns7__ProblemActionType(struct soap*, const char*, ns7__ProblemActionType *, const char*);

#ifndef soap_write_ns7__ProblemActionType
#define soap_write_ns7__ProblemActionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:ProblemActionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__ProblemActionType * SOAP_FMAC4 soap_get_ns7__ProblemActionType(struct soap*, ns7__ProblemActionType *, const char*, const char*);

#ifndef soap_read_ns7__ProblemActionType
#define soap_read_ns7__ProblemActionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__ProblemActionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__ProblemActionType * SOAP_FMAC2 soap_instantiate_ns7__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__ProblemActionType * soap_new_ns7__ProblemActionType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__ProblemActionType(soap, n, NULL, NULL, NULL); }

inline ns7__ProblemActionType * soap_new_req_ns7__ProblemActionType(struct soap *soap) { ns7__ProblemActionType *_p = soap_instantiate_ns7__ProblemActionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns7__ProblemActionType * soap_new_set_ns7__ProblemActionType(struct soap *soap, ns7__AttributedURIType *Action, std::string *SoapAction, char *__anyAttribute, char *__item1) { ns7__ProblemActionType *_p = soap_instantiate_ns7__ProblemActionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__ProblemActionType::Action = Action; _p->ns7__ProblemActionType::SoapAction = SoapAction; _p->ns7__ProblemActionType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__ProblemActionType(struct soap *soap, ns7__ProblemActionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__ProblemActionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__AttributedQNameType
#define SOAP_TYPE_ns7__AttributedQNameType (752)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__AttributedQNameType(struct soap*, const char*, int, const ns7__AttributedQNameType *, const char*);
SOAP_FMAC3 ns7__AttributedQNameType * SOAP_FMAC4 soap_in_ns7__AttributedQNameType(struct soap*, const char*, ns7__AttributedQNameType *, const char*);

#ifndef soap_write_ns7__AttributedQNameType
#define soap_write_ns7__AttributedQNameType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:AttributedQNameType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__AttributedQNameType * SOAP_FMAC4 soap_get_ns7__AttributedQNameType(struct soap*, ns7__AttributedQNameType *, const char*, const char*);

#ifndef soap_read_ns7__AttributedQNameType
#define soap_read_ns7__AttributedQNameType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__AttributedQNameType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__AttributedQNameType * SOAP_FMAC2 soap_instantiate_ns7__AttributedQNameType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__AttributedQNameType * soap_new_ns7__AttributedQNameType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__AttributedQNameType(soap, n, NULL, NULL, NULL); }

inline ns7__AttributedQNameType * soap_new_req_ns7__AttributedQNameType(struct soap *soap, const std::string& __item) { ns7__AttributedQNameType *_p = soap_instantiate_ns7__AttributedQNameType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__AttributedQNameType::__item = __item; } return _p; }

inline ns7__AttributedQNameType * soap_new_set_ns7__AttributedQNameType(struct soap *soap, const std::string& __item, char *__anyAttribute, char *__item1) { ns7__AttributedQNameType *_p = soap_instantiate_ns7__AttributedQNameType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__AttributedQNameType::__item = __item; _p->ns7__AttributedQNameType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__AttributedQNameType(struct soap *soap, ns7__AttributedQNameType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__AttributedQNameType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__AttributedUnsignedLongType
#define SOAP_TYPE_ns7__AttributedUnsignedLongType (751)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__AttributedUnsignedLongType(struct soap*, const char*, int, const ns7__AttributedUnsignedLongType *, const char*);
SOAP_FMAC3 ns7__AttributedUnsignedLongType * SOAP_FMAC4 soap_in_ns7__AttributedUnsignedLongType(struct soap*, const char*, ns7__AttributedUnsignedLongType *, const char*);

#ifndef soap_write_ns7__AttributedUnsignedLongType
#define soap_write_ns7__AttributedUnsignedLongType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:AttributedUnsignedLongType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__AttributedUnsignedLongType * SOAP_FMAC4 soap_get_ns7__AttributedUnsignedLongType(struct soap*, ns7__AttributedUnsignedLongType *, const char*, const char*);

#ifndef soap_read_ns7__AttributedUnsignedLongType
#define soap_read_ns7__AttributedUnsignedLongType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__AttributedUnsignedLongType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__AttributedUnsignedLongType * SOAP_FMAC2 soap_instantiate_ns7__AttributedUnsignedLongType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__AttributedUnsignedLongType * soap_new_ns7__AttributedUnsignedLongType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__AttributedUnsignedLongType(soap, n, NULL, NULL, NULL); }

inline ns7__AttributedUnsignedLongType * soap_new_req_ns7__AttributedUnsignedLongType(struct soap *soap, ULONG64 __item) { ns7__AttributedUnsignedLongType *_p = soap_instantiate_ns7__AttributedUnsignedLongType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__AttributedUnsignedLongType::__item = __item; } return _p; }

inline ns7__AttributedUnsignedLongType * soap_new_set_ns7__AttributedUnsignedLongType(struct soap *soap, ULONG64 __item, char *__anyAttribute, char *__item1) { ns7__AttributedUnsignedLongType *_p = soap_instantiate_ns7__AttributedUnsignedLongType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__AttributedUnsignedLongType::__item = __item; _p->ns7__AttributedUnsignedLongType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__AttributedUnsignedLongType(struct soap *soap, ns7__AttributedUnsignedLongType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__AttributedUnsignedLongType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__AttributedURIType
#define SOAP_TYPE_ns7__AttributedURIType (750)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__AttributedURIType(struct soap*, const char*, int, const ns7__AttributedURIType *, const char*);
SOAP_FMAC3 ns7__AttributedURIType * SOAP_FMAC4 soap_in_ns7__AttributedURIType(struct soap*, const char*, ns7__AttributedURIType *, const char*);

#ifndef soap_write_ns7__AttributedURIType
#define soap_write_ns7__AttributedURIType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:AttributedURIType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__AttributedURIType * SOAP_FMAC4 soap_get_ns7__AttributedURIType(struct soap*, ns7__AttributedURIType *, const char*, const char*);

#ifndef soap_read_ns7__AttributedURIType
#define soap_read_ns7__AttributedURIType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__AttributedURIType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__AttributedURIType * SOAP_FMAC2 soap_instantiate_ns7__AttributedURIType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__AttributedURIType * soap_new_ns7__AttributedURIType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__AttributedURIType(soap, n, NULL, NULL, NULL); }

inline ns7__AttributedURIType * soap_new_req_ns7__AttributedURIType(struct soap *soap, const std::string& __item) { ns7__AttributedURIType *_p = soap_instantiate_ns7__AttributedURIType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__AttributedURIType::__item = __item; } return _p; }

inline ns7__AttributedURIType * soap_new_set_ns7__AttributedURIType(struct soap *soap, const std::string& __item, char *__anyAttribute, char *__item1) { ns7__AttributedURIType *_p = soap_instantiate_ns7__AttributedURIType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__AttributedURIType::__item = __item; _p->ns7__AttributedURIType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__AttributedURIType(struct soap *soap, ns7__AttributedURIType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__AttributedURIType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__RelatesToType
#define SOAP_TYPE_ns7__RelatesToType (749)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__RelatesToType(struct soap*, const char*, int, const ns7__RelatesToType *, const char*);
SOAP_FMAC3 ns7__RelatesToType * SOAP_FMAC4 soap_in_ns7__RelatesToType(struct soap*, const char*, ns7__RelatesToType *, const char*);

#ifndef soap_write_ns7__RelatesToType
#define soap_write_ns7__RelatesToType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:RelatesToType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__RelatesToType * SOAP_FMAC4 soap_get_ns7__RelatesToType(struct soap*, ns7__RelatesToType *, const char*, const char*);

#ifndef soap_read_ns7__RelatesToType
#define soap_read_ns7__RelatesToType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__RelatesToType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__RelatesToType * SOAP_FMAC2 soap_instantiate_ns7__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__RelatesToType * soap_new_ns7__RelatesToType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__RelatesToType(soap, n, NULL, NULL, NULL); }

inline ns7__RelatesToType * soap_new_req_ns7__RelatesToType(struct soap *soap, const std::string& __item) { ns7__RelatesToType *_p = soap_instantiate_ns7__RelatesToType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__RelatesToType::__item = __item; } return _p; }

inline ns7__RelatesToType * soap_new_set_ns7__RelatesToType(struct soap *soap, const std::string& __item, const std::string& RelationshipType, char *__anyAttribute, char *__item1) { ns7__RelatesToType *_p = soap_instantiate_ns7__RelatesToType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__RelatesToType::__item = __item; _p->ns7__RelatesToType::RelationshipType = RelationshipType; _p->ns7__RelatesToType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__RelatesToType(struct soap *soap, ns7__RelatesToType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__RelatesToType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__MetadataType
#define SOAP_TYPE_ns7__MetadataType (748)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__MetadataType(struct soap*, const char*, int, const ns7__MetadataType *, const char*);
SOAP_FMAC3 ns7__MetadataType * SOAP_FMAC4 soap_in_ns7__MetadataType(struct soap*, const char*, ns7__MetadataType *, const char*);

#ifndef soap_write_ns7__MetadataType
#define soap_write_ns7__MetadataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:MetadataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__MetadataType * SOAP_FMAC4 soap_get_ns7__MetadataType(struct soap*, ns7__MetadataType *, const char*, const char*);

#ifndef soap_read_ns7__MetadataType
#define soap_read_ns7__MetadataType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__MetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__MetadataType * SOAP_FMAC2 soap_instantiate_ns7__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__MetadataType * soap_new_ns7__MetadataType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__MetadataType(soap, n, NULL, NULL, NULL); }

inline ns7__MetadataType * soap_new_req_ns7__MetadataType(struct soap *soap) { ns7__MetadataType *_p = soap_instantiate_ns7__MetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns7__MetadataType * soap_new_set_ns7__MetadataType(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns7__MetadataType *_p = soap_instantiate_ns7__MetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__MetadataType::__any = __any; _p->ns7__MetadataType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__MetadataType(struct soap *soap, ns7__MetadataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__MetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__ReferenceParametersType
#define SOAP_TYPE_ns7__ReferenceParametersType (747)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__ReferenceParametersType(struct soap*, const char*, int, const ns7__ReferenceParametersType *, const char*);
SOAP_FMAC3 ns7__ReferenceParametersType * SOAP_FMAC4 soap_in_ns7__ReferenceParametersType(struct soap*, const char*, ns7__ReferenceParametersType *, const char*);

#ifndef soap_write_ns7__ReferenceParametersType
#define soap_write_ns7__ReferenceParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:ReferenceParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__ReferenceParametersType * SOAP_FMAC4 soap_get_ns7__ReferenceParametersType(struct soap*, ns7__ReferenceParametersType *, const char*, const char*);

#ifndef soap_read_ns7__ReferenceParametersType
#define soap_read_ns7__ReferenceParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__ReferenceParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_ns7__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__ReferenceParametersType * soap_new_ns7__ReferenceParametersType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__ReferenceParametersType(soap, n, NULL, NULL, NULL); }

inline ns7__ReferenceParametersType * soap_new_req_ns7__ReferenceParametersType(struct soap *soap) { ns7__ReferenceParametersType *_p = soap_instantiate_ns7__ReferenceParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns7__ReferenceParametersType * soap_new_set_ns7__ReferenceParametersType(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns7__ReferenceParametersType *_p = soap_instantiate_ns7__ReferenceParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__ReferenceParametersType::__any = __any; _p->ns7__ReferenceParametersType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__ReferenceParametersType(struct soap *soap, ns7__ReferenceParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__ReferenceParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns7__EndpointReferenceType
#define SOAP_TYPE_ns7__EndpointReferenceType (746)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__EndpointReferenceType(struct soap*, const char*, int, const ns7__EndpointReferenceType *, const char*);
SOAP_FMAC3 ns7__EndpointReferenceType * SOAP_FMAC4 soap_in_ns7__EndpointReferenceType(struct soap*, const char*, ns7__EndpointReferenceType *, const char*);

#ifndef soap_write_ns7__EndpointReferenceType
#define soap_write_ns7__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns7:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__EndpointReferenceType * SOAP_FMAC4 soap_get_ns7__EndpointReferenceType(struct soap*, ns7__EndpointReferenceType *, const char*, const char*);

#ifndef soap_read_ns7__EndpointReferenceType
#define soap_read_ns7__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns7__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns7__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_ns7__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__EndpointReferenceType * soap_new_ns7__EndpointReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_ns7__EndpointReferenceType(soap, n, NULL, NULL, NULL); }

inline ns7__EndpointReferenceType * soap_new_req_ns7__EndpointReferenceType(struct soap *soap, ns7__AttributedURIType *Address) { ns7__EndpointReferenceType *_p = soap_instantiate_ns7__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__EndpointReferenceType::Address = Address; } return _p; }

inline ns7__EndpointReferenceType * soap_new_set_ns7__EndpointReferenceType(struct soap *soap, ns7__AttributedURIType *Address, ns7__ReferenceParametersType *ReferenceParameters, ns7__MetadataType *Metadata, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns7__EndpointReferenceType *_p = soap_instantiate_ns7__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns7__EndpointReferenceType::Address = Address; _p->ns7__EndpointReferenceType::ReferenceParameters = ReferenceParameters; _p->ns7__EndpointReferenceType::Metadata = Metadata; _p->ns7__EndpointReferenceType::__any = __any; _p->ns7__EndpointReferenceType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns7__EndpointReferenceType(struct soap *soap, ns7__EndpointReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns7__EndpointReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__TopicSetType
#define SOAP_TYPE_ns6__TopicSetType (745)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__TopicSetType(struct soap*, const char*, int, const ns6__TopicSetType *, const char*);
SOAP_FMAC3 ns6__TopicSetType * SOAP_FMAC4 soap_in_ns6__TopicSetType(struct soap*, const char*, ns6__TopicSetType *, const char*);

#ifndef soap_write_ns6__TopicSetType
#define soap_write_ns6__TopicSetType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:TopicSetType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__TopicSetType * SOAP_FMAC4 soap_get_ns6__TopicSetType(struct soap*, ns6__TopicSetType *, const char*, const char*);

#ifndef soap_read_ns6__TopicSetType
#define soap_read_ns6__TopicSetType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__TopicSetType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__TopicSetType * SOAP_FMAC2 soap_instantiate_ns6__TopicSetType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__TopicSetType * soap_new_ns6__TopicSetType(struct soap *soap, int n = -1) { return soap_instantiate_ns6__TopicSetType(soap, n, NULL, NULL, NULL); }

inline ns6__TopicSetType * soap_new_req_ns6__TopicSetType(struct soap *soap) { ns6__TopicSetType *_p = soap_instantiate_ns6__TopicSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns6__TopicSetType * soap_new_set_ns6__TopicSetType(struct soap *soap, ns6__Documentation *documentation, char *__anyAttribute, const std::vector<char * >& __any) { ns6__TopicSetType *_p = soap_instantiate_ns6__TopicSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__TopicSetType::documentation = documentation; _p->ns6__TopicSetType::__anyAttribute = __anyAttribute; _p->ns6__TopicSetType::__any = __any; } return _p; }

inline void soap_delete_ns6__TopicSetType(struct soap *soap, ns6__TopicSetType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__TopicSetType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__TopicType
#define SOAP_TYPE_ns6__TopicType (744)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__TopicType(struct soap*, const char*, int, const ns6__TopicType *, const char*);
SOAP_FMAC3 ns6__TopicType * SOAP_FMAC4 soap_in_ns6__TopicType(struct soap*, const char*, ns6__TopicType *, const char*);

#ifndef soap_write_ns6__TopicType
#define soap_write_ns6__TopicType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:TopicType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__TopicType * SOAP_FMAC4 soap_get_ns6__TopicType(struct soap*, ns6__TopicType *, const char*, const char*);

#ifndef soap_read_ns6__TopicType
#define soap_read_ns6__TopicType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__TopicType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__TopicType * SOAP_FMAC2 soap_instantiate_ns6__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__TopicType * soap_new_ns6__TopicType(struct soap *soap, int n = -1) { return soap_instantiate_ns6__TopicType(soap, n, NULL, NULL, NULL); }

inline ns6__TopicType * soap_new_req_ns6__TopicType(struct soap *soap, const std::string& name) { ns6__TopicType *_p = soap_instantiate_ns6__TopicType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__TopicType::name = name; } return _p; }

inline ns6__TopicType * soap_new_set_ns6__TopicType(struct soap *soap, ns6__Documentation *documentation, char *__anyAttribute, ns6__QueryExpressionType *MessagePattern, const std::vector<ns6__TopicType * >& Topic, const std::vector<char * >& __any, const std::string& name, std::string *messageTypes, bool final_) { ns6__TopicType *_p = soap_instantiate_ns6__TopicType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__TopicType::documentation = documentation; _p->ns6__TopicType::__anyAttribute = __anyAttribute; _p->ns6__TopicType::MessagePattern = MessagePattern; _p->ns6__TopicType::Topic = Topic; _p->ns6__TopicType::__any = __any; _p->ns6__TopicType::name = name; _p->ns6__TopicType::messageTypes = messageTypes; _p->ns6__TopicType::final_ = final_; } return _p; }

inline void soap_delete_ns6__TopicType(struct soap *soap, ns6__TopicType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__TopicType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__TopicNamespaceType
#define SOAP_TYPE_ns6__TopicNamespaceType (743)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__TopicNamespaceType(struct soap*, const char*, int, const ns6__TopicNamespaceType *, const char*);
SOAP_FMAC3 ns6__TopicNamespaceType * SOAP_FMAC4 soap_in_ns6__TopicNamespaceType(struct soap*, const char*, ns6__TopicNamespaceType *, const char*);

#ifndef soap_write_ns6__TopicNamespaceType
#define soap_write_ns6__TopicNamespaceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:TopicNamespaceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__TopicNamespaceType * SOAP_FMAC4 soap_get_ns6__TopicNamespaceType(struct soap*, ns6__TopicNamespaceType *, const char*, const char*);

#ifndef soap_read_ns6__TopicNamespaceType
#define soap_read_ns6__TopicNamespaceType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__TopicNamespaceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_ns6__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__TopicNamespaceType * soap_new_ns6__TopicNamespaceType(struct soap *soap, int n = -1) { return soap_instantiate_ns6__TopicNamespaceType(soap, n, NULL, NULL, NULL); }

inline ns6__TopicNamespaceType * soap_new_req_ns6__TopicNamespaceType(struct soap *soap, const std::string& targetNamespace) { ns6__TopicNamespaceType *_p = soap_instantiate_ns6__TopicNamespaceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__TopicNamespaceType::targetNamespace = targetNamespace; } return _p; }

inline ns6__TopicNamespaceType * soap_new_set_ns6__TopicNamespaceType(struct soap *soap, ns6__Documentation *documentation, char *__anyAttribute, std::vector<_ns6__TopicNamespaceType_Topic >*Topic, const std::vector<char * >& __any, std::string *name, const std::string& targetNamespace, bool final_) { ns6__TopicNamespaceType *_p = soap_instantiate_ns6__TopicNamespaceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__TopicNamespaceType::documentation = documentation; _p->ns6__TopicNamespaceType::__anyAttribute = __anyAttribute; _p->ns6__TopicNamespaceType::Topic = Topic; _p->ns6__TopicNamespaceType::__any = __any; _p->ns6__TopicNamespaceType::name = name; _p->ns6__TopicNamespaceType::targetNamespace = targetNamespace; _p->ns6__TopicNamespaceType::final_ = final_; } return _p; }

inline void soap_delete_ns6__TopicNamespaceType(struct soap *soap, ns6__TopicNamespaceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__TopicNamespaceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__QueryExpressionType
#define SOAP_TYPE_ns6__QueryExpressionType (742)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__QueryExpressionType(struct soap*, const char*, int, const ns6__QueryExpressionType *, const char*);
SOAP_FMAC3 ns6__QueryExpressionType * SOAP_FMAC4 soap_in_ns6__QueryExpressionType(struct soap*, const char*, ns6__QueryExpressionType *, const char*);

#ifndef soap_write_ns6__QueryExpressionType
#define soap_write_ns6__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__QueryExpressionType * SOAP_FMAC4 soap_get_ns6__QueryExpressionType(struct soap*, ns6__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_ns6__QueryExpressionType
#define soap_read_ns6__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__QueryExpressionType * SOAP_FMAC2 soap_instantiate_ns6__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__QueryExpressionType * soap_new_ns6__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_ns6__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline ns6__QueryExpressionType * soap_new_req_ns6__QueryExpressionType(struct soap *soap, const std::string& Dialect) { ns6__QueryExpressionType *_p = soap_instantiate_ns6__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__QueryExpressionType::Dialect = Dialect; } return _p; }

inline ns6__QueryExpressionType * soap_new_set_ns6__QueryExpressionType(struct soap *soap, char *__any, const std::string& Dialect, char *__mixed, char *__item1) { ns6__QueryExpressionType *_p = soap_instantiate_ns6__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__QueryExpressionType::__any = __any; _p->ns6__QueryExpressionType::Dialect = Dialect; _p->ns6__QueryExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns6__QueryExpressionType(struct soap *soap, ns6__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__ExtensibleDocumented
#define SOAP_TYPE_ns6__ExtensibleDocumented (741)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ExtensibleDocumented(struct soap*, const char*, int, const ns6__ExtensibleDocumented *, const char*);
SOAP_FMAC3 ns6__ExtensibleDocumented * SOAP_FMAC4 soap_in_ns6__ExtensibleDocumented(struct soap*, const char*, ns6__ExtensibleDocumented *, const char*);

#ifndef soap_write_ns6__ExtensibleDocumented
#define soap_write_ns6__ExtensibleDocumented(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:ExtensibleDocumented", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__ExtensibleDocumented * SOAP_FMAC4 soap_get_ns6__ExtensibleDocumented(struct soap*, ns6__ExtensibleDocumented *, const char*, const char*);

#ifndef soap_read_ns6__ExtensibleDocumented
#define soap_read_ns6__ExtensibleDocumented(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__ExtensibleDocumented(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_ns6__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ExtensibleDocumented * soap_new_ns6__ExtensibleDocumented(struct soap *soap, int n = -1) { return soap_instantiate_ns6__ExtensibleDocumented(soap, n, NULL, NULL, NULL); }

inline ns6__ExtensibleDocumented * soap_new_req_ns6__ExtensibleDocumented(struct soap *soap) { ns6__ExtensibleDocumented *_p = soap_instantiate_ns6__ExtensibleDocumented(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns6__ExtensibleDocumented * soap_new_set_ns6__ExtensibleDocumented(struct soap *soap, ns6__Documentation *documentation, char *__anyAttribute, char *__item1) { ns6__ExtensibleDocumented *_p = soap_instantiate_ns6__ExtensibleDocumented(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__ExtensibleDocumented::documentation = documentation; _p->ns6__ExtensibleDocumented::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns6__ExtensibleDocumented(struct soap *soap, ns6__ExtensibleDocumented *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__ExtensibleDocumented(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__Documentation
#define SOAP_TYPE_ns6__Documentation (740)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__Documentation(struct soap*, const char*, int, const ns6__Documentation *, const char*);
SOAP_FMAC3 ns6__Documentation * SOAP_FMAC4 soap_in_ns6__Documentation(struct soap*, const char*, ns6__Documentation *, const char*);

#ifndef soap_write_ns6__Documentation
#define soap_write_ns6__Documentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns6:Documentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__Documentation * SOAP_FMAC4 soap_get_ns6__Documentation(struct soap*, ns6__Documentation *, const char*, const char*);

#ifndef soap_read_ns6__Documentation
#define soap_read_ns6__Documentation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__Documentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns6__Documentation * SOAP_FMAC2 soap_instantiate_ns6__Documentation(struct soap*, int, const char*, const char*, size_t*);

inline ns6__Documentation * soap_new_ns6__Documentation(struct soap *soap, int n = -1) { return soap_instantiate_ns6__Documentation(soap, n, NULL, NULL, NULL); }

inline ns6__Documentation * soap_new_req_ns6__Documentation(struct soap *soap) { ns6__Documentation *_p = soap_instantiate_ns6__Documentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns6__Documentation * soap_new_set_ns6__Documentation(struct soap *soap, const std::vector<char * >& __any, char *__mixed, char *__item1) { ns6__Documentation *_p = soap_instantiate_ns6__Documentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__Documentation::__any = __any; _p->ns6__Documentation::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns6__Documentation(struct soap *soap, ns6__Documentation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__Documentation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__BaseFaultType
#define SOAP_TYPE_ns5__BaseFaultType (739)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__BaseFaultType(struct soap*, const char*, int, const ns5__BaseFaultType *, const char*);
SOAP_FMAC3 ns5__BaseFaultType * SOAP_FMAC4 soap_in_ns5__BaseFaultType(struct soap*, const char*, ns5__BaseFaultType *, const char*);

#ifndef soap_write_ns5__BaseFaultType
#define soap_write_ns5__BaseFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns5:BaseFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__BaseFaultType * SOAP_FMAC4 soap_get_ns5__BaseFaultType(struct soap*, ns5__BaseFaultType *, const char*, const char*);

#ifndef soap_read_ns5__BaseFaultType
#define soap_read_ns5__BaseFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__BaseFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__BaseFaultType * SOAP_FMAC2 soap_instantiate_ns5__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__BaseFaultType * soap_new_ns5__BaseFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns5__BaseFaultType(soap, n, NULL, NULL, NULL); }

inline ns5__BaseFaultType * soap_new_req_ns5__BaseFaultType(struct soap *soap, time_t Timestamp) { ns5__BaseFaultType *_p = soap_instantiate_ns5__BaseFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__BaseFaultType::Timestamp = Timestamp; } return _p; }

inline ns5__BaseFaultType * soap_new_set_ns5__BaseFaultType(struct soap *soap, const std::vector<char * >& __any, time_t Timestamp, ns7__EndpointReferenceType *Originator, _ns5__BaseFaultType_ErrorCode *ErrorCode, std::vector<_ns5__BaseFaultType_Description >*Description, _ns5__BaseFaultType_FaultCause *FaultCause, char *__anyAttribute, char *__item1) { ns5__BaseFaultType *_p = soap_instantiate_ns5__BaseFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__BaseFaultType::__any = __any; _p->ns5__BaseFaultType::Timestamp = Timestamp; _p->ns5__BaseFaultType::Originator = Originator; _p->ns5__BaseFaultType::ErrorCode = ErrorCode; _p->ns5__BaseFaultType::Description = Description; _p->ns5__BaseFaultType::FaultCause = FaultCause; _p->ns5__BaseFaultType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns5__BaseFaultType(struct soap *soap, ns5__BaseFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__BaseFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Include
#define SOAP_TYPE_ns4__Include (738)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Include(struct soap*, const char*, int, const ns4__Include *, const char*);
SOAP_FMAC3 ns4__Include * SOAP_FMAC4 soap_in_ns4__Include(struct soap*, const char*, ns4__Include *, const char*);

#ifndef soap_write_ns4__Include
#define soap_write_ns4__Include(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns4:Include", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__Include * SOAP_FMAC4 soap_get_ns4__Include(struct soap*, ns4__Include *, const char*, const char*);

#ifndef soap_read_ns4__Include
#define soap_read_ns4__Include(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Include(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__Include * SOAP_FMAC2 soap_instantiate_ns4__Include(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Include * soap_new_ns4__Include(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Include(soap, n, NULL, NULL, NULL); }

inline ns4__Include * soap_new_req_ns4__Include(struct soap *soap, const std::string& href) { ns4__Include *_p = soap_instantiate_ns4__Include(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Include::href = href; } return _p; }

inline ns4__Include * soap_new_set_ns4__Include(struct soap *soap, const std::vector<char * >& __any, const std::string& href, char *__anyAttribute, char *__item1) { ns4__Include *_p = soap_instantiate_ns4__Include(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Include::__any = __any; _p->ns4__Include::href = href; _p->ns4__Include::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns4__Include(struct soap *soap, ns4__Include *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Include(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__ResumeSubscriptionResponse
#define SOAP_TYPE__ns3__ResumeSubscriptionResponse (737)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeSubscriptionResponse(struct soap*, const char*, int, const _ns3__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC3 _ns3__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__ns3__ResumeSubscriptionResponse(struct soap*, const char*, _ns3__ResumeSubscriptionResponse *, const char*);

#ifndef soap_write__ns3__ResumeSubscriptionResponse
#define soap_write__ns3__ResumeSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResumeSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__ns3__ResumeSubscriptionResponse(struct soap*, _ns3__ResumeSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__ns3__ResumeSubscriptionResponse
#define soap_read__ns3__ResumeSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__ResumeSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__ns3__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeSubscriptionResponse * soap_new__ns3__ResumeSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ResumeSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__ResumeSubscriptionResponse * soap_new_req__ns3__ResumeSubscriptionResponse(struct soap *soap) { _ns3__ResumeSubscriptionResponse *_p = soap_instantiate__ns3__ResumeSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__ResumeSubscriptionResponse * soap_new_set__ns3__ResumeSubscriptionResponse(struct soap *soap, const std::vector<char * >& __any) { _ns3__ResumeSubscriptionResponse *_p = soap_instantiate__ns3__ResumeSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__ns3__ResumeSubscriptionResponse(struct soap *soap, _ns3__ResumeSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ResumeSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__ResumeSubscription
#define SOAP_TYPE__ns3__ResumeSubscription (736)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeSubscription(struct soap*, const char*, int, const _ns3__ResumeSubscription *, const char*);
SOAP_FMAC3 _ns3__ResumeSubscription * SOAP_FMAC4 soap_in__ns3__ResumeSubscription(struct soap*, const char*, _ns3__ResumeSubscription *, const char*);

#ifndef soap_write__ns3__ResumeSubscription
#define soap_write__ns3__ResumeSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResumeSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeSubscription * SOAP_FMAC4 soap_get__ns3__ResumeSubscription(struct soap*, _ns3__ResumeSubscription *, const char*, const char*);

#ifndef soap_read__ns3__ResumeSubscription
#define soap_read__ns3__ResumeSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__ResumeSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ResumeSubscription * SOAP_FMAC2 soap_instantiate__ns3__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeSubscription * soap_new__ns3__ResumeSubscription(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ResumeSubscription(soap, n, NULL, NULL, NULL); }

inline _ns3__ResumeSubscription * soap_new_req__ns3__ResumeSubscription(struct soap *soap) { _ns3__ResumeSubscription *_p = soap_instantiate__ns3__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__ResumeSubscription * soap_new_set__ns3__ResumeSubscription(struct soap *soap, const std::vector<char * >& __any) { _ns3__ResumeSubscription *_p = soap_instantiate__ns3__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ResumeSubscription::__any = __any; } return _p; }

inline void soap_delete__ns3__ResumeSubscription(struct soap *soap, _ns3__ResumeSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ResumeSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__PauseSubscriptionResponse
#define SOAP_TYPE__ns3__PauseSubscriptionResponse (735)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseSubscriptionResponse(struct soap*, const char*, int, const _ns3__PauseSubscriptionResponse *, const char*);
SOAP_FMAC3 _ns3__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__ns3__PauseSubscriptionResponse(struct soap*, const char*, _ns3__PauseSubscriptionResponse *, const char*);

#ifndef soap_write__ns3__PauseSubscriptionResponse
#define soap_write__ns3__PauseSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PauseSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__ns3__PauseSubscriptionResponse(struct soap*, _ns3__PauseSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__ns3__PauseSubscriptionResponse
#define soap_read__ns3__PauseSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__PauseSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__ns3__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseSubscriptionResponse * soap_new__ns3__PauseSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__PauseSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__PauseSubscriptionResponse * soap_new_req__ns3__PauseSubscriptionResponse(struct soap *soap) { _ns3__PauseSubscriptionResponse *_p = soap_instantiate__ns3__PauseSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__PauseSubscriptionResponse * soap_new_set__ns3__PauseSubscriptionResponse(struct soap *soap, const std::vector<char * >& __any) { _ns3__PauseSubscriptionResponse *_p = soap_instantiate__ns3__PauseSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__ns3__PauseSubscriptionResponse(struct soap *soap, _ns3__PauseSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__PauseSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__PauseSubscription
#define SOAP_TYPE__ns3__PauseSubscription (734)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseSubscription(struct soap*, const char*, int, const _ns3__PauseSubscription *, const char*);
SOAP_FMAC3 _ns3__PauseSubscription * SOAP_FMAC4 soap_in__ns3__PauseSubscription(struct soap*, const char*, _ns3__PauseSubscription *, const char*);

#ifndef soap_write__ns3__PauseSubscription
#define soap_write__ns3__PauseSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PauseSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseSubscription * SOAP_FMAC4 soap_get__ns3__PauseSubscription(struct soap*, _ns3__PauseSubscription *, const char*, const char*);

#ifndef soap_read__ns3__PauseSubscription
#define soap_read__ns3__PauseSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__PauseSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__PauseSubscription * SOAP_FMAC2 soap_instantiate__ns3__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseSubscription * soap_new__ns3__PauseSubscription(struct soap *soap, int n = -1) { return soap_instantiate__ns3__PauseSubscription(soap, n, NULL, NULL, NULL); }

inline _ns3__PauseSubscription * soap_new_req__ns3__PauseSubscription(struct soap *soap) { _ns3__PauseSubscription *_p = soap_instantiate__ns3__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__PauseSubscription * soap_new_set__ns3__PauseSubscription(struct soap *soap, const std::vector<char * >& __any) { _ns3__PauseSubscription *_p = soap_instantiate__ns3__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__PauseSubscription::__any = __any; } return _p; }

inline void soap_delete__ns3__PauseSubscription(struct soap *soap, _ns3__PauseSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__PauseSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UnsubscribeResponse
#define SOAP_TYPE__ns3__UnsubscribeResponse (733)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnsubscribeResponse(struct soap*, const char*, int, const _ns3__UnsubscribeResponse *, const char*);
SOAP_FMAC3 _ns3__UnsubscribeResponse * SOAP_FMAC4 soap_in__ns3__UnsubscribeResponse(struct soap*, const char*, _ns3__UnsubscribeResponse *, const char*);

#ifndef soap_write__ns3__UnsubscribeResponse
#define soap_write__ns3__UnsubscribeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnsubscribeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnsubscribeResponse * SOAP_FMAC4 soap_get__ns3__UnsubscribeResponse(struct soap*, _ns3__UnsubscribeResponse *, const char*, const char*);

#ifndef soap_read__ns3__UnsubscribeResponse
#define soap_read__ns3__UnsubscribeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UnsubscribeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__ns3__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnsubscribeResponse * soap_new__ns3__UnsubscribeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UnsubscribeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__UnsubscribeResponse * soap_new_req__ns3__UnsubscribeResponse(struct soap *soap) { _ns3__UnsubscribeResponse *_p = soap_instantiate__ns3__UnsubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UnsubscribeResponse * soap_new_set__ns3__UnsubscribeResponse(struct soap *soap, const std::vector<char * >& __any) { _ns3__UnsubscribeResponse *_p = soap_instantiate__ns3__UnsubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__UnsubscribeResponse::__any = __any; } return _p; }

inline void soap_delete__ns3__UnsubscribeResponse(struct soap *soap, _ns3__UnsubscribeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UnsubscribeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__Unsubscribe
#define SOAP_TYPE__ns3__Unsubscribe (732)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Unsubscribe(struct soap*, const char*, int, const _ns3__Unsubscribe *, const char*);
SOAP_FMAC3 _ns3__Unsubscribe * SOAP_FMAC4 soap_in__ns3__Unsubscribe(struct soap*, const char*, _ns3__Unsubscribe *, const char*);

#ifndef soap_write__ns3__Unsubscribe
#define soap_write__ns3__Unsubscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:Unsubscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__Unsubscribe * SOAP_FMAC4 soap_get__ns3__Unsubscribe(struct soap*, _ns3__Unsubscribe *, const char*, const char*);

#ifndef soap_read__ns3__Unsubscribe
#define soap_read__ns3__Unsubscribe(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__Unsubscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__Unsubscribe * SOAP_FMAC2 soap_instantiate__ns3__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Unsubscribe * soap_new__ns3__Unsubscribe(struct soap *soap, int n = -1) { return soap_instantiate__ns3__Unsubscribe(soap, n, NULL, NULL, NULL); }

inline _ns3__Unsubscribe * soap_new_req__ns3__Unsubscribe(struct soap *soap) { _ns3__Unsubscribe *_p = soap_instantiate__ns3__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__Unsubscribe * soap_new_set__ns3__Unsubscribe(struct soap *soap, const std::vector<char * >& __any) { _ns3__Unsubscribe *_p = soap_instantiate__ns3__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Unsubscribe::__any = __any; } return _p; }

inline void soap_delete__ns3__Unsubscribe(struct soap *soap, _ns3__Unsubscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Unsubscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__RenewResponse
#define SOAP_TYPE__ns3__RenewResponse (731)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RenewResponse(struct soap*, const char*, int, const _ns3__RenewResponse *, const char*);
SOAP_FMAC3 _ns3__RenewResponse * SOAP_FMAC4 soap_in__ns3__RenewResponse(struct soap*, const char*, _ns3__RenewResponse *, const char*);

#ifndef soap_write__ns3__RenewResponse
#define soap_write__ns3__RenewResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:RenewResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RenewResponse * SOAP_FMAC4 soap_get__ns3__RenewResponse(struct soap*, _ns3__RenewResponse *, const char*, const char*);

#ifndef soap_read__ns3__RenewResponse
#define soap_read__ns3__RenewResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__RenewResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RenewResponse * SOAP_FMAC2 soap_instantiate__ns3__RenewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RenewResponse * soap_new__ns3__RenewResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RenewResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RenewResponse * soap_new_req__ns3__RenewResponse(struct soap *soap, time_t TerminationTime) { _ns3__RenewResponse *_p = soap_instantiate__ns3__RenewResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RenewResponse::TerminationTime = TerminationTime; } return _p; }

inline _ns3__RenewResponse * soap_new_set__ns3__RenewResponse(struct soap *soap, time_t TerminationTime, time_t *CurrentTime, const std::vector<char * >& __any) { _ns3__RenewResponse *_p = soap_instantiate__ns3__RenewResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RenewResponse::TerminationTime = TerminationTime; _p->_ns3__RenewResponse::CurrentTime = CurrentTime; _p->_ns3__RenewResponse::__any = __any; } return _p; }

inline void soap_delete__ns3__RenewResponse(struct soap *soap, _ns3__RenewResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RenewResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__Renew
#define SOAP_TYPE__ns3__Renew (730)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Renew(struct soap*, const char*, int, const _ns3__Renew *, const char*);
SOAP_FMAC3 _ns3__Renew * SOAP_FMAC4 soap_in__ns3__Renew(struct soap*, const char*, _ns3__Renew *, const char*);

#ifndef soap_write__ns3__Renew
#define soap_write__ns3__Renew(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:Renew", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__Renew * SOAP_FMAC4 soap_get__ns3__Renew(struct soap*, _ns3__Renew *, const char*, const char*);

#ifndef soap_read__ns3__Renew
#define soap_read__ns3__Renew(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__Renew(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__Renew * SOAP_FMAC2 soap_instantiate__ns3__Renew(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Renew * soap_new__ns3__Renew(struct soap *soap, int n = -1) { return soap_instantiate__ns3__Renew(soap, n, NULL, NULL, NULL); }

inline _ns3__Renew * soap_new_req__ns3__Renew(struct soap *soap, std::string *TerminationTime) { _ns3__Renew *_p = soap_instantiate__ns3__Renew(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Renew::TerminationTime = TerminationTime; } return _p; }

inline _ns3__Renew * soap_new_set__ns3__Renew(struct soap *soap, std::string *TerminationTime, const std::vector<char * >& __any) { _ns3__Renew *_p = soap_instantiate__ns3__Renew(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Renew::TerminationTime = TerminationTime; _p->_ns3__Renew::__any = __any; } return _p; }

inline void soap_delete__ns3__Renew(struct soap *soap, _ns3__Renew *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Renew(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__CreatePullPointResponse
#define SOAP_TYPE__ns3__CreatePullPointResponse (729)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__CreatePullPointResponse(struct soap*, const char*, int, const _ns3__CreatePullPointResponse *, const char*);
SOAP_FMAC3 _ns3__CreatePullPointResponse * SOAP_FMAC4 soap_in__ns3__CreatePullPointResponse(struct soap*, const char*, _ns3__CreatePullPointResponse *, const char*);

#ifndef soap_write__ns3__CreatePullPointResponse
#define soap_write__ns3__CreatePullPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:CreatePullPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__CreatePullPointResponse * SOAP_FMAC4 soap_get__ns3__CreatePullPointResponse(struct soap*, _ns3__CreatePullPointResponse *, const char*, const char*);

#ifndef soap_read__ns3__CreatePullPointResponse
#define soap_read__ns3__CreatePullPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__CreatePullPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__ns3__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__CreatePullPointResponse * soap_new__ns3__CreatePullPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__CreatePullPointResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__CreatePullPointResponse * soap_new_req__ns3__CreatePullPointResponse(struct soap *soap, ns7__EndpointReferenceType *PullPoint) { _ns3__CreatePullPointResponse *_p = soap_instantiate__ns3__CreatePullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__CreatePullPointResponse::PullPoint = PullPoint; } return _p; }

inline _ns3__CreatePullPointResponse * soap_new_set__ns3__CreatePullPointResponse(struct soap *soap, ns7__EndpointReferenceType *PullPoint, const std::vector<char * >& __any, char *__anyAttribute) { _ns3__CreatePullPointResponse *_p = soap_instantiate__ns3__CreatePullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__CreatePullPointResponse::PullPoint = PullPoint; _p->_ns3__CreatePullPointResponse::__any = __any; _p->_ns3__CreatePullPointResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns3__CreatePullPointResponse(struct soap *soap, _ns3__CreatePullPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__CreatePullPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__CreatePullPoint
#define SOAP_TYPE__ns3__CreatePullPoint (728)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__CreatePullPoint(struct soap*, const char*, int, const _ns3__CreatePullPoint *, const char*);
SOAP_FMAC3 _ns3__CreatePullPoint * SOAP_FMAC4 soap_in__ns3__CreatePullPoint(struct soap*, const char*, _ns3__CreatePullPoint *, const char*);

#ifndef soap_write__ns3__CreatePullPoint
#define soap_write__ns3__CreatePullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:CreatePullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__CreatePullPoint * SOAP_FMAC4 soap_get__ns3__CreatePullPoint(struct soap*, _ns3__CreatePullPoint *, const char*, const char*);

#ifndef soap_read__ns3__CreatePullPoint
#define soap_read__ns3__CreatePullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__CreatePullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__CreatePullPoint * SOAP_FMAC2 soap_instantiate__ns3__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__CreatePullPoint * soap_new__ns3__CreatePullPoint(struct soap *soap, int n = -1) { return soap_instantiate__ns3__CreatePullPoint(soap, n, NULL, NULL, NULL); }

inline _ns3__CreatePullPoint * soap_new_req__ns3__CreatePullPoint(struct soap *soap) { _ns3__CreatePullPoint *_p = soap_instantiate__ns3__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__CreatePullPoint * soap_new_set__ns3__CreatePullPoint(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute) { _ns3__CreatePullPoint *_p = soap_instantiate__ns3__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__CreatePullPoint::__any = __any; _p->_ns3__CreatePullPoint::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns3__CreatePullPoint(struct soap *soap, _ns3__CreatePullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__CreatePullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__DestroyPullPointResponse
#define SOAP_TYPE__ns3__DestroyPullPointResponse (727)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DestroyPullPointResponse(struct soap*, const char*, int, const _ns3__DestroyPullPointResponse *, const char*);
SOAP_FMAC3 _ns3__DestroyPullPointResponse * SOAP_FMAC4 soap_in__ns3__DestroyPullPointResponse(struct soap*, const char*, _ns3__DestroyPullPointResponse *, const char*);

#ifndef soap_write__ns3__DestroyPullPointResponse
#define soap_write__ns3__DestroyPullPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:DestroyPullPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__DestroyPullPointResponse * SOAP_FMAC4 soap_get__ns3__DestroyPullPointResponse(struct soap*, _ns3__DestroyPullPointResponse *, const char*, const char*);

#ifndef soap_read__ns3__DestroyPullPointResponse
#define soap_read__ns3__DestroyPullPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__DestroyPullPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__ns3__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__DestroyPullPointResponse * soap_new__ns3__DestroyPullPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__DestroyPullPointResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__DestroyPullPointResponse * soap_new_req__ns3__DestroyPullPointResponse(struct soap *soap) { _ns3__DestroyPullPointResponse *_p = soap_instantiate__ns3__DestroyPullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__DestroyPullPointResponse * soap_new_set__ns3__DestroyPullPointResponse(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute) { _ns3__DestroyPullPointResponse *_p = soap_instantiate__ns3__DestroyPullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__DestroyPullPointResponse::__any = __any; _p->_ns3__DestroyPullPointResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns3__DestroyPullPointResponse(struct soap *soap, _ns3__DestroyPullPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DestroyPullPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__DestroyPullPoint
#define SOAP_TYPE__ns3__DestroyPullPoint (726)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DestroyPullPoint(struct soap*, const char*, int, const _ns3__DestroyPullPoint *, const char*);
SOAP_FMAC3 _ns3__DestroyPullPoint * SOAP_FMAC4 soap_in__ns3__DestroyPullPoint(struct soap*, const char*, _ns3__DestroyPullPoint *, const char*);

#ifndef soap_write__ns3__DestroyPullPoint
#define soap_write__ns3__DestroyPullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:DestroyPullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__DestroyPullPoint * SOAP_FMAC4 soap_get__ns3__DestroyPullPoint(struct soap*, _ns3__DestroyPullPoint *, const char*, const char*);

#ifndef soap_read__ns3__DestroyPullPoint
#define soap_read__ns3__DestroyPullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__DestroyPullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__ns3__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__DestroyPullPoint * soap_new__ns3__DestroyPullPoint(struct soap *soap, int n = -1) { return soap_instantiate__ns3__DestroyPullPoint(soap, n, NULL, NULL, NULL); }

inline _ns3__DestroyPullPoint * soap_new_req__ns3__DestroyPullPoint(struct soap *soap) { _ns3__DestroyPullPoint *_p = soap_instantiate__ns3__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__DestroyPullPoint * soap_new_set__ns3__DestroyPullPoint(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute) { _ns3__DestroyPullPoint *_p = soap_instantiate__ns3__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__DestroyPullPoint::__any = __any; _p->_ns3__DestroyPullPoint::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns3__DestroyPullPoint(struct soap *soap, _ns3__DestroyPullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DestroyPullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__GetMessagesResponse
#define SOAP_TYPE__ns3__GetMessagesResponse (725)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetMessagesResponse(struct soap*, const char*, int, const _ns3__GetMessagesResponse *, const char*);
SOAP_FMAC3 _ns3__GetMessagesResponse * SOAP_FMAC4 soap_in__ns3__GetMessagesResponse(struct soap*, const char*, _ns3__GetMessagesResponse *, const char*);

#ifndef soap_write__ns3__GetMessagesResponse
#define soap_write__ns3__GetMessagesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:GetMessagesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetMessagesResponse * SOAP_FMAC4 soap_get__ns3__GetMessagesResponse(struct soap*, _ns3__GetMessagesResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetMessagesResponse
#define soap_read__ns3__GetMessagesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__GetMessagesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__ns3__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetMessagesResponse * soap_new__ns3__GetMessagesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetMessagesResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetMessagesResponse * soap_new_req__ns3__GetMessagesResponse(struct soap *soap) { _ns3__GetMessagesResponse *_p = soap_instantiate__ns3__GetMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__GetMessagesResponse * soap_new_set__ns3__GetMessagesResponse(struct soap *soap, const std::vector<ns3__NotificationMessageHolderType * >& NotificationMessage, const std::vector<char * >& __any, char *__anyAttribute) { _ns3__GetMessagesResponse *_p = soap_instantiate__ns3__GetMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetMessagesResponse::NotificationMessage = NotificationMessage; _p->_ns3__GetMessagesResponse::__any = __any; _p->_ns3__GetMessagesResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns3__GetMessagesResponse(struct soap *soap, _ns3__GetMessagesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetMessagesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__GetMessages
#define SOAP_TYPE__ns3__GetMessages (724)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetMessages(struct soap*, const char*, int, const _ns3__GetMessages *, const char*);
SOAP_FMAC3 _ns3__GetMessages * SOAP_FMAC4 soap_in__ns3__GetMessages(struct soap*, const char*, _ns3__GetMessages *, const char*);

#ifndef soap_write__ns3__GetMessages
#define soap_write__ns3__GetMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:GetMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetMessages * SOAP_FMAC4 soap_get__ns3__GetMessages(struct soap*, _ns3__GetMessages *, const char*, const char*);

#ifndef soap_read__ns3__GetMessages
#define soap_read__ns3__GetMessages(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__GetMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetMessages * SOAP_FMAC2 soap_instantiate__ns3__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetMessages * soap_new__ns3__GetMessages(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetMessages(soap, n, NULL, NULL, NULL); }

inline _ns3__GetMessages * soap_new_req__ns3__GetMessages(struct soap *soap) { _ns3__GetMessages *_p = soap_instantiate__ns3__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__GetMessages * soap_new_set__ns3__GetMessages(struct soap *soap, std::string *MaximumNumber, const std::vector<char * >& __any, char *__anyAttribute) { _ns3__GetMessages *_p = soap_instantiate__ns3__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetMessages::MaximumNumber = MaximumNumber; _p->_ns3__GetMessages::__any = __any; _p->_ns3__GetMessages::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns3__GetMessages(struct soap *soap, _ns3__GetMessages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetMessages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__GetCurrentMessageResponse
#define SOAP_TYPE__ns3__GetCurrentMessageResponse (723)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetCurrentMessageResponse(struct soap*, const char*, int, const _ns3__GetCurrentMessageResponse *, const char*);
SOAP_FMAC3 _ns3__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__ns3__GetCurrentMessageResponse(struct soap*, const char*, _ns3__GetCurrentMessageResponse *, const char*);

#ifndef soap_write__ns3__GetCurrentMessageResponse
#define soap_write__ns3__GetCurrentMessageResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:GetCurrentMessageResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__ns3__GetCurrentMessageResponse(struct soap*, _ns3__GetCurrentMessageResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetCurrentMessageResponse
#define soap_read__ns3__GetCurrentMessageResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__GetCurrentMessageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__ns3__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetCurrentMessageResponse * soap_new__ns3__GetCurrentMessageResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetCurrentMessageResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetCurrentMessageResponse * soap_new_req__ns3__GetCurrentMessageResponse(struct soap *soap) { _ns3__GetCurrentMessageResponse *_p = soap_instantiate__ns3__GetCurrentMessageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__GetCurrentMessageResponse * soap_new_set__ns3__GetCurrentMessageResponse(struct soap *soap, const std::vector<char * >& __any) { _ns3__GetCurrentMessageResponse *_p = soap_instantiate__ns3__GetCurrentMessageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetCurrentMessageResponse::__any = __any; } return _p; }

inline void soap_delete__ns3__GetCurrentMessageResponse(struct soap *soap, _ns3__GetCurrentMessageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetCurrentMessageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__GetCurrentMessage
#define SOAP_TYPE__ns3__GetCurrentMessage (722)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetCurrentMessage(struct soap*, const char*, int, const _ns3__GetCurrentMessage *, const char*);
SOAP_FMAC3 _ns3__GetCurrentMessage * SOAP_FMAC4 soap_in__ns3__GetCurrentMessage(struct soap*, const char*, _ns3__GetCurrentMessage *, const char*);

#ifndef soap_write__ns3__GetCurrentMessage
#define soap_write__ns3__GetCurrentMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:GetCurrentMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetCurrentMessage * SOAP_FMAC4 soap_get__ns3__GetCurrentMessage(struct soap*, _ns3__GetCurrentMessage *, const char*, const char*);

#ifndef soap_read__ns3__GetCurrentMessage
#define soap_read__ns3__GetCurrentMessage(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__GetCurrentMessage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__ns3__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetCurrentMessage * soap_new__ns3__GetCurrentMessage(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetCurrentMessage(soap, n, NULL, NULL, NULL); }

inline _ns3__GetCurrentMessage * soap_new_req__ns3__GetCurrentMessage(struct soap *soap, ns3__TopicExpressionType *Topic) { _ns3__GetCurrentMessage *_p = soap_instantiate__ns3__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetCurrentMessage::Topic = Topic; } return _p; }

inline _ns3__GetCurrentMessage * soap_new_set__ns3__GetCurrentMessage(struct soap *soap, ns3__TopicExpressionType *Topic, const std::vector<char * >& __any) { _ns3__GetCurrentMessage *_p = soap_instantiate__ns3__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetCurrentMessage::Topic = Topic; _p->_ns3__GetCurrentMessage::__any = __any; } return _p; }

inline void soap_delete__ns3__GetCurrentMessage(struct soap *soap, _ns3__GetCurrentMessage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetCurrentMessage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__SubscribeResponse
#define SOAP_TYPE__ns3__SubscribeResponse (721)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscribeResponse(struct soap*, const char*, int, const _ns3__SubscribeResponse *, const char*);
SOAP_FMAC3 _ns3__SubscribeResponse * SOAP_FMAC4 soap_in__ns3__SubscribeResponse(struct soap*, const char*, _ns3__SubscribeResponse *, const char*);

#ifndef soap_write__ns3__SubscribeResponse
#define soap_write__ns3__SubscribeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscribeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscribeResponse * SOAP_FMAC4 soap_get__ns3__SubscribeResponse(struct soap*, _ns3__SubscribeResponse *, const char*, const char*);

#ifndef soap_read__ns3__SubscribeResponse
#define soap_read__ns3__SubscribeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__SubscribeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SubscribeResponse * SOAP_FMAC2 soap_instantiate__ns3__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscribeResponse * soap_new__ns3__SubscribeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SubscribeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__SubscribeResponse * soap_new_req__ns3__SubscribeResponse(struct soap *soap, ns7__EndpointReferenceType *SubscriptionReference) { _ns3__SubscribeResponse *_p = soap_instantiate__ns3__SubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeResponse::SubscriptionReference = SubscriptionReference; } return _p; }

inline _ns3__SubscribeResponse * soap_new_set__ns3__SubscribeResponse(struct soap *soap, ns7__EndpointReferenceType *SubscriptionReference, time_t *CurrentTime, time_t *TerminationTime, const std::vector<char * >& __any) { _ns3__SubscribeResponse *_p = soap_instantiate__ns3__SubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscribeResponse::SubscriptionReference = SubscriptionReference; _p->_ns3__SubscribeResponse::CurrentTime = CurrentTime; _p->_ns3__SubscribeResponse::TerminationTime = TerminationTime; _p->_ns3__SubscribeResponse::__any = __any; } return _p; }

inline void soap_delete__ns3__SubscribeResponse(struct soap *soap, _ns3__SubscribeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SubscribeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__Subscribe
#define SOAP_TYPE__ns3__Subscribe (720)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Subscribe(struct soap*, const char*, int, const _ns3__Subscribe *, const char*);
SOAP_FMAC3 _ns3__Subscribe * SOAP_FMAC4 soap_in__ns3__Subscribe(struct soap*, const char*, _ns3__Subscribe *, const char*);

#ifndef soap_write__ns3__Subscribe
#define soap_write__ns3__Subscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:Subscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__Subscribe * SOAP_FMAC4 soap_get__ns3__Subscribe(struct soap*, _ns3__Subscribe *, const char*, const char*);

#ifndef soap_read__ns3__Subscribe
#define soap_read__ns3__Subscribe(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__Subscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__Subscribe * SOAP_FMAC2 soap_instantiate__ns3__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Subscribe * soap_new__ns3__Subscribe(struct soap *soap, int n = -1) { return soap_instantiate__ns3__Subscribe(soap, n, NULL, NULL, NULL); }

inline _ns3__Subscribe * soap_new_req__ns3__Subscribe(struct soap *soap, ns7__EndpointReferenceType *ConsumerReference) { _ns3__Subscribe *_p = soap_instantiate__ns3__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Subscribe::ConsumerReference = ConsumerReference; } return _p; }

inline _ns3__Subscribe * soap_new_set__ns3__Subscribe(struct soap *soap, ns7__EndpointReferenceType *ConsumerReference, ns3__FilterType *Filter, std::string *InitialTerminationTime, _ns3__Subscribe_SubscriptionPolicy *SubscriptionPolicy, const std::vector<char * >& __any) { _ns3__Subscribe *_p = soap_instantiate__ns3__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Subscribe::ConsumerReference = ConsumerReference; _p->_ns3__Subscribe::Filter = Filter; _p->_ns3__Subscribe::InitialTerminationTime = InitialTerminationTime; _p->_ns3__Subscribe::SubscriptionPolicy = SubscriptionPolicy; _p->_ns3__Subscribe::__any = __any; } return _p; }

inline void soap_delete__ns3__Subscribe(struct soap *soap, _ns3__Subscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Subscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__UseRaw
#define SOAP_TYPE__ns3__UseRaw (719)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UseRaw(struct soap*, const char*, int, const _ns3__UseRaw *, const char*);
SOAP_FMAC3 _ns3__UseRaw * SOAP_FMAC4 soap_in__ns3__UseRaw(struct soap*, const char*, _ns3__UseRaw *, const char*);

#ifndef soap_write__ns3__UseRaw
#define soap_write__ns3__UseRaw(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UseRaw", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UseRaw * SOAP_FMAC4 soap_get__ns3__UseRaw(struct soap*, _ns3__UseRaw *, const char*, const char*);

#ifndef soap_read__ns3__UseRaw
#define soap_read__ns3__UseRaw(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__UseRaw(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__UseRaw * SOAP_FMAC2 soap_instantiate__ns3__UseRaw(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UseRaw * soap_new__ns3__UseRaw(struct soap *soap, int n = -1) { return soap_instantiate__ns3__UseRaw(soap, n, NULL, NULL, NULL); }

inline _ns3__UseRaw * soap_new_req__ns3__UseRaw(struct soap *soap) { _ns3__UseRaw *_p = soap_instantiate__ns3__UseRaw(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__UseRaw * soap_new_set__ns3__UseRaw(struct soap *soap) { _ns3__UseRaw *_p = soap_instantiate__ns3__UseRaw(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__UseRaw(struct soap *soap, _ns3__UseRaw *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__UseRaw(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__Notify
#define SOAP_TYPE__ns3__Notify (718)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Notify(struct soap*, const char*, int, const _ns3__Notify *, const char*);
SOAP_FMAC3 _ns3__Notify * SOAP_FMAC4 soap_in__ns3__Notify(struct soap*, const char*, _ns3__Notify *, const char*);

#ifndef soap_write__ns3__Notify
#define soap_write__ns3__Notify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:Notify", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__Notify * SOAP_FMAC4 soap_get__ns3__Notify(struct soap*, _ns3__Notify *, const char*, const char*);

#ifndef soap_read__ns3__Notify
#define soap_read__ns3__Notify(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__Notify(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__Notify * SOAP_FMAC2 soap_instantiate__ns3__Notify(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Notify * soap_new__ns3__Notify(struct soap *soap, int n = -1) { return soap_instantiate__ns3__Notify(soap, n, NULL, NULL, NULL); }

inline _ns3__Notify * soap_new_req__ns3__Notify(struct soap *soap, const std::vector<ns3__NotificationMessageHolderType * >& NotificationMessage) { _ns3__Notify *_p = soap_instantiate__ns3__Notify(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Notify::NotificationMessage = NotificationMessage; } return _p; }

inline _ns3__Notify * soap_new_set__ns3__Notify(struct soap *soap, const std::vector<ns3__NotificationMessageHolderType * >& NotificationMessage, const std::vector<char * >& __any) { _ns3__Notify *_p = soap_instantiate__ns3__Notify(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__Notify::NotificationMessage = NotificationMessage; _p->_ns3__Notify::__any = __any; } return _p; }

inline void soap_delete__ns3__Notify(struct soap *soap, _ns3__Notify *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Notify(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__SubscriptionManagerRP
#define SOAP_TYPE__ns3__SubscriptionManagerRP (717)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscriptionManagerRP(struct soap*, const char*, int, const _ns3__SubscriptionManagerRP *, const char*);
SOAP_FMAC3 _ns3__SubscriptionManagerRP * SOAP_FMAC4 soap_in__ns3__SubscriptionManagerRP(struct soap*, const char*, _ns3__SubscriptionManagerRP *, const char*);

#ifndef soap_write__ns3__SubscriptionManagerRP
#define soap_write__ns3__SubscriptionManagerRP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscriptionManagerRP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscriptionManagerRP * SOAP_FMAC4 soap_get__ns3__SubscriptionManagerRP(struct soap*, _ns3__SubscriptionManagerRP *, const char*, const char*);

#ifndef soap_read__ns3__SubscriptionManagerRP
#define soap_read__ns3__SubscriptionManagerRP(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__SubscriptionManagerRP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__ns3__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscriptionManagerRP * soap_new__ns3__SubscriptionManagerRP(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SubscriptionManagerRP(soap, n, NULL, NULL, NULL); }

inline _ns3__SubscriptionManagerRP * soap_new_req__ns3__SubscriptionManagerRP(struct soap *soap, ns7__EndpointReferenceType *ConsumerReference) { _ns3__SubscriptionManagerRP *_p = soap_instantiate__ns3__SubscriptionManagerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscriptionManagerRP::ConsumerReference = ConsumerReference; } return _p; }

inline _ns3__SubscriptionManagerRP * soap_new_set__ns3__SubscriptionManagerRP(struct soap *soap, ns7__EndpointReferenceType *ConsumerReference, ns3__FilterType *Filter, ns3__SubscriptionPolicyType *SubscriptionPolicy, time_t *CreationTime) { _ns3__SubscriptionManagerRP *_p = soap_instantiate__ns3__SubscriptionManagerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SubscriptionManagerRP::ConsumerReference = ConsumerReference; _p->_ns3__SubscriptionManagerRP::Filter = Filter; _p->_ns3__SubscriptionManagerRP::SubscriptionPolicy = SubscriptionPolicy; _p->_ns3__SubscriptionManagerRP::CreationTime = CreationTime; } return _p; }

inline void soap_delete__ns3__SubscriptionManagerRP(struct soap *soap, _ns3__SubscriptionManagerRP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SubscriptionManagerRP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__NotificationProducerRP
#define SOAP_TYPE__ns3__NotificationProducerRP (716)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotificationProducerRP(struct soap*, const char*, int, const _ns3__NotificationProducerRP *, const char*);
SOAP_FMAC3 _ns3__NotificationProducerRP * SOAP_FMAC4 soap_in__ns3__NotificationProducerRP(struct soap*, const char*, _ns3__NotificationProducerRP *, const char*);

#ifndef soap_write__ns3__NotificationProducerRP
#define soap_write__ns3__NotificationProducerRP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotificationProducerRP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotificationProducerRP * SOAP_FMAC4 soap_get__ns3__NotificationProducerRP(struct soap*, _ns3__NotificationProducerRP *, const char*, const char*);

#ifndef soap_read__ns3__NotificationProducerRP
#define soap_read__ns3__NotificationProducerRP(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__NotificationProducerRP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__ns3__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotificationProducerRP * soap_new__ns3__NotificationProducerRP(struct soap *soap, int n = -1) { return soap_instantiate__ns3__NotificationProducerRP(soap, n, NULL, NULL, NULL); }

inline _ns3__NotificationProducerRP * soap_new_req__ns3__NotificationProducerRP(struct soap *soap) { _ns3__NotificationProducerRP *_p = soap_instantiate__ns3__NotificationProducerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__NotificationProducerRP * soap_new_set__ns3__NotificationProducerRP(struct soap *soap, const std::vector<ns3__TopicExpressionType * >& TopicExpression, bool *FixedTopicSet, const std::vector<std::string >& TopicExpressionDialect, ns6__TopicSetType *ns6__TopicSet) { _ns3__NotificationProducerRP *_p = soap_instantiate__ns3__NotificationProducerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__NotificationProducerRP::TopicExpression = TopicExpression; _p->_ns3__NotificationProducerRP::FixedTopicSet = FixedTopicSet; _p->_ns3__NotificationProducerRP::TopicExpressionDialect = TopicExpressionDialect; _p->_ns3__NotificationProducerRP::ns6__TopicSet = ns6__TopicSet; } return _p; }

inline void soap_delete__ns3__NotificationProducerRP(struct soap *soap, _ns3__NotificationProducerRP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__NotificationProducerRP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__ResumeFailedFaultType
#define SOAP_TYPE_ns3__ResumeFailedFaultType (715)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ResumeFailedFaultType(struct soap*, const char*, int, const ns3__ResumeFailedFaultType *, const char*);
SOAP_FMAC3 ns3__ResumeFailedFaultType * SOAP_FMAC4 soap_in_ns3__ResumeFailedFaultType(struct soap*, const char*, ns3__ResumeFailedFaultType *, const char*);

#ifndef soap_write_ns3__ResumeFailedFaultType
#define soap_write_ns3__ResumeFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResumeFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ResumeFailedFaultType * SOAP_FMAC4 soap_get_ns3__ResumeFailedFaultType(struct soap*, ns3__ResumeFailedFaultType *, const char*, const char*);

#ifndef soap_read_ns3__ResumeFailedFaultType
#define soap_read_ns3__ResumeFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__ResumeFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_ns3__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ResumeFailedFaultType * soap_new_ns3__ResumeFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ResumeFailedFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__ResumeFailedFaultType * soap_new_req_ns3__ResumeFailedFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__ResumeFailedFaultType *_p = soap_instantiate_ns3__ResumeFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ResumeFailedFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__ResumeFailedFaultType * soap_new_set_ns3__ResumeFailedFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__ResumeFailedFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__ResumeFailedFaultType_Description >*ns5__Description, _ns3__ResumeFailedFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__ResumeFailedFaultType *_p = soap_instantiate_ns3__ResumeFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ResumeFailedFaultType::__any = __any; _p->ns3__ResumeFailedFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__ResumeFailedFaultType::ns5__Originator = ns5__Originator; _p->ns3__ResumeFailedFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__ResumeFailedFaultType::ns5__Description = ns5__Description; _p->ns3__ResumeFailedFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__ResumeFailedFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__ResumeFailedFaultType(struct soap *soap, ns3__ResumeFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ResumeFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__PauseFailedFaultType
#define SOAP_TYPE_ns3__PauseFailedFaultType (714)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PauseFailedFaultType(struct soap*, const char*, int, const ns3__PauseFailedFaultType *, const char*);
SOAP_FMAC3 ns3__PauseFailedFaultType * SOAP_FMAC4 soap_in_ns3__PauseFailedFaultType(struct soap*, const char*, ns3__PauseFailedFaultType *, const char*);

#ifndef soap_write_ns3__PauseFailedFaultType
#define soap_write_ns3__PauseFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PauseFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PauseFailedFaultType * SOAP_FMAC4 soap_get_ns3__PauseFailedFaultType(struct soap*, ns3__PauseFailedFaultType *, const char*, const char*);

#ifndef soap_read_ns3__PauseFailedFaultType
#define soap_read_ns3__PauseFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__PauseFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_ns3__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PauseFailedFaultType * soap_new_ns3__PauseFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__PauseFailedFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__PauseFailedFaultType * soap_new_req_ns3__PauseFailedFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__PauseFailedFaultType *_p = soap_instantiate_ns3__PauseFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PauseFailedFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__PauseFailedFaultType * soap_new_set_ns3__PauseFailedFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__PauseFailedFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__PauseFailedFaultType_Description >*ns5__Description, _ns3__PauseFailedFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__PauseFailedFaultType *_p = soap_instantiate_ns3__PauseFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PauseFailedFaultType::__any = __any; _p->ns3__PauseFailedFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__PauseFailedFaultType::ns5__Originator = ns5__Originator; _p->ns3__PauseFailedFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__PauseFailedFaultType::ns5__Description = ns5__Description; _p->ns3__PauseFailedFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__PauseFailedFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__PauseFailedFaultType(struct soap *soap, ns3__PauseFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__PauseFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType (713)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToDestroySubscriptionFaultType(struct soap*, const char*, int, const ns3__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_ns3__UnableToDestroySubscriptionFaultType(struct soap*, const char*, ns3__UnableToDestroySubscriptionFaultType *, const char*);

#ifndef soap_write_ns3__UnableToDestroySubscriptionFaultType
#define soap_write_ns3__UnableToDestroySubscriptionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_ns3__UnableToDestroySubscriptionFaultType(struct soap*, ns3__UnableToDestroySubscriptionFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnableToDestroySubscriptionFaultType
#define soap_read_ns3__UnableToDestroySubscriptionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnableToDestroySubscriptionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToDestroySubscriptionFaultType * soap_new_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnableToDestroySubscriptionFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnableToDestroySubscriptionFaultType * soap_new_req_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__UnableToDestroySubscriptionFaultType *_p = soap_instantiate_ns3__UnableToDestroySubscriptionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToDestroySubscriptionFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__UnableToDestroySubscriptionFaultType * soap_new_set_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*ns5__Description, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__UnableToDestroySubscriptionFaultType *_p = soap_instantiate_ns3__UnableToDestroySubscriptionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToDestroySubscriptionFaultType::__any = __any; _p->ns3__UnableToDestroySubscriptionFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnableToDestroySubscriptionFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnableToDestroySubscriptionFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnableToDestroySubscriptionFaultType::ns5__Description = ns5__Description; _p->ns3__UnableToDestroySubscriptionFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnableToDestroySubscriptionFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, ns3__UnableToDestroySubscriptionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnableToDestroySubscriptionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType (712)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnacceptableTerminationTimeFaultType(struct soap*, const char*, int, const ns3__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC3 ns3__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_ns3__UnacceptableTerminationTimeFaultType(struct soap*, const char*, ns3__UnacceptableTerminationTimeFaultType *, const char*);

#ifndef soap_write_ns3__UnacceptableTerminationTimeFaultType
#define soap_write_ns3__UnacceptableTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_ns3__UnacceptableTerminationTimeFaultType(struct soap*, ns3__UnacceptableTerminationTimeFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnacceptableTerminationTimeFaultType
#define soap_read_ns3__UnacceptableTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnacceptableTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnacceptableTerminationTimeFaultType * soap_new_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnacceptableTerminationTimeFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnacceptableTerminationTimeFaultType * soap_new_req_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, time_t ns5__Timestamp, time_t MinimumTime) { ns3__UnacceptableTerminationTimeFaultType *_p = soap_instantiate_ns3__UnacceptableTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnacceptableTerminationTimeFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime; } return _p; }

inline ns3__UnacceptableTerminationTimeFaultType * soap_new_set_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*ns5__Description, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute, time_t MinimumTime, time_t *MaximumTime) { ns3__UnacceptableTerminationTimeFaultType *_p = soap_instantiate_ns3__UnacceptableTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnacceptableTerminationTimeFaultType::__any = __any; _p->ns3__UnacceptableTerminationTimeFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnacceptableTerminationTimeFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnacceptableTerminationTimeFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnacceptableTerminationTimeFaultType::ns5__Description = ns5__Description; _p->ns3__UnacceptableTerminationTimeFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnacceptableTerminationTimeFaultType::__anyAttribute = __anyAttribute; _p->ns3__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime; _p->ns3__UnacceptableTerminationTimeFaultType::MaximumTime = MaximumTime; } return _p; }

inline void soap_delete_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableTerminationTimeFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnacceptableTerminationTimeFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnableToCreatePullPointFaultType
#define SOAP_TYPE_ns3__UnableToCreatePullPointFaultType (711)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToCreatePullPointFaultType(struct soap*, const char*, int, const ns3__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_ns3__UnableToCreatePullPointFaultType(struct soap*, const char*, ns3__UnableToCreatePullPointFaultType *, const char*);

#ifndef soap_write_ns3__UnableToCreatePullPointFaultType
#define soap_write_ns3__UnableToCreatePullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToCreatePullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_ns3__UnableToCreatePullPointFaultType(struct soap*, ns3__UnableToCreatePullPointFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnableToCreatePullPointFaultType
#define soap_read_ns3__UnableToCreatePullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnableToCreatePullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToCreatePullPointFaultType * soap_new_ns3__UnableToCreatePullPointFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnableToCreatePullPointFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnableToCreatePullPointFaultType * soap_new_req_ns3__UnableToCreatePullPointFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__UnableToCreatePullPointFaultType *_p = soap_instantiate_ns3__UnableToCreatePullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToCreatePullPointFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__UnableToCreatePullPointFaultType * soap_new_set_ns3__UnableToCreatePullPointFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnableToCreatePullPointFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*ns5__Description, _ns3__UnableToCreatePullPointFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__UnableToCreatePullPointFaultType *_p = soap_instantiate_ns3__UnableToCreatePullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToCreatePullPointFaultType::__any = __any; _p->ns3__UnableToCreatePullPointFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnableToCreatePullPointFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnableToCreatePullPointFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnableToCreatePullPointFaultType::ns5__Description = ns5__Description; _p->ns3__UnableToCreatePullPointFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnableToCreatePullPointFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__UnableToCreatePullPointFaultType(struct soap *soap, ns3__UnableToCreatePullPointFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnableToCreatePullPointFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType (710)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToDestroyPullPointFaultType(struct soap*, const char*, int, const ns3__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_ns3__UnableToDestroyPullPointFaultType(struct soap*, const char*, ns3__UnableToDestroyPullPointFaultType *, const char*);

#ifndef soap_write_ns3__UnableToDestroyPullPointFaultType
#define soap_write_ns3__UnableToDestroyPullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_ns3__UnableToDestroyPullPointFaultType(struct soap*, ns3__UnableToDestroyPullPointFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnableToDestroyPullPointFaultType
#define soap_read_ns3__UnableToDestroyPullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnableToDestroyPullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToDestroyPullPointFaultType * soap_new_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnableToDestroyPullPointFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnableToDestroyPullPointFaultType * soap_new_req_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__UnableToDestroyPullPointFaultType *_p = soap_instantiate_ns3__UnableToDestroyPullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToDestroyPullPointFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__UnableToDestroyPullPointFaultType * soap_new_set_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*ns5__Description, _ns3__UnableToDestroyPullPointFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__UnableToDestroyPullPointFaultType *_p = soap_instantiate_ns3__UnableToDestroyPullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToDestroyPullPointFaultType::__any = __any; _p->ns3__UnableToDestroyPullPointFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnableToDestroyPullPointFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnableToDestroyPullPointFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnableToDestroyPullPointFaultType::ns5__Description = ns5__Description; _p->ns3__UnableToDestroyPullPointFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnableToDestroyPullPointFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, ns3__UnableToDestroyPullPointFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnableToDestroyPullPointFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnableToGetMessagesFaultType
#define SOAP_TYPE_ns3__UnableToGetMessagesFaultType (709)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToGetMessagesFaultType(struct soap*, const char*, int, const ns3__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_ns3__UnableToGetMessagesFaultType(struct soap*, const char*, ns3__UnableToGetMessagesFaultType *, const char*);

#ifndef soap_write_ns3__UnableToGetMessagesFaultType
#define soap_write_ns3__UnableToGetMessagesFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnableToGetMessagesFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_ns3__UnableToGetMessagesFaultType(struct soap*, ns3__UnableToGetMessagesFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnableToGetMessagesFaultType
#define soap_read_ns3__UnableToGetMessagesFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnableToGetMessagesFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToGetMessagesFaultType * soap_new_ns3__UnableToGetMessagesFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnableToGetMessagesFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnableToGetMessagesFaultType * soap_new_req_ns3__UnableToGetMessagesFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__UnableToGetMessagesFaultType *_p = soap_instantiate_ns3__UnableToGetMessagesFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToGetMessagesFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__UnableToGetMessagesFaultType * soap_new_set_ns3__UnableToGetMessagesFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnableToGetMessagesFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*ns5__Description, _ns3__UnableToGetMessagesFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__UnableToGetMessagesFaultType *_p = soap_instantiate_ns3__UnableToGetMessagesFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnableToGetMessagesFaultType::__any = __any; _p->ns3__UnableToGetMessagesFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnableToGetMessagesFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnableToGetMessagesFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnableToGetMessagesFaultType::ns5__Description = ns5__Description; _p->ns3__UnableToGetMessagesFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnableToGetMessagesFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__UnableToGetMessagesFaultType(struct soap *soap, ns3__UnableToGetMessagesFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnableToGetMessagesFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType (708)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, int, const ns3__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC3 ns3__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, ns3__NoCurrentMessageOnTopicFaultType *, const char*);

#ifndef soap_write_ns3__NoCurrentMessageOnTopicFaultType
#define soap_write_ns3__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, ns3__NoCurrentMessageOnTopicFaultType *, const char*, const char*);

#ifndef soap_read_ns3__NoCurrentMessageOnTopicFaultType
#define soap_read_ns3__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__NoCurrentMessageOnTopicFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__NoCurrentMessageOnTopicFaultType * soap_new_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__NoCurrentMessageOnTopicFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__NoCurrentMessageOnTopicFaultType * soap_new_req_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__NoCurrentMessageOnTopicFaultType *_p = soap_instantiate_ns3__NoCurrentMessageOnTopicFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__NoCurrentMessageOnTopicFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__NoCurrentMessageOnTopicFaultType * soap_new_set_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*ns5__Description, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__NoCurrentMessageOnTopicFaultType *_p = soap_instantiate_ns3__NoCurrentMessageOnTopicFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__NoCurrentMessageOnTopicFaultType::__any = __any; _p->ns3__NoCurrentMessageOnTopicFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__NoCurrentMessageOnTopicFaultType::ns5__Originator = ns5__Originator; _p->ns3__NoCurrentMessageOnTopicFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__NoCurrentMessageOnTopicFaultType::ns5__Description = ns5__Description; _p->ns3__NoCurrentMessageOnTopicFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__NoCurrentMessageOnTopicFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, ns3__NoCurrentMessageOnTopicFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType (707)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, int, const ns3__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC3 ns3__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, ns3__UnacceptableInitialTerminationTimeFaultType *, const char*);

#ifndef soap_write_ns3__UnacceptableInitialTerminationTimeFaultType
#define soap_write_ns3__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, ns3__UnacceptableInitialTerminationTimeFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnacceptableInitialTerminationTimeFaultType
#define soap_read_ns3__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnacceptableInitialTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnacceptableInitialTerminationTimeFaultType * soap_new_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnacceptableInitialTerminationTimeFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnacceptableInitialTerminationTimeFaultType * soap_new_req_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, time_t ns5__Timestamp, time_t MinimumTime) { ns3__UnacceptableInitialTerminationTimeFaultType *_p = soap_instantiate_ns3__UnacceptableInitialTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnacceptableInitialTerminationTimeFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime; } return _p; }

inline ns3__UnacceptableInitialTerminationTimeFaultType * soap_new_set_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*ns5__Description, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute, time_t MinimumTime, time_t *MaximumTime) { ns3__UnacceptableInitialTerminationTimeFaultType *_p = soap_instantiate_ns3__UnacceptableInitialTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnacceptableInitialTerminationTimeFaultType::__any = __any; _p->ns3__UnacceptableInitialTerminationTimeFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnacceptableInitialTerminationTimeFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnacceptableInitialTerminationTimeFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnacceptableInitialTerminationTimeFaultType::ns5__Description = ns5__Description; _p->ns3__UnacceptableInitialTerminationTimeFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnacceptableInitialTerminationTimeFaultType::__anyAttribute = __anyAttribute; _p->ns3__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime; _p->ns3__UnacceptableInitialTerminationTimeFaultType::MaximumTime = MaximumTime; } return _p; }

inline void soap_delete_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableInitialTerminationTimeFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType (706)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NotifyMessageNotSupportedFaultType(struct soap*, const char*, int, const ns3__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC3 ns3__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_ns3__NotifyMessageNotSupportedFaultType(struct soap*, const char*, ns3__NotifyMessageNotSupportedFaultType *, const char*);

#ifndef soap_write_ns3__NotifyMessageNotSupportedFaultType
#define soap_write_ns3__NotifyMessageNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_ns3__NotifyMessageNotSupportedFaultType(struct soap*, ns3__NotifyMessageNotSupportedFaultType *, const char*, const char*);

#ifndef soap_read_ns3__NotifyMessageNotSupportedFaultType
#define soap_read_ns3__NotifyMessageNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__NotifyMessageNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_ns3__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__NotifyMessageNotSupportedFaultType * soap_new_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__NotifyMessageNotSupportedFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__NotifyMessageNotSupportedFaultType * soap_new_req_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__NotifyMessageNotSupportedFaultType *_p = soap_instantiate_ns3__NotifyMessageNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__NotifyMessageNotSupportedFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__NotifyMessageNotSupportedFaultType * soap_new_set_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*ns5__Description, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__NotifyMessageNotSupportedFaultType *_p = soap_instantiate_ns3__NotifyMessageNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__NotifyMessageNotSupportedFaultType::__any = __any; _p->ns3__NotifyMessageNotSupportedFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__NotifyMessageNotSupportedFaultType::ns5__Originator = ns5__Originator; _p->ns3__NotifyMessageNotSupportedFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__NotifyMessageNotSupportedFaultType::ns5__Description = ns5__Description; _p->ns3__NotifyMessageNotSupportedFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__NotifyMessageNotSupportedFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, ns3__NotifyMessageNotSupportedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__NotifyMessageNotSupportedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType (705)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnsupportedPolicyRequestFaultType(struct soap*, const char*, int, const ns3__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 ns3__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_ns3__UnsupportedPolicyRequestFaultType(struct soap*, const char*, ns3__UnsupportedPolicyRequestFaultType *, const char*);

#ifndef soap_write_ns3__UnsupportedPolicyRequestFaultType
#define soap_write_ns3__UnsupportedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_ns3__UnsupportedPolicyRequestFaultType(struct soap*, ns3__UnsupportedPolicyRequestFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnsupportedPolicyRequestFaultType
#define soap_read_ns3__UnsupportedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnsupportedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnsupportedPolicyRequestFaultType * soap_new_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnsupportedPolicyRequestFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnsupportedPolicyRequestFaultType * soap_new_req_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__UnsupportedPolicyRequestFaultType *_p = soap_instantiate_ns3__UnsupportedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnsupportedPolicyRequestFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__UnsupportedPolicyRequestFaultType * soap_new_set_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*ns5__Description, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute, const std::vector<std::string >& UnsupportedPolicy) { ns3__UnsupportedPolicyRequestFaultType *_p = soap_instantiate_ns3__UnsupportedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnsupportedPolicyRequestFaultType::__any = __any; _p->ns3__UnsupportedPolicyRequestFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnsupportedPolicyRequestFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnsupportedPolicyRequestFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnsupportedPolicyRequestFaultType::ns5__Description = ns5__Description; _p->ns3__UnsupportedPolicyRequestFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnsupportedPolicyRequestFaultType::__anyAttribute = __anyAttribute; _p->ns3__UnsupportedPolicyRequestFaultType::UnsupportedPolicy = UnsupportedPolicy; } return _p; }

inline void soap_delete_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, ns3__UnsupportedPolicyRequestFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnsupportedPolicyRequestFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType (704)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, int, const ns3__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 ns3__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, ns3__UnrecognizedPolicyRequestFaultType *, const char*);

#ifndef soap_write_ns3__UnrecognizedPolicyRequestFaultType
#define soap_write_ns3__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, ns3__UnrecognizedPolicyRequestFaultType *, const char*, const char*);

#ifndef soap_read_ns3__UnrecognizedPolicyRequestFaultType
#define soap_read_ns3__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__UnrecognizedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnrecognizedPolicyRequestFaultType * soap_new_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__UnrecognizedPolicyRequestFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__UnrecognizedPolicyRequestFaultType * soap_new_req_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__UnrecognizedPolicyRequestFaultType *_p = soap_instantiate_ns3__UnrecognizedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnrecognizedPolicyRequestFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__UnrecognizedPolicyRequestFaultType * soap_new_set_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*ns5__Description, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute, const std::vector<std::string >& UnrecognizedPolicy) { ns3__UnrecognizedPolicyRequestFaultType *_p = soap_instantiate_ns3__UnrecognizedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__UnrecognizedPolicyRequestFaultType::__any = __any; _p->ns3__UnrecognizedPolicyRequestFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__UnrecognizedPolicyRequestFaultType::ns5__Originator = ns5__Originator; _p->ns3__UnrecognizedPolicyRequestFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__UnrecognizedPolicyRequestFaultType::ns5__Description = ns5__Description; _p->ns3__UnrecognizedPolicyRequestFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__UnrecognizedPolicyRequestFaultType::__anyAttribute = __anyAttribute; _p->ns3__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy = UnrecognizedPolicy; } return _p; }

inline void soap_delete_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, ns3__UnrecognizedPolicyRequestFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType (703)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidMessageContentExpressionFaultType(struct soap*, const char*, int, const ns3__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_ns3__InvalidMessageContentExpressionFaultType(struct soap*, const char*, ns3__InvalidMessageContentExpressionFaultType *, const char*);

#ifndef soap_write_ns3__InvalidMessageContentExpressionFaultType
#define soap_write_ns3__InvalidMessageContentExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_ns3__InvalidMessageContentExpressionFaultType(struct soap*, ns3__InvalidMessageContentExpressionFaultType *, const char*, const char*);

#ifndef soap_read_ns3__InvalidMessageContentExpressionFaultType
#define soap_read_ns3__InvalidMessageContentExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__InvalidMessageContentExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidMessageContentExpressionFaultType * soap_new_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__InvalidMessageContentExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__InvalidMessageContentExpressionFaultType * soap_new_req_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__InvalidMessageContentExpressionFaultType *_p = soap_instantiate_ns3__InvalidMessageContentExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidMessageContentExpressionFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__InvalidMessageContentExpressionFaultType * soap_new_set_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*ns5__Description, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__InvalidMessageContentExpressionFaultType *_p = soap_instantiate_ns3__InvalidMessageContentExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidMessageContentExpressionFaultType::__any = __any; _p->ns3__InvalidMessageContentExpressionFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__InvalidMessageContentExpressionFaultType::ns5__Originator = ns5__Originator; _p->ns3__InvalidMessageContentExpressionFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__InvalidMessageContentExpressionFaultType::ns5__Description = ns5__Description; _p->ns3__InvalidMessageContentExpressionFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__InvalidMessageContentExpressionFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, ns3__InvalidMessageContentExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__InvalidMessageContentExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType (702)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, int, const ns3__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, ns3__InvalidProducerPropertiesExpressionFaultType *, const char*);

#ifndef soap_write_ns3__InvalidProducerPropertiesExpressionFaultType
#define soap_write_ns3__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, ns3__InvalidProducerPropertiesExpressionFaultType *, const char*, const char*);

#ifndef soap_read_ns3__InvalidProducerPropertiesExpressionFaultType
#define soap_read_ns3__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__InvalidProducerPropertiesExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidProducerPropertiesExpressionFaultType * soap_new_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__InvalidProducerPropertiesExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__InvalidProducerPropertiesExpressionFaultType * soap_new_req_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__InvalidProducerPropertiesExpressionFaultType *_p = soap_instantiate_ns3__InvalidProducerPropertiesExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidProducerPropertiesExpressionFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__InvalidProducerPropertiesExpressionFaultType * soap_new_set_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*ns5__Description, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__InvalidProducerPropertiesExpressionFaultType *_p = soap_instantiate_ns3__InvalidProducerPropertiesExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidProducerPropertiesExpressionFaultType::__any = __any; _p->ns3__InvalidProducerPropertiesExpressionFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__InvalidProducerPropertiesExpressionFaultType::ns5__Originator = ns5__Originator; _p->ns3__InvalidProducerPropertiesExpressionFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__InvalidProducerPropertiesExpressionFaultType::ns5__Description = ns5__Description; _p->ns3__InvalidProducerPropertiesExpressionFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__InvalidProducerPropertiesExpressionFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, ns3__InvalidProducerPropertiesExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType (701)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, int, const ns3__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC3 ns3__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, ns3__MultipleTopicsSpecifiedFaultType *, const char*);

#ifndef soap_write_ns3__MultipleTopicsSpecifiedFaultType
#define soap_write_ns3__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, ns3__MultipleTopicsSpecifiedFaultType *, const char*, const char*);

#ifndef soap_read_ns3__MultipleTopicsSpecifiedFaultType
#define soap_read_ns3__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__MultipleTopicsSpecifiedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MultipleTopicsSpecifiedFaultType * soap_new_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__MultipleTopicsSpecifiedFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__MultipleTopicsSpecifiedFaultType * soap_new_req_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__MultipleTopicsSpecifiedFaultType *_p = soap_instantiate_ns3__MultipleTopicsSpecifiedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MultipleTopicsSpecifiedFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__MultipleTopicsSpecifiedFaultType * soap_new_set_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*ns5__Description, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__MultipleTopicsSpecifiedFaultType *_p = soap_instantiate_ns3__MultipleTopicsSpecifiedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MultipleTopicsSpecifiedFaultType::__any = __any; _p->ns3__MultipleTopicsSpecifiedFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__MultipleTopicsSpecifiedFaultType::ns5__Originator = ns5__Originator; _p->ns3__MultipleTopicsSpecifiedFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__MultipleTopicsSpecifiedFaultType::ns5__Description = ns5__Description; _p->ns3__MultipleTopicsSpecifiedFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__MultipleTopicsSpecifiedFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, ns3__MultipleTopicsSpecifiedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__TopicNotSupportedFaultType
#define SOAP_TYPE_ns3__TopicNotSupportedFaultType (700)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TopicNotSupportedFaultType(struct soap*, const char*, int, const ns3__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC3 ns3__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_ns3__TopicNotSupportedFaultType(struct soap*, const char*, ns3__TopicNotSupportedFaultType *, const char*);

#ifndef soap_write_ns3__TopicNotSupportedFaultType
#define soap_write_ns3__TopicNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_ns3__TopicNotSupportedFaultType(struct soap*, ns3__TopicNotSupportedFaultType *, const char*, const char*);

#ifndef soap_read_ns3__TopicNotSupportedFaultType
#define soap_read_ns3__TopicNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__TopicNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_ns3__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TopicNotSupportedFaultType * soap_new_ns3__TopicNotSupportedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TopicNotSupportedFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__TopicNotSupportedFaultType * soap_new_req_ns3__TopicNotSupportedFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__TopicNotSupportedFaultType *_p = soap_instantiate_ns3__TopicNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TopicNotSupportedFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__TopicNotSupportedFaultType * soap_new_set_ns3__TopicNotSupportedFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__TopicNotSupportedFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__TopicNotSupportedFaultType_Description >*ns5__Description, _ns3__TopicNotSupportedFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__TopicNotSupportedFaultType *_p = soap_instantiate_ns3__TopicNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TopicNotSupportedFaultType::__any = __any; _p->ns3__TopicNotSupportedFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__TopicNotSupportedFaultType::ns5__Originator = ns5__Originator; _p->ns3__TopicNotSupportedFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__TopicNotSupportedFaultType::ns5__Description = ns5__Description; _p->ns3__TopicNotSupportedFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__TopicNotSupportedFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__TopicNotSupportedFaultType(struct soap *soap, ns3__TopicNotSupportedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TopicNotSupportedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__InvalidTopicExpressionFaultType
#define SOAP_TYPE_ns3__InvalidTopicExpressionFaultType (699)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidTopicExpressionFaultType(struct soap*, const char*, int, const ns3__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_ns3__InvalidTopicExpressionFaultType(struct soap*, const char*, ns3__InvalidTopicExpressionFaultType *, const char*);

#ifndef soap_write_ns3__InvalidTopicExpressionFaultType
#define soap_write_ns3__InvalidTopicExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidTopicExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_ns3__InvalidTopicExpressionFaultType(struct soap*, ns3__InvalidTopicExpressionFaultType *, const char*, const char*);

#ifndef soap_read_ns3__InvalidTopicExpressionFaultType
#define soap_read_ns3__InvalidTopicExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__InvalidTopicExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidTopicExpressionFaultType * soap_new_ns3__InvalidTopicExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__InvalidTopicExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__InvalidTopicExpressionFaultType * soap_new_req_ns3__InvalidTopicExpressionFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__InvalidTopicExpressionFaultType *_p = soap_instantiate_ns3__InvalidTopicExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidTopicExpressionFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__InvalidTopicExpressionFaultType * soap_new_set_ns3__InvalidTopicExpressionFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__InvalidTopicExpressionFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*ns5__Description, _ns3__InvalidTopicExpressionFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__InvalidTopicExpressionFaultType *_p = soap_instantiate_ns3__InvalidTopicExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidTopicExpressionFaultType::__any = __any; _p->ns3__InvalidTopicExpressionFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__InvalidTopicExpressionFaultType::ns5__Originator = ns5__Originator; _p->ns3__InvalidTopicExpressionFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__InvalidTopicExpressionFaultType::ns5__Description = ns5__Description; _p->ns3__InvalidTopicExpressionFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__InvalidTopicExpressionFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__InvalidTopicExpressionFaultType(struct soap *soap, ns3__InvalidTopicExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__InvalidTopicExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType (698)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, int, const ns3__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC3 ns3__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, ns3__TopicExpressionDialectUnknownFaultType *, const char*);

#ifndef soap_write_ns3__TopicExpressionDialectUnknownFaultType
#define soap_write_ns3__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, ns3__TopicExpressionDialectUnknownFaultType *, const char*, const char*);

#ifndef soap_read_ns3__TopicExpressionDialectUnknownFaultType
#define soap_read_ns3__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__TopicExpressionDialectUnknownFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TopicExpressionDialectUnknownFaultType * soap_new_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TopicExpressionDialectUnknownFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__TopicExpressionDialectUnknownFaultType * soap_new_req_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__TopicExpressionDialectUnknownFaultType *_p = soap_instantiate_ns3__TopicExpressionDialectUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TopicExpressionDialectUnknownFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__TopicExpressionDialectUnknownFaultType * soap_new_set_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*ns5__Description, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__TopicExpressionDialectUnknownFaultType *_p = soap_instantiate_ns3__TopicExpressionDialectUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TopicExpressionDialectUnknownFaultType::__any = __any; _p->ns3__TopicExpressionDialectUnknownFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__TopicExpressionDialectUnknownFaultType::ns5__Originator = ns5__Originator; _p->ns3__TopicExpressionDialectUnknownFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__TopicExpressionDialectUnknownFaultType::ns5__Description = ns5__Description; _p->ns3__TopicExpressionDialectUnknownFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__TopicExpressionDialectUnknownFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, ns3__TopicExpressionDialectUnknownFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__InvalidFilterFaultType
#define SOAP_TYPE_ns3__InvalidFilterFaultType (697)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidFilterFaultType(struct soap*, const char*, int, const ns3__InvalidFilterFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidFilterFaultType * SOAP_FMAC4 soap_in_ns3__InvalidFilterFaultType(struct soap*, const char*, ns3__InvalidFilterFaultType *, const char*);

#ifndef soap_write_ns3__InvalidFilterFaultType
#define soap_write_ns3__InvalidFilterFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:InvalidFilterFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__InvalidFilterFaultType * SOAP_FMAC4 soap_get_ns3__InvalidFilterFaultType(struct soap*, ns3__InvalidFilterFaultType *, const char*, const char*);

#ifndef soap_read_ns3__InvalidFilterFaultType
#define soap_read_ns3__InvalidFilterFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__InvalidFilterFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidFilterFaultType * soap_new_ns3__InvalidFilterFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__InvalidFilterFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__InvalidFilterFaultType * soap_new_req_ns3__InvalidFilterFaultType(struct soap *soap, time_t ns5__Timestamp, const std::vector<std::string >& UnknownFilter) { ns3__InvalidFilterFaultType *_p = soap_instantiate_ns3__InvalidFilterFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidFilterFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__InvalidFilterFaultType::UnknownFilter = UnknownFilter; } return _p; }

inline ns3__InvalidFilterFaultType * soap_new_set_ns3__InvalidFilterFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__InvalidFilterFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__InvalidFilterFaultType_Description >*ns5__Description, _ns3__InvalidFilterFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute, const std::vector<std::string >& UnknownFilter) { ns3__InvalidFilterFaultType *_p = soap_instantiate_ns3__InvalidFilterFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__InvalidFilterFaultType::__any = __any; _p->ns3__InvalidFilterFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__InvalidFilterFaultType::ns5__Originator = ns5__Originator; _p->ns3__InvalidFilterFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__InvalidFilterFaultType::ns5__Description = ns5__Description; _p->ns3__InvalidFilterFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__InvalidFilterFaultType::__anyAttribute = __anyAttribute; _p->ns3__InvalidFilterFaultType::UnknownFilter = UnknownFilter; } return _p; }

inline void soap_delete_ns3__InvalidFilterFaultType(struct soap *soap, ns3__InvalidFilterFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__InvalidFilterFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__SubscribeCreationFailedFaultType
#define SOAP_TYPE_ns3__SubscribeCreationFailedFaultType (696)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscribeCreationFailedFaultType(struct soap*, const char*, int, const ns3__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC3 ns3__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_ns3__SubscribeCreationFailedFaultType(struct soap*, const char*, ns3__SubscribeCreationFailedFaultType *, const char*);

#ifndef soap_write_ns3__SubscribeCreationFailedFaultType
#define soap_write_ns3__SubscribeCreationFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscribeCreationFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_ns3__SubscribeCreationFailedFaultType(struct soap*, ns3__SubscribeCreationFailedFaultType *, const char*, const char*);

#ifndef soap_read_ns3__SubscribeCreationFailedFaultType
#define soap_read_ns3__SubscribeCreationFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__SubscribeCreationFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_ns3__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubscribeCreationFailedFaultType * soap_new_ns3__SubscribeCreationFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__SubscribeCreationFailedFaultType(soap, n, NULL, NULL, NULL); }

inline ns3__SubscribeCreationFailedFaultType * soap_new_req_ns3__SubscribeCreationFailedFaultType(struct soap *soap, time_t ns5__Timestamp) { ns3__SubscribeCreationFailedFaultType *_p = soap_instantiate_ns3__SubscribeCreationFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__SubscribeCreationFailedFaultType::ns5__Timestamp = ns5__Timestamp; } return _p; }

inline ns3__SubscribeCreationFailedFaultType * soap_new_set_ns3__SubscribeCreationFailedFaultType(struct soap *soap, const std::vector<char * >& __any, time_t ns5__Timestamp, ns7__EndpointReferenceType *ns5__Originator, _ns3__SubscribeCreationFailedFaultType_ErrorCode *ns5__ErrorCode, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*ns5__Description, _ns3__SubscribeCreationFailedFaultType_FaultCause *ns5__FaultCause, char *__anyAttribute) { ns3__SubscribeCreationFailedFaultType *_p = soap_instantiate_ns3__SubscribeCreationFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__SubscribeCreationFailedFaultType::__any = __any; _p->ns3__SubscribeCreationFailedFaultType::ns5__Timestamp = ns5__Timestamp; _p->ns3__SubscribeCreationFailedFaultType::ns5__Originator = ns5__Originator; _p->ns3__SubscribeCreationFailedFaultType::ns5__ErrorCode = ns5__ErrorCode; _p->ns3__SubscribeCreationFailedFaultType::ns5__Description = ns5__Description; _p->ns3__SubscribeCreationFailedFaultType::ns5__FaultCause = ns5__FaultCause; _p->ns3__SubscribeCreationFailedFaultType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__SubscribeCreationFailedFaultType(struct soap *soap, ns3__SubscribeCreationFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SubscribeCreationFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__NotificationMessageHolderType
#define SOAP_TYPE_ns3__NotificationMessageHolderType (695)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NotificationMessageHolderType(struct soap*, const char*, int, const ns3__NotificationMessageHolderType *, const char*);
SOAP_FMAC3 ns3__NotificationMessageHolderType * SOAP_FMAC4 soap_in_ns3__NotificationMessageHolderType(struct soap*, const char*, ns3__NotificationMessageHolderType *, const char*);

#ifndef soap_write_ns3__NotificationMessageHolderType
#define soap_write_ns3__NotificationMessageHolderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:NotificationMessageHolderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__NotificationMessageHolderType * SOAP_FMAC4 soap_get_ns3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType *, const char*, const char*);

#ifndef soap_read_ns3__NotificationMessageHolderType
#define soap_read_ns3__NotificationMessageHolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__NotificationMessageHolderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_ns3__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__NotificationMessageHolderType * soap_new_ns3__NotificationMessageHolderType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__NotificationMessageHolderType(soap, n, NULL, NULL, NULL); }

inline ns3__NotificationMessageHolderType * soap_new_req_ns3__NotificationMessageHolderType(struct soap *soap, const _ns3__NotificationMessageHolderType_Message& Message) { ns3__NotificationMessageHolderType *_p = soap_instantiate_ns3__NotificationMessageHolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__NotificationMessageHolderType::Message = Message; } return _p; }

inline ns3__NotificationMessageHolderType * soap_new_set_ns3__NotificationMessageHolderType(struct soap *soap, ns7__EndpointReferenceType *SubscriptionReference, ns3__TopicExpressionType *Topic, ns7__EndpointReferenceType *ProducerReference, const _ns3__NotificationMessageHolderType_Message& Message, char *__item1) { ns3__NotificationMessageHolderType *_p = soap_instantiate_ns3__NotificationMessageHolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__NotificationMessageHolderType::SubscriptionReference = SubscriptionReference; _p->ns3__NotificationMessageHolderType::Topic = Topic; _p->ns3__NotificationMessageHolderType::ProducerReference = ProducerReference; _p->ns3__NotificationMessageHolderType::Message = Message; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__NotificationMessageHolderType(struct soap *soap, ns3__NotificationMessageHolderType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__NotificationMessageHolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__SubscriptionPolicyType
#define SOAP_TYPE_ns3__SubscriptionPolicyType (694)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscriptionPolicyType(struct soap*, const char*, int, const ns3__SubscriptionPolicyType *, const char*);
SOAP_FMAC3 ns3__SubscriptionPolicyType * SOAP_FMAC4 soap_in_ns3__SubscriptionPolicyType(struct soap*, const char*, ns3__SubscriptionPolicyType *, const char*);

#ifndef soap_write_ns3__SubscriptionPolicyType
#define soap_write_ns3__SubscriptionPolicyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubscriptionPolicyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubscriptionPolicyType * SOAP_FMAC4 soap_get_ns3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType *, const char*, const char*);

#ifndef soap_read_ns3__SubscriptionPolicyType
#define soap_read_ns3__SubscriptionPolicyType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__SubscriptionPolicyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_ns3__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubscriptionPolicyType * soap_new_ns3__SubscriptionPolicyType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__SubscriptionPolicyType(soap, n, NULL, NULL, NULL); }

inline ns3__SubscriptionPolicyType * soap_new_req_ns3__SubscriptionPolicyType(struct soap *soap) { ns3__SubscriptionPolicyType *_p = soap_instantiate_ns3__SubscriptionPolicyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__SubscriptionPolicyType * soap_new_set_ns3__SubscriptionPolicyType(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns3__SubscriptionPolicyType *_p = soap_instantiate_ns3__SubscriptionPolicyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__SubscriptionPolicyType::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__SubscriptionPolicyType(struct soap *soap, ns3__SubscriptionPolicyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SubscriptionPolicyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__FilterType
#define SOAP_TYPE_ns3__FilterType (693)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FilterType(struct soap*, const char*, int, const ns3__FilterType *, const char*);
SOAP_FMAC3 ns3__FilterType * SOAP_FMAC4 soap_in_ns3__FilterType(struct soap*, const char*, ns3__FilterType *, const char*);

#ifndef soap_write_ns3__FilterType
#define soap_write_ns3__FilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:FilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__FilterType * SOAP_FMAC4 soap_get_ns3__FilterType(struct soap*, ns3__FilterType *, const char*, const char*);

#ifndef soap_read_ns3__FilterType
#define soap_read_ns3__FilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__FilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__FilterType * SOAP_FMAC2 soap_instantiate_ns3__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FilterType * soap_new_ns3__FilterType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__FilterType(soap, n, NULL, NULL, NULL); }

inline ns3__FilterType * soap_new_req_ns3__FilterType(struct soap *soap) { ns3__FilterType *_p = soap_instantiate_ns3__FilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__FilterType * soap_new_set_ns3__FilterType(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns3__FilterType *_p = soap_instantiate_ns3__FilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__FilterType::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__FilterType(struct soap *soap, ns3__FilterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FilterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__TopicExpressionType
#define SOAP_TYPE_ns3__TopicExpressionType (692)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TopicExpressionType(struct soap*, const char*, int, const ns3__TopicExpressionType *, const char*);
SOAP_FMAC3 ns3__TopicExpressionType * SOAP_FMAC4 soap_in_ns3__TopicExpressionType(struct soap*, const char*, ns3__TopicExpressionType *, const char*);

#ifndef soap_write_ns3__TopicExpressionType
#define soap_write_ns3__TopicExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:TopicExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TopicExpressionType * SOAP_FMAC4 soap_get_ns3__TopicExpressionType(struct soap*, ns3__TopicExpressionType *, const char*, const char*);

#ifndef soap_read_ns3__TopicExpressionType
#define soap_read_ns3__TopicExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__TopicExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TopicExpressionType * SOAP_FMAC2 soap_instantiate_ns3__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TopicExpressionType * soap_new_ns3__TopicExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TopicExpressionType(soap, n, NULL, NULL, NULL); }

inline ns3__TopicExpressionType * soap_new_req_ns3__TopicExpressionType(struct soap *soap, const std::string& Dialect) { ns3__TopicExpressionType *_p = soap_instantiate_ns3__TopicExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TopicExpressionType::Dialect = Dialect; } return _p; }

inline ns3__TopicExpressionType * soap_new_set_ns3__TopicExpressionType(struct soap *soap, char *__any, const std::string& Dialect, char *__anyAttribute, char *__mixed, char *__item1) { ns3__TopicExpressionType *_p = soap_instantiate_ns3__TopicExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TopicExpressionType::__any = __any; _p->ns3__TopicExpressionType::Dialect = Dialect; _p->ns3__TopicExpressionType::__anyAttribute = __anyAttribute; _p->ns3__TopicExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__TopicExpressionType(struct soap *soap, ns3__TopicExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TopicExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__QueryExpressionType
#define SOAP_TYPE_ns3__QueryExpressionType (691)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__QueryExpressionType(struct soap*, const char*, int, const ns3__QueryExpressionType *, const char*);
SOAP_FMAC3 ns3__QueryExpressionType * SOAP_FMAC4 soap_in_ns3__QueryExpressionType(struct soap*, const char*, ns3__QueryExpressionType *, const char*);

#ifndef soap_write_ns3__QueryExpressionType
#define soap_write_ns3__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__QueryExpressionType * SOAP_FMAC4 soap_get_ns3__QueryExpressionType(struct soap*, ns3__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_ns3__QueryExpressionType
#define soap_read_ns3__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__QueryExpressionType * SOAP_FMAC2 soap_instantiate_ns3__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__QueryExpressionType * soap_new_ns3__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline ns3__QueryExpressionType * soap_new_req_ns3__QueryExpressionType(struct soap *soap, const std::string& Dialect) { ns3__QueryExpressionType *_p = soap_instantiate_ns3__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__QueryExpressionType::Dialect = Dialect; } return _p; }

inline ns3__QueryExpressionType * soap_new_set_ns3__QueryExpressionType(struct soap *soap, char *__any, const std::string& Dialect, char *__mixed, char *__item1) { ns3__QueryExpressionType *_p = soap_instantiate_ns3__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__QueryExpressionType::__any = __any; _p->ns3__QueryExpressionType::Dialect = Dialect; _p->ns3__QueryExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__QueryExpressionType(struct soap *soap, ns3__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__Message
#define SOAP_TYPE__ns2__Message (690)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__Message(struct soap*, const char*, int, const _ns2__Message *, const char*);
SOAP_FMAC3 _ns2__Message * SOAP_FMAC4 soap_in__ns2__Message(struct soap*, const char*, _ns2__Message *, const char*);

#ifndef soap_write__ns2__Message
#define soap_write__ns2__Message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__Message * SOAP_FMAC4 soap_get__ns2__Message(struct soap*, _ns2__Message *, const char*, const char*);

#ifndef soap_read__ns2__Message
#define soap_read__ns2__Message(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__Message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__Message * SOAP_FMAC2 soap_instantiate__ns2__Message(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__Message * soap_new__ns2__Message(struct soap *soap, int n = -1) { return soap_instantiate__ns2__Message(soap, n, NULL, NULL, NULL); }

inline _ns2__Message * soap_new_req__ns2__Message(struct soap *soap, time_t UtcTime) { _ns2__Message *_p = soap_instantiate__ns2__Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__Message::UtcTime = UtcTime; } return _p; }

inline _ns2__Message * soap_new_set__ns2__Message(struct soap *soap, ns2__ItemList *Source, ns2__ItemList *Key, ns2__ItemList *Data, ns2__MessageExtension *Extension, time_t UtcTime, enum ns2__PropertyOperation *PropertyOperation, char *__anyAttribute) { _ns2__Message *_p = soap_instantiate__ns2__Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__Message::Source = Source; _p->_ns2__Message::Key = Key; _p->_ns2__Message::Data = Data; _p->_ns2__Message::Extension = Extension; _p->_ns2__Message::UtcTime = UtcTime; _p->_ns2__Message::PropertyOperation = PropertyOperation; _p->_ns2__Message::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns2__Message(struct soap *soap, _ns2__Message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__Message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__StorageReferencePathExtension
#define SOAP_TYPE_ns2__StorageReferencePathExtension (689)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StorageReferencePathExtension(struct soap*, const char*, int, const ns2__StorageReferencePathExtension *, const char*);
SOAP_FMAC3 ns2__StorageReferencePathExtension * SOAP_FMAC4 soap_in_ns2__StorageReferencePathExtension(struct soap*, const char*, ns2__StorageReferencePathExtension *, const char*);

#ifndef soap_write_ns2__StorageReferencePathExtension
#define soap_write_ns2__StorageReferencePathExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:StorageReferencePathExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__StorageReferencePathExtension * SOAP_FMAC4 soap_get_ns2__StorageReferencePathExtension(struct soap*, ns2__StorageReferencePathExtension *, const char*, const char*);

#ifndef soap_read_ns2__StorageReferencePathExtension
#define soap_read_ns2__StorageReferencePathExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StorageReferencePathExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__StorageReferencePathExtension * SOAP_FMAC2 soap_instantiate_ns2__StorageReferencePathExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__StorageReferencePathExtension * soap_new_ns2__StorageReferencePathExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__StorageReferencePathExtension(soap, n, NULL, NULL, NULL); }

inline ns2__StorageReferencePathExtension * soap_new_req_ns2__StorageReferencePathExtension(struct soap *soap) { ns2__StorageReferencePathExtension *_p = soap_instantiate_ns2__StorageReferencePathExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__StorageReferencePathExtension * soap_new_set_ns2__StorageReferencePathExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__StorageReferencePathExtension *_p = soap_instantiate_ns2__StorageReferencePathExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StorageReferencePathExtension::__any = __any; _p->ns2__StorageReferencePathExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__StorageReferencePathExtension(struct soap *soap, ns2__StorageReferencePathExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__StorageReferencePathExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__StorageReferencePath
#define SOAP_TYPE_ns2__StorageReferencePath (688)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StorageReferencePath(struct soap*, const char*, int, const ns2__StorageReferencePath *, const char*);
SOAP_FMAC3 ns2__StorageReferencePath * SOAP_FMAC4 soap_in_ns2__StorageReferencePath(struct soap*, const char*, ns2__StorageReferencePath *, const char*);

#ifndef soap_write_ns2__StorageReferencePath
#define soap_write_ns2__StorageReferencePath(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:StorageReferencePath", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__StorageReferencePath * SOAP_FMAC4 soap_get_ns2__StorageReferencePath(struct soap*, ns2__StorageReferencePath *, const char*, const char*);

#ifndef soap_read_ns2__StorageReferencePath
#define soap_read_ns2__StorageReferencePath(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StorageReferencePath(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__StorageReferencePath * SOAP_FMAC2 soap_instantiate_ns2__StorageReferencePath(struct soap*, int, const char*, const char*, size_t*);

inline ns2__StorageReferencePath * soap_new_ns2__StorageReferencePath(struct soap *soap, int n = -1) { return soap_instantiate_ns2__StorageReferencePath(soap, n, NULL, NULL, NULL); }

inline ns2__StorageReferencePath * soap_new_req_ns2__StorageReferencePath(struct soap *soap, const std::string& StorageToken) { ns2__StorageReferencePath *_p = soap_instantiate_ns2__StorageReferencePath(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StorageReferencePath::StorageToken = StorageToken; } return _p; }

inline ns2__StorageReferencePath * soap_new_set_ns2__StorageReferencePath(struct soap *soap, const std::string& StorageToken, std::string *RelativePath, ns2__StorageReferencePathExtension *Extension, char *__anyAttribute, char *__item1) { ns2__StorageReferencePath *_p = soap_instantiate_ns2__StorageReferencePath(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StorageReferencePath::StorageToken = StorageToken; _p->ns2__StorageReferencePath::RelativePath = RelativePath; _p->ns2__StorageReferencePath::Extension = Extension; _p->ns2__StorageReferencePath::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__StorageReferencePath(struct soap *soap, ns2__StorageReferencePath *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__StorageReferencePath(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ArrayOfFileProgressExtension
#define SOAP_TYPE_ns2__ArrayOfFileProgressExtension (687)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfFileProgressExtension(struct soap*, const char*, int, const ns2__ArrayOfFileProgressExtension *, const char*);
SOAP_FMAC3 ns2__ArrayOfFileProgressExtension * SOAP_FMAC4 soap_in_ns2__ArrayOfFileProgressExtension(struct soap*, const char*, ns2__ArrayOfFileProgressExtension *, const char*);

#ifndef soap_write_ns2__ArrayOfFileProgressExtension
#define soap_write_ns2__ArrayOfFileProgressExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ArrayOfFileProgressExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ArrayOfFileProgressExtension * SOAP_FMAC4 soap_get_ns2__ArrayOfFileProgressExtension(struct soap*, ns2__ArrayOfFileProgressExtension *, const char*, const char*);

#ifndef soap_read_ns2__ArrayOfFileProgressExtension
#define soap_read_ns2__ArrayOfFileProgressExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ArrayOfFileProgressExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ArrayOfFileProgressExtension * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfFileProgressExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfFileProgressExtension * soap_new_ns2__ArrayOfFileProgressExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ArrayOfFileProgressExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ArrayOfFileProgressExtension * soap_new_req_ns2__ArrayOfFileProgressExtension(struct soap *soap) { ns2__ArrayOfFileProgressExtension *_p = soap_instantiate_ns2__ArrayOfFileProgressExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ArrayOfFileProgressExtension * soap_new_set_ns2__ArrayOfFileProgressExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ArrayOfFileProgressExtension *_p = soap_instantiate_ns2__ArrayOfFileProgressExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ArrayOfFileProgressExtension::__any = __any; _p->ns2__ArrayOfFileProgressExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ArrayOfFileProgressExtension(struct soap *soap, ns2__ArrayOfFileProgressExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ArrayOfFileProgressExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ArrayOfFileProgress
#define SOAP_TYPE_ns2__ArrayOfFileProgress (686)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfFileProgress(struct soap*, const char*, int, const ns2__ArrayOfFileProgress *, const char*);
SOAP_FMAC3 ns2__ArrayOfFileProgress * SOAP_FMAC4 soap_in_ns2__ArrayOfFileProgress(struct soap*, const char*, ns2__ArrayOfFileProgress *, const char*);

#ifndef soap_write_ns2__ArrayOfFileProgress
#define soap_write_ns2__ArrayOfFileProgress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ArrayOfFileProgress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ArrayOfFileProgress * SOAP_FMAC4 soap_get_ns2__ArrayOfFileProgress(struct soap*, ns2__ArrayOfFileProgress *, const char*, const char*);

#ifndef soap_read_ns2__ArrayOfFileProgress
#define soap_read_ns2__ArrayOfFileProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ArrayOfFileProgress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ArrayOfFileProgress * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfFileProgress(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfFileProgress * soap_new_ns2__ArrayOfFileProgress(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ArrayOfFileProgress(soap, n, NULL, NULL, NULL); }

inline ns2__ArrayOfFileProgress * soap_new_req_ns2__ArrayOfFileProgress(struct soap *soap) { ns2__ArrayOfFileProgress *_p = soap_instantiate_ns2__ArrayOfFileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ArrayOfFileProgress * soap_new_set_ns2__ArrayOfFileProgress(struct soap *soap, const std::vector<ns2__FileProgress * >& FileProgress, ns2__ArrayOfFileProgressExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ArrayOfFileProgress *_p = soap_instantiate_ns2__ArrayOfFileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ArrayOfFileProgress::FileProgress = FileProgress; _p->ns2__ArrayOfFileProgress::Extension = Extension; _p->ns2__ArrayOfFileProgress::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ArrayOfFileProgress(struct soap *soap, ns2__ArrayOfFileProgress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ArrayOfFileProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FileProgress
#define SOAP_TYPE_ns2__FileProgress (685)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FileProgress(struct soap*, const char*, int, const ns2__FileProgress *, const char*);
SOAP_FMAC3 ns2__FileProgress * SOAP_FMAC4 soap_in_ns2__FileProgress(struct soap*, const char*, ns2__FileProgress *, const char*);

#ifndef soap_write_ns2__FileProgress
#define soap_write_ns2__FileProgress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FileProgress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FileProgress * SOAP_FMAC4 soap_get_ns2__FileProgress(struct soap*, ns2__FileProgress *, const char*, const char*);

#ifndef soap_read_ns2__FileProgress
#define soap_read_ns2__FileProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FileProgress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FileProgress * SOAP_FMAC2 soap_instantiate_ns2__FileProgress(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FileProgress * soap_new_ns2__FileProgress(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FileProgress(soap, n, NULL, NULL, NULL); }

inline ns2__FileProgress * soap_new_req_ns2__FileProgress(struct soap *soap, const std::string& FileName, float Progress) { ns2__FileProgress *_p = soap_instantiate_ns2__FileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FileProgress::FileName = FileName; _p->ns2__FileProgress::Progress = Progress; } return _p; }

inline ns2__FileProgress * soap_new_set_ns2__FileProgress(struct soap *soap, const std::string& FileName, float Progress, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__FileProgress *_p = soap_instantiate_ns2__FileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FileProgress::FileName = FileName; _p->ns2__FileProgress::Progress = Progress; _p->ns2__FileProgress::__any = __any; _p->ns2__FileProgress::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FileProgress(struct soap *soap, ns2__FileProgress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FileProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDConfigurationOptionsExtension
#define SOAP_TYPE_ns2__OSDConfigurationOptionsExtension (684)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDConfigurationOptionsExtension(struct soap*, const char*, int, const ns2__OSDConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 ns2__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_in_ns2__OSDConfigurationOptionsExtension(struct soap*, const char*, ns2__OSDConfigurationOptionsExtension *, const char*);

#ifndef soap_write_ns2__OSDConfigurationOptionsExtension
#define soap_write_ns2__OSDConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_get_ns2__OSDConfigurationOptionsExtension(struct soap*, ns2__OSDConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDConfigurationOptionsExtension
#define soap_read_ns2__OSDConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDConfigurationOptionsExtension * soap_new_ns2__OSDConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDConfigurationOptionsExtension * soap_new_req_ns2__OSDConfigurationOptionsExtension(struct soap *soap) { ns2__OSDConfigurationOptionsExtension *_p = soap_instantiate_ns2__OSDConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDConfigurationOptionsExtension * soap_new_set_ns2__OSDConfigurationOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDConfigurationOptionsExtension *_p = soap_instantiate_ns2__OSDConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDConfigurationOptionsExtension::__any = __any; _p->ns2__OSDConfigurationOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDConfigurationOptionsExtension(struct soap *soap, ns2__OSDConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDConfigurationOptions
#define SOAP_TYPE_ns2__OSDConfigurationOptions (683)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDConfigurationOptions(struct soap*, const char*, int, const ns2__OSDConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__OSDConfigurationOptions * SOAP_FMAC4 soap_in_ns2__OSDConfigurationOptions(struct soap*, const char*, ns2__OSDConfigurationOptions *, const char*);

#ifndef soap_write_ns2__OSDConfigurationOptions
#define soap_write_ns2__OSDConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfigurationOptions * SOAP_FMAC4 soap_get_ns2__OSDConfigurationOptions(struct soap*, ns2__OSDConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__OSDConfigurationOptions
#define soap_read_ns2__OSDConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__OSDConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDConfigurationOptions * soap_new_ns2__OSDConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__OSDConfigurationOptions * soap_new_req_ns2__OSDConfigurationOptions(struct soap *soap, ns2__MaximumNumberOfOSDs *MaximumNumberOfOSDs, const std::vector<enum ns2__OSDType >& Type, const std::vector<std::string >& PositionOption) { ns2__OSDConfigurationOptions *_p = soap_instantiate_ns2__OSDConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs; _p->ns2__OSDConfigurationOptions::Type = Type; _p->ns2__OSDConfigurationOptions::PositionOption = PositionOption; } return _p; }

inline ns2__OSDConfigurationOptions * soap_new_set_ns2__OSDConfigurationOptions(struct soap *soap, ns2__MaximumNumberOfOSDs *MaximumNumberOfOSDs, const std::vector<enum ns2__OSDType >& Type, const std::vector<std::string >& PositionOption, ns2__OSDTextOptions *TextOption, ns2__OSDImgOptions *ImageOption, ns2__OSDConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDConfigurationOptions *_p = soap_instantiate_ns2__OSDConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs; _p->ns2__OSDConfigurationOptions::Type = Type; _p->ns2__OSDConfigurationOptions::PositionOption = PositionOption; _p->ns2__OSDConfigurationOptions::TextOption = TextOption; _p->ns2__OSDConfigurationOptions::ImageOption = ImageOption; _p->ns2__OSDConfigurationOptions::Extension = Extension; _p->ns2__OSDConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDConfigurationOptions(struct soap *soap, ns2__OSDConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MaximumNumberOfOSDs
#define SOAP_TYPE_ns2__MaximumNumberOfOSDs (682)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MaximumNumberOfOSDs(struct soap*, const char*, int, const ns2__MaximumNumberOfOSDs *, const char*);
SOAP_FMAC3 ns2__MaximumNumberOfOSDs * SOAP_FMAC4 soap_in_ns2__MaximumNumberOfOSDs(struct soap*, const char*, ns2__MaximumNumberOfOSDs *, const char*);

#ifndef soap_write_ns2__MaximumNumberOfOSDs
#define soap_write_ns2__MaximumNumberOfOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MaximumNumberOfOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MaximumNumberOfOSDs * SOAP_FMAC4 soap_get_ns2__MaximumNumberOfOSDs(struct soap*, ns2__MaximumNumberOfOSDs *, const char*, const char*);

#ifndef soap_read_ns2__MaximumNumberOfOSDs
#define soap_read_ns2__MaximumNumberOfOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MaximumNumberOfOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MaximumNumberOfOSDs * SOAP_FMAC2 soap_instantiate_ns2__MaximumNumberOfOSDs(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MaximumNumberOfOSDs * soap_new_ns2__MaximumNumberOfOSDs(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MaximumNumberOfOSDs(soap, n, NULL, NULL, NULL); }

inline ns2__MaximumNumberOfOSDs * soap_new_req_ns2__MaximumNumberOfOSDs(struct soap *soap, int Total) { ns2__MaximumNumberOfOSDs *_p = soap_instantiate_ns2__MaximumNumberOfOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MaximumNumberOfOSDs::Total = Total; } return _p; }

inline ns2__MaximumNumberOfOSDs * soap_new_set_ns2__MaximumNumberOfOSDs(struct soap *soap, int Total, int *Image, int *PlainText, int *Date, int *Time, int *DateAndTime, char *__anyAttribute, char *__item1) { ns2__MaximumNumberOfOSDs *_p = soap_instantiate_ns2__MaximumNumberOfOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MaximumNumberOfOSDs::Total = Total; _p->ns2__MaximumNumberOfOSDs::Image = Image; _p->ns2__MaximumNumberOfOSDs::PlainText = PlainText; _p->ns2__MaximumNumberOfOSDs::Date = Date; _p->ns2__MaximumNumberOfOSDs::Time = Time; _p->ns2__MaximumNumberOfOSDs::DateAndTime = DateAndTime; _p->ns2__MaximumNumberOfOSDs::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MaximumNumberOfOSDs(struct soap *soap, ns2__MaximumNumberOfOSDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MaximumNumberOfOSDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDConfigurationExtension
#define SOAP_TYPE_ns2__OSDConfigurationExtension (681)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDConfigurationExtension(struct soap*, const char*, int, const ns2__OSDConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__OSDConfigurationExtension * SOAP_FMAC4 soap_in_ns2__OSDConfigurationExtension(struct soap*, const char*, ns2__OSDConfigurationExtension *, const char*);

#ifndef soap_write_ns2__OSDConfigurationExtension
#define soap_write_ns2__OSDConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfigurationExtension * SOAP_FMAC4 soap_get_ns2__OSDConfigurationExtension(struct soap*, ns2__OSDConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDConfigurationExtension
#define soap_read_ns2__OSDConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDConfigurationExtension * soap_new_ns2__OSDConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDConfigurationExtension * soap_new_req_ns2__OSDConfigurationExtension(struct soap *soap) { ns2__OSDConfigurationExtension *_p = soap_instantiate_ns2__OSDConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDConfigurationExtension * soap_new_set_ns2__OSDConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDConfigurationExtension *_p = soap_instantiate_ns2__OSDConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDConfigurationExtension::__any = __any; _p->ns2__OSDConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDConfigurationExtension(struct soap *soap, ns2__OSDConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDConfiguration
#define SOAP_TYPE_ns2__OSDConfiguration (680)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDConfiguration(struct soap*, const char*, int, const ns2__OSDConfiguration *, const char*);
SOAP_FMAC3 ns2__OSDConfiguration * SOAP_FMAC4 soap_in_ns2__OSDConfiguration(struct soap*, const char*, ns2__OSDConfiguration *, const char*);

#ifndef soap_write_ns2__OSDConfiguration
#define soap_write_ns2__OSDConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfiguration * SOAP_FMAC4 soap_get_ns2__OSDConfiguration(struct soap*, ns2__OSDConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__OSDConfiguration
#define soap_read_ns2__OSDConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDConfiguration * SOAP_FMAC2 soap_instantiate_ns2__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDConfiguration * soap_new_ns2__OSDConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__OSDConfiguration * soap_new_req_ns2__OSDConfiguration(struct soap *soap, const std::string& token, ns2__OSDReference *VideoSourceConfigurationToken, enum ns2__OSDType Type, ns2__OSDPosConfiguration *Position) { ns2__OSDConfiguration *_p = soap_instantiate_ns2__OSDConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDConfiguration::token = token; _p->ns2__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken; _p->ns2__OSDConfiguration::Type = Type; _p->ns2__OSDConfiguration::Position = Position; } return _p; }

inline ns2__OSDConfiguration * soap_new_set_ns2__OSDConfiguration(struct soap *soap, const std::string& token, ns2__OSDReference *VideoSourceConfigurationToken, enum ns2__OSDType Type, ns2__OSDPosConfiguration *Position, ns2__OSDTextConfiguration *TextString, ns2__OSDImgConfiguration *Image, ns2__OSDConfigurationExtension *Extension, char *__anyAttribute) { ns2__OSDConfiguration *_p = soap_instantiate_ns2__OSDConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDConfiguration::token = token; _p->ns2__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken; _p->ns2__OSDConfiguration::Type = Type; _p->ns2__OSDConfiguration::Position = Position; _p->ns2__OSDConfiguration::TextString = TextString; _p->ns2__OSDConfiguration::Image = Image; _p->ns2__OSDConfiguration::Extension = Extension; _p->ns2__OSDConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__OSDConfiguration(struct soap *soap, ns2__OSDConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDImgOptionsExtension
#define SOAP_TYPE_ns2__OSDImgOptionsExtension (679)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDImgOptionsExtension(struct soap*, const char*, int, const ns2__OSDImgOptionsExtension *, const char*);
SOAP_FMAC3 ns2__OSDImgOptionsExtension * SOAP_FMAC4 soap_in_ns2__OSDImgOptionsExtension(struct soap*, const char*, ns2__OSDImgOptionsExtension *, const char*);

#ifndef soap_write_ns2__OSDImgOptionsExtension
#define soap_write_ns2__OSDImgOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDImgOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgOptionsExtension * SOAP_FMAC4 soap_get_ns2__OSDImgOptionsExtension(struct soap*, ns2__OSDImgOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDImgOptionsExtension
#define soap_read_ns2__OSDImgOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDImgOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDImgOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDImgOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDImgOptionsExtension * soap_new_ns2__OSDImgOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDImgOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDImgOptionsExtension * soap_new_req_ns2__OSDImgOptionsExtension(struct soap *soap) { ns2__OSDImgOptionsExtension *_p = soap_instantiate_ns2__OSDImgOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDImgOptionsExtension * soap_new_set_ns2__OSDImgOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDImgOptionsExtension *_p = soap_instantiate_ns2__OSDImgOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDImgOptionsExtension::__any = __any; _p->ns2__OSDImgOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDImgOptionsExtension(struct soap *soap, ns2__OSDImgOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDImgOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDImgOptions
#define SOAP_TYPE_ns2__OSDImgOptions (678)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDImgOptions(struct soap*, const char*, int, const ns2__OSDImgOptions *, const char*);
SOAP_FMAC3 ns2__OSDImgOptions * SOAP_FMAC4 soap_in_ns2__OSDImgOptions(struct soap*, const char*, ns2__OSDImgOptions *, const char*);

#ifndef soap_write_ns2__OSDImgOptions
#define soap_write_ns2__OSDImgOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDImgOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgOptions * SOAP_FMAC4 soap_get_ns2__OSDImgOptions(struct soap*, ns2__OSDImgOptions *, const char*, const char*);

#ifndef soap_read_ns2__OSDImgOptions
#define soap_read_ns2__OSDImgOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDImgOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDImgOptions * SOAP_FMAC2 soap_instantiate_ns2__OSDImgOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDImgOptions * soap_new_ns2__OSDImgOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDImgOptions(soap, n, NULL, NULL, NULL); }

inline ns2__OSDImgOptions * soap_new_req_ns2__OSDImgOptions(struct soap *soap, const std::vector<std::string >& ImagePath) { ns2__OSDImgOptions *_p = soap_instantiate_ns2__OSDImgOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDImgOptions::ImagePath = ImagePath; } return _p; }

inline ns2__OSDImgOptions * soap_new_set_ns2__OSDImgOptions(struct soap *soap, const std::vector<std::string >& ImagePath, ns2__OSDImgOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDImgOptions *_p = soap_instantiate_ns2__OSDImgOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDImgOptions::ImagePath = ImagePath; _p->ns2__OSDImgOptions::Extension = Extension; _p->ns2__OSDImgOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDImgOptions(struct soap *soap, ns2__OSDImgOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDImgOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDTextOptionsExtension
#define SOAP_TYPE_ns2__OSDTextOptionsExtension (677)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDTextOptionsExtension(struct soap*, const char*, int, const ns2__OSDTextOptionsExtension *, const char*);
SOAP_FMAC3 ns2__OSDTextOptionsExtension * SOAP_FMAC4 soap_in_ns2__OSDTextOptionsExtension(struct soap*, const char*, ns2__OSDTextOptionsExtension *, const char*);

#ifndef soap_write_ns2__OSDTextOptionsExtension
#define soap_write_ns2__OSDTextOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDTextOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextOptionsExtension * SOAP_FMAC4 soap_get_ns2__OSDTextOptionsExtension(struct soap*, ns2__OSDTextOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDTextOptionsExtension
#define soap_read_ns2__OSDTextOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDTextOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDTextOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDTextOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDTextOptionsExtension * soap_new_ns2__OSDTextOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDTextOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDTextOptionsExtension * soap_new_req_ns2__OSDTextOptionsExtension(struct soap *soap) { ns2__OSDTextOptionsExtension *_p = soap_instantiate_ns2__OSDTextOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDTextOptionsExtension * soap_new_set_ns2__OSDTextOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDTextOptionsExtension *_p = soap_instantiate_ns2__OSDTextOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDTextOptionsExtension::__any = __any; _p->ns2__OSDTextOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDTextOptionsExtension(struct soap *soap, ns2__OSDTextOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDTextOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDTextOptions
#define SOAP_TYPE_ns2__OSDTextOptions (676)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDTextOptions(struct soap*, const char*, int, const ns2__OSDTextOptions *, const char*);
SOAP_FMAC3 ns2__OSDTextOptions * SOAP_FMAC4 soap_in_ns2__OSDTextOptions(struct soap*, const char*, ns2__OSDTextOptions *, const char*);

#ifndef soap_write_ns2__OSDTextOptions
#define soap_write_ns2__OSDTextOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDTextOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextOptions * SOAP_FMAC4 soap_get_ns2__OSDTextOptions(struct soap*, ns2__OSDTextOptions *, const char*, const char*);

#ifndef soap_read_ns2__OSDTextOptions
#define soap_read_ns2__OSDTextOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDTextOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDTextOptions * SOAP_FMAC2 soap_instantiate_ns2__OSDTextOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDTextOptions * soap_new_ns2__OSDTextOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDTextOptions(soap, n, NULL, NULL, NULL); }

inline ns2__OSDTextOptions * soap_new_req_ns2__OSDTextOptions(struct soap *soap, const std::vector<std::string >& Type) { ns2__OSDTextOptions *_p = soap_instantiate_ns2__OSDTextOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDTextOptions::Type = Type; } return _p; }

inline ns2__OSDTextOptions * soap_new_set_ns2__OSDTextOptions(struct soap *soap, const std::vector<std::string >& Type, ns2__IntRange *FontSizeRange, const std::vector<std::string >& DateFormat, const std::vector<std::string >& TimeFormat, ns2__OSDColorOptions *FontColor, ns2__OSDColorOptions *BackgroundColor, ns2__OSDTextOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDTextOptions *_p = soap_instantiate_ns2__OSDTextOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDTextOptions::Type = Type; _p->ns2__OSDTextOptions::FontSizeRange = FontSizeRange; _p->ns2__OSDTextOptions::DateFormat = DateFormat; _p->ns2__OSDTextOptions::TimeFormat = TimeFormat; _p->ns2__OSDTextOptions::FontColor = FontColor; _p->ns2__OSDTextOptions::BackgroundColor = BackgroundColor; _p->ns2__OSDTextOptions::Extension = Extension; _p->ns2__OSDTextOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDTextOptions(struct soap *soap, ns2__OSDTextOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDTextOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDColorOptionsExtension
#define SOAP_TYPE_ns2__OSDColorOptionsExtension (675)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDColorOptionsExtension(struct soap*, const char*, int, const ns2__OSDColorOptionsExtension *, const char*);
SOAP_FMAC3 ns2__OSDColorOptionsExtension * SOAP_FMAC4 soap_in_ns2__OSDColorOptionsExtension(struct soap*, const char*, ns2__OSDColorOptionsExtension *, const char*);

#ifndef soap_write_ns2__OSDColorOptionsExtension
#define soap_write_ns2__OSDColorOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDColorOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDColorOptionsExtension * SOAP_FMAC4 soap_get_ns2__OSDColorOptionsExtension(struct soap*, ns2__OSDColorOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDColorOptionsExtension
#define soap_read_ns2__OSDColorOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDColorOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDColorOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDColorOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDColorOptionsExtension * soap_new_ns2__OSDColorOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDColorOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDColorOptionsExtension * soap_new_req_ns2__OSDColorOptionsExtension(struct soap *soap) { ns2__OSDColorOptionsExtension *_p = soap_instantiate_ns2__OSDColorOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDColorOptionsExtension * soap_new_set_ns2__OSDColorOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDColorOptionsExtension *_p = soap_instantiate_ns2__OSDColorOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDColorOptionsExtension::__any = __any; _p->ns2__OSDColorOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDColorOptionsExtension(struct soap *soap, ns2__OSDColorOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDColorOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDColorOptions
#define SOAP_TYPE_ns2__OSDColorOptions (674)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDColorOptions(struct soap*, const char*, int, const ns2__OSDColorOptions *, const char*);
SOAP_FMAC3 ns2__OSDColorOptions * SOAP_FMAC4 soap_in_ns2__OSDColorOptions(struct soap*, const char*, ns2__OSDColorOptions *, const char*);

#ifndef soap_write_ns2__OSDColorOptions
#define soap_write_ns2__OSDColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDColorOptions * SOAP_FMAC4 soap_get_ns2__OSDColorOptions(struct soap*, ns2__OSDColorOptions *, const char*, const char*);

#ifndef soap_read_ns2__OSDColorOptions
#define soap_read_ns2__OSDColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDColorOptions * SOAP_FMAC2 soap_instantiate_ns2__OSDColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDColorOptions * soap_new_ns2__OSDColorOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDColorOptions(soap, n, NULL, NULL, NULL); }

inline ns2__OSDColorOptions * soap_new_req_ns2__OSDColorOptions(struct soap *soap) { ns2__OSDColorOptions *_p = soap_instantiate_ns2__OSDColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDColorOptions * soap_new_set_ns2__OSDColorOptions(struct soap *soap, ns2__ColorOptions *Color, ns2__IntRange *Transparent, ns2__OSDColorOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDColorOptions *_p = soap_instantiate_ns2__OSDColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDColorOptions::Color = Color; _p->ns2__OSDColorOptions::Transparent = Transparent; _p->ns2__OSDColorOptions::Extension = Extension; _p->ns2__OSDColorOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDColorOptions(struct soap *soap, ns2__OSDColorOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDColorOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ColorOptions
#define SOAP_TYPE_ns2__ColorOptions (673)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ColorOptions(struct soap*, const char*, int, const ns2__ColorOptions *, const char*);
SOAP_FMAC3 ns2__ColorOptions * SOAP_FMAC4 soap_in_ns2__ColorOptions(struct soap*, const char*, ns2__ColorOptions *, const char*);

#ifndef soap_write_ns2__ColorOptions
#define soap_write_ns2__ColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorOptions * SOAP_FMAC4 soap_get_ns2__ColorOptions(struct soap*, ns2__ColorOptions *, const char*, const char*);

#ifndef soap_read_ns2__ColorOptions
#define soap_read_ns2__ColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ColorOptions * SOAP_FMAC2 soap_instantiate_ns2__ColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ColorOptions * soap_new_ns2__ColorOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ColorOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ColorOptions * soap_new_req_ns2__ColorOptions(struct soap *soap, int __union_ColorOptions, const union _ns2__union_ColorOptions& union_ColorOptions) { ns2__ColorOptions *_p = soap_instantiate_ns2__ColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorOptions::__union_ColorOptions = __union_ColorOptions; _p->ns2__ColorOptions::union_ColorOptions = union_ColorOptions; } return _p; }

inline ns2__ColorOptions * soap_new_set_ns2__ColorOptions(struct soap *soap, int __union_ColorOptions, const union _ns2__union_ColorOptions& union_ColorOptions, char *__anyAttribute, char *__item1) { ns2__ColorOptions *_p = soap_instantiate_ns2__ColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorOptions::__union_ColorOptions = __union_ColorOptions; _p->ns2__ColorOptions::union_ColorOptions = union_ColorOptions; _p->ns2__ColorOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ColorOptions(struct soap *soap, ns2__ColorOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ColorOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ColorspaceRange
#define SOAP_TYPE_ns2__ColorspaceRange (672)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ColorspaceRange(struct soap*, const char*, int, const ns2__ColorspaceRange *, const char*);
SOAP_FMAC3 ns2__ColorspaceRange * SOAP_FMAC4 soap_in_ns2__ColorspaceRange(struct soap*, const char*, ns2__ColorspaceRange *, const char*);

#ifndef soap_write_ns2__ColorspaceRange
#define soap_write_ns2__ColorspaceRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ColorspaceRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorspaceRange * SOAP_FMAC4 soap_get_ns2__ColorspaceRange(struct soap*, ns2__ColorspaceRange *, const char*, const char*);

#ifndef soap_read_ns2__ColorspaceRange
#define soap_read_ns2__ColorspaceRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ColorspaceRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ColorspaceRange * SOAP_FMAC2 soap_instantiate_ns2__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ColorspaceRange * soap_new_ns2__ColorspaceRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ColorspaceRange(soap, n, NULL, NULL, NULL); }

inline ns2__ColorspaceRange * soap_new_req_ns2__ColorspaceRange(struct soap *soap, ns2__FloatRange *X, ns2__FloatRange *Y, ns2__FloatRange *Z, const std::string& Colorspace) { ns2__ColorspaceRange *_p = soap_instantiate_ns2__ColorspaceRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorspaceRange::X = X; _p->ns2__ColorspaceRange::Y = Y; _p->ns2__ColorspaceRange::Z = Z; _p->ns2__ColorspaceRange::Colorspace = Colorspace; } return _p; }

inline ns2__ColorspaceRange * soap_new_set_ns2__ColorspaceRange(struct soap *soap, ns2__FloatRange *X, ns2__FloatRange *Y, ns2__FloatRange *Z, const std::string& Colorspace, char *__anyAttribute, char *__item1) { ns2__ColorspaceRange *_p = soap_instantiate_ns2__ColorspaceRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorspaceRange::X = X; _p->ns2__ColorspaceRange::Y = Y; _p->ns2__ColorspaceRange::Z = Z; _p->ns2__ColorspaceRange::Colorspace = Colorspace; _p->ns2__ColorspaceRange::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ColorspaceRange(struct soap *soap, ns2__ColorspaceRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ColorspaceRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDImgConfigurationExtension
#define SOAP_TYPE_ns2__OSDImgConfigurationExtension (671)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDImgConfigurationExtension(struct soap*, const char*, int, const ns2__OSDImgConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__OSDImgConfigurationExtension * SOAP_FMAC4 soap_in_ns2__OSDImgConfigurationExtension(struct soap*, const char*, ns2__OSDImgConfigurationExtension *, const char*);

#ifndef soap_write_ns2__OSDImgConfigurationExtension
#define soap_write_ns2__OSDImgConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDImgConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgConfigurationExtension * SOAP_FMAC4 soap_get_ns2__OSDImgConfigurationExtension(struct soap*, ns2__OSDImgConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDImgConfigurationExtension
#define soap_read_ns2__OSDImgConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDImgConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDImgConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDImgConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDImgConfigurationExtension * soap_new_ns2__OSDImgConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDImgConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDImgConfigurationExtension * soap_new_req_ns2__OSDImgConfigurationExtension(struct soap *soap) { ns2__OSDImgConfigurationExtension *_p = soap_instantiate_ns2__OSDImgConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDImgConfigurationExtension * soap_new_set_ns2__OSDImgConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDImgConfigurationExtension *_p = soap_instantiate_ns2__OSDImgConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDImgConfigurationExtension::__any = __any; _p->ns2__OSDImgConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDImgConfigurationExtension(struct soap *soap, ns2__OSDImgConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDImgConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDImgConfiguration
#define SOAP_TYPE_ns2__OSDImgConfiguration (670)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDImgConfiguration(struct soap*, const char*, int, const ns2__OSDImgConfiguration *, const char*);
SOAP_FMAC3 ns2__OSDImgConfiguration * SOAP_FMAC4 soap_in_ns2__OSDImgConfiguration(struct soap*, const char*, ns2__OSDImgConfiguration *, const char*);

#ifndef soap_write_ns2__OSDImgConfiguration
#define soap_write_ns2__OSDImgConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDImgConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgConfiguration * SOAP_FMAC4 soap_get_ns2__OSDImgConfiguration(struct soap*, ns2__OSDImgConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__OSDImgConfiguration
#define soap_read_ns2__OSDImgConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDImgConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDImgConfiguration * SOAP_FMAC2 soap_instantiate_ns2__OSDImgConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDImgConfiguration * soap_new_ns2__OSDImgConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDImgConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__OSDImgConfiguration * soap_new_req_ns2__OSDImgConfiguration(struct soap *soap, const std::string& ImgPath) { ns2__OSDImgConfiguration *_p = soap_instantiate_ns2__OSDImgConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDImgConfiguration::ImgPath = ImgPath; } return _p; }

inline ns2__OSDImgConfiguration * soap_new_set_ns2__OSDImgConfiguration(struct soap *soap, const std::string& ImgPath, ns2__OSDImgConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDImgConfiguration *_p = soap_instantiate_ns2__OSDImgConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDImgConfiguration::ImgPath = ImgPath; _p->ns2__OSDImgConfiguration::Extension = Extension; _p->ns2__OSDImgConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDImgConfiguration(struct soap *soap, ns2__OSDImgConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDImgConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDTextConfigurationExtension
#define SOAP_TYPE_ns2__OSDTextConfigurationExtension (669)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDTextConfigurationExtension(struct soap*, const char*, int, const ns2__OSDTextConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__OSDTextConfigurationExtension * SOAP_FMAC4 soap_in_ns2__OSDTextConfigurationExtension(struct soap*, const char*, ns2__OSDTextConfigurationExtension *, const char*);

#ifndef soap_write_ns2__OSDTextConfigurationExtension
#define soap_write_ns2__OSDTextConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDTextConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextConfigurationExtension * SOAP_FMAC4 soap_get_ns2__OSDTextConfigurationExtension(struct soap*, ns2__OSDTextConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDTextConfigurationExtension
#define soap_read_ns2__OSDTextConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDTextConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDTextConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDTextConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDTextConfigurationExtension * soap_new_ns2__OSDTextConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDTextConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDTextConfigurationExtension * soap_new_req_ns2__OSDTextConfigurationExtension(struct soap *soap) { ns2__OSDTextConfigurationExtension *_p = soap_instantiate_ns2__OSDTextConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDTextConfigurationExtension * soap_new_set_ns2__OSDTextConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDTextConfigurationExtension *_p = soap_instantiate_ns2__OSDTextConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDTextConfigurationExtension::__any = __any; _p->ns2__OSDTextConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDTextConfigurationExtension(struct soap *soap, ns2__OSDTextConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDTextConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDTextConfiguration
#define SOAP_TYPE_ns2__OSDTextConfiguration (668)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDTextConfiguration(struct soap*, const char*, int, const ns2__OSDTextConfiguration *, const char*);
SOAP_FMAC3 ns2__OSDTextConfiguration * SOAP_FMAC4 soap_in_ns2__OSDTextConfiguration(struct soap*, const char*, ns2__OSDTextConfiguration *, const char*);

#ifndef soap_write_ns2__OSDTextConfiguration
#define soap_write_ns2__OSDTextConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDTextConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextConfiguration * SOAP_FMAC4 soap_get_ns2__OSDTextConfiguration(struct soap*, ns2__OSDTextConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__OSDTextConfiguration
#define soap_read_ns2__OSDTextConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDTextConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDTextConfiguration * SOAP_FMAC2 soap_instantiate_ns2__OSDTextConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDTextConfiguration * soap_new_ns2__OSDTextConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDTextConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__OSDTextConfiguration * soap_new_req_ns2__OSDTextConfiguration(struct soap *soap, const std::string& Type) { ns2__OSDTextConfiguration *_p = soap_instantiate_ns2__OSDTextConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDTextConfiguration::Type = Type; } return _p; }

inline ns2__OSDTextConfiguration * soap_new_set_ns2__OSDTextConfiguration(struct soap *soap, const std::string& Type, std::string *DateFormat, std::string *TimeFormat, int *FontSize, ns2__OSDColor *FontColor, ns2__OSDColor *BackgroundColor, std::string *PlainText, ns2__OSDTextConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDTextConfiguration *_p = soap_instantiate_ns2__OSDTextConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDTextConfiguration::Type = Type; _p->ns2__OSDTextConfiguration::DateFormat = DateFormat; _p->ns2__OSDTextConfiguration::TimeFormat = TimeFormat; _p->ns2__OSDTextConfiguration::FontSize = FontSize; _p->ns2__OSDTextConfiguration::FontColor = FontColor; _p->ns2__OSDTextConfiguration::BackgroundColor = BackgroundColor; _p->ns2__OSDTextConfiguration::PlainText = PlainText; _p->ns2__OSDTextConfiguration::Extension = Extension; _p->ns2__OSDTextConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDTextConfiguration(struct soap *soap, ns2__OSDTextConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDTextConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDColor
#define SOAP_TYPE_ns2__OSDColor (667)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDColor(struct soap*, const char*, int, const ns2__OSDColor *, const char*);
SOAP_FMAC3 ns2__OSDColor * SOAP_FMAC4 soap_in_ns2__OSDColor(struct soap*, const char*, ns2__OSDColor *, const char*);

#ifndef soap_write_ns2__OSDColor
#define soap_write_ns2__OSDColor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDColor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDColor * SOAP_FMAC4 soap_get_ns2__OSDColor(struct soap*, ns2__OSDColor *, const char*, const char*);

#ifndef soap_read_ns2__OSDColor
#define soap_read_ns2__OSDColor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDColor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDColor * SOAP_FMAC2 soap_instantiate_ns2__OSDColor(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDColor * soap_new_ns2__OSDColor(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDColor(soap, n, NULL, NULL, NULL); }

inline ns2__OSDColor * soap_new_req_ns2__OSDColor(struct soap *soap, ns2__Color *Color) { ns2__OSDColor *_p = soap_instantiate_ns2__OSDColor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDColor::Color = Color; } return _p; }

inline ns2__OSDColor * soap_new_set_ns2__OSDColor(struct soap *soap, ns2__Color *Color, int *Transparent, char *__anyAttribute, char *__item1) { ns2__OSDColor *_p = soap_instantiate_ns2__OSDColor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDColor::Color = Color; _p->ns2__OSDColor::Transparent = Transparent; _p->ns2__OSDColor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDColor(struct soap *soap, ns2__OSDColor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDColor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDPosConfigurationExtension
#define SOAP_TYPE_ns2__OSDPosConfigurationExtension (666)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDPosConfigurationExtension(struct soap*, const char*, int, const ns2__OSDPosConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__OSDPosConfigurationExtension * SOAP_FMAC4 soap_in_ns2__OSDPosConfigurationExtension(struct soap*, const char*, ns2__OSDPosConfigurationExtension *, const char*);

#ifndef soap_write_ns2__OSDPosConfigurationExtension
#define soap_write_ns2__OSDPosConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDPosConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDPosConfigurationExtension * SOAP_FMAC4 soap_get_ns2__OSDPosConfigurationExtension(struct soap*, ns2__OSDPosConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__OSDPosConfigurationExtension
#define soap_read_ns2__OSDPosConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDPosConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDPosConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__OSDPosConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDPosConfigurationExtension * soap_new_ns2__OSDPosConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDPosConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__OSDPosConfigurationExtension * soap_new_req_ns2__OSDPosConfigurationExtension(struct soap *soap) { ns2__OSDPosConfigurationExtension *_p = soap_instantiate_ns2__OSDPosConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OSDPosConfigurationExtension * soap_new_set_ns2__OSDPosConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OSDPosConfigurationExtension *_p = soap_instantiate_ns2__OSDPosConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDPosConfigurationExtension::__any = __any; _p->ns2__OSDPosConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDPosConfigurationExtension(struct soap *soap, ns2__OSDPosConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDPosConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDPosConfiguration
#define SOAP_TYPE_ns2__OSDPosConfiguration (665)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDPosConfiguration(struct soap*, const char*, int, const ns2__OSDPosConfiguration *, const char*);
SOAP_FMAC3 ns2__OSDPosConfiguration * SOAP_FMAC4 soap_in_ns2__OSDPosConfiguration(struct soap*, const char*, ns2__OSDPosConfiguration *, const char*);

#ifndef soap_write_ns2__OSDPosConfiguration
#define soap_write_ns2__OSDPosConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDPosConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDPosConfiguration * SOAP_FMAC4 soap_get_ns2__OSDPosConfiguration(struct soap*, ns2__OSDPosConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__OSDPosConfiguration
#define soap_read_ns2__OSDPosConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDPosConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDPosConfiguration * SOAP_FMAC2 soap_instantiate_ns2__OSDPosConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDPosConfiguration * soap_new_ns2__OSDPosConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDPosConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__OSDPosConfiguration * soap_new_req_ns2__OSDPosConfiguration(struct soap *soap, const std::string& Type) { ns2__OSDPosConfiguration *_p = soap_instantiate_ns2__OSDPosConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDPosConfiguration::Type = Type; } return _p; }

inline ns2__OSDPosConfiguration * soap_new_set_ns2__OSDPosConfiguration(struct soap *soap, const std::string& Type, ns2__Vector *Pos, ns2__OSDPosConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__OSDPosConfiguration *_p = soap_instantiate_ns2__OSDPosConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDPosConfiguration::Type = Type; _p->ns2__OSDPosConfiguration::Pos = Pos; _p->ns2__OSDPosConfiguration::Extension = Extension; _p->ns2__OSDPosConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDPosConfiguration(struct soap *soap, ns2__OSDPosConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDPosConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OSDReference
#define SOAP_TYPE_ns2__OSDReference (664)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OSDReference(struct soap*, const char*, int, const ns2__OSDReference *, const char*);
SOAP_FMAC3 ns2__OSDReference * SOAP_FMAC4 soap_in_ns2__OSDReference(struct soap*, const char*, ns2__OSDReference *, const char*);

#ifndef soap_write_ns2__OSDReference
#define soap_write_ns2__OSDReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OSDReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDReference * SOAP_FMAC4 soap_get_ns2__OSDReference(struct soap*, ns2__OSDReference *, const char*, const char*);

#ifndef soap_read_ns2__OSDReference
#define soap_read_ns2__OSDReference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OSDReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OSDReference * SOAP_FMAC2 soap_instantiate_ns2__OSDReference(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OSDReference * soap_new_ns2__OSDReference(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OSDReference(soap, n, NULL, NULL, NULL); }

inline ns2__OSDReference * soap_new_req_ns2__OSDReference(struct soap *soap, const std::string& __item) { ns2__OSDReference *_p = soap_instantiate_ns2__OSDReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDReference::__item = __item; } return _p; }

inline ns2__OSDReference * soap_new_set_ns2__OSDReference(struct soap *soap, const std::string& __item, char *__anyAttribute, char *__item1) { ns2__OSDReference *_p = soap_instantiate_ns2__OSDReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OSDReference::__item = __item; _p->ns2__OSDReference::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OSDReference(struct soap *soap, ns2__OSDReference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OSDReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioClassDescriptorExtension
#define SOAP_TYPE_ns2__AudioClassDescriptorExtension (663)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioClassDescriptorExtension(struct soap*, const char*, int, const ns2__AudioClassDescriptorExtension *, const char*);
SOAP_FMAC3 ns2__AudioClassDescriptorExtension * SOAP_FMAC4 soap_in_ns2__AudioClassDescriptorExtension(struct soap*, const char*, ns2__AudioClassDescriptorExtension *, const char*);

#ifndef soap_write_ns2__AudioClassDescriptorExtension
#define soap_write_ns2__AudioClassDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioClassDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioClassDescriptorExtension * SOAP_FMAC4 soap_get_ns2__AudioClassDescriptorExtension(struct soap*, ns2__AudioClassDescriptorExtension *, const char*, const char*);

#ifndef soap_read_ns2__AudioClassDescriptorExtension
#define soap_read_ns2__AudioClassDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioClassDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_ns2__AudioClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioClassDescriptorExtension * soap_new_ns2__AudioClassDescriptorExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioClassDescriptorExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AudioClassDescriptorExtension * soap_new_req_ns2__AudioClassDescriptorExtension(struct soap *soap) { ns2__AudioClassDescriptorExtension *_p = soap_instantiate_ns2__AudioClassDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioClassDescriptorExtension * soap_new_set_ns2__AudioClassDescriptorExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AudioClassDescriptorExtension *_p = soap_instantiate_ns2__AudioClassDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioClassDescriptorExtension::__any = __any; _p->ns2__AudioClassDescriptorExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioClassDescriptorExtension(struct soap *soap, ns2__AudioClassDescriptorExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioClassDescriptorExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioClassDescriptor
#define SOAP_TYPE_ns2__AudioClassDescriptor (662)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioClassDescriptor(struct soap*, const char*, int, const ns2__AudioClassDescriptor *, const char*);
SOAP_FMAC3 ns2__AudioClassDescriptor * SOAP_FMAC4 soap_in_ns2__AudioClassDescriptor(struct soap*, const char*, ns2__AudioClassDescriptor *, const char*);

#ifndef soap_write_ns2__AudioClassDescriptor
#define soap_write_ns2__AudioClassDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioClassDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioClassDescriptor * SOAP_FMAC4 soap_get_ns2__AudioClassDescriptor(struct soap*, ns2__AudioClassDescriptor *, const char*, const char*);

#ifndef soap_read_ns2__AudioClassDescriptor
#define soap_read_ns2__AudioClassDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioClassDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioClassDescriptor * SOAP_FMAC2 soap_instantiate_ns2__AudioClassDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioClassDescriptor * soap_new_ns2__AudioClassDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioClassDescriptor(soap, n, NULL, NULL, NULL); }

inline ns2__AudioClassDescriptor * soap_new_req_ns2__AudioClassDescriptor(struct soap *soap) { ns2__AudioClassDescriptor *_p = soap_instantiate_ns2__AudioClassDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioClassDescriptor * soap_new_set_ns2__AudioClassDescriptor(struct soap *soap, const std::vector<ns2__AudioClassCandidate * >& ClassCandidate, ns2__AudioClassDescriptorExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AudioClassDescriptor *_p = soap_instantiate_ns2__AudioClassDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioClassDescriptor::ClassCandidate = ClassCandidate; _p->ns2__AudioClassDescriptor::Extension = Extension; _p->ns2__AudioClassDescriptor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioClassDescriptor(struct soap *soap, ns2__AudioClassDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioClassDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioClassCandidate
#define SOAP_TYPE_ns2__AudioClassCandidate (661)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioClassCandidate(struct soap*, const char*, int, const ns2__AudioClassCandidate *, const char*);
SOAP_FMAC3 ns2__AudioClassCandidate * SOAP_FMAC4 soap_in_ns2__AudioClassCandidate(struct soap*, const char*, ns2__AudioClassCandidate *, const char*);

#ifndef soap_write_ns2__AudioClassCandidate
#define soap_write_ns2__AudioClassCandidate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioClassCandidate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioClassCandidate * SOAP_FMAC4 soap_get_ns2__AudioClassCandidate(struct soap*, ns2__AudioClassCandidate *, const char*, const char*);

#ifndef soap_read_ns2__AudioClassCandidate
#define soap_read_ns2__AudioClassCandidate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioClassCandidate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioClassCandidate * SOAP_FMAC2 soap_instantiate_ns2__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioClassCandidate * soap_new_ns2__AudioClassCandidate(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioClassCandidate(soap, n, NULL, NULL, NULL); }

inline ns2__AudioClassCandidate * soap_new_req_ns2__AudioClassCandidate(struct soap *soap, const std::string& Type, float Likelihood) { ns2__AudioClassCandidate *_p = soap_instantiate_ns2__AudioClassCandidate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioClassCandidate::Type = Type; _p->ns2__AudioClassCandidate::Likelihood = Likelihood; } return _p; }

inline ns2__AudioClassCandidate * soap_new_set_ns2__AudioClassCandidate(struct soap *soap, const std::string& Type, float Likelihood, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AudioClassCandidate *_p = soap_instantiate_ns2__AudioClassCandidate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioClassCandidate::Type = Type; _p->ns2__AudioClassCandidate::Likelihood = Likelihood; _p->ns2__AudioClassCandidate::__any = __any; _p->ns2__AudioClassCandidate::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioClassCandidate(struct soap *soap, ns2__AudioClassCandidate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioClassCandidate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ActionEngineEventPayloadExtension
#define SOAP_TYPE_ns2__ActionEngineEventPayloadExtension (660)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ActionEngineEventPayloadExtension(struct soap*, const char*, int, const ns2__ActionEngineEventPayloadExtension *, const char*);
SOAP_FMAC3 ns2__ActionEngineEventPayloadExtension * SOAP_FMAC4 soap_in_ns2__ActionEngineEventPayloadExtension(struct soap*, const char*, ns2__ActionEngineEventPayloadExtension *, const char*);

#ifndef soap_write_ns2__ActionEngineEventPayloadExtension
#define soap_write_ns2__ActionEngineEventPayloadExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ActionEngineEventPayloadExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ActionEngineEventPayloadExtension * SOAP_FMAC4 soap_get_ns2__ActionEngineEventPayloadExtension(struct soap*, ns2__ActionEngineEventPayloadExtension *, const char*, const char*);

#ifndef soap_read_ns2__ActionEngineEventPayloadExtension
#define soap_read_ns2__ActionEngineEventPayloadExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ActionEngineEventPayloadExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ActionEngineEventPayloadExtension * SOAP_FMAC2 soap_instantiate_ns2__ActionEngineEventPayloadExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ActionEngineEventPayloadExtension * soap_new_ns2__ActionEngineEventPayloadExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ActionEngineEventPayloadExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ActionEngineEventPayloadExtension * soap_new_req_ns2__ActionEngineEventPayloadExtension(struct soap *soap) { ns2__ActionEngineEventPayloadExtension *_p = soap_instantiate_ns2__ActionEngineEventPayloadExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ActionEngineEventPayloadExtension * soap_new_set_ns2__ActionEngineEventPayloadExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ActionEngineEventPayloadExtension *_p = soap_instantiate_ns2__ActionEngineEventPayloadExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ActionEngineEventPayloadExtension::__any = __any; _p->ns2__ActionEngineEventPayloadExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ActionEngineEventPayloadExtension(struct soap *soap, ns2__ActionEngineEventPayloadExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ActionEngineEventPayloadExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ActionEngineEventPayload
#define SOAP_TYPE_ns2__ActionEngineEventPayload (659)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ActionEngineEventPayload(struct soap*, const char*, int, const ns2__ActionEngineEventPayload *, const char*);
SOAP_FMAC3 ns2__ActionEngineEventPayload * SOAP_FMAC4 soap_in_ns2__ActionEngineEventPayload(struct soap*, const char*, ns2__ActionEngineEventPayload *, const char*);

#ifndef soap_write_ns2__ActionEngineEventPayload
#define soap_write_ns2__ActionEngineEventPayload(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ActionEngineEventPayload", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ActionEngineEventPayload * SOAP_FMAC4 soap_get_ns2__ActionEngineEventPayload(struct soap*, ns2__ActionEngineEventPayload *, const char*, const char*);

#ifndef soap_read_ns2__ActionEngineEventPayload
#define soap_read_ns2__ActionEngineEventPayload(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ActionEngineEventPayload(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ActionEngineEventPayload * SOAP_FMAC2 soap_instantiate_ns2__ActionEngineEventPayload(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ActionEngineEventPayload * soap_new_ns2__ActionEngineEventPayload(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ActionEngineEventPayload(soap, n, NULL, NULL, NULL); }

inline ns2__ActionEngineEventPayload * soap_new_req_ns2__ActionEngineEventPayload(struct soap *soap) { ns2__ActionEngineEventPayload *_p = soap_instantiate_ns2__ActionEngineEventPayload(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ActionEngineEventPayload * soap_new_set_ns2__ActionEngineEventPayload(struct soap *soap, std::string *RequestInfo, std::string *ResponseInfo, struct SOAP_ENV__Fault *Fault, ns2__ActionEngineEventPayloadExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ActionEngineEventPayload *_p = soap_instantiate_ns2__ActionEngineEventPayload(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ActionEngineEventPayload::RequestInfo = RequestInfo; _p->ns2__ActionEngineEventPayload::ResponseInfo = ResponseInfo; _p->ns2__ActionEngineEventPayload::Fault = Fault; _p->ns2__ActionEngineEventPayload::Extension = Extension; _p->ns2__ActionEngineEventPayload::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ActionEngineEventPayload(struct soap *soap, ns2__ActionEngineEventPayload *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ActionEngineEventPayload(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsState
#define SOAP_TYPE_ns2__AnalyticsState (658)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsState(struct soap*, const char*, int, const ns2__AnalyticsState *, const char*);
SOAP_FMAC3 ns2__AnalyticsState * SOAP_FMAC4 soap_in_ns2__AnalyticsState(struct soap*, const char*, ns2__AnalyticsState *, const char*);

#ifndef soap_write_ns2__AnalyticsState
#define soap_write_ns2__AnalyticsState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsState * SOAP_FMAC4 soap_get_ns2__AnalyticsState(struct soap*, ns2__AnalyticsState *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsState
#define soap_read_ns2__AnalyticsState(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsState * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsState(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsState * soap_new_ns2__AnalyticsState(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsState(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsState * soap_new_req_ns2__AnalyticsState(struct soap *soap, const std::string& State) { ns2__AnalyticsState *_p = soap_instantiate_ns2__AnalyticsState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsState::State = State; } return _p; }

inline ns2__AnalyticsState * soap_new_set_ns2__AnalyticsState(struct soap *soap, std::string *Error, const std::string& State, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AnalyticsState *_p = soap_instantiate_ns2__AnalyticsState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsState::Error = Error; _p->ns2__AnalyticsState::State = State; _p->ns2__AnalyticsState::__any = __any; _p->ns2__AnalyticsState::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsState(struct soap *soap, ns2__AnalyticsState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsStateInformation
#define SOAP_TYPE_ns2__AnalyticsStateInformation (657)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsStateInformation(struct soap*, const char*, int, const ns2__AnalyticsStateInformation *, const char*);
SOAP_FMAC3 ns2__AnalyticsStateInformation * SOAP_FMAC4 soap_in_ns2__AnalyticsStateInformation(struct soap*, const char*, ns2__AnalyticsStateInformation *, const char*);

#ifndef soap_write_ns2__AnalyticsStateInformation
#define soap_write_ns2__AnalyticsStateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsStateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsStateInformation * SOAP_FMAC4 soap_get_ns2__AnalyticsStateInformation(struct soap*, ns2__AnalyticsStateInformation *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsStateInformation
#define soap_read_ns2__AnalyticsStateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsStateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsStateInformation * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsStateInformation * soap_new_ns2__AnalyticsStateInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsStateInformation(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsStateInformation * soap_new_req_ns2__AnalyticsStateInformation(struct soap *soap, const std::string& AnalyticsEngineControlToken, ns2__AnalyticsState *State) { ns2__AnalyticsStateInformation *_p = soap_instantiate_ns2__AnalyticsStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsStateInformation::AnalyticsEngineControlToken = AnalyticsEngineControlToken; _p->ns2__AnalyticsStateInformation::State = State; } return _p; }

inline ns2__AnalyticsStateInformation * soap_new_set_ns2__AnalyticsStateInformation(struct soap *soap, const std::string& AnalyticsEngineControlToken, ns2__AnalyticsState *State, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AnalyticsStateInformation *_p = soap_instantiate_ns2__AnalyticsStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsStateInformation::AnalyticsEngineControlToken = AnalyticsEngineControlToken; _p->ns2__AnalyticsStateInformation::State = State; _p->ns2__AnalyticsStateInformation::__any = __any; _p->ns2__AnalyticsStateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsStateInformation(struct soap *soap, ns2__AnalyticsStateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsStateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngineControl
#define SOAP_TYPE_ns2__AnalyticsEngineControl (656)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngineControl(struct soap*, const char*, int, const ns2__AnalyticsEngineControl *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngineControl * SOAP_FMAC4 soap_in_ns2__AnalyticsEngineControl(struct soap*, const char*, ns2__AnalyticsEngineControl *, const char*);

#ifndef soap_write_ns2__AnalyticsEngineControl
#define soap_write_ns2__AnalyticsEngineControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngineControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineControl * SOAP_FMAC4 soap_get_ns2__AnalyticsEngineControl(struct soap*, ns2__AnalyticsEngineControl *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngineControl
#define soap_read_ns2__AnalyticsEngineControl(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngineControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngineControl * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngineControl(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngineControl * soap_new_ns2__AnalyticsEngineControl(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngineControl(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngineControl * soap_new_req_ns2__AnalyticsEngineControl(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& EngineToken, const std::string& EngineConfigToken, const std::vector<std::string >& InputToken, const std::vector<std::string >& ReceiverToken, ns2__Config *Subscription, enum ns2__ModeOfOperation Mode) { ns2__AnalyticsEngineControl *_p = soap_instantiate_ns2__AnalyticsEngineControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineControl::Name = Name; _p->ns2__AnalyticsEngineControl::UseCount = UseCount; _p->ns2__AnalyticsEngineControl::token = token; _p->ns2__AnalyticsEngineControl::EngineToken = EngineToken; _p->ns2__AnalyticsEngineControl::EngineConfigToken = EngineConfigToken; _p->ns2__AnalyticsEngineControl::InputToken = InputToken; _p->ns2__AnalyticsEngineControl::ReceiverToken = ReceiverToken; _p->ns2__AnalyticsEngineControl::Subscription = Subscription; _p->ns2__AnalyticsEngineControl::Mode = Mode; } return _p; }

inline ns2__AnalyticsEngineControl * soap_new_set_ns2__AnalyticsEngineControl(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& EngineToken, const std::string& EngineConfigToken, const std::vector<std::string >& InputToken, const std::vector<std::string >& ReceiverToken, ns2__MulticastConfiguration *Multicast, ns2__Config *Subscription, enum ns2__ModeOfOperation Mode, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AnalyticsEngineControl *_p = soap_instantiate_ns2__AnalyticsEngineControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineControl::Name = Name; _p->ns2__AnalyticsEngineControl::UseCount = UseCount; _p->ns2__AnalyticsEngineControl::token = token; _p->ns2__AnalyticsEngineControl::EngineToken = EngineToken; _p->ns2__AnalyticsEngineControl::EngineConfigToken = EngineConfigToken; _p->ns2__AnalyticsEngineControl::InputToken = InputToken; _p->ns2__AnalyticsEngineControl::ReceiverToken = ReceiverToken; _p->ns2__AnalyticsEngineControl::Multicast = Multicast; _p->ns2__AnalyticsEngineControl::Subscription = Subscription; _p->ns2__AnalyticsEngineControl::Mode = Mode; _p->ns2__AnalyticsEngineControl::__any = __any; _p->ns2__AnalyticsEngineControl::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AnalyticsEngineControl(struct soap *soap, ns2__AnalyticsEngineControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngineControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataInputExtension
#define SOAP_TYPE_ns2__MetadataInputExtension (655)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataInputExtension(struct soap*, const char*, int, const ns2__MetadataInputExtension *, const char*);
SOAP_FMAC3 ns2__MetadataInputExtension * SOAP_FMAC4 soap_in_ns2__MetadataInputExtension(struct soap*, const char*, ns2__MetadataInputExtension *, const char*);

#ifndef soap_write_ns2__MetadataInputExtension
#define soap_write_ns2__MetadataInputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataInputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataInputExtension * SOAP_FMAC4 soap_get_ns2__MetadataInputExtension(struct soap*, ns2__MetadataInputExtension *, const char*, const char*);

#ifndef soap_read_ns2__MetadataInputExtension
#define soap_read_ns2__MetadataInputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataInputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataInputExtension * SOAP_FMAC2 soap_instantiate_ns2__MetadataInputExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataInputExtension * soap_new_ns2__MetadataInputExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataInputExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataInputExtension * soap_new_req_ns2__MetadataInputExtension(struct soap *soap) { ns2__MetadataInputExtension *_p = soap_instantiate_ns2__MetadataInputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataInputExtension * soap_new_set_ns2__MetadataInputExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__MetadataInputExtension *_p = soap_instantiate_ns2__MetadataInputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataInputExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataInputExtension(struct soap *soap, ns2__MetadataInputExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataInputExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataInput
#define SOAP_TYPE_ns2__MetadataInput (654)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataInput(struct soap*, const char*, int, const ns2__MetadataInput *, const char*);
SOAP_FMAC3 ns2__MetadataInput * SOAP_FMAC4 soap_in_ns2__MetadataInput(struct soap*, const char*, ns2__MetadataInput *, const char*);

#ifndef soap_write_ns2__MetadataInput
#define soap_write_ns2__MetadataInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataInput * SOAP_FMAC4 soap_get_ns2__MetadataInput(struct soap*, ns2__MetadataInput *, const char*, const char*);

#ifndef soap_read_ns2__MetadataInput
#define soap_read_ns2__MetadataInput(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataInput * SOAP_FMAC2 soap_instantiate_ns2__MetadataInput(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataInput * soap_new_ns2__MetadataInput(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataInput(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataInput * soap_new_req_ns2__MetadataInput(struct soap *soap) { ns2__MetadataInput *_p = soap_instantiate_ns2__MetadataInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataInput * soap_new_set_ns2__MetadataInput(struct soap *soap, const std::vector<ns2__Config * >& MetadataConfig, ns2__MetadataInputExtension *Extension, char *__anyAttribute, char *__item1) { ns2__MetadataInput *_p = soap_instantiate_ns2__MetadataInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataInput::MetadataConfig = MetadataConfig; _p->ns2__MetadataInput::Extension = Extension; _p->ns2__MetadataInput::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataInput(struct soap *soap, ns2__MetadataInput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataInput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SourceIdentificationExtension
#define SOAP_TYPE_ns2__SourceIdentificationExtension (653)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SourceIdentificationExtension(struct soap*, const char*, int, const ns2__SourceIdentificationExtension *, const char*);
SOAP_FMAC3 ns2__SourceIdentificationExtension * SOAP_FMAC4 soap_in_ns2__SourceIdentificationExtension(struct soap*, const char*, ns2__SourceIdentificationExtension *, const char*);

#ifndef soap_write_ns2__SourceIdentificationExtension
#define soap_write_ns2__SourceIdentificationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SourceIdentificationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SourceIdentificationExtension * SOAP_FMAC4 soap_get_ns2__SourceIdentificationExtension(struct soap*, ns2__SourceIdentificationExtension *, const char*, const char*);

#ifndef soap_read_ns2__SourceIdentificationExtension
#define soap_read_ns2__SourceIdentificationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SourceIdentificationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SourceIdentificationExtension * SOAP_FMAC2 soap_instantiate_ns2__SourceIdentificationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SourceIdentificationExtension * soap_new_ns2__SourceIdentificationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SourceIdentificationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SourceIdentificationExtension * soap_new_req_ns2__SourceIdentificationExtension(struct soap *soap) { ns2__SourceIdentificationExtension *_p = soap_instantiate_ns2__SourceIdentificationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SourceIdentificationExtension * soap_new_set_ns2__SourceIdentificationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__SourceIdentificationExtension *_p = soap_instantiate_ns2__SourceIdentificationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SourceIdentificationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SourceIdentificationExtension(struct soap *soap, ns2__SourceIdentificationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SourceIdentificationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SourceIdentification
#define SOAP_TYPE_ns2__SourceIdentification (652)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SourceIdentification(struct soap*, const char*, int, const ns2__SourceIdentification *, const char*);
SOAP_FMAC3 ns2__SourceIdentification * SOAP_FMAC4 soap_in_ns2__SourceIdentification(struct soap*, const char*, ns2__SourceIdentification *, const char*);

#ifndef soap_write_ns2__SourceIdentification
#define soap_write_ns2__SourceIdentification(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SourceIdentification", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SourceIdentification * SOAP_FMAC4 soap_get_ns2__SourceIdentification(struct soap*, ns2__SourceIdentification *, const char*, const char*);

#ifndef soap_read_ns2__SourceIdentification
#define soap_read_ns2__SourceIdentification(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SourceIdentification(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SourceIdentification * SOAP_FMAC2 soap_instantiate_ns2__SourceIdentification(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SourceIdentification * soap_new_ns2__SourceIdentification(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SourceIdentification(soap, n, NULL, NULL, NULL); }

inline ns2__SourceIdentification * soap_new_req_ns2__SourceIdentification(struct soap *soap, const std::string& Name, const std::vector<std::string >& Token) { ns2__SourceIdentification *_p = soap_instantiate_ns2__SourceIdentification(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SourceIdentification::Name = Name; _p->ns2__SourceIdentification::Token = Token; } return _p; }

inline ns2__SourceIdentification * soap_new_set_ns2__SourceIdentification(struct soap *soap, const std::string& Name, const std::vector<std::string >& Token, ns2__SourceIdentificationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SourceIdentification *_p = soap_instantiate_ns2__SourceIdentification(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SourceIdentification::Name = Name; _p->ns2__SourceIdentification::Token = Token; _p->ns2__SourceIdentification::Extension = Extension; _p->ns2__SourceIdentification::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SourceIdentification(struct soap *soap, ns2__SourceIdentification *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SourceIdentification(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngineInput
#define SOAP_TYPE_ns2__AnalyticsEngineInput (651)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngineInput(struct soap*, const char*, int, const ns2__AnalyticsEngineInput *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngineInput * SOAP_FMAC4 soap_in_ns2__AnalyticsEngineInput(struct soap*, const char*, ns2__AnalyticsEngineInput *, const char*);

#ifndef soap_write_ns2__AnalyticsEngineInput
#define soap_write_ns2__AnalyticsEngineInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngineInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineInput * SOAP_FMAC4 soap_get_ns2__AnalyticsEngineInput(struct soap*, ns2__AnalyticsEngineInput *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngineInput
#define soap_read_ns2__AnalyticsEngineInput(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngineInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngineInput * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngineInput(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngineInput * soap_new_ns2__AnalyticsEngineInput(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngineInput(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngineInput * soap_new_req_ns2__AnalyticsEngineInput(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__SourceIdentification *SourceIdentification, ns2__VideoEncoderConfiguration *VideoInput, ns2__MetadataInput *MetadataInput) { ns2__AnalyticsEngineInput *_p = soap_instantiate_ns2__AnalyticsEngineInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineInput::Name = Name; _p->ns2__AnalyticsEngineInput::UseCount = UseCount; _p->ns2__AnalyticsEngineInput::token = token; _p->ns2__AnalyticsEngineInput::SourceIdentification = SourceIdentification; _p->ns2__AnalyticsEngineInput::VideoInput = VideoInput; _p->ns2__AnalyticsEngineInput::MetadataInput = MetadataInput; } return _p; }

inline ns2__AnalyticsEngineInput * soap_new_set_ns2__AnalyticsEngineInput(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__SourceIdentification *SourceIdentification, ns2__VideoEncoderConfiguration *VideoInput, ns2__MetadataInput *MetadataInput, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AnalyticsEngineInput *_p = soap_instantiate_ns2__AnalyticsEngineInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineInput::Name = Name; _p->ns2__AnalyticsEngineInput::UseCount = UseCount; _p->ns2__AnalyticsEngineInput::token = token; _p->ns2__AnalyticsEngineInput::SourceIdentification = SourceIdentification; _p->ns2__AnalyticsEngineInput::VideoInput = VideoInput; _p->ns2__AnalyticsEngineInput::MetadataInput = MetadataInput; _p->ns2__AnalyticsEngineInput::__any = __any; _p->ns2__AnalyticsEngineInput::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AnalyticsEngineInput(struct soap *soap, ns2__AnalyticsEngineInput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngineInput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_ns2__AnalyticsEngineInputInfoExtension (650)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngineInputInfoExtension(struct soap*, const char*, int, const ns2__AnalyticsEngineInputInfoExtension *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngineInputInfoExtension * SOAP_FMAC4 soap_in_ns2__AnalyticsEngineInputInfoExtension(struct soap*, const char*, ns2__AnalyticsEngineInputInfoExtension *, const char*);

#ifndef soap_write_ns2__AnalyticsEngineInputInfoExtension
#define soap_write_ns2__AnalyticsEngineInputInfoExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngineInputInfoExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineInputInfoExtension * SOAP_FMAC4 soap_get_ns2__AnalyticsEngineInputInfoExtension(struct soap*, ns2__AnalyticsEngineInputInfoExtension *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngineInputInfoExtension
#define soap_read_ns2__AnalyticsEngineInputInfoExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngineInputInfoExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngineInputInfoExtension * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngineInputInfoExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngineInputInfoExtension * soap_new_ns2__AnalyticsEngineInputInfoExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngineInputInfoExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngineInputInfoExtension * soap_new_req_ns2__AnalyticsEngineInputInfoExtension(struct soap *soap) { ns2__AnalyticsEngineInputInfoExtension *_p = soap_instantiate_ns2__AnalyticsEngineInputInfoExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnalyticsEngineInputInfoExtension * soap_new_set_ns2__AnalyticsEngineInputInfoExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AnalyticsEngineInputInfoExtension *_p = soap_instantiate_ns2__AnalyticsEngineInputInfoExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineInputInfoExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsEngineInputInfoExtension(struct soap *soap, ns2__AnalyticsEngineInputInfoExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngineInputInfoExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngineInputInfo
#define SOAP_TYPE_ns2__AnalyticsEngineInputInfo (649)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngineInputInfo(struct soap*, const char*, int, const ns2__AnalyticsEngineInputInfo *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngineInputInfo * SOAP_FMAC4 soap_in_ns2__AnalyticsEngineInputInfo(struct soap*, const char*, ns2__AnalyticsEngineInputInfo *, const char*);

#ifndef soap_write_ns2__AnalyticsEngineInputInfo
#define soap_write_ns2__AnalyticsEngineInputInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngineInputInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineInputInfo * SOAP_FMAC4 soap_get_ns2__AnalyticsEngineInputInfo(struct soap*, ns2__AnalyticsEngineInputInfo *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngineInputInfo
#define soap_read_ns2__AnalyticsEngineInputInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngineInputInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngineInputInfo * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngineInputInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngineInputInfo * soap_new_ns2__AnalyticsEngineInputInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngineInputInfo(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngineInputInfo * soap_new_req_ns2__AnalyticsEngineInputInfo(struct soap *soap) { ns2__AnalyticsEngineInputInfo *_p = soap_instantiate_ns2__AnalyticsEngineInputInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnalyticsEngineInputInfo * soap_new_set_ns2__AnalyticsEngineInputInfo(struct soap *soap, ns2__Config *InputInfo, ns2__AnalyticsEngineInputInfoExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AnalyticsEngineInputInfo *_p = soap_instantiate_ns2__AnalyticsEngineInputInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineInputInfo::InputInfo = InputInfo; _p->ns2__AnalyticsEngineInputInfo::Extension = Extension; _p->ns2__AnalyticsEngineInputInfo::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsEngineInputInfo(struct soap *soap, ns2__AnalyticsEngineInputInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngineInputInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EngineConfiguration
#define SOAP_TYPE_ns2__EngineConfiguration (648)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EngineConfiguration(struct soap*, const char*, int, const ns2__EngineConfiguration *, const char*);
SOAP_FMAC3 ns2__EngineConfiguration * SOAP_FMAC4 soap_in_ns2__EngineConfiguration(struct soap*, const char*, ns2__EngineConfiguration *, const char*);

#ifndef soap_write_ns2__EngineConfiguration
#define soap_write_ns2__EngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EngineConfiguration * SOAP_FMAC4 soap_get_ns2__EngineConfiguration(struct soap*, ns2__EngineConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__EngineConfiguration
#define soap_read_ns2__EngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EngineConfiguration * SOAP_FMAC2 soap_instantiate_ns2__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EngineConfiguration * soap_new_ns2__EngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EngineConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__EngineConfiguration * soap_new_req_ns2__EngineConfiguration(struct soap *soap, ns2__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration, ns2__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo) { ns2__EngineConfiguration *_p = soap_instantiate_ns2__EngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EngineConfiguration::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration; _p->ns2__EngineConfiguration::AnalyticsEngineInputInfo = AnalyticsEngineInputInfo; } return _p; }

inline ns2__EngineConfiguration * soap_new_set_ns2__EngineConfiguration(struct soap *soap, ns2__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration, ns2__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__EngineConfiguration *_p = soap_instantiate_ns2__EngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EngineConfiguration::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration; _p->ns2__EngineConfiguration::AnalyticsEngineInputInfo = AnalyticsEngineInputInfo; _p->ns2__EngineConfiguration::__any = __any; _p->ns2__EngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EngineConfiguration(struct soap *soap, ns2__EngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_ns2__AnalyticsDeviceEngineConfigurationExtension (647)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, int, const ns2__AnalyticsDeviceEngineConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC4 soap_in_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, ns2__AnalyticsDeviceEngineConfigurationExtension *, const char*);

#ifndef soap_write_ns2__AnalyticsDeviceEngineConfigurationExtension
#define soap_write_ns2__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsDeviceEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC4 soap_get_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, ns2__AnalyticsDeviceEngineConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsDeviceEngineConfigurationExtension
#define soap_read_ns2__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsDeviceEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsDeviceEngineConfigurationExtension * soap_new_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsDeviceEngineConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsDeviceEngineConfigurationExtension * soap_new_req_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap) { ns2__AnalyticsDeviceEngineConfigurationExtension *_p = soap_instantiate_ns2__AnalyticsDeviceEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnalyticsDeviceEngineConfigurationExtension * soap_new_set_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AnalyticsDeviceEngineConfigurationExtension *_p = soap_instantiate_ns2__AnalyticsDeviceEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsDeviceEngineConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, ns2__AnalyticsDeviceEngineConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_ns2__AnalyticsDeviceEngineConfiguration (646)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, int, const ns2__AnalyticsDeviceEngineConfiguration *, const char*);
SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfiguration * SOAP_FMAC4 soap_in_ns2__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, ns2__AnalyticsDeviceEngineConfiguration *, const char*);

#ifndef soap_write_ns2__AnalyticsDeviceEngineConfiguration
#define soap_write_ns2__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsDeviceEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfiguration * SOAP_FMAC4 soap_get_ns2__AnalyticsDeviceEngineConfiguration(struct soap*, ns2__AnalyticsDeviceEngineConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsDeviceEngineConfiguration
#define soap_read_ns2__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsDeviceEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsDeviceEngineConfiguration * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsDeviceEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsDeviceEngineConfiguration * soap_new_ns2__AnalyticsDeviceEngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsDeviceEngineConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsDeviceEngineConfiguration * soap_new_req_ns2__AnalyticsDeviceEngineConfiguration(struct soap *soap, const std::vector<ns2__EngineConfiguration * >& EngineConfiguration) { ns2__AnalyticsDeviceEngineConfiguration *_p = soap_instantiate_ns2__AnalyticsDeviceEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsDeviceEngineConfiguration::EngineConfiguration = EngineConfiguration; } return _p; }

inline ns2__AnalyticsDeviceEngineConfiguration * soap_new_set_ns2__AnalyticsDeviceEngineConfiguration(struct soap *soap, const std::vector<ns2__EngineConfiguration * >& EngineConfiguration, ns2__AnalyticsDeviceEngineConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AnalyticsDeviceEngineConfiguration *_p = soap_instantiate_ns2__AnalyticsDeviceEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsDeviceEngineConfiguration::EngineConfiguration = EngineConfiguration; _p->ns2__AnalyticsDeviceEngineConfiguration::Extension = Extension; _p->ns2__AnalyticsDeviceEngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsDeviceEngineConfiguration(struct soap *soap, ns2__AnalyticsDeviceEngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsDeviceEngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngine
#define SOAP_TYPE_ns2__AnalyticsEngine (645)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngine(struct soap*, const char*, int, const ns2__AnalyticsEngine *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngine * SOAP_FMAC4 soap_in_ns2__AnalyticsEngine(struct soap*, const char*, ns2__AnalyticsEngine *, const char*);

#ifndef soap_write_ns2__AnalyticsEngine
#define soap_write_ns2__AnalyticsEngine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngine", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngine * SOAP_FMAC4 soap_get_ns2__AnalyticsEngine(struct soap*, ns2__AnalyticsEngine *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngine
#define soap_read_ns2__AnalyticsEngine(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngine(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngine * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngine(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngine * soap_new_ns2__AnalyticsEngine(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngine(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngine * soap_new_req_ns2__AnalyticsEngine(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration) { ns2__AnalyticsEngine *_p = soap_instantiate_ns2__AnalyticsEngine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngine::Name = Name; _p->ns2__AnalyticsEngine::UseCount = UseCount; _p->ns2__AnalyticsEngine::token = token; _p->ns2__AnalyticsEngine::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; } return _p; }

inline ns2__AnalyticsEngine * soap_new_set_ns2__AnalyticsEngine(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AnalyticsEngine *_p = soap_instantiate_ns2__AnalyticsEngine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngine::Name = Name; _p->ns2__AnalyticsEngine::UseCount = UseCount; _p->ns2__AnalyticsEngine::token = token; _p->ns2__AnalyticsEngine::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->ns2__AnalyticsEngine::__any = __any; _p->ns2__AnalyticsEngine::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AnalyticsEngine(struct soap *soap, ns2__AnalyticsEngine *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngine(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReplayConfiguration
#define SOAP_TYPE_ns2__ReplayConfiguration (644)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReplayConfiguration(struct soap*, const char*, int, const ns2__ReplayConfiguration *, const char*);
SOAP_FMAC3 ns2__ReplayConfiguration * SOAP_FMAC4 soap_in_ns2__ReplayConfiguration(struct soap*, const char*, ns2__ReplayConfiguration *, const char*);

#ifndef soap_write_ns2__ReplayConfiguration
#define soap_write_ns2__ReplayConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReplayConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplayConfiguration * SOAP_FMAC4 soap_get_ns2__ReplayConfiguration(struct soap*, ns2__ReplayConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__ReplayConfiguration
#define soap_read_ns2__ReplayConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReplayConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReplayConfiguration * SOAP_FMAC2 soap_instantiate_ns2__ReplayConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReplayConfiguration * soap_new_ns2__ReplayConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReplayConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__ReplayConfiguration * soap_new_req_ns2__ReplayConfiguration(struct soap *soap, const std::string& SessionTimeout) { ns2__ReplayConfiguration *_p = soap_instantiate_ns2__ReplayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplayConfiguration::SessionTimeout = SessionTimeout; } return _p; }

inline ns2__ReplayConfiguration * soap_new_set_ns2__ReplayConfiguration(struct soap *soap, const std::string& SessionTimeout, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ReplayConfiguration *_p = soap_instantiate_ns2__ReplayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplayConfiguration::SessionTimeout = SessionTimeout; _p->ns2__ReplayConfiguration::__any = __any; _p->ns2__ReplayConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReplayConfiguration(struct soap *soap, ns2__ReplayConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReplayConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__GetRecordingJobsResponseItem
#define SOAP_TYPE_ns2__GetRecordingJobsResponseItem (643)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetRecordingJobsResponseItem(struct soap*, const char*, int, const ns2__GetRecordingJobsResponseItem *, const char*);
SOAP_FMAC3 ns2__GetRecordingJobsResponseItem * SOAP_FMAC4 soap_in_ns2__GetRecordingJobsResponseItem(struct soap*, const char*, ns2__GetRecordingJobsResponseItem *, const char*);

#ifndef soap_write_ns2__GetRecordingJobsResponseItem
#define soap_write_ns2__GetRecordingJobsResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:GetRecordingJobsResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GetRecordingJobsResponseItem * SOAP_FMAC4 soap_get_ns2__GetRecordingJobsResponseItem(struct soap*, ns2__GetRecordingJobsResponseItem *, const char*, const char*);

#ifndef soap_read_ns2__GetRecordingJobsResponseItem
#define soap_read_ns2__GetRecordingJobsResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__GetRecordingJobsResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__GetRecordingJobsResponseItem * SOAP_FMAC2 soap_instantiate_ns2__GetRecordingJobsResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetRecordingJobsResponseItem * soap_new_ns2__GetRecordingJobsResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_ns2__GetRecordingJobsResponseItem(soap, n, NULL, NULL, NULL); }

inline ns2__GetRecordingJobsResponseItem * soap_new_req_ns2__GetRecordingJobsResponseItem(struct soap *soap, const std::string& JobToken, ns2__RecordingJobConfiguration *JobConfiguration) { ns2__GetRecordingJobsResponseItem *_p = soap_instantiate_ns2__GetRecordingJobsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetRecordingJobsResponseItem::JobToken = JobToken; _p->ns2__GetRecordingJobsResponseItem::JobConfiguration = JobConfiguration; } return _p; }

inline ns2__GetRecordingJobsResponseItem * soap_new_set_ns2__GetRecordingJobsResponseItem(struct soap *soap, const std::string& JobToken, ns2__RecordingJobConfiguration *JobConfiguration, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__GetRecordingJobsResponseItem *_p = soap_instantiate_ns2__GetRecordingJobsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetRecordingJobsResponseItem::JobToken = JobToken; _p->ns2__GetRecordingJobsResponseItem::JobConfiguration = JobConfiguration; _p->ns2__GetRecordingJobsResponseItem::__any = __any; _p->ns2__GetRecordingJobsResponseItem::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__GetRecordingJobsResponseItem(struct soap *soap, ns2__GetRecordingJobsResponseItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__GetRecordingJobsResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobStateTrack
#define SOAP_TYPE_ns2__RecordingJobStateTrack (642)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobStateTrack(struct soap*, const char*, int, const ns2__RecordingJobStateTrack *, const char*);
SOAP_FMAC3 ns2__RecordingJobStateTrack * SOAP_FMAC4 soap_in_ns2__RecordingJobStateTrack(struct soap*, const char*, ns2__RecordingJobStateTrack *, const char*);

#ifndef soap_write_ns2__RecordingJobStateTrack
#define soap_write_ns2__RecordingJobStateTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobStateTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateTrack * SOAP_FMAC4 soap_get_ns2__RecordingJobStateTrack(struct soap*, ns2__RecordingJobStateTrack *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobStateTrack
#define soap_read_ns2__RecordingJobStateTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobStateTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobStateTrack * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobStateTrack * soap_new_ns2__RecordingJobStateTrack(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobStateTrack(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobStateTrack * soap_new_req_ns2__RecordingJobStateTrack(struct soap *soap, const std::string& SourceTag, const std::string& Destination, const std::string& State) { ns2__RecordingJobStateTrack *_p = soap_instantiate_ns2__RecordingJobStateTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateTrack::SourceTag = SourceTag; _p->ns2__RecordingJobStateTrack::Destination = Destination; _p->ns2__RecordingJobStateTrack::State = State; } return _p; }

inline ns2__RecordingJobStateTrack * soap_new_set_ns2__RecordingJobStateTrack(struct soap *soap, const std::string& SourceTag, const std::string& Destination, std::string *Error, const std::string& State, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingJobStateTrack *_p = soap_instantiate_ns2__RecordingJobStateTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateTrack::SourceTag = SourceTag; _p->ns2__RecordingJobStateTrack::Destination = Destination; _p->ns2__RecordingJobStateTrack::Error = Error; _p->ns2__RecordingJobStateTrack::State = State; _p->ns2__RecordingJobStateTrack::__any = __any; _p->ns2__RecordingJobStateTrack::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobStateTrack(struct soap *soap, ns2__RecordingJobStateTrack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobStateTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobStateTracks
#define SOAP_TYPE_ns2__RecordingJobStateTracks (641)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobStateTracks(struct soap*, const char*, int, const ns2__RecordingJobStateTracks *, const char*);
SOAP_FMAC3 ns2__RecordingJobStateTracks * SOAP_FMAC4 soap_in_ns2__RecordingJobStateTracks(struct soap*, const char*, ns2__RecordingJobStateTracks *, const char*);

#ifndef soap_write_ns2__RecordingJobStateTracks
#define soap_write_ns2__RecordingJobStateTracks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobStateTracks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateTracks * SOAP_FMAC4 soap_get_ns2__RecordingJobStateTracks(struct soap*, ns2__RecordingJobStateTracks *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobStateTracks
#define soap_read_ns2__RecordingJobStateTracks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobStateTracks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobStateTracks * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobStateTracks(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobStateTracks * soap_new_ns2__RecordingJobStateTracks(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobStateTracks(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobStateTracks * soap_new_req_ns2__RecordingJobStateTracks(struct soap *soap) { ns2__RecordingJobStateTracks *_p = soap_instantiate_ns2__RecordingJobStateTracks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RecordingJobStateTracks * soap_new_set_ns2__RecordingJobStateTracks(struct soap *soap, const std::vector<ns2__RecordingJobStateTrack * >& Track, char *__anyAttribute, char *__item1) { ns2__RecordingJobStateTracks *_p = soap_instantiate_ns2__RecordingJobStateTracks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateTracks::Track = Track; _p->ns2__RecordingJobStateTracks::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobStateTracks(struct soap *soap, ns2__RecordingJobStateTracks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobStateTracks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobStateSource
#define SOAP_TYPE_ns2__RecordingJobStateSource (640)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobStateSource(struct soap*, const char*, int, const ns2__RecordingJobStateSource *, const char*);
SOAP_FMAC3 ns2__RecordingJobStateSource * SOAP_FMAC4 soap_in_ns2__RecordingJobStateSource(struct soap*, const char*, ns2__RecordingJobStateSource *, const char*);

#ifndef soap_write_ns2__RecordingJobStateSource
#define soap_write_ns2__RecordingJobStateSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobStateSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateSource * SOAP_FMAC4 soap_get_ns2__RecordingJobStateSource(struct soap*, ns2__RecordingJobStateSource *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobStateSource
#define soap_read_ns2__RecordingJobStateSource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobStateSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobStateSource * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobStateSource * soap_new_ns2__RecordingJobStateSource(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobStateSource(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobStateSource * soap_new_req_ns2__RecordingJobStateSource(struct soap *soap, ns2__SourceReference *SourceToken, const std::string& State, ns2__RecordingJobStateTracks *Tracks) { ns2__RecordingJobStateSource *_p = soap_instantiate_ns2__RecordingJobStateSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateSource::SourceToken = SourceToken; _p->ns2__RecordingJobStateSource::State = State; _p->ns2__RecordingJobStateSource::Tracks = Tracks; } return _p; }

inline ns2__RecordingJobStateSource * soap_new_set_ns2__RecordingJobStateSource(struct soap *soap, ns2__SourceReference *SourceToken, const std::string& State, ns2__RecordingJobStateTracks *Tracks, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingJobStateSource *_p = soap_instantiate_ns2__RecordingJobStateSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateSource::SourceToken = SourceToken; _p->ns2__RecordingJobStateSource::State = State; _p->ns2__RecordingJobStateSource::Tracks = Tracks; _p->ns2__RecordingJobStateSource::__any = __any; _p->ns2__RecordingJobStateSource::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobStateSource(struct soap *soap, ns2__RecordingJobStateSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobStateSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobStateInformationExtension
#define SOAP_TYPE_ns2__RecordingJobStateInformationExtension (639)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobStateInformationExtension(struct soap*, const char*, int, const ns2__RecordingJobStateInformationExtension *, const char*);
SOAP_FMAC3 ns2__RecordingJobStateInformationExtension * SOAP_FMAC4 soap_in_ns2__RecordingJobStateInformationExtension(struct soap*, const char*, ns2__RecordingJobStateInformationExtension *, const char*);

#ifndef soap_write_ns2__RecordingJobStateInformationExtension
#define soap_write_ns2__RecordingJobStateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobStateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateInformationExtension * SOAP_FMAC4 soap_get_ns2__RecordingJobStateInformationExtension(struct soap*, ns2__RecordingJobStateInformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobStateInformationExtension
#define soap_read_ns2__RecordingJobStateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobStateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobStateInformationExtension * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobStateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobStateInformationExtension * soap_new_ns2__RecordingJobStateInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobStateInformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobStateInformationExtension * soap_new_req_ns2__RecordingJobStateInformationExtension(struct soap *soap) { ns2__RecordingJobStateInformationExtension *_p = soap_instantiate_ns2__RecordingJobStateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RecordingJobStateInformationExtension * soap_new_set_ns2__RecordingJobStateInformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RecordingJobStateInformationExtension *_p = soap_instantiate_ns2__RecordingJobStateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobStateInformationExtension(struct soap *soap, ns2__RecordingJobStateInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobStateInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobStateInformation
#define SOAP_TYPE_ns2__RecordingJobStateInformation (638)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobStateInformation(struct soap*, const char*, int, const ns2__RecordingJobStateInformation *, const char*);
SOAP_FMAC3 ns2__RecordingJobStateInformation * SOAP_FMAC4 soap_in_ns2__RecordingJobStateInformation(struct soap*, const char*, ns2__RecordingJobStateInformation *, const char*);

#ifndef soap_write_ns2__RecordingJobStateInformation
#define soap_write_ns2__RecordingJobStateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobStateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateInformation * SOAP_FMAC4 soap_get_ns2__RecordingJobStateInformation(struct soap*, ns2__RecordingJobStateInformation *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobStateInformation
#define soap_read_ns2__RecordingJobStateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobStateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobStateInformation * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobStateInformation * soap_new_ns2__RecordingJobStateInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobStateInformation(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobStateInformation * soap_new_req_ns2__RecordingJobStateInformation(struct soap *soap, const std::string& RecordingToken, const std::string& State) { ns2__RecordingJobStateInformation *_p = soap_instantiate_ns2__RecordingJobStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateInformation::RecordingToken = RecordingToken; _p->ns2__RecordingJobStateInformation::State = State; } return _p; }

inline ns2__RecordingJobStateInformation * soap_new_set_ns2__RecordingJobStateInformation(struct soap *soap, const std::string& RecordingToken, const std::string& State, const std::vector<ns2__RecordingJobStateSource * >& Sources, ns2__RecordingJobStateInformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__RecordingJobStateInformation *_p = soap_instantiate_ns2__RecordingJobStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobStateInformation::RecordingToken = RecordingToken; _p->ns2__RecordingJobStateInformation::State = State; _p->ns2__RecordingJobStateInformation::Sources = Sources; _p->ns2__RecordingJobStateInformation::Extension = Extension; _p->ns2__RecordingJobStateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobStateInformation(struct soap *soap, ns2__RecordingJobStateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobStateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobTrack
#define SOAP_TYPE_ns2__RecordingJobTrack (637)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobTrack(struct soap*, const char*, int, const ns2__RecordingJobTrack *, const char*);
SOAP_FMAC3 ns2__RecordingJobTrack * SOAP_FMAC4 soap_in_ns2__RecordingJobTrack(struct soap*, const char*, ns2__RecordingJobTrack *, const char*);

#ifndef soap_write_ns2__RecordingJobTrack
#define soap_write_ns2__RecordingJobTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobTrack * SOAP_FMAC4 soap_get_ns2__RecordingJobTrack(struct soap*, ns2__RecordingJobTrack *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobTrack
#define soap_read_ns2__RecordingJobTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobTrack * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobTrack * soap_new_ns2__RecordingJobTrack(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobTrack(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobTrack * soap_new_req_ns2__RecordingJobTrack(struct soap *soap, const std::string& SourceTag, const std::string& Destination) { ns2__RecordingJobTrack *_p = soap_instantiate_ns2__RecordingJobTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobTrack::SourceTag = SourceTag; _p->ns2__RecordingJobTrack::Destination = Destination; } return _p; }

inline ns2__RecordingJobTrack * soap_new_set_ns2__RecordingJobTrack(struct soap *soap, const std::string& SourceTag, const std::string& Destination, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingJobTrack *_p = soap_instantiate_ns2__RecordingJobTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobTrack::SourceTag = SourceTag; _p->ns2__RecordingJobTrack::Destination = Destination; _p->ns2__RecordingJobTrack::__any = __any; _p->ns2__RecordingJobTrack::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobTrack(struct soap *soap, ns2__RecordingJobTrack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobSourceExtension
#define SOAP_TYPE_ns2__RecordingJobSourceExtension (636)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobSourceExtension(struct soap*, const char*, int, const ns2__RecordingJobSourceExtension *, const char*);
SOAP_FMAC3 ns2__RecordingJobSourceExtension * SOAP_FMAC4 soap_in_ns2__RecordingJobSourceExtension(struct soap*, const char*, ns2__RecordingJobSourceExtension *, const char*);

#ifndef soap_write_ns2__RecordingJobSourceExtension
#define soap_write_ns2__RecordingJobSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobSourceExtension * SOAP_FMAC4 soap_get_ns2__RecordingJobSourceExtension(struct soap*, ns2__RecordingJobSourceExtension *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobSourceExtension
#define soap_read_ns2__RecordingJobSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobSourceExtension * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobSourceExtension * soap_new_ns2__RecordingJobSourceExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobSourceExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobSourceExtension * soap_new_req_ns2__RecordingJobSourceExtension(struct soap *soap) { ns2__RecordingJobSourceExtension *_p = soap_instantiate_ns2__RecordingJobSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RecordingJobSourceExtension * soap_new_set_ns2__RecordingJobSourceExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RecordingJobSourceExtension *_p = soap_instantiate_ns2__RecordingJobSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobSourceExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobSourceExtension(struct soap *soap, ns2__RecordingJobSourceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobSourceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobSource
#define SOAP_TYPE_ns2__RecordingJobSource (635)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobSource(struct soap*, const char*, int, const ns2__RecordingJobSource *, const char*);
SOAP_FMAC3 ns2__RecordingJobSource * SOAP_FMAC4 soap_in_ns2__RecordingJobSource(struct soap*, const char*, ns2__RecordingJobSource *, const char*);

#ifndef soap_write_ns2__RecordingJobSource
#define soap_write_ns2__RecordingJobSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobSource * SOAP_FMAC4 soap_get_ns2__RecordingJobSource(struct soap*, ns2__RecordingJobSource *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobSource
#define soap_read_ns2__RecordingJobSource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobSource * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobSource * soap_new_ns2__RecordingJobSource(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobSource(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobSource * soap_new_req_ns2__RecordingJobSource(struct soap *soap) { ns2__RecordingJobSource *_p = soap_instantiate_ns2__RecordingJobSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RecordingJobSource * soap_new_set_ns2__RecordingJobSource(struct soap *soap, ns2__SourceReference *SourceToken, bool *AutoCreateReceiver, const std::vector<ns2__RecordingJobTrack * >& Tracks, ns2__RecordingJobSourceExtension *Extension, char *__anyAttribute, char *__item1) { ns2__RecordingJobSource *_p = soap_instantiate_ns2__RecordingJobSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobSource::SourceToken = SourceToken; _p->ns2__RecordingJobSource::AutoCreateReceiver = AutoCreateReceiver; _p->ns2__RecordingJobSource::Tracks = Tracks; _p->ns2__RecordingJobSource::Extension = Extension; _p->ns2__RecordingJobSource::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobSource(struct soap *soap, ns2__RecordingJobSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobConfigurationExtension
#define SOAP_TYPE_ns2__RecordingJobConfigurationExtension (634)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobConfigurationExtension(struct soap*, const char*, int, const ns2__RecordingJobConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__RecordingJobConfigurationExtension * SOAP_FMAC4 soap_in_ns2__RecordingJobConfigurationExtension(struct soap*, const char*, ns2__RecordingJobConfigurationExtension *, const char*);

#ifndef soap_write_ns2__RecordingJobConfigurationExtension
#define soap_write_ns2__RecordingJobConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobConfigurationExtension * SOAP_FMAC4 soap_get_ns2__RecordingJobConfigurationExtension(struct soap*, ns2__RecordingJobConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobConfigurationExtension
#define soap_read_ns2__RecordingJobConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobConfigurationExtension * soap_new_ns2__RecordingJobConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobConfigurationExtension * soap_new_req_ns2__RecordingJobConfigurationExtension(struct soap *soap) { ns2__RecordingJobConfigurationExtension *_p = soap_instantiate_ns2__RecordingJobConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RecordingJobConfigurationExtension * soap_new_set_ns2__RecordingJobConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RecordingJobConfigurationExtension *_p = soap_instantiate_ns2__RecordingJobConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobConfigurationExtension(struct soap *soap, ns2__RecordingJobConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingJobConfiguration
#define SOAP_TYPE_ns2__RecordingJobConfiguration (633)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingJobConfiguration(struct soap*, const char*, int, const ns2__RecordingJobConfiguration *, const char*);
SOAP_FMAC3 ns2__RecordingJobConfiguration * SOAP_FMAC4 soap_in_ns2__RecordingJobConfiguration(struct soap*, const char*, ns2__RecordingJobConfiguration *, const char*);

#ifndef soap_write_ns2__RecordingJobConfiguration
#define soap_write_ns2__RecordingJobConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingJobConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobConfiguration * SOAP_FMAC4 soap_get_ns2__RecordingJobConfiguration(struct soap*, ns2__RecordingJobConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__RecordingJobConfiguration
#define soap_read_ns2__RecordingJobConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingJobConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingJobConfiguration * SOAP_FMAC2 soap_instantiate_ns2__RecordingJobConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingJobConfiguration * soap_new_ns2__RecordingJobConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingJobConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingJobConfiguration * soap_new_req_ns2__RecordingJobConfiguration(struct soap *soap, const std::string& RecordingToken, const std::string& Mode, int Priority) { ns2__RecordingJobConfiguration *_p = soap_instantiate_ns2__RecordingJobConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobConfiguration::RecordingToken = RecordingToken; _p->ns2__RecordingJobConfiguration::Mode = Mode; _p->ns2__RecordingJobConfiguration::Priority = Priority; } return _p; }

inline ns2__RecordingJobConfiguration * soap_new_set_ns2__RecordingJobConfiguration(struct soap *soap, const std::string& RecordingToken, const std::string& Mode, int Priority, const std::vector<ns2__RecordingJobSource * >& Source, ns2__RecordingJobConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__RecordingJobConfiguration *_p = soap_instantiate_ns2__RecordingJobConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingJobConfiguration::RecordingToken = RecordingToken; _p->ns2__RecordingJobConfiguration::Mode = Mode; _p->ns2__RecordingJobConfiguration::Priority = Priority; _p->ns2__RecordingJobConfiguration::Source = Source; _p->ns2__RecordingJobConfiguration::Extension = Extension; _p->ns2__RecordingJobConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingJobConfiguration(struct soap *soap, ns2__RecordingJobConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingJobConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__GetTracksResponseItem
#define SOAP_TYPE_ns2__GetTracksResponseItem (632)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetTracksResponseItem(struct soap*, const char*, int, const ns2__GetTracksResponseItem *, const char*);
SOAP_FMAC3 ns2__GetTracksResponseItem * SOAP_FMAC4 soap_in_ns2__GetTracksResponseItem(struct soap*, const char*, ns2__GetTracksResponseItem *, const char*);

#ifndef soap_write_ns2__GetTracksResponseItem
#define soap_write_ns2__GetTracksResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:GetTracksResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GetTracksResponseItem * SOAP_FMAC4 soap_get_ns2__GetTracksResponseItem(struct soap*, ns2__GetTracksResponseItem *, const char*, const char*);

#ifndef soap_read_ns2__GetTracksResponseItem
#define soap_read_ns2__GetTracksResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__GetTracksResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__GetTracksResponseItem * SOAP_FMAC2 soap_instantiate_ns2__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetTracksResponseItem * soap_new_ns2__GetTracksResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_ns2__GetTracksResponseItem(soap, n, NULL, NULL, NULL); }

inline ns2__GetTracksResponseItem * soap_new_req_ns2__GetTracksResponseItem(struct soap *soap, const std::string& TrackToken, ns2__TrackConfiguration *Configuration) { ns2__GetTracksResponseItem *_p = soap_instantiate_ns2__GetTracksResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetTracksResponseItem::TrackToken = TrackToken; _p->ns2__GetTracksResponseItem::Configuration = Configuration; } return _p; }

inline ns2__GetTracksResponseItem * soap_new_set_ns2__GetTracksResponseItem(struct soap *soap, const std::string& TrackToken, ns2__TrackConfiguration *Configuration, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__GetTracksResponseItem *_p = soap_instantiate_ns2__GetTracksResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetTracksResponseItem::TrackToken = TrackToken; _p->ns2__GetTracksResponseItem::Configuration = Configuration; _p->ns2__GetTracksResponseItem::__any = __any; _p->ns2__GetTracksResponseItem::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__GetTracksResponseItem(struct soap *soap, ns2__GetTracksResponseItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__GetTracksResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__GetTracksResponseList
#define SOAP_TYPE_ns2__GetTracksResponseList (631)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetTracksResponseList(struct soap*, const char*, int, const ns2__GetTracksResponseList *, const char*);
SOAP_FMAC3 ns2__GetTracksResponseList * SOAP_FMAC4 soap_in_ns2__GetTracksResponseList(struct soap*, const char*, ns2__GetTracksResponseList *, const char*);

#ifndef soap_write_ns2__GetTracksResponseList
#define soap_write_ns2__GetTracksResponseList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:GetTracksResponseList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GetTracksResponseList * SOAP_FMAC4 soap_get_ns2__GetTracksResponseList(struct soap*, ns2__GetTracksResponseList *, const char*, const char*);

#ifndef soap_read_ns2__GetTracksResponseList
#define soap_read_ns2__GetTracksResponseList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__GetTracksResponseList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__GetTracksResponseList * SOAP_FMAC2 soap_instantiate_ns2__GetTracksResponseList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetTracksResponseList * soap_new_ns2__GetTracksResponseList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__GetTracksResponseList(soap, n, NULL, NULL, NULL); }

inline ns2__GetTracksResponseList * soap_new_req_ns2__GetTracksResponseList(struct soap *soap) { ns2__GetTracksResponseList *_p = soap_instantiate_ns2__GetTracksResponseList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__GetTracksResponseList * soap_new_set_ns2__GetTracksResponseList(struct soap *soap, const std::vector<ns2__GetTracksResponseItem * >& Track, char *__anyAttribute, char *__item1) { ns2__GetTracksResponseList *_p = soap_instantiate_ns2__GetTracksResponseList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetTracksResponseList::Track = Track; _p->ns2__GetTracksResponseList::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__GetTracksResponseList(struct soap *soap, ns2__GetTracksResponseList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__GetTracksResponseList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__GetRecordingsResponseItem
#define SOAP_TYPE_ns2__GetRecordingsResponseItem (630)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GetRecordingsResponseItem(struct soap*, const char*, int, const ns2__GetRecordingsResponseItem *, const char*);
SOAP_FMAC3 ns2__GetRecordingsResponseItem * SOAP_FMAC4 soap_in_ns2__GetRecordingsResponseItem(struct soap*, const char*, ns2__GetRecordingsResponseItem *, const char*);

#ifndef soap_write_ns2__GetRecordingsResponseItem
#define soap_write_ns2__GetRecordingsResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:GetRecordingsResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GetRecordingsResponseItem * SOAP_FMAC4 soap_get_ns2__GetRecordingsResponseItem(struct soap*, ns2__GetRecordingsResponseItem *, const char*, const char*);

#ifndef soap_read_ns2__GetRecordingsResponseItem
#define soap_read_ns2__GetRecordingsResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__GetRecordingsResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__GetRecordingsResponseItem * SOAP_FMAC2 soap_instantiate_ns2__GetRecordingsResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GetRecordingsResponseItem * soap_new_ns2__GetRecordingsResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_ns2__GetRecordingsResponseItem(soap, n, NULL, NULL, NULL); }

inline ns2__GetRecordingsResponseItem * soap_new_req_ns2__GetRecordingsResponseItem(struct soap *soap, const std::string& RecordingToken, ns2__RecordingConfiguration *Configuration, ns2__GetTracksResponseList *Tracks) { ns2__GetRecordingsResponseItem *_p = soap_instantiate_ns2__GetRecordingsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetRecordingsResponseItem::RecordingToken = RecordingToken; _p->ns2__GetRecordingsResponseItem::Configuration = Configuration; _p->ns2__GetRecordingsResponseItem::Tracks = Tracks; } return _p; }

inline ns2__GetRecordingsResponseItem * soap_new_set_ns2__GetRecordingsResponseItem(struct soap *soap, const std::string& RecordingToken, ns2__RecordingConfiguration *Configuration, ns2__GetTracksResponseList *Tracks, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__GetRecordingsResponseItem *_p = soap_instantiate_ns2__GetRecordingsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GetRecordingsResponseItem::RecordingToken = RecordingToken; _p->ns2__GetRecordingsResponseItem::Configuration = Configuration; _p->ns2__GetRecordingsResponseItem::Tracks = Tracks; _p->ns2__GetRecordingsResponseItem::__any = __any; _p->ns2__GetRecordingsResponseItem::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__GetRecordingsResponseItem(struct soap *soap, ns2__GetRecordingsResponseItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__GetRecordingsResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TrackConfiguration
#define SOAP_TYPE_ns2__TrackConfiguration (629)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackConfiguration(struct soap*, const char*, int, const ns2__TrackConfiguration *, const char*);
SOAP_FMAC3 ns2__TrackConfiguration * SOAP_FMAC4 soap_in_ns2__TrackConfiguration(struct soap*, const char*, ns2__TrackConfiguration *, const char*);

#ifndef soap_write_ns2__TrackConfiguration
#define soap_write_ns2__TrackConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TrackConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackConfiguration * SOAP_FMAC4 soap_get_ns2__TrackConfiguration(struct soap*, ns2__TrackConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__TrackConfiguration
#define soap_read_ns2__TrackConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TrackConfiguration * SOAP_FMAC2 soap_instantiate_ns2__TrackConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TrackConfiguration * soap_new_ns2__TrackConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TrackConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__TrackConfiguration * soap_new_req_ns2__TrackConfiguration(struct soap *soap, enum ns2__TrackType TrackType, const std::string& Description) { ns2__TrackConfiguration *_p = soap_instantiate_ns2__TrackConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackConfiguration::TrackType = TrackType; _p->ns2__TrackConfiguration::Description = Description; } return _p; }

inline ns2__TrackConfiguration * soap_new_set_ns2__TrackConfiguration(struct soap *soap, enum ns2__TrackType TrackType, const std::string& Description, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__TrackConfiguration *_p = soap_instantiate_ns2__TrackConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackConfiguration::TrackType = TrackType; _p->ns2__TrackConfiguration::Description = Description; _p->ns2__TrackConfiguration::__any = __any; _p->ns2__TrackConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TrackConfiguration(struct soap *soap, ns2__TrackConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TrackConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingConfiguration
#define SOAP_TYPE_ns2__RecordingConfiguration (628)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingConfiguration(struct soap*, const char*, int, const ns2__RecordingConfiguration *, const char*);
SOAP_FMAC3 ns2__RecordingConfiguration * SOAP_FMAC4 soap_in_ns2__RecordingConfiguration(struct soap*, const char*, ns2__RecordingConfiguration *, const char*);

#ifndef soap_write_ns2__RecordingConfiguration
#define soap_write_ns2__RecordingConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingConfiguration * SOAP_FMAC4 soap_get_ns2__RecordingConfiguration(struct soap*, ns2__RecordingConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__RecordingConfiguration
#define soap_read_ns2__RecordingConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingConfiguration * SOAP_FMAC2 soap_instantiate_ns2__RecordingConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingConfiguration * soap_new_ns2__RecordingConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingConfiguration * soap_new_req_ns2__RecordingConfiguration(struct soap *soap, ns2__RecordingSourceInformation *Source, const std::string& Content, const std::string& MaximumRetentionTime) { ns2__RecordingConfiguration *_p = soap_instantiate_ns2__RecordingConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingConfiguration::Source = Source; _p->ns2__RecordingConfiguration::Content = Content; _p->ns2__RecordingConfiguration::MaximumRetentionTime = MaximumRetentionTime; } return _p; }

inline ns2__RecordingConfiguration * soap_new_set_ns2__RecordingConfiguration(struct soap *soap, ns2__RecordingSourceInformation *Source, const std::string& Content, const std::string& MaximumRetentionTime, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingConfiguration *_p = soap_instantiate_ns2__RecordingConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingConfiguration::Source = Source; _p->ns2__RecordingConfiguration::Content = Content; _p->ns2__RecordingConfiguration::MaximumRetentionTime = MaximumRetentionTime; _p->ns2__RecordingConfiguration::__any = __any; _p->ns2__RecordingConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingConfiguration(struct soap *soap, ns2__RecordingConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataAttributes
#define SOAP_TYPE_ns2__MetadataAttributes (627)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataAttributes(struct soap*, const char*, int, const ns2__MetadataAttributes *, const char*);
SOAP_FMAC3 ns2__MetadataAttributes * SOAP_FMAC4 soap_in_ns2__MetadataAttributes(struct soap*, const char*, ns2__MetadataAttributes *, const char*);

#ifndef soap_write_ns2__MetadataAttributes
#define soap_write_ns2__MetadataAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataAttributes * SOAP_FMAC4 soap_get_ns2__MetadataAttributes(struct soap*, ns2__MetadataAttributes *, const char*, const char*);

#ifndef soap_read_ns2__MetadataAttributes
#define soap_read_ns2__MetadataAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataAttributes * SOAP_FMAC2 soap_instantiate_ns2__MetadataAttributes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataAttributes * soap_new_ns2__MetadataAttributes(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataAttributes(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataAttributes * soap_new_req_ns2__MetadataAttributes(struct soap *soap, bool CanContainPTZ, bool CanContainAnalytics, bool CanContainNotifications) { ns2__MetadataAttributes *_p = soap_instantiate_ns2__MetadataAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataAttributes::CanContainPTZ = CanContainPTZ; _p->ns2__MetadataAttributes::CanContainAnalytics = CanContainAnalytics; _p->ns2__MetadataAttributes::CanContainNotifications = CanContainNotifications; } return _p; }

inline ns2__MetadataAttributes * soap_new_set_ns2__MetadataAttributes(struct soap *soap, bool CanContainPTZ, bool CanContainAnalytics, bool CanContainNotifications, const std::vector<char * >& __any, std::string *PtzSpaces, char *__anyAttribute, char *__item1) { ns2__MetadataAttributes *_p = soap_instantiate_ns2__MetadataAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataAttributes::CanContainPTZ = CanContainPTZ; _p->ns2__MetadataAttributes::CanContainAnalytics = CanContainAnalytics; _p->ns2__MetadataAttributes::CanContainNotifications = CanContainNotifications; _p->ns2__MetadataAttributes::__any = __any; _p->ns2__MetadataAttributes::PtzSpaces = PtzSpaces; _p->ns2__MetadataAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataAttributes(struct soap *soap, ns2__MetadataAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioAttributes
#define SOAP_TYPE_ns2__AudioAttributes (626)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioAttributes(struct soap*, const char*, int, const ns2__AudioAttributes *, const char*);
SOAP_FMAC3 ns2__AudioAttributes * SOAP_FMAC4 soap_in_ns2__AudioAttributes(struct soap*, const char*, ns2__AudioAttributes *, const char*);

#ifndef soap_write_ns2__AudioAttributes
#define soap_write_ns2__AudioAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioAttributes * SOAP_FMAC4 soap_get_ns2__AudioAttributes(struct soap*, ns2__AudioAttributes *, const char*, const char*);

#ifndef soap_read_ns2__AudioAttributes
#define soap_read_ns2__AudioAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioAttributes * SOAP_FMAC2 soap_instantiate_ns2__AudioAttributes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioAttributes * soap_new_ns2__AudioAttributes(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioAttributes(soap, n, NULL, NULL, NULL); }

inline ns2__AudioAttributes * soap_new_req_ns2__AudioAttributes(struct soap *soap, enum ns2__AudioEncoding Encoding, int Samplerate) { ns2__AudioAttributes *_p = soap_instantiate_ns2__AudioAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioAttributes::Encoding = Encoding; _p->ns2__AudioAttributes::Samplerate = Samplerate; } return _p; }

inline ns2__AudioAttributes * soap_new_set_ns2__AudioAttributes(struct soap *soap, int *Bitrate, enum ns2__AudioEncoding Encoding, int Samplerate, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AudioAttributes *_p = soap_instantiate_ns2__AudioAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioAttributes::Bitrate = Bitrate; _p->ns2__AudioAttributes::Encoding = Encoding; _p->ns2__AudioAttributes::Samplerate = Samplerate; _p->ns2__AudioAttributes::__any = __any; _p->ns2__AudioAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioAttributes(struct soap *soap, ns2__AudioAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoAttributes
#define SOAP_TYPE_ns2__VideoAttributes (625)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoAttributes(struct soap*, const char*, int, const ns2__VideoAttributes *, const char*);
SOAP_FMAC3 ns2__VideoAttributes * SOAP_FMAC4 soap_in_ns2__VideoAttributes(struct soap*, const char*, ns2__VideoAttributes *, const char*);

#ifndef soap_write_ns2__VideoAttributes
#define soap_write_ns2__VideoAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAttributes * SOAP_FMAC4 soap_get_ns2__VideoAttributes(struct soap*, ns2__VideoAttributes *, const char*, const char*);

#ifndef soap_read_ns2__VideoAttributes
#define soap_read_ns2__VideoAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoAttributes * SOAP_FMAC2 soap_instantiate_ns2__VideoAttributes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoAttributes * soap_new_ns2__VideoAttributes(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoAttributes(soap, n, NULL, NULL, NULL); }

inline ns2__VideoAttributes * soap_new_req_ns2__VideoAttributes(struct soap *soap, int Width, int Height, enum ns2__VideoEncoding Encoding, float Framerate) { ns2__VideoAttributes *_p = soap_instantiate_ns2__VideoAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAttributes::Width = Width; _p->ns2__VideoAttributes::Height = Height; _p->ns2__VideoAttributes::Encoding = Encoding; _p->ns2__VideoAttributes::Framerate = Framerate; } return _p; }

inline ns2__VideoAttributes * soap_new_set_ns2__VideoAttributes(struct soap *soap, int *Bitrate, int Width, int Height, enum ns2__VideoEncoding Encoding, float Framerate, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__VideoAttributes *_p = soap_instantiate_ns2__VideoAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAttributes::Bitrate = Bitrate; _p->ns2__VideoAttributes::Width = Width; _p->ns2__VideoAttributes::Height = Height; _p->ns2__VideoAttributes::Encoding = Encoding; _p->ns2__VideoAttributes::Framerate = Framerate; _p->ns2__VideoAttributes::__any = __any; _p->ns2__VideoAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoAttributes(struct soap *soap, ns2__VideoAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TrackAttributesExtension
#define SOAP_TYPE_ns2__TrackAttributesExtension (624)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackAttributesExtension(struct soap*, const char*, int, const ns2__TrackAttributesExtension *, const char*);
SOAP_FMAC3 ns2__TrackAttributesExtension * SOAP_FMAC4 soap_in_ns2__TrackAttributesExtension(struct soap*, const char*, ns2__TrackAttributesExtension *, const char*);

#ifndef soap_write_ns2__TrackAttributesExtension
#define soap_write_ns2__TrackAttributesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TrackAttributesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackAttributesExtension * SOAP_FMAC4 soap_get_ns2__TrackAttributesExtension(struct soap*, ns2__TrackAttributesExtension *, const char*, const char*);

#ifndef soap_read_ns2__TrackAttributesExtension
#define soap_read_ns2__TrackAttributesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackAttributesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TrackAttributesExtension * SOAP_FMAC2 soap_instantiate_ns2__TrackAttributesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TrackAttributesExtension * soap_new_ns2__TrackAttributesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TrackAttributesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__TrackAttributesExtension * soap_new_req_ns2__TrackAttributesExtension(struct soap *soap) { ns2__TrackAttributesExtension *_p = soap_instantiate_ns2__TrackAttributesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__TrackAttributesExtension * soap_new_set_ns2__TrackAttributesExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__TrackAttributesExtension *_p = soap_instantiate_ns2__TrackAttributesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackAttributesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TrackAttributesExtension(struct soap *soap, ns2__TrackAttributesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TrackAttributesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TrackAttributes
#define SOAP_TYPE_ns2__TrackAttributes (623)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackAttributes(struct soap*, const char*, int, const ns2__TrackAttributes *, const char*);
SOAP_FMAC3 ns2__TrackAttributes * SOAP_FMAC4 soap_in_ns2__TrackAttributes(struct soap*, const char*, ns2__TrackAttributes *, const char*);

#ifndef soap_write_ns2__TrackAttributes
#define soap_write_ns2__TrackAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TrackAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackAttributes * SOAP_FMAC4 soap_get_ns2__TrackAttributes(struct soap*, ns2__TrackAttributes *, const char*, const char*);

#ifndef soap_read_ns2__TrackAttributes
#define soap_read_ns2__TrackAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TrackAttributes * SOAP_FMAC2 soap_instantiate_ns2__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TrackAttributes * soap_new_ns2__TrackAttributes(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TrackAttributes(soap, n, NULL, NULL, NULL); }

inline ns2__TrackAttributes * soap_new_req_ns2__TrackAttributes(struct soap *soap, ns2__TrackInformation *TrackInformation) { ns2__TrackAttributes *_p = soap_instantiate_ns2__TrackAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackAttributes::TrackInformation = TrackInformation; } return _p; }

inline ns2__TrackAttributes * soap_new_set_ns2__TrackAttributes(struct soap *soap, ns2__TrackInformation *TrackInformation, ns2__VideoAttributes *VideoAttributes, ns2__AudioAttributes *AudioAttributes, ns2__MetadataAttributes *MetadataAttributes, ns2__TrackAttributesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__TrackAttributes *_p = soap_instantiate_ns2__TrackAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackAttributes::TrackInformation = TrackInformation; _p->ns2__TrackAttributes::VideoAttributes = VideoAttributes; _p->ns2__TrackAttributes::AudioAttributes = AudioAttributes; _p->ns2__TrackAttributes::MetadataAttributes = MetadataAttributes; _p->ns2__TrackAttributes::Extension = Extension; _p->ns2__TrackAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TrackAttributes(struct soap *soap, ns2__TrackAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TrackAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MediaAttributes
#define SOAP_TYPE_ns2__MediaAttributes (622)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MediaAttributes(struct soap*, const char*, int, const ns2__MediaAttributes *, const char*);
SOAP_FMAC3 ns2__MediaAttributes * SOAP_FMAC4 soap_in_ns2__MediaAttributes(struct soap*, const char*, ns2__MediaAttributes *, const char*);

#ifndef soap_write_ns2__MediaAttributes
#define soap_write_ns2__MediaAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MediaAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaAttributes * SOAP_FMAC4 soap_get_ns2__MediaAttributes(struct soap*, ns2__MediaAttributes *, const char*, const char*);

#ifndef soap_read_ns2__MediaAttributes
#define soap_read_ns2__MediaAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MediaAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MediaAttributes * SOAP_FMAC2 soap_instantiate_ns2__MediaAttributes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MediaAttributes * soap_new_ns2__MediaAttributes(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MediaAttributes(soap, n, NULL, NULL, NULL); }

inline ns2__MediaAttributes * soap_new_req_ns2__MediaAttributes(struct soap *soap, const std::string& RecordingToken, time_t From, time_t Until) { ns2__MediaAttributes *_p = soap_instantiate_ns2__MediaAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaAttributes::RecordingToken = RecordingToken; _p->ns2__MediaAttributes::From = From; _p->ns2__MediaAttributes::Until = Until; } return _p; }

inline ns2__MediaAttributes * soap_new_set_ns2__MediaAttributes(struct soap *soap, const std::string& RecordingToken, const std::vector<ns2__TrackAttributes * >& TrackAttributes, time_t From, time_t Until, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MediaAttributes *_p = soap_instantiate_ns2__MediaAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaAttributes::RecordingToken = RecordingToken; _p->ns2__MediaAttributes::TrackAttributes = TrackAttributes; _p->ns2__MediaAttributes::From = From; _p->ns2__MediaAttributes::Until = Until; _p->ns2__MediaAttributes::__any = __any; _p->ns2__MediaAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MediaAttributes(struct soap *soap, ns2__MediaAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MediaAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TrackInformation
#define SOAP_TYPE_ns2__TrackInformation (621)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TrackInformation(struct soap*, const char*, int, const ns2__TrackInformation *, const char*);
SOAP_FMAC3 ns2__TrackInformation * SOAP_FMAC4 soap_in_ns2__TrackInformation(struct soap*, const char*, ns2__TrackInformation *, const char*);

#ifndef soap_write_ns2__TrackInformation
#define soap_write_ns2__TrackInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TrackInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackInformation * SOAP_FMAC4 soap_get_ns2__TrackInformation(struct soap*, ns2__TrackInformation *, const char*, const char*);

#ifndef soap_read_ns2__TrackInformation
#define soap_read_ns2__TrackInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TrackInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TrackInformation * SOAP_FMAC2 soap_instantiate_ns2__TrackInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TrackInformation * soap_new_ns2__TrackInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TrackInformation(soap, n, NULL, NULL, NULL); }

inline ns2__TrackInformation * soap_new_req_ns2__TrackInformation(struct soap *soap, const std::string& TrackToken, enum ns2__TrackType TrackType, const std::string& Description, time_t DataFrom, time_t DataTo) { ns2__TrackInformation *_p = soap_instantiate_ns2__TrackInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackInformation::TrackToken = TrackToken; _p->ns2__TrackInformation::TrackType = TrackType; _p->ns2__TrackInformation::Description = Description; _p->ns2__TrackInformation::DataFrom = DataFrom; _p->ns2__TrackInformation::DataTo = DataTo; } return _p; }

inline ns2__TrackInformation * soap_new_set_ns2__TrackInformation(struct soap *soap, const std::string& TrackToken, enum ns2__TrackType TrackType, const std::string& Description, time_t DataFrom, time_t DataTo, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__TrackInformation *_p = soap_instantiate_ns2__TrackInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TrackInformation::TrackToken = TrackToken; _p->ns2__TrackInformation::TrackType = TrackType; _p->ns2__TrackInformation::Description = Description; _p->ns2__TrackInformation::DataFrom = DataFrom; _p->ns2__TrackInformation::DataTo = DataTo; _p->ns2__TrackInformation::__any = __any; _p->ns2__TrackInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TrackInformation(struct soap *soap, ns2__TrackInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TrackInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingSourceInformation
#define SOAP_TYPE_ns2__RecordingSourceInformation (620)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingSourceInformation(struct soap*, const char*, int, const ns2__RecordingSourceInformation *, const char*);
SOAP_FMAC3 ns2__RecordingSourceInformation * SOAP_FMAC4 soap_in_ns2__RecordingSourceInformation(struct soap*, const char*, ns2__RecordingSourceInformation *, const char*);

#ifndef soap_write_ns2__RecordingSourceInformation
#define soap_write_ns2__RecordingSourceInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingSourceInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingSourceInformation * SOAP_FMAC4 soap_get_ns2__RecordingSourceInformation(struct soap*, ns2__RecordingSourceInformation *, const char*, const char*);

#ifndef soap_read_ns2__RecordingSourceInformation
#define soap_read_ns2__RecordingSourceInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingSourceInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingSourceInformation * SOAP_FMAC2 soap_instantiate_ns2__RecordingSourceInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingSourceInformation * soap_new_ns2__RecordingSourceInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingSourceInformation(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingSourceInformation * soap_new_req_ns2__RecordingSourceInformation(struct soap *soap, const std::string& SourceId, const std::string& Name, const std::string& Location, const std::string& Description, const std::string& Address) { ns2__RecordingSourceInformation *_p = soap_instantiate_ns2__RecordingSourceInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingSourceInformation::SourceId = SourceId; _p->ns2__RecordingSourceInformation::Name = Name; _p->ns2__RecordingSourceInformation::Location = Location; _p->ns2__RecordingSourceInformation::Description = Description; _p->ns2__RecordingSourceInformation::Address = Address; } return _p; }

inline ns2__RecordingSourceInformation * soap_new_set_ns2__RecordingSourceInformation(struct soap *soap, const std::string& SourceId, const std::string& Name, const std::string& Location, const std::string& Description, const std::string& Address, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingSourceInformation *_p = soap_instantiate_ns2__RecordingSourceInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingSourceInformation::SourceId = SourceId; _p->ns2__RecordingSourceInformation::Name = Name; _p->ns2__RecordingSourceInformation::Location = Location; _p->ns2__RecordingSourceInformation::Description = Description; _p->ns2__RecordingSourceInformation::Address = Address; _p->ns2__RecordingSourceInformation::__any = __any; _p->ns2__RecordingSourceInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingSourceInformation(struct soap *soap, ns2__RecordingSourceInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingSourceInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingInformation
#define SOAP_TYPE_ns2__RecordingInformation (619)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingInformation(struct soap*, const char*, int, const ns2__RecordingInformation *, const char*);
SOAP_FMAC3 ns2__RecordingInformation * SOAP_FMAC4 soap_in_ns2__RecordingInformation(struct soap*, const char*, ns2__RecordingInformation *, const char*);

#ifndef soap_write_ns2__RecordingInformation
#define soap_write_ns2__RecordingInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingInformation * SOAP_FMAC4 soap_get_ns2__RecordingInformation(struct soap*, ns2__RecordingInformation *, const char*, const char*);

#ifndef soap_read_ns2__RecordingInformation
#define soap_read_ns2__RecordingInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingInformation * SOAP_FMAC2 soap_instantiate_ns2__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingInformation * soap_new_ns2__RecordingInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingInformation(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingInformation * soap_new_req_ns2__RecordingInformation(struct soap *soap, const std::string& RecordingToken, ns2__RecordingSourceInformation *Source, const std::string& Content, enum ns2__RecordingStatus RecordingStatus) { ns2__RecordingInformation *_p = soap_instantiate_ns2__RecordingInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingInformation::RecordingToken = RecordingToken; _p->ns2__RecordingInformation::Source = Source; _p->ns2__RecordingInformation::Content = Content; _p->ns2__RecordingInformation::RecordingStatus = RecordingStatus; } return _p; }

inline ns2__RecordingInformation * soap_new_set_ns2__RecordingInformation(struct soap *soap, const std::string& RecordingToken, ns2__RecordingSourceInformation *Source, time_t *EarliestRecording, time_t *LatestRecording, const std::string& Content, const std::vector<ns2__TrackInformation * >& Track, enum ns2__RecordingStatus RecordingStatus, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingInformation *_p = soap_instantiate_ns2__RecordingInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingInformation::RecordingToken = RecordingToken; _p->ns2__RecordingInformation::Source = Source; _p->ns2__RecordingInformation::EarliestRecording = EarliestRecording; _p->ns2__RecordingInformation::LatestRecording = LatestRecording; _p->ns2__RecordingInformation::Content = Content; _p->ns2__RecordingInformation::Track = Track; _p->ns2__RecordingInformation::RecordingStatus = RecordingStatus; _p->ns2__RecordingInformation::__any = __any; _p->ns2__RecordingInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingInformation(struct soap *soap, ns2__RecordingInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindMetadataResult
#define SOAP_TYPE_ns2__FindMetadataResult (618)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindMetadataResult(struct soap*, const char*, int, const ns2__FindMetadataResult *, const char*);
SOAP_FMAC3 ns2__FindMetadataResult * SOAP_FMAC4 soap_in_ns2__FindMetadataResult(struct soap*, const char*, ns2__FindMetadataResult *, const char*);

#ifndef soap_write_ns2__FindMetadataResult
#define soap_write_ns2__FindMetadataResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindMetadataResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindMetadataResult * SOAP_FMAC4 soap_get_ns2__FindMetadataResult(struct soap*, ns2__FindMetadataResult *, const char*, const char*);

#ifndef soap_read_ns2__FindMetadataResult
#define soap_read_ns2__FindMetadataResult(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindMetadataResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindMetadataResult * SOAP_FMAC2 soap_instantiate_ns2__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindMetadataResult * soap_new_ns2__FindMetadataResult(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindMetadataResult(soap, n, NULL, NULL, NULL); }

inline ns2__FindMetadataResult * soap_new_req_ns2__FindMetadataResult(struct soap *soap, const std::string& RecordingToken, const std::string& TrackToken, time_t Time) { ns2__FindMetadataResult *_p = soap_instantiate_ns2__FindMetadataResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindMetadataResult::RecordingToken = RecordingToken; _p->ns2__FindMetadataResult::TrackToken = TrackToken; _p->ns2__FindMetadataResult::Time = Time; } return _p; }

inline ns2__FindMetadataResult * soap_new_set_ns2__FindMetadataResult(struct soap *soap, const std::string& RecordingToken, const std::string& TrackToken, time_t Time, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__FindMetadataResult *_p = soap_instantiate_ns2__FindMetadataResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindMetadataResult::RecordingToken = RecordingToken; _p->ns2__FindMetadataResult::TrackToken = TrackToken; _p->ns2__FindMetadataResult::Time = Time; _p->ns2__FindMetadataResult::__any = __any; _p->ns2__FindMetadataResult::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindMetadataResult(struct soap *soap, ns2__FindMetadataResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindMetadataResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindMetadataResultList
#define SOAP_TYPE_ns2__FindMetadataResultList (617)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindMetadataResultList(struct soap*, const char*, int, const ns2__FindMetadataResultList *, const char*);
SOAP_FMAC3 ns2__FindMetadataResultList * SOAP_FMAC4 soap_in_ns2__FindMetadataResultList(struct soap*, const char*, ns2__FindMetadataResultList *, const char*);

#ifndef soap_write_ns2__FindMetadataResultList
#define soap_write_ns2__FindMetadataResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindMetadataResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindMetadataResultList * SOAP_FMAC4 soap_get_ns2__FindMetadataResultList(struct soap*, ns2__FindMetadataResultList *, const char*, const char*);

#ifndef soap_read_ns2__FindMetadataResultList
#define soap_read_ns2__FindMetadataResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindMetadataResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindMetadataResultList * SOAP_FMAC2 soap_instantiate_ns2__FindMetadataResultList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindMetadataResultList * soap_new_ns2__FindMetadataResultList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindMetadataResultList(soap, n, NULL, NULL, NULL); }

inline ns2__FindMetadataResultList * soap_new_req_ns2__FindMetadataResultList(struct soap *soap, enum ns2__SearchState SearchState) { ns2__FindMetadataResultList *_p = soap_instantiate_ns2__FindMetadataResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindMetadataResultList::SearchState = SearchState; } return _p; }

inline ns2__FindMetadataResultList * soap_new_set_ns2__FindMetadataResultList(struct soap *soap, enum ns2__SearchState SearchState, const std::vector<ns2__FindMetadataResult * >& Result, char *__item1) { ns2__FindMetadataResultList *_p = soap_instantiate_ns2__FindMetadataResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindMetadataResultList::SearchState = SearchState; _p->ns2__FindMetadataResultList::Result = Result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindMetadataResultList(struct soap *soap, ns2__FindMetadataResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindMetadataResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindPTZPositionResult
#define SOAP_TYPE_ns2__FindPTZPositionResult (616)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindPTZPositionResult(struct soap*, const char*, int, const ns2__FindPTZPositionResult *, const char*);
SOAP_FMAC3 ns2__FindPTZPositionResult * SOAP_FMAC4 soap_in_ns2__FindPTZPositionResult(struct soap*, const char*, ns2__FindPTZPositionResult *, const char*);

#ifndef soap_write_ns2__FindPTZPositionResult
#define soap_write_ns2__FindPTZPositionResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindPTZPositionResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindPTZPositionResult * SOAP_FMAC4 soap_get_ns2__FindPTZPositionResult(struct soap*, ns2__FindPTZPositionResult *, const char*, const char*);

#ifndef soap_read_ns2__FindPTZPositionResult
#define soap_read_ns2__FindPTZPositionResult(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindPTZPositionResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindPTZPositionResult * SOAP_FMAC2 soap_instantiate_ns2__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindPTZPositionResult * soap_new_ns2__FindPTZPositionResult(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindPTZPositionResult(soap, n, NULL, NULL, NULL); }

inline ns2__FindPTZPositionResult * soap_new_req_ns2__FindPTZPositionResult(struct soap *soap, const std::string& RecordingToken, const std::string& TrackToken, time_t Time, ns2__PTZVector *Position) { ns2__FindPTZPositionResult *_p = soap_instantiate_ns2__FindPTZPositionResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindPTZPositionResult::RecordingToken = RecordingToken; _p->ns2__FindPTZPositionResult::TrackToken = TrackToken; _p->ns2__FindPTZPositionResult::Time = Time; _p->ns2__FindPTZPositionResult::Position = Position; } return _p; }

inline ns2__FindPTZPositionResult * soap_new_set_ns2__FindPTZPositionResult(struct soap *soap, const std::string& RecordingToken, const std::string& TrackToken, time_t Time, ns2__PTZVector *Position, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__FindPTZPositionResult *_p = soap_instantiate_ns2__FindPTZPositionResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindPTZPositionResult::RecordingToken = RecordingToken; _p->ns2__FindPTZPositionResult::TrackToken = TrackToken; _p->ns2__FindPTZPositionResult::Time = Time; _p->ns2__FindPTZPositionResult::Position = Position; _p->ns2__FindPTZPositionResult::__any = __any; _p->ns2__FindPTZPositionResult::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindPTZPositionResult(struct soap *soap, ns2__FindPTZPositionResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindPTZPositionResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindPTZPositionResultList
#define SOAP_TYPE_ns2__FindPTZPositionResultList (615)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindPTZPositionResultList(struct soap*, const char*, int, const ns2__FindPTZPositionResultList *, const char*);
SOAP_FMAC3 ns2__FindPTZPositionResultList * SOAP_FMAC4 soap_in_ns2__FindPTZPositionResultList(struct soap*, const char*, ns2__FindPTZPositionResultList *, const char*);

#ifndef soap_write_ns2__FindPTZPositionResultList
#define soap_write_ns2__FindPTZPositionResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindPTZPositionResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindPTZPositionResultList * SOAP_FMAC4 soap_get_ns2__FindPTZPositionResultList(struct soap*, ns2__FindPTZPositionResultList *, const char*, const char*);

#ifndef soap_read_ns2__FindPTZPositionResultList
#define soap_read_ns2__FindPTZPositionResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindPTZPositionResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindPTZPositionResultList * SOAP_FMAC2 soap_instantiate_ns2__FindPTZPositionResultList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindPTZPositionResultList * soap_new_ns2__FindPTZPositionResultList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindPTZPositionResultList(soap, n, NULL, NULL, NULL); }

inline ns2__FindPTZPositionResultList * soap_new_req_ns2__FindPTZPositionResultList(struct soap *soap, enum ns2__SearchState SearchState) { ns2__FindPTZPositionResultList *_p = soap_instantiate_ns2__FindPTZPositionResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindPTZPositionResultList::SearchState = SearchState; } return _p; }

inline ns2__FindPTZPositionResultList * soap_new_set_ns2__FindPTZPositionResultList(struct soap *soap, enum ns2__SearchState SearchState, const std::vector<ns2__FindPTZPositionResult * >& Result, char *__item1) { ns2__FindPTZPositionResultList *_p = soap_instantiate_ns2__FindPTZPositionResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindPTZPositionResultList::SearchState = SearchState; _p->ns2__FindPTZPositionResultList::Result = Result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindPTZPositionResultList(struct soap *soap, ns2__FindPTZPositionResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindPTZPositionResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindEventResult
#define SOAP_TYPE_ns2__FindEventResult (614)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindEventResult(struct soap*, const char*, int, const ns2__FindEventResult *, const char*);
SOAP_FMAC3 ns2__FindEventResult * SOAP_FMAC4 soap_in_ns2__FindEventResult(struct soap*, const char*, ns2__FindEventResult *, const char*);

#ifndef soap_write_ns2__FindEventResult
#define soap_write_ns2__FindEventResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindEventResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindEventResult * SOAP_FMAC4 soap_get_ns2__FindEventResult(struct soap*, ns2__FindEventResult *, const char*, const char*);

#ifndef soap_read_ns2__FindEventResult
#define soap_read_ns2__FindEventResult(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindEventResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindEventResult * SOAP_FMAC2 soap_instantiate_ns2__FindEventResult(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindEventResult * soap_new_ns2__FindEventResult(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindEventResult(soap, n, NULL, NULL, NULL); }

inline ns2__FindEventResult * soap_new_req_ns2__FindEventResult(struct soap *soap, const std::string& RecordingToken, const std::string& TrackToken, time_t Time, ns3__NotificationMessageHolderType *Event, bool StartStateEvent) { ns2__FindEventResult *_p = soap_instantiate_ns2__FindEventResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindEventResult::RecordingToken = RecordingToken; _p->ns2__FindEventResult::TrackToken = TrackToken; _p->ns2__FindEventResult::Time = Time; _p->ns2__FindEventResult::Event = Event; _p->ns2__FindEventResult::StartStateEvent = StartStateEvent; } return _p; }

inline ns2__FindEventResult * soap_new_set_ns2__FindEventResult(struct soap *soap, const std::string& RecordingToken, const std::string& TrackToken, time_t Time, ns3__NotificationMessageHolderType *Event, bool StartStateEvent, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__FindEventResult *_p = soap_instantiate_ns2__FindEventResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindEventResult::RecordingToken = RecordingToken; _p->ns2__FindEventResult::TrackToken = TrackToken; _p->ns2__FindEventResult::Time = Time; _p->ns2__FindEventResult::Event = Event; _p->ns2__FindEventResult::StartStateEvent = StartStateEvent; _p->ns2__FindEventResult::__any = __any; _p->ns2__FindEventResult::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindEventResult(struct soap *soap, ns2__FindEventResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindEventResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindEventResultList
#define SOAP_TYPE_ns2__FindEventResultList (613)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindEventResultList(struct soap*, const char*, int, const ns2__FindEventResultList *, const char*);
SOAP_FMAC3 ns2__FindEventResultList * SOAP_FMAC4 soap_in_ns2__FindEventResultList(struct soap*, const char*, ns2__FindEventResultList *, const char*);

#ifndef soap_write_ns2__FindEventResultList
#define soap_write_ns2__FindEventResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindEventResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindEventResultList * SOAP_FMAC4 soap_get_ns2__FindEventResultList(struct soap*, ns2__FindEventResultList *, const char*, const char*);

#ifndef soap_read_ns2__FindEventResultList
#define soap_read_ns2__FindEventResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindEventResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindEventResultList * SOAP_FMAC2 soap_instantiate_ns2__FindEventResultList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindEventResultList * soap_new_ns2__FindEventResultList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindEventResultList(soap, n, NULL, NULL, NULL); }

inline ns2__FindEventResultList * soap_new_req_ns2__FindEventResultList(struct soap *soap, enum ns2__SearchState SearchState) { ns2__FindEventResultList *_p = soap_instantiate_ns2__FindEventResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindEventResultList::SearchState = SearchState; } return _p; }

inline ns2__FindEventResultList * soap_new_set_ns2__FindEventResultList(struct soap *soap, enum ns2__SearchState SearchState, const std::vector<ns2__FindEventResult * >& Result, char *__item1) { ns2__FindEventResultList *_p = soap_instantiate_ns2__FindEventResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindEventResultList::SearchState = SearchState; _p->ns2__FindEventResultList::Result = Result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindEventResultList(struct soap *soap, ns2__FindEventResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindEventResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FindRecordingResultList
#define SOAP_TYPE_ns2__FindRecordingResultList (612)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FindRecordingResultList(struct soap*, const char*, int, const ns2__FindRecordingResultList *, const char*);
SOAP_FMAC3 ns2__FindRecordingResultList * SOAP_FMAC4 soap_in_ns2__FindRecordingResultList(struct soap*, const char*, ns2__FindRecordingResultList *, const char*);

#ifndef soap_write_ns2__FindRecordingResultList
#define soap_write_ns2__FindRecordingResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FindRecordingResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindRecordingResultList * SOAP_FMAC4 soap_get_ns2__FindRecordingResultList(struct soap*, ns2__FindRecordingResultList *, const char*, const char*);

#ifndef soap_read_ns2__FindRecordingResultList
#define soap_read_ns2__FindRecordingResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FindRecordingResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FindRecordingResultList * SOAP_FMAC2 soap_instantiate_ns2__FindRecordingResultList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FindRecordingResultList * soap_new_ns2__FindRecordingResultList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FindRecordingResultList(soap, n, NULL, NULL, NULL); }

inline ns2__FindRecordingResultList * soap_new_req_ns2__FindRecordingResultList(struct soap *soap, enum ns2__SearchState SearchState) { ns2__FindRecordingResultList *_p = soap_instantiate_ns2__FindRecordingResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindRecordingResultList::SearchState = SearchState; } return _p; }

inline ns2__FindRecordingResultList * soap_new_set_ns2__FindRecordingResultList(struct soap *soap, enum ns2__SearchState SearchState, const std::vector<ns2__RecordingInformation * >& RecordingInformation, char *__item1) { ns2__FindRecordingResultList *_p = soap_instantiate_ns2__FindRecordingResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FindRecordingResultList::SearchState = SearchState; _p->ns2__FindRecordingResultList::RecordingInformation = RecordingInformation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FindRecordingResultList(struct soap *soap, ns2__FindRecordingResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FindRecordingResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataFilter
#define SOAP_TYPE_ns2__MetadataFilter (611)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataFilter(struct soap*, const char*, int, const ns2__MetadataFilter *, const char*);
SOAP_FMAC3 ns2__MetadataFilter * SOAP_FMAC4 soap_in_ns2__MetadataFilter(struct soap*, const char*, ns2__MetadataFilter *, const char*);

#ifndef soap_write_ns2__MetadataFilter
#define soap_write_ns2__MetadataFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataFilter * SOAP_FMAC4 soap_get_ns2__MetadataFilter(struct soap*, ns2__MetadataFilter *, const char*, const char*);

#ifndef soap_read_ns2__MetadataFilter
#define soap_read_ns2__MetadataFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataFilter * SOAP_FMAC2 soap_instantiate_ns2__MetadataFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataFilter * soap_new_ns2__MetadataFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataFilter(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataFilter * soap_new_req_ns2__MetadataFilter(struct soap *soap, const std::string& MetadataStreamFilter) { ns2__MetadataFilter *_p = soap_instantiate_ns2__MetadataFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataFilter::MetadataStreamFilter = MetadataStreamFilter; } return _p; }

inline ns2__MetadataFilter * soap_new_set_ns2__MetadataFilter(struct soap *soap, const std::string& MetadataStreamFilter, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MetadataFilter *_p = soap_instantiate_ns2__MetadataFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataFilter::MetadataStreamFilter = MetadataStreamFilter; _p->ns2__MetadataFilter::__any = __any; _p->ns2__MetadataFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataFilter(struct soap *soap, ns2__MetadataFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPositionFilter
#define SOAP_TYPE_ns2__PTZPositionFilter (610)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPositionFilter(struct soap*, const char*, int, const ns2__PTZPositionFilter *, const char*);
SOAP_FMAC3 ns2__PTZPositionFilter * SOAP_FMAC4 soap_in_ns2__PTZPositionFilter(struct soap*, const char*, ns2__PTZPositionFilter *, const char*);

#ifndef soap_write_ns2__PTZPositionFilter
#define soap_write_ns2__PTZPositionFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPositionFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPositionFilter * SOAP_FMAC4 soap_get_ns2__PTZPositionFilter(struct soap*, ns2__PTZPositionFilter *, const char*, const char*);

#ifndef soap_read_ns2__PTZPositionFilter
#define soap_read_ns2__PTZPositionFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPositionFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPositionFilter * SOAP_FMAC2 soap_instantiate_ns2__PTZPositionFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPositionFilter * soap_new_ns2__PTZPositionFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPositionFilter(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPositionFilter * soap_new_req_ns2__PTZPositionFilter(struct soap *soap, ns2__PTZVector *MinPosition, ns2__PTZVector *MaxPosition, bool EnterOrExit) { ns2__PTZPositionFilter *_p = soap_instantiate_ns2__PTZPositionFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPositionFilter::MinPosition = MinPosition; _p->ns2__PTZPositionFilter::MaxPosition = MaxPosition; _p->ns2__PTZPositionFilter::EnterOrExit = EnterOrExit; } return _p; }

inline ns2__PTZPositionFilter * soap_new_set_ns2__PTZPositionFilter(struct soap *soap, ns2__PTZVector *MinPosition, ns2__PTZVector *MaxPosition, bool EnterOrExit, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTZPositionFilter *_p = soap_instantiate_ns2__PTZPositionFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPositionFilter::MinPosition = MinPosition; _p->ns2__PTZPositionFilter::MaxPosition = MaxPosition; _p->ns2__PTZPositionFilter::EnterOrExit = EnterOrExit; _p->ns2__PTZPositionFilter::__any = __any; _p->ns2__PTZPositionFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPositionFilter(struct soap *soap, ns2__PTZPositionFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPositionFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EventFilter
#define SOAP_TYPE_ns2__EventFilter (609)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EventFilter(struct soap*, const char*, int, const ns2__EventFilter *, const char*);
SOAP_FMAC3 ns2__EventFilter * SOAP_FMAC4 soap_in_ns2__EventFilter(struct soap*, const char*, ns2__EventFilter *, const char*);

#ifndef soap_write_ns2__EventFilter
#define soap_write_ns2__EventFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EventFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventFilter * SOAP_FMAC4 soap_get_ns2__EventFilter(struct soap*, ns2__EventFilter *, const char*, const char*);

#ifndef soap_read_ns2__EventFilter
#define soap_read_ns2__EventFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EventFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EventFilter * SOAP_FMAC2 soap_instantiate_ns2__EventFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EventFilter * soap_new_ns2__EventFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EventFilter(soap, n, NULL, NULL, NULL); }

inline ns2__EventFilter * soap_new_req_ns2__EventFilter(struct soap *soap) { ns2__EventFilter *_p = soap_instantiate_ns2__EventFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EventFilter * soap_new_set_ns2__EventFilter(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute) { ns2__EventFilter *_p = soap_instantiate_ns2__EventFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventFilter::__any = __any; _p->ns2__EventFilter::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__EventFilter(struct soap *soap, ns2__EventFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EventFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SearchScopeExtension
#define SOAP_TYPE_ns2__SearchScopeExtension (608)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SearchScopeExtension(struct soap*, const char*, int, const ns2__SearchScopeExtension *, const char*);
SOAP_FMAC3 ns2__SearchScopeExtension * SOAP_FMAC4 soap_in_ns2__SearchScopeExtension(struct soap*, const char*, ns2__SearchScopeExtension *, const char*);

#ifndef soap_write_ns2__SearchScopeExtension
#define soap_write_ns2__SearchScopeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SearchScopeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SearchScopeExtension * SOAP_FMAC4 soap_get_ns2__SearchScopeExtension(struct soap*, ns2__SearchScopeExtension *, const char*, const char*);

#ifndef soap_read_ns2__SearchScopeExtension
#define soap_read_ns2__SearchScopeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SearchScopeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SearchScopeExtension * SOAP_FMAC2 soap_instantiate_ns2__SearchScopeExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SearchScopeExtension * soap_new_ns2__SearchScopeExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SearchScopeExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SearchScopeExtension * soap_new_req_ns2__SearchScopeExtension(struct soap *soap) { ns2__SearchScopeExtension *_p = soap_instantiate_ns2__SearchScopeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SearchScopeExtension * soap_new_set_ns2__SearchScopeExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__SearchScopeExtension *_p = soap_instantiate_ns2__SearchScopeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SearchScopeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SearchScopeExtension(struct soap *soap, ns2__SearchScopeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SearchScopeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SearchScope
#define SOAP_TYPE_ns2__SearchScope (607)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SearchScope(struct soap*, const char*, int, const ns2__SearchScope *, const char*);
SOAP_FMAC3 ns2__SearchScope * SOAP_FMAC4 soap_in_ns2__SearchScope(struct soap*, const char*, ns2__SearchScope *, const char*);

#ifndef soap_write_ns2__SearchScope
#define soap_write_ns2__SearchScope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SearchScope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SearchScope * SOAP_FMAC4 soap_get_ns2__SearchScope(struct soap*, ns2__SearchScope *, const char*, const char*);

#ifndef soap_read_ns2__SearchScope
#define soap_read_ns2__SearchScope(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SearchScope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SearchScope * SOAP_FMAC2 soap_instantiate_ns2__SearchScope(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SearchScope * soap_new_ns2__SearchScope(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SearchScope(soap, n, NULL, NULL, NULL); }

inline ns2__SearchScope * soap_new_req_ns2__SearchScope(struct soap *soap) { ns2__SearchScope *_p = soap_instantiate_ns2__SearchScope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SearchScope * soap_new_set_ns2__SearchScope(struct soap *soap, const std::vector<ns2__SourceReference * >& IncludedSources, const std::vector<std::string >& IncludedRecordings, std::string *RecordingInformationFilter, ns2__SearchScopeExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SearchScope *_p = soap_instantiate_ns2__SearchScope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SearchScope::IncludedSources = IncludedSources; _p->ns2__SearchScope::IncludedRecordings = IncludedRecordings; _p->ns2__SearchScope::RecordingInformationFilter = RecordingInformationFilter; _p->ns2__SearchScope::Extension = Extension; _p->ns2__SearchScope::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SearchScope(struct soap *soap, ns2__SearchScope *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SearchScope(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingSummary
#define SOAP_TYPE_ns2__RecordingSummary (606)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingSummary(struct soap*, const char*, int, const ns2__RecordingSummary *, const char*);
SOAP_FMAC3 ns2__RecordingSummary * SOAP_FMAC4 soap_in_ns2__RecordingSummary(struct soap*, const char*, ns2__RecordingSummary *, const char*);

#ifndef soap_write_ns2__RecordingSummary
#define soap_write_ns2__RecordingSummary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingSummary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingSummary * SOAP_FMAC4 soap_get_ns2__RecordingSummary(struct soap*, ns2__RecordingSummary *, const char*, const char*);

#ifndef soap_read_ns2__RecordingSummary
#define soap_read_ns2__RecordingSummary(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingSummary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingSummary * SOAP_FMAC2 soap_instantiate_ns2__RecordingSummary(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingSummary * soap_new_ns2__RecordingSummary(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingSummary(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingSummary * soap_new_req_ns2__RecordingSummary(struct soap *soap, time_t DataFrom, time_t DataUntil, int NumberRecordings) { ns2__RecordingSummary *_p = soap_instantiate_ns2__RecordingSummary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingSummary::DataFrom = DataFrom; _p->ns2__RecordingSummary::DataUntil = DataUntil; _p->ns2__RecordingSummary::NumberRecordings = NumberRecordings; } return _p; }

inline ns2__RecordingSummary * soap_new_set_ns2__RecordingSummary(struct soap *soap, time_t DataFrom, time_t DataUntil, int NumberRecordings, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingSummary *_p = soap_instantiate_ns2__RecordingSummary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingSummary::DataFrom = DataFrom; _p->ns2__RecordingSummary::DataUntil = DataUntil; _p->ns2__RecordingSummary::NumberRecordings = NumberRecordings; _p->ns2__RecordingSummary::__any = __any; _p->ns2__RecordingSummary::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingSummary(struct soap *soap, ns2__RecordingSummary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingSummary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DateTimeRange
#define SOAP_TYPE_ns2__DateTimeRange (605)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DateTimeRange(struct soap*, const char*, int, const ns2__DateTimeRange *, const char*);
SOAP_FMAC3 ns2__DateTimeRange * SOAP_FMAC4 soap_in_ns2__DateTimeRange(struct soap*, const char*, ns2__DateTimeRange *, const char*);

#ifndef soap_write_ns2__DateTimeRange
#define soap_write_ns2__DateTimeRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DateTimeRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DateTimeRange * SOAP_FMAC4 soap_get_ns2__DateTimeRange(struct soap*, ns2__DateTimeRange *, const char*, const char*);

#ifndef soap_read_ns2__DateTimeRange
#define soap_read_ns2__DateTimeRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DateTimeRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DateTimeRange * SOAP_FMAC2 soap_instantiate_ns2__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DateTimeRange * soap_new_ns2__DateTimeRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DateTimeRange(soap, n, NULL, NULL, NULL); }

inline ns2__DateTimeRange * soap_new_req_ns2__DateTimeRange(struct soap *soap, time_t From, time_t Until) { ns2__DateTimeRange *_p = soap_instantiate_ns2__DateTimeRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DateTimeRange::From = From; _p->ns2__DateTimeRange::Until = Until; } return _p; }

inline ns2__DateTimeRange * soap_new_set_ns2__DateTimeRange(struct soap *soap, time_t From, time_t Until, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__DateTimeRange *_p = soap_instantiate_ns2__DateTimeRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DateTimeRange::From = From; _p->ns2__DateTimeRange::Until = Until; _p->ns2__DateTimeRange::__any = __any; _p->ns2__DateTimeRange::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DateTimeRange(struct soap *soap, ns2__DateTimeRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DateTimeRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SourceReference
#define SOAP_TYPE_ns2__SourceReference (604)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SourceReference(struct soap*, const char*, int, const ns2__SourceReference *, const char*);
SOAP_FMAC3 ns2__SourceReference * SOAP_FMAC4 soap_in_ns2__SourceReference(struct soap*, const char*, ns2__SourceReference *, const char*);

#ifndef soap_write_ns2__SourceReference
#define soap_write_ns2__SourceReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SourceReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SourceReference * SOAP_FMAC4 soap_get_ns2__SourceReference(struct soap*, ns2__SourceReference *, const char*, const char*);

#ifndef soap_read_ns2__SourceReference
#define soap_read_ns2__SourceReference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SourceReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SourceReference * SOAP_FMAC2 soap_instantiate_ns2__SourceReference(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SourceReference * soap_new_ns2__SourceReference(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SourceReference(soap, n, NULL, NULL, NULL); }

inline ns2__SourceReference * soap_new_req_ns2__SourceReference(struct soap *soap, const std::string& Token) { ns2__SourceReference *_p = soap_instantiate_ns2__SourceReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SourceReference::Token = Token; } return _p; }

inline ns2__SourceReference * soap_new_set_ns2__SourceReference(struct soap *soap, const std::string& Token, const std::vector<char * >& __any, const std::string& Type, char *__anyAttribute, char *__item1) { ns2__SourceReference *_p = soap_instantiate_ns2__SourceReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SourceReference::Token = Token; _p->ns2__SourceReference::__any = __any; _p->ns2__SourceReference::Type = Type; _p->ns2__SourceReference::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SourceReference(struct soap *soap, ns2__SourceReference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SourceReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReceiverStateInformation
#define SOAP_TYPE_ns2__ReceiverStateInformation (603)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverStateInformation(struct soap*, const char*, int, const ns2__ReceiverStateInformation *, const char*);
SOAP_FMAC3 ns2__ReceiverStateInformation * SOAP_FMAC4 soap_in_ns2__ReceiverStateInformation(struct soap*, const char*, ns2__ReceiverStateInformation *, const char*);

#ifndef soap_write_ns2__ReceiverStateInformation
#define soap_write_ns2__ReceiverStateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReceiverStateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverStateInformation * SOAP_FMAC4 soap_get_ns2__ReceiverStateInformation(struct soap*, ns2__ReceiverStateInformation *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverStateInformation
#define soap_read_ns2__ReceiverStateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverStateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReceiverStateInformation * SOAP_FMAC2 soap_instantiate_ns2__ReceiverStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReceiverStateInformation * soap_new_ns2__ReceiverStateInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReceiverStateInformation(soap, n, NULL, NULL, NULL); }

inline ns2__ReceiverStateInformation * soap_new_req_ns2__ReceiverStateInformation(struct soap *soap, enum ns2__ReceiverState State, bool AutoCreated) { ns2__ReceiverStateInformation *_p = soap_instantiate_ns2__ReceiverStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverStateInformation::State = State; _p->ns2__ReceiverStateInformation::AutoCreated = AutoCreated; } return _p; }

inline ns2__ReceiverStateInformation * soap_new_set_ns2__ReceiverStateInformation(struct soap *soap, enum ns2__ReceiverState State, bool AutoCreated, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ReceiverStateInformation *_p = soap_instantiate_ns2__ReceiverStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverStateInformation::State = State; _p->ns2__ReceiverStateInformation::AutoCreated = AutoCreated; _p->ns2__ReceiverStateInformation::__any = __any; _p->ns2__ReceiverStateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReceiverStateInformation(struct soap *soap, ns2__ReceiverStateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReceiverStateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReceiverConfiguration
#define SOAP_TYPE_ns2__ReceiverConfiguration (602)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverConfiguration(struct soap*, const char*, int, const ns2__ReceiverConfiguration *, const char*);
SOAP_FMAC3 ns2__ReceiverConfiguration * SOAP_FMAC4 soap_in_ns2__ReceiverConfiguration(struct soap*, const char*, ns2__ReceiverConfiguration *, const char*);

#ifndef soap_write_ns2__ReceiverConfiguration
#define soap_write_ns2__ReceiverConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReceiverConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverConfiguration * SOAP_FMAC4 soap_get_ns2__ReceiverConfiguration(struct soap*, ns2__ReceiverConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverConfiguration
#define soap_read_ns2__ReceiverConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReceiverConfiguration * SOAP_FMAC2 soap_instantiate_ns2__ReceiverConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReceiverConfiguration * soap_new_ns2__ReceiverConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReceiverConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__ReceiverConfiguration * soap_new_req_ns2__ReceiverConfiguration(struct soap *soap, enum ns2__ReceiverMode Mode, const std::string& MediaUri, ns2__StreamSetup *StreamSetup) { ns2__ReceiverConfiguration *_p = soap_instantiate_ns2__ReceiverConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverConfiguration::Mode = Mode; _p->ns2__ReceiverConfiguration::MediaUri = MediaUri; _p->ns2__ReceiverConfiguration::StreamSetup = StreamSetup; } return _p; }

inline ns2__ReceiverConfiguration * soap_new_set_ns2__ReceiverConfiguration(struct soap *soap, enum ns2__ReceiverMode Mode, const std::string& MediaUri, ns2__StreamSetup *StreamSetup, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ReceiverConfiguration *_p = soap_instantiate_ns2__ReceiverConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverConfiguration::Mode = Mode; _p->ns2__ReceiverConfiguration::MediaUri = MediaUri; _p->ns2__ReceiverConfiguration::StreamSetup = StreamSetup; _p->ns2__ReceiverConfiguration::__any = __any; _p->ns2__ReceiverConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReceiverConfiguration(struct soap *soap, ns2__ReceiverConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReceiverConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Receiver
#define SOAP_TYPE_ns2__Receiver (601)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Receiver(struct soap*, const char*, int, const ns2__Receiver *, const char*);
SOAP_FMAC3 ns2__Receiver * SOAP_FMAC4 soap_in_ns2__Receiver(struct soap*, const char*, ns2__Receiver *, const char*);

#ifndef soap_write_ns2__Receiver
#define soap_write_ns2__Receiver(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Receiver", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Receiver * SOAP_FMAC4 soap_get_ns2__Receiver(struct soap*, ns2__Receiver *, const char*, const char*);

#ifndef soap_read_ns2__Receiver
#define soap_read_ns2__Receiver(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Receiver(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Receiver * SOAP_FMAC2 soap_instantiate_ns2__Receiver(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Receiver * soap_new_ns2__Receiver(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Receiver(soap, n, NULL, NULL, NULL); }

inline ns2__Receiver * soap_new_req_ns2__Receiver(struct soap *soap, const std::string& Token, ns2__ReceiverConfiguration *Configuration) { ns2__Receiver *_p = soap_instantiate_ns2__Receiver(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Receiver::Token = Token; _p->ns2__Receiver::Configuration = Configuration; } return _p; }

inline ns2__Receiver * soap_new_set_ns2__Receiver(struct soap *soap, const std::string& Token, ns2__ReceiverConfiguration *Configuration, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Receiver *_p = soap_instantiate_ns2__Receiver(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Receiver::Token = Token; _p->ns2__Receiver::Configuration = Configuration; _p->ns2__Receiver::__any = __any; _p->ns2__Receiver::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Receiver(struct soap *soap, ns2__Receiver *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Receiver(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PaneOptionExtension
#define SOAP_TYPE_ns2__PaneOptionExtension (600)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaneOptionExtension(struct soap*, const char*, int, const ns2__PaneOptionExtension *, const char*);
SOAP_FMAC3 ns2__PaneOptionExtension * SOAP_FMAC4 soap_in_ns2__PaneOptionExtension(struct soap*, const char*, ns2__PaneOptionExtension *, const char*);

#ifndef soap_write_ns2__PaneOptionExtension
#define soap_write_ns2__PaneOptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PaneOptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneOptionExtension * SOAP_FMAC4 soap_get_ns2__PaneOptionExtension(struct soap*, ns2__PaneOptionExtension *, const char*, const char*);

#ifndef soap_read_ns2__PaneOptionExtension
#define soap_read_ns2__PaneOptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PaneOptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PaneOptionExtension * SOAP_FMAC2 soap_instantiate_ns2__PaneOptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaneOptionExtension * soap_new_ns2__PaneOptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PaneOptionExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PaneOptionExtension * soap_new_req_ns2__PaneOptionExtension(struct soap *soap) { ns2__PaneOptionExtension *_p = soap_instantiate_ns2__PaneOptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PaneOptionExtension * soap_new_set_ns2__PaneOptionExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PaneOptionExtension *_p = soap_instantiate_ns2__PaneOptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneOptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PaneOptionExtension(struct soap *soap, ns2__PaneOptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PaneOptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PaneLayoutOptions
#define SOAP_TYPE_ns2__PaneLayoutOptions (599)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaneLayoutOptions(struct soap*, const char*, int, const ns2__PaneLayoutOptions *, const char*);
SOAP_FMAC3 ns2__PaneLayoutOptions * SOAP_FMAC4 soap_in_ns2__PaneLayoutOptions(struct soap*, const char*, ns2__PaneLayoutOptions *, const char*);

#ifndef soap_write_ns2__PaneLayoutOptions
#define soap_write_ns2__PaneLayoutOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PaneLayoutOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneLayoutOptions * SOAP_FMAC4 soap_get_ns2__PaneLayoutOptions(struct soap*, ns2__PaneLayoutOptions *, const char*, const char*);

#ifndef soap_read_ns2__PaneLayoutOptions
#define soap_read_ns2__PaneLayoutOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PaneLayoutOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PaneLayoutOptions * SOAP_FMAC2 soap_instantiate_ns2__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaneLayoutOptions * soap_new_ns2__PaneLayoutOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PaneLayoutOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PaneLayoutOptions * soap_new_req_ns2__PaneLayoutOptions(struct soap *soap, const std::vector<ns2__Rectangle * >& Area) { ns2__PaneLayoutOptions *_p = soap_instantiate_ns2__PaneLayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneLayoutOptions::Area = Area; } return _p; }

inline ns2__PaneLayoutOptions * soap_new_set_ns2__PaneLayoutOptions(struct soap *soap, const std::vector<ns2__Rectangle * >& Area, ns2__PaneOptionExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PaneLayoutOptions *_p = soap_instantiate_ns2__PaneLayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneLayoutOptions::Area = Area; _p->ns2__PaneLayoutOptions::Extension = Extension; _p->ns2__PaneLayoutOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PaneLayoutOptions(struct soap *soap, ns2__PaneLayoutOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PaneLayoutOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__LayoutOptionsExtension
#define SOAP_TYPE_ns2__LayoutOptionsExtension (598)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LayoutOptionsExtension(struct soap*, const char*, int, const ns2__LayoutOptionsExtension *, const char*);
SOAP_FMAC3 ns2__LayoutOptionsExtension * SOAP_FMAC4 soap_in_ns2__LayoutOptionsExtension(struct soap*, const char*, ns2__LayoutOptionsExtension *, const char*);

#ifndef soap_write_ns2__LayoutOptionsExtension
#define soap_write_ns2__LayoutOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:LayoutOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LayoutOptionsExtension * SOAP_FMAC4 soap_get_ns2__LayoutOptionsExtension(struct soap*, ns2__LayoutOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__LayoutOptionsExtension
#define soap_read_ns2__LayoutOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__LayoutOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__LayoutOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__LayoutOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__LayoutOptionsExtension * soap_new_ns2__LayoutOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__LayoutOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__LayoutOptionsExtension * soap_new_req_ns2__LayoutOptionsExtension(struct soap *soap) { ns2__LayoutOptionsExtension *_p = soap_instantiate_ns2__LayoutOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__LayoutOptionsExtension * soap_new_set_ns2__LayoutOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__LayoutOptionsExtension *_p = soap_instantiate_ns2__LayoutOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__LayoutOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__LayoutOptionsExtension(struct soap *soap, ns2__LayoutOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__LayoutOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__LayoutOptions
#define SOAP_TYPE_ns2__LayoutOptions (597)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LayoutOptions(struct soap*, const char*, int, const ns2__LayoutOptions *, const char*);
SOAP_FMAC3 ns2__LayoutOptions * SOAP_FMAC4 soap_in_ns2__LayoutOptions(struct soap*, const char*, ns2__LayoutOptions *, const char*);

#ifndef soap_write_ns2__LayoutOptions
#define soap_write_ns2__LayoutOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:LayoutOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LayoutOptions * SOAP_FMAC4 soap_get_ns2__LayoutOptions(struct soap*, ns2__LayoutOptions *, const char*, const char*);

#ifndef soap_read_ns2__LayoutOptions
#define soap_read_ns2__LayoutOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__LayoutOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__LayoutOptions * SOAP_FMAC2 soap_instantiate_ns2__LayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__LayoutOptions * soap_new_ns2__LayoutOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__LayoutOptions(soap, n, NULL, NULL, NULL); }

inline ns2__LayoutOptions * soap_new_req_ns2__LayoutOptions(struct soap *soap, const std::vector<ns2__PaneLayoutOptions * >& PaneLayoutOptions) { ns2__LayoutOptions *_p = soap_instantiate_ns2__LayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__LayoutOptions::PaneLayoutOptions = PaneLayoutOptions; } return _p; }

inline ns2__LayoutOptions * soap_new_set_ns2__LayoutOptions(struct soap *soap, const std::vector<ns2__PaneLayoutOptions * >& PaneLayoutOptions, ns2__LayoutOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__LayoutOptions *_p = soap_instantiate_ns2__LayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__LayoutOptions::PaneLayoutOptions = PaneLayoutOptions; _p->ns2__LayoutOptions::Extension = Extension; _p->ns2__LayoutOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__LayoutOptions(struct soap *soap, ns2__LayoutOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__LayoutOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CodingCapabilities
#define SOAP_TYPE_ns2__CodingCapabilities (596)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CodingCapabilities(struct soap*, const char*, int, const ns2__CodingCapabilities *, const char*);
SOAP_FMAC3 ns2__CodingCapabilities * SOAP_FMAC4 soap_in_ns2__CodingCapabilities(struct soap*, const char*, ns2__CodingCapabilities *, const char*);

#ifndef soap_write_ns2__CodingCapabilities
#define soap_write_ns2__CodingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CodingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CodingCapabilities * SOAP_FMAC4 soap_get_ns2__CodingCapabilities(struct soap*, ns2__CodingCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__CodingCapabilities
#define soap_read_ns2__CodingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CodingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CodingCapabilities * SOAP_FMAC2 soap_instantiate_ns2__CodingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CodingCapabilities * soap_new_ns2__CodingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CodingCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__CodingCapabilities * soap_new_req_ns2__CodingCapabilities(struct soap *soap, ns2__VideoDecoderConfigurationOptions *VideoDecodingCapabilities) { ns2__CodingCapabilities *_p = soap_instantiate_ns2__CodingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CodingCapabilities::VideoDecodingCapabilities = VideoDecodingCapabilities; } return _p; }

inline ns2__CodingCapabilities * soap_new_set_ns2__CodingCapabilities(struct soap *soap, ns2__AudioEncoderConfigurationOptions *AudioEncodingCapabilities, ns2__AudioDecoderConfigurationOptions *AudioDecodingCapabilities, ns2__VideoDecoderConfigurationOptions *VideoDecodingCapabilities, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__CodingCapabilities *_p = soap_instantiate_ns2__CodingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CodingCapabilities::AudioEncodingCapabilities = AudioEncodingCapabilities; _p->ns2__CodingCapabilities::AudioDecodingCapabilities = AudioDecodingCapabilities; _p->ns2__CodingCapabilities::VideoDecodingCapabilities = VideoDecodingCapabilities; _p->ns2__CodingCapabilities::__any = __any; _p->ns2__CodingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CodingCapabilities(struct soap *soap, ns2__CodingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CodingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__LayoutExtension
#define SOAP_TYPE_ns2__LayoutExtension (595)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LayoutExtension(struct soap*, const char*, int, const ns2__LayoutExtension *, const char*);
SOAP_FMAC3 ns2__LayoutExtension * SOAP_FMAC4 soap_in_ns2__LayoutExtension(struct soap*, const char*, ns2__LayoutExtension *, const char*);

#ifndef soap_write_ns2__LayoutExtension
#define soap_write_ns2__LayoutExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:LayoutExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LayoutExtension * SOAP_FMAC4 soap_get_ns2__LayoutExtension(struct soap*, ns2__LayoutExtension *, const char*, const char*);

#ifndef soap_read_ns2__LayoutExtension
#define soap_read_ns2__LayoutExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__LayoutExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__LayoutExtension * SOAP_FMAC2 soap_instantiate_ns2__LayoutExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__LayoutExtension * soap_new_ns2__LayoutExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__LayoutExtension(soap, n, NULL, NULL, NULL); }

inline ns2__LayoutExtension * soap_new_req_ns2__LayoutExtension(struct soap *soap) { ns2__LayoutExtension *_p = soap_instantiate_ns2__LayoutExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__LayoutExtension * soap_new_set_ns2__LayoutExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__LayoutExtension *_p = soap_instantiate_ns2__LayoutExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__LayoutExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__LayoutExtension(struct soap *soap, ns2__LayoutExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__LayoutExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Layout
#define SOAP_TYPE_ns2__Layout (594)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Layout(struct soap*, const char*, int, const ns2__Layout *, const char*);
SOAP_FMAC3 ns2__Layout * SOAP_FMAC4 soap_in_ns2__Layout(struct soap*, const char*, ns2__Layout *, const char*);

#ifndef soap_write_ns2__Layout
#define soap_write_ns2__Layout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Layout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Layout * SOAP_FMAC4 soap_get_ns2__Layout(struct soap*, ns2__Layout *, const char*, const char*);

#ifndef soap_read_ns2__Layout
#define soap_read_ns2__Layout(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Layout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Layout * SOAP_FMAC2 soap_instantiate_ns2__Layout(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Layout * soap_new_ns2__Layout(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Layout(soap, n, NULL, NULL, NULL); }

inline ns2__Layout * soap_new_req_ns2__Layout(struct soap *soap, const std::vector<ns2__PaneLayout * >& PaneLayout) { ns2__Layout *_p = soap_instantiate_ns2__Layout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Layout::PaneLayout = PaneLayout; } return _p; }

inline ns2__Layout * soap_new_set_ns2__Layout(struct soap *soap, const std::vector<ns2__PaneLayout * >& PaneLayout, ns2__LayoutExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Layout *_p = soap_instantiate_ns2__Layout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Layout::PaneLayout = PaneLayout; _p->ns2__Layout::Extension = Extension; _p->ns2__Layout::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Layout(struct soap *soap, ns2__Layout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Layout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PaneLayout
#define SOAP_TYPE_ns2__PaneLayout (593)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaneLayout(struct soap*, const char*, int, const ns2__PaneLayout *, const char*);
SOAP_FMAC3 ns2__PaneLayout * SOAP_FMAC4 soap_in_ns2__PaneLayout(struct soap*, const char*, ns2__PaneLayout *, const char*);

#ifndef soap_write_ns2__PaneLayout
#define soap_write_ns2__PaneLayout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PaneLayout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneLayout * SOAP_FMAC4 soap_get_ns2__PaneLayout(struct soap*, ns2__PaneLayout *, const char*, const char*);

#ifndef soap_read_ns2__PaneLayout
#define soap_read_ns2__PaneLayout(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PaneLayout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PaneLayout * SOAP_FMAC2 soap_instantiate_ns2__PaneLayout(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaneLayout * soap_new_ns2__PaneLayout(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PaneLayout(soap, n, NULL, NULL, NULL); }

inline ns2__PaneLayout * soap_new_req_ns2__PaneLayout(struct soap *soap, const std::string& Pane, ns2__Rectangle *Area) { ns2__PaneLayout *_p = soap_instantiate_ns2__PaneLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneLayout::Pane = Pane; _p->ns2__PaneLayout::Area = Area; } return _p; }

inline ns2__PaneLayout * soap_new_set_ns2__PaneLayout(struct soap *soap, const std::string& Pane, ns2__Rectangle *Area, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PaneLayout *_p = soap_instantiate_ns2__PaneLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneLayout::Pane = Pane; _p->ns2__PaneLayout::Area = Area; _p->ns2__PaneLayout::__any = __any; _p->ns2__PaneLayout::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PaneLayout(struct soap *soap, ns2__PaneLayout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PaneLayout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PaneConfiguration
#define SOAP_TYPE_ns2__PaneConfiguration (592)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PaneConfiguration(struct soap*, const char*, int, const ns2__PaneConfiguration *, const char*);
SOAP_FMAC3 ns2__PaneConfiguration * SOAP_FMAC4 soap_in_ns2__PaneConfiguration(struct soap*, const char*, ns2__PaneConfiguration *, const char*);

#ifndef soap_write_ns2__PaneConfiguration
#define soap_write_ns2__PaneConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PaneConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneConfiguration * SOAP_FMAC4 soap_get_ns2__PaneConfiguration(struct soap*, ns2__PaneConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__PaneConfiguration
#define soap_read_ns2__PaneConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PaneConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PaneConfiguration * SOAP_FMAC2 soap_instantiate_ns2__PaneConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PaneConfiguration * soap_new_ns2__PaneConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PaneConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__PaneConfiguration * soap_new_req_ns2__PaneConfiguration(struct soap *soap, const std::string& Token) { ns2__PaneConfiguration *_p = soap_instantiate_ns2__PaneConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneConfiguration::Token = Token; } return _p; }

inline ns2__PaneConfiguration * soap_new_set_ns2__PaneConfiguration(struct soap *soap, std::string *PaneName, std::string *AudioOutputToken, std::string *AudioSourceToken, ns2__AudioEncoderConfiguration *AudioEncoderConfiguration, std::string *ReceiverToken, const std::string& Token, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PaneConfiguration *_p = soap_instantiate_ns2__PaneConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PaneConfiguration::PaneName = PaneName; _p->ns2__PaneConfiguration::AudioOutputToken = AudioOutputToken; _p->ns2__PaneConfiguration::AudioSourceToken = AudioSourceToken; _p->ns2__PaneConfiguration::AudioEncoderConfiguration = AudioEncoderConfiguration; _p->ns2__PaneConfiguration::ReceiverToken = ReceiverToken; _p->ns2__PaneConfiguration::Token = Token; _p->ns2__PaneConfiguration::__any = __any; _p->ns2__PaneConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PaneConfiguration(struct soap *soap, ns2__PaneConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PaneConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EventStreamExtension
#define SOAP_TYPE_ns2__EventStreamExtension (591)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EventStreamExtension(struct soap*, const char*, int, const ns2__EventStreamExtension *, const char*);
SOAP_FMAC3 ns2__EventStreamExtension * SOAP_FMAC4 soap_in_ns2__EventStreamExtension(struct soap*, const char*, ns2__EventStreamExtension *, const char*);

#ifndef soap_write_ns2__EventStreamExtension
#define soap_write_ns2__EventStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EventStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventStreamExtension * SOAP_FMAC4 soap_get_ns2__EventStreamExtension(struct soap*, ns2__EventStreamExtension *, const char*, const char*);

#ifndef soap_read_ns2__EventStreamExtension
#define soap_read_ns2__EventStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EventStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EventStreamExtension * SOAP_FMAC2 soap_instantiate_ns2__EventStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EventStreamExtension * soap_new_ns2__EventStreamExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EventStreamExtension(soap, n, NULL, NULL, NULL); }

inline ns2__EventStreamExtension * soap_new_req_ns2__EventStreamExtension(struct soap *soap) { ns2__EventStreamExtension *_p = soap_instantiate_ns2__EventStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EventStreamExtension * soap_new_set_ns2__EventStreamExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__EventStreamExtension *_p = soap_instantiate_ns2__EventStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventStreamExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EventStreamExtension(struct soap *soap, ns2__EventStreamExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EventStreamExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EventStream
#define SOAP_TYPE_ns2__EventStream (590)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EventStream(struct soap*, const char*, int, const ns2__EventStream *, const char*);
SOAP_FMAC3 ns2__EventStream * SOAP_FMAC4 soap_in_ns2__EventStream(struct soap*, const char*, ns2__EventStream *, const char*);

#ifndef soap_write_ns2__EventStream
#define soap_write_ns2__EventStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EventStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventStream * SOAP_FMAC4 soap_get_ns2__EventStream(struct soap*, ns2__EventStream *, const char*, const char*);

#ifndef soap_read_ns2__EventStream
#define soap_read_ns2__EventStream(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EventStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EventStream * SOAP_FMAC2 soap_instantiate_ns2__EventStream(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EventStream * soap_new_ns2__EventStream(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EventStream(soap, n, NULL, NULL, NULL); }

inline ns2__EventStream * soap_new_req_ns2__EventStream(struct soap *soap, int __size_EventStream, __ns2__union_EventStream *__union_EventStream) { ns2__EventStream *_p = soap_instantiate_ns2__EventStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventStream::__size_EventStream = __size_EventStream; _p->ns2__EventStream::__union_EventStream = __union_EventStream; } return _p; }

inline ns2__EventStream * soap_new_set_ns2__EventStream(struct soap *soap, int __size_EventStream, __ns2__union_EventStream *__union_EventStream, char *__item1) { ns2__EventStream *_p = soap_instantiate_ns2__EventStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventStream::__size_EventStream = __size_EventStream; _p->ns2__EventStream::__union_EventStream = __union_EventStream; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EventStream(struct soap *soap, ns2__EventStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EventStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZStreamExtension
#define SOAP_TYPE_ns2__PTZStreamExtension (589)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZStreamExtension(struct soap*, const char*, int, const ns2__PTZStreamExtension *, const char*);
SOAP_FMAC3 ns2__PTZStreamExtension * SOAP_FMAC4 soap_in_ns2__PTZStreamExtension(struct soap*, const char*, ns2__PTZStreamExtension *, const char*);

#ifndef soap_write_ns2__PTZStreamExtension
#define soap_write_ns2__PTZStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStreamExtension * SOAP_FMAC4 soap_get_ns2__PTZStreamExtension(struct soap*, ns2__PTZStreamExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZStreamExtension
#define soap_read_ns2__PTZStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZStreamExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZStreamExtension * soap_new_ns2__PTZStreamExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZStreamExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZStreamExtension * soap_new_req_ns2__PTZStreamExtension(struct soap *soap) { ns2__PTZStreamExtension *_p = soap_instantiate_ns2__PTZStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZStreamExtension * soap_new_set_ns2__PTZStreamExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZStreamExtension *_p = soap_instantiate_ns2__PTZStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStreamExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZStreamExtension(struct soap *soap, ns2__PTZStreamExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZStreamExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZStream
#define SOAP_TYPE_ns2__PTZStream (588)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZStream(struct soap*, const char*, int, const ns2__PTZStream *, const char*);
SOAP_FMAC3 ns2__PTZStream * SOAP_FMAC4 soap_in_ns2__PTZStream(struct soap*, const char*, ns2__PTZStream *, const char*);

#ifndef soap_write_ns2__PTZStream
#define soap_write_ns2__PTZStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStream * SOAP_FMAC4 soap_get_ns2__PTZStream(struct soap*, ns2__PTZStream *, const char*, const char*);

#ifndef soap_read_ns2__PTZStream
#define soap_read_ns2__PTZStream(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZStream * SOAP_FMAC2 soap_instantiate_ns2__PTZStream(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZStream * soap_new_ns2__PTZStream(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZStream(soap, n, NULL, NULL, NULL); }

inline ns2__PTZStream * soap_new_req_ns2__PTZStream(struct soap *soap, int __size_PTZStream, __ns2__union_PTZStream *__union_PTZStream) { ns2__PTZStream *_p = soap_instantiate_ns2__PTZStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStream::__size_PTZStream = __size_PTZStream; _p->ns2__PTZStream::__union_PTZStream = __union_PTZStream; } return _p; }

inline ns2__PTZStream * soap_new_set_ns2__PTZStream(struct soap *soap, int __size_PTZStream, __ns2__union_PTZStream *__union_PTZStream, char *__item1) { ns2__PTZStream *_p = soap_instantiate_ns2__PTZStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStream::__size_PTZStream = __size_PTZStream; _p->ns2__PTZStream::__union_PTZStream = __union_PTZStream; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZStream(struct soap *soap, ns2__PTZStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoAnalyticsStreamExtension
#define SOAP_TYPE_ns2__VideoAnalyticsStreamExtension (587)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoAnalyticsStreamExtension(struct soap*, const char*, int, const ns2__VideoAnalyticsStreamExtension *, const char*);
SOAP_FMAC3 ns2__VideoAnalyticsStreamExtension * SOAP_FMAC4 soap_in_ns2__VideoAnalyticsStreamExtension(struct soap*, const char*, ns2__VideoAnalyticsStreamExtension *, const char*);

#ifndef soap_write_ns2__VideoAnalyticsStreamExtension
#define soap_write_ns2__VideoAnalyticsStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoAnalyticsStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAnalyticsStreamExtension * SOAP_FMAC4 soap_get_ns2__VideoAnalyticsStreamExtension(struct soap*, ns2__VideoAnalyticsStreamExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoAnalyticsStreamExtension
#define soap_read_ns2__VideoAnalyticsStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoAnalyticsStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoAnalyticsStreamExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoAnalyticsStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoAnalyticsStreamExtension * soap_new_ns2__VideoAnalyticsStreamExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoAnalyticsStreamExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoAnalyticsStreamExtension * soap_new_req_ns2__VideoAnalyticsStreamExtension(struct soap *soap) { ns2__VideoAnalyticsStreamExtension *_p = soap_instantiate_ns2__VideoAnalyticsStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoAnalyticsStreamExtension * soap_new_set_ns2__VideoAnalyticsStreamExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoAnalyticsStreamExtension *_p = soap_instantiate_ns2__VideoAnalyticsStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAnalyticsStreamExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoAnalyticsStreamExtension(struct soap *soap, ns2__VideoAnalyticsStreamExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoAnalyticsStreamExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoAnalyticsStream
#define SOAP_TYPE_ns2__VideoAnalyticsStream (586)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoAnalyticsStream(struct soap*, const char*, int, const ns2__VideoAnalyticsStream *, const char*);
SOAP_FMAC3 ns2__VideoAnalyticsStream * SOAP_FMAC4 soap_in_ns2__VideoAnalyticsStream(struct soap*, const char*, ns2__VideoAnalyticsStream *, const char*);

#ifndef soap_write_ns2__VideoAnalyticsStream
#define soap_write_ns2__VideoAnalyticsStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoAnalyticsStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAnalyticsStream * SOAP_FMAC4 soap_get_ns2__VideoAnalyticsStream(struct soap*, ns2__VideoAnalyticsStream *, const char*, const char*);

#ifndef soap_read_ns2__VideoAnalyticsStream
#define soap_read_ns2__VideoAnalyticsStream(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoAnalyticsStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoAnalyticsStream * SOAP_FMAC2 soap_instantiate_ns2__VideoAnalyticsStream(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoAnalyticsStream * soap_new_ns2__VideoAnalyticsStream(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoAnalyticsStream(soap, n, NULL, NULL, NULL); }

inline ns2__VideoAnalyticsStream * soap_new_req_ns2__VideoAnalyticsStream(struct soap *soap, int __size_VideoAnalyticsStream, __ns2__union_VideoAnalyticsStream *__union_VideoAnalyticsStream) { ns2__VideoAnalyticsStream *_p = soap_instantiate_ns2__VideoAnalyticsStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAnalyticsStream::__size_VideoAnalyticsStream = __size_VideoAnalyticsStream; _p->ns2__VideoAnalyticsStream::__union_VideoAnalyticsStream = __union_VideoAnalyticsStream; } return _p; }

inline ns2__VideoAnalyticsStream * soap_new_set_ns2__VideoAnalyticsStream(struct soap *soap, int __size_VideoAnalyticsStream, __ns2__union_VideoAnalyticsStream *__union_VideoAnalyticsStream, char *__item1) { ns2__VideoAnalyticsStream *_p = soap_instantiate_ns2__VideoAnalyticsStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAnalyticsStream::__size_VideoAnalyticsStream = __size_VideoAnalyticsStream; _p->ns2__VideoAnalyticsStream::__union_VideoAnalyticsStream = __union_VideoAnalyticsStream; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoAnalyticsStream(struct soap *soap, ns2__VideoAnalyticsStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoAnalyticsStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioAnalyticsStreamExtension
#define SOAP_TYPE_ns2__AudioAnalyticsStreamExtension (585)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioAnalyticsStreamExtension(struct soap*, const char*, int, const ns2__AudioAnalyticsStreamExtension *, const char*);
SOAP_FMAC3 ns2__AudioAnalyticsStreamExtension * SOAP_FMAC4 soap_in_ns2__AudioAnalyticsStreamExtension(struct soap*, const char*, ns2__AudioAnalyticsStreamExtension *, const char*);

#ifndef soap_write_ns2__AudioAnalyticsStreamExtension
#define soap_write_ns2__AudioAnalyticsStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioAnalyticsStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioAnalyticsStreamExtension * SOAP_FMAC4 soap_get_ns2__AudioAnalyticsStreamExtension(struct soap*, ns2__AudioAnalyticsStreamExtension *, const char*, const char*);

#ifndef soap_read_ns2__AudioAnalyticsStreamExtension
#define soap_read_ns2__AudioAnalyticsStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioAnalyticsStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioAnalyticsStreamExtension * SOAP_FMAC2 soap_instantiate_ns2__AudioAnalyticsStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioAnalyticsStreamExtension * soap_new_ns2__AudioAnalyticsStreamExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioAnalyticsStreamExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AudioAnalyticsStreamExtension * soap_new_req_ns2__AudioAnalyticsStreamExtension(struct soap *soap) { ns2__AudioAnalyticsStreamExtension *_p = soap_instantiate_ns2__AudioAnalyticsStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioAnalyticsStreamExtension * soap_new_set_ns2__AudioAnalyticsStreamExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AudioAnalyticsStreamExtension *_p = soap_instantiate_ns2__AudioAnalyticsStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioAnalyticsStreamExtension::__any = __any; _p->ns2__AudioAnalyticsStreamExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioAnalyticsStreamExtension(struct soap *soap, ns2__AudioAnalyticsStreamExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioAnalyticsStreamExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioDescriptor
#define SOAP_TYPE_ns2__AudioDescriptor (584)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioDescriptor(struct soap*, const char*, int, const ns2__AudioDescriptor *, const char*);
SOAP_FMAC3 ns2__AudioDescriptor * SOAP_FMAC4 soap_in_ns2__AudioDescriptor(struct soap*, const char*, ns2__AudioDescriptor *, const char*);

#ifndef soap_write_ns2__AudioDescriptor
#define soap_write_ns2__AudioDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDescriptor * SOAP_FMAC4 soap_get_ns2__AudioDescriptor(struct soap*, ns2__AudioDescriptor *, const char*, const char*);

#ifndef soap_read_ns2__AudioDescriptor
#define soap_read_ns2__AudioDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioDescriptor * SOAP_FMAC2 soap_instantiate_ns2__AudioDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioDescriptor * soap_new_ns2__AudioDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioDescriptor(soap, n, NULL, NULL, NULL); }

inline ns2__AudioDescriptor * soap_new_req_ns2__AudioDescriptor(struct soap *soap, time_t UtcTime) { ns2__AudioDescriptor *_p = soap_instantiate_ns2__AudioDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioDescriptor::UtcTime = UtcTime; } return _p; }

inline ns2__AudioDescriptor * soap_new_set_ns2__AudioDescriptor(struct soap *soap, const std::vector<char * >& __any, time_t UtcTime, char *__anyAttribute, char *__item1) { ns2__AudioDescriptor *_p = soap_instantiate_ns2__AudioDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioDescriptor::__any = __any; _p->ns2__AudioDescriptor::UtcTime = UtcTime; _p->ns2__AudioDescriptor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioDescriptor(struct soap *soap, ns2__AudioDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioAnalyticsStream
#define SOAP_TYPE_ns2__AudioAnalyticsStream (583)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioAnalyticsStream(struct soap*, const char*, int, const ns2__AudioAnalyticsStream *, const char*);
SOAP_FMAC3 ns2__AudioAnalyticsStream * SOAP_FMAC4 soap_in_ns2__AudioAnalyticsStream(struct soap*, const char*, ns2__AudioAnalyticsStream *, const char*);

#ifndef soap_write_ns2__AudioAnalyticsStream
#define soap_write_ns2__AudioAnalyticsStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioAnalyticsStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioAnalyticsStream * SOAP_FMAC4 soap_get_ns2__AudioAnalyticsStream(struct soap*, ns2__AudioAnalyticsStream *, const char*, const char*);

#ifndef soap_read_ns2__AudioAnalyticsStream
#define soap_read_ns2__AudioAnalyticsStream(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioAnalyticsStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioAnalyticsStream * SOAP_FMAC2 soap_instantiate_ns2__AudioAnalyticsStream(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioAnalyticsStream * soap_new_ns2__AudioAnalyticsStream(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioAnalyticsStream(soap, n, NULL, NULL, NULL); }

inline ns2__AudioAnalyticsStream * soap_new_req_ns2__AudioAnalyticsStream(struct soap *soap) { ns2__AudioAnalyticsStream *_p = soap_instantiate_ns2__AudioAnalyticsStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioAnalyticsStream * soap_new_set_ns2__AudioAnalyticsStream(struct soap *soap, const std::vector<ns2__AudioDescriptor * >& AudioDescriptor, ns2__AudioAnalyticsStreamExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AudioAnalyticsStream *_p = soap_instantiate_ns2__AudioAnalyticsStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioAnalyticsStream::AudioDescriptor = AudioDescriptor; _p->ns2__AudioAnalyticsStream::Extension = Extension; _p->ns2__AudioAnalyticsStream::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioAnalyticsStream(struct soap *soap, ns2__AudioAnalyticsStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioAnalyticsStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataStreamExtension2
#define SOAP_TYPE_ns2__MetadataStreamExtension2 (582)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataStreamExtension2(struct soap*, const char*, int, const ns2__MetadataStreamExtension2 *, const char*);
SOAP_FMAC3 ns2__MetadataStreamExtension2 * SOAP_FMAC4 soap_in_ns2__MetadataStreamExtension2(struct soap*, const char*, ns2__MetadataStreamExtension2 *, const char*);

#ifndef soap_write_ns2__MetadataStreamExtension2
#define soap_write_ns2__MetadataStreamExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataStreamExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataStreamExtension2 * SOAP_FMAC4 soap_get_ns2__MetadataStreamExtension2(struct soap*, ns2__MetadataStreamExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__MetadataStreamExtension2
#define soap_read_ns2__MetadataStreamExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataStreamExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataStreamExtension2 * SOAP_FMAC2 soap_instantiate_ns2__MetadataStreamExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataStreamExtension2 * soap_new_ns2__MetadataStreamExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataStreamExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataStreamExtension2 * soap_new_req_ns2__MetadataStreamExtension2(struct soap *soap) { ns2__MetadataStreamExtension2 *_p = soap_instantiate_ns2__MetadataStreamExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataStreamExtension2 * soap_new_set_ns2__MetadataStreamExtension2(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MetadataStreamExtension2 *_p = soap_instantiate_ns2__MetadataStreamExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataStreamExtension2::__any = __any; _p->ns2__MetadataStreamExtension2::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataStreamExtension2(struct soap *soap, ns2__MetadataStreamExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataStreamExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataStreamExtension
#define SOAP_TYPE_ns2__MetadataStreamExtension (581)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataStreamExtension(struct soap*, const char*, int, const ns2__MetadataStreamExtension *, const char*);
SOAP_FMAC3 ns2__MetadataStreamExtension * SOAP_FMAC4 soap_in_ns2__MetadataStreamExtension(struct soap*, const char*, ns2__MetadataStreamExtension *, const char*);

#ifndef soap_write_ns2__MetadataStreamExtension
#define soap_write_ns2__MetadataStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataStreamExtension * SOAP_FMAC4 soap_get_ns2__MetadataStreamExtension(struct soap*, ns2__MetadataStreamExtension *, const char*, const char*);

#ifndef soap_read_ns2__MetadataStreamExtension
#define soap_read_ns2__MetadataStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataStreamExtension * SOAP_FMAC2 soap_instantiate_ns2__MetadataStreamExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataStreamExtension * soap_new_ns2__MetadataStreamExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataStreamExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataStreamExtension * soap_new_req_ns2__MetadataStreamExtension(struct soap *soap) { ns2__MetadataStreamExtension *_p = soap_instantiate_ns2__MetadataStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataStreamExtension * soap_new_set_ns2__MetadataStreamExtension(struct soap *soap, const std::vector<char * >& __any, ns2__AudioAnalyticsStream *AudioAnalyticsStream, ns2__MetadataStreamExtension2 *Extension, char *__item1) { ns2__MetadataStreamExtension *_p = soap_instantiate_ns2__MetadataStreamExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataStreamExtension::__any = __any; _p->ns2__MetadataStreamExtension::AudioAnalyticsStream = AudioAnalyticsStream; _p->ns2__MetadataStreamExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataStreamExtension(struct soap *soap, ns2__MetadataStreamExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataStreamExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataStream
#define SOAP_TYPE_ns2__MetadataStream (580)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataStream(struct soap*, const char*, int, const ns2__MetadataStream *, const char*);
SOAP_FMAC3 ns2__MetadataStream * SOAP_FMAC4 soap_in_ns2__MetadataStream(struct soap*, const char*, ns2__MetadataStream *, const char*);

#ifndef soap_write_ns2__MetadataStream
#define soap_write_ns2__MetadataStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataStream * SOAP_FMAC4 soap_get_ns2__MetadataStream(struct soap*, ns2__MetadataStream *, const char*, const char*);

#ifndef soap_read_ns2__MetadataStream
#define soap_read_ns2__MetadataStream(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataStream * SOAP_FMAC2 soap_instantiate_ns2__MetadataStream(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataStream * soap_new_ns2__MetadataStream(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataStream(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataStream * soap_new_req_ns2__MetadataStream(struct soap *soap, int __size_MetadataStream, __ns2__union_MetadataStream *__union_MetadataStream) { ns2__MetadataStream *_p = soap_instantiate_ns2__MetadataStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataStream::__size_MetadataStream = __size_MetadataStream; _p->ns2__MetadataStream::__union_MetadataStream = __union_MetadataStream; } return _p; }

inline ns2__MetadataStream * soap_new_set_ns2__MetadataStream(struct soap *soap, int __size_MetadataStream, __ns2__union_MetadataStream *__union_MetadataStream, char *__anyAttribute, char *__item1) { ns2__MetadataStream *_p = soap_instantiate_ns2__MetadataStream(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataStream::__size_MetadataStream = __size_MetadataStream; _p->ns2__MetadataStream::__union_MetadataStream = __union_MetadataStream; _p->ns2__MetadataStream::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataStream(struct soap *soap, ns2__MetadataStream *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataStream(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CellLayout
#define SOAP_TYPE_ns2__CellLayout (579)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CellLayout(struct soap*, const char*, int, const ns2__CellLayout *, const char*);
SOAP_FMAC3 ns2__CellLayout * SOAP_FMAC4 soap_in_ns2__CellLayout(struct soap*, const char*, ns2__CellLayout *, const char*);

#ifndef soap_write_ns2__CellLayout
#define soap_write_ns2__CellLayout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CellLayout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CellLayout * SOAP_FMAC4 soap_get_ns2__CellLayout(struct soap*, ns2__CellLayout *, const char*, const char*);

#ifndef soap_read_ns2__CellLayout
#define soap_read_ns2__CellLayout(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CellLayout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CellLayout * SOAP_FMAC2 soap_instantiate_ns2__CellLayout(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CellLayout * soap_new_ns2__CellLayout(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CellLayout(soap, n, NULL, NULL, NULL); }

inline ns2__CellLayout * soap_new_req_ns2__CellLayout(struct soap *soap, ns2__Transformation *Transformation, const std::string& Columns, const std::string& Rows) { ns2__CellLayout *_p = soap_instantiate_ns2__CellLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CellLayout::Transformation = Transformation; _p->ns2__CellLayout::Columns = Columns; _p->ns2__CellLayout::Rows = Rows; } return _p; }

inline ns2__CellLayout * soap_new_set_ns2__CellLayout(struct soap *soap, ns2__Transformation *Transformation, const std::vector<char * >& __any, const std::string& Columns, const std::string& Rows, char *__anyAttribute, char *__item1) { ns2__CellLayout *_p = soap_instantiate_ns2__CellLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CellLayout::Transformation = Transformation; _p->ns2__CellLayout::__any = __any; _p->ns2__CellLayout::Columns = Columns; _p->ns2__CellLayout::Rows = Rows; _p->ns2__CellLayout::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CellLayout(struct soap *soap, ns2__CellLayout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CellLayout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MotionExpressionConfiguration
#define SOAP_TYPE_ns2__MotionExpressionConfiguration (578)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MotionExpressionConfiguration(struct soap*, const char*, int, const ns2__MotionExpressionConfiguration *, const char*);
SOAP_FMAC3 ns2__MotionExpressionConfiguration * SOAP_FMAC4 soap_in_ns2__MotionExpressionConfiguration(struct soap*, const char*, ns2__MotionExpressionConfiguration *, const char*);

#ifndef soap_write_ns2__MotionExpressionConfiguration
#define soap_write_ns2__MotionExpressionConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MotionExpressionConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MotionExpressionConfiguration * SOAP_FMAC4 soap_get_ns2__MotionExpressionConfiguration(struct soap*, ns2__MotionExpressionConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__MotionExpressionConfiguration
#define soap_read_ns2__MotionExpressionConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MotionExpressionConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MotionExpressionConfiguration * SOAP_FMAC2 soap_instantiate_ns2__MotionExpressionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MotionExpressionConfiguration * soap_new_ns2__MotionExpressionConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MotionExpressionConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__MotionExpressionConfiguration * soap_new_req_ns2__MotionExpressionConfiguration(struct soap *soap, ns2__MotionExpression *MotionExpression) { ns2__MotionExpressionConfiguration *_p = soap_instantiate_ns2__MotionExpressionConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MotionExpressionConfiguration::MotionExpression = MotionExpression; } return _p; }

inline ns2__MotionExpressionConfiguration * soap_new_set_ns2__MotionExpressionConfiguration(struct soap *soap, ns2__MotionExpression *MotionExpression, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MotionExpressionConfiguration *_p = soap_instantiate_ns2__MotionExpressionConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MotionExpressionConfiguration::MotionExpression = MotionExpression; _p->ns2__MotionExpressionConfiguration::__any = __any; _p->ns2__MotionExpressionConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MotionExpressionConfiguration(struct soap *soap, ns2__MotionExpressionConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MotionExpressionConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MotionExpression
#define SOAP_TYPE_ns2__MotionExpression (577)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MotionExpression(struct soap*, const char*, int, const ns2__MotionExpression *, const char*);
SOAP_FMAC3 ns2__MotionExpression * SOAP_FMAC4 soap_in_ns2__MotionExpression(struct soap*, const char*, ns2__MotionExpression *, const char*);

#ifndef soap_write_ns2__MotionExpression
#define soap_write_ns2__MotionExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MotionExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MotionExpression * SOAP_FMAC4 soap_get_ns2__MotionExpression(struct soap*, ns2__MotionExpression *, const char*, const char*);

#ifndef soap_read_ns2__MotionExpression
#define soap_read_ns2__MotionExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MotionExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MotionExpression * SOAP_FMAC2 soap_instantiate_ns2__MotionExpression(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MotionExpression * soap_new_ns2__MotionExpression(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MotionExpression(soap, n, NULL, NULL, NULL); }

inline ns2__MotionExpression * soap_new_req_ns2__MotionExpression(struct soap *soap, const std::string& Expression) { ns2__MotionExpression *_p = soap_instantiate_ns2__MotionExpression(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MotionExpression::Expression = Expression; } return _p; }

inline ns2__MotionExpression * soap_new_set_ns2__MotionExpression(struct soap *soap, const std::string& Expression, const std::vector<char * >& __any, std::string *Type, char *__anyAttribute, char *__item1) { ns2__MotionExpression *_p = soap_instantiate_ns2__MotionExpression(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MotionExpression::Expression = Expression; _p->ns2__MotionExpression::__any = __any; _p->ns2__MotionExpression::Type = Type; _p->ns2__MotionExpression::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MotionExpression(struct soap *soap, ns2__MotionExpression *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MotionExpression(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PolylineArrayConfiguration
#define SOAP_TYPE_ns2__PolylineArrayConfiguration (576)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PolylineArrayConfiguration(struct soap*, const char*, int, const ns2__PolylineArrayConfiguration *, const char*);
SOAP_FMAC3 ns2__PolylineArrayConfiguration * SOAP_FMAC4 soap_in_ns2__PolylineArrayConfiguration(struct soap*, const char*, ns2__PolylineArrayConfiguration *, const char*);

#ifndef soap_write_ns2__PolylineArrayConfiguration
#define soap_write_ns2__PolylineArrayConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PolylineArrayConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PolylineArrayConfiguration * SOAP_FMAC4 soap_get_ns2__PolylineArrayConfiguration(struct soap*, ns2__PolylineArrayConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__PolylineArrayConfiguration
#define soap_read_ns2__PolylineArrayConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PolylineArrayConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PolylineArrayConfiguration * SOAP_FMAC2 soap_instantiate_ns2__PolylineArrayConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PolylineArrayConfiguration * soap_new_ns2__PolylineArrayConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PolylineArrayConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__PolylineArrayConfiguration * soap_new_req_ns2__PolylineArrayConfiguration(struct soap *soap, ns2__PolylineArray *PolylineArray) { ns2__PolylineArrayConfiguration *_p = soap_instantiate_ns2__PolylineArrayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolylineArrayConfiguration::PolylineArray = PolylineArray; } return _p; }

inline ns2__PolylineArrayConfiguration * soap_new_set_ns2__PolylineArrayConfiguration(struct soap *soap, ns2__PolylineArray *PolylineArray, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PolylineArrayConfiguration *_p = soap_instantiate_ns2__PolylineArrayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolylineArrayConfiguration::PolylineArray = PolylineArray; _p->ns2__PolylineArrayConfiguration::__any = __any; _p->ns2__PolylineArrayConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PolylineArrayConfiguration(struct soap *soap, ns2__PolylineArrayConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PolylineArrayConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PolylineArrayExtension
#define SOAP_TYPE_ns2__PolylineArrayExtension (575)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PolylineArrayExtension(struct soap*, const char*, int, const ns2__PolylineArrayExtension *, const char*);
SOAP_FMAC3 ns2__PolylineArrayExtension * SOAP_FMAC4 soap_in_ns2__PolylineArrayExtension(struct soap*, const char*, ns2__PolylineArrayExtension *, const char*);

#ifndef soap_write_ns2__PolylineArrayExtension
#define soap_write_ns2__PolylineArrayExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PolylineArrayExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PolylineArrayExtension * SOAP_FMAC4 soap_get_ns2__PolylineArrayExtension(struct soap*, ns2__PolylineArrayExtension *, const char*, const char*);

#ifndef soap_read_ns2__PolylineArrayExtension
#define soap_read_ns2__PolylineArrayExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PolylineArrayExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PolylineArrayExtension * SOAP_FMAC2 soap_instantiate_ns2__PolylineArrayExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PolylineArrayExtension * soap_new_ns2__PolylineArrayExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PolylineArrayExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PolylineArrayExtension * soap_new_req_ns2__PolylineArrayExtension(struct soap *soap) { ns2__PolylineArrayExtension *_p = soap_instantiate_ns2__PolylineArrayExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PolylineArrayExtension * soap_new_set_ns2__PolylineArrayExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PolylineArrayExtension *_p = soap_instantiate_ns2__PolylineArrayExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolylineArrayExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PolylineArrayExtension(struct soap *soap, ns2__PolylineArrayExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PolylineArrayExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PolylineArray
#define SOAP_TYPE_ns2__PolylineArray (574)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PolylineArray(struct soap*, const char*, int, const ns2__PolylineArray *, const char*);
SOAP_FMAC3 ns2__PolylineArray * SOAP_FMAC4 soap_in_ns2__PolylineArray(struct soap*, const char*, ns2__PolylineArray *, const char*);

#ifndef soap_write_ns2__PolylineArray
#define soap_write_ns2__PolylineArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PolylineArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PolylineArray * SOAP_FMAC4 soap_get_ns2__PolylineArray(struct soap*, ns2__PolylineArray *, const char*, const char*);

#ifndef soap_read_ns2__PolylineArray
#define soap_read_ns2__PolylineArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PolylineArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PolylineArray * SOAP_FMAC2 soap_instantiate_ns2__PolylineArray(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PolylineArray * soap_new_ns2__PolylineArray(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PolylineArray(soap, n, NULL, NULL, NULL); }

inline ns2__PolylineArray * soap_new_req_ns2__PolylineArray(struct soap *soap, const std::vector<ns2__Polyline * >& Segment) { ns2__PolylineArray *_p = soap_instantiate_ns2__PolylineArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolylineArray::Segment = Segment; } return _p; }

inline ns2__PolylineArray * soap_new_set_ns2__PolylineArray(struct soap *soap, const std::vector<ns2__Polyline * >& Segment, ns2__PolylineArrayExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PolylineArray *_p = soap_instantiate_ns2__PolylineArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolylineArray::Segment = Segment; _p->ns2__PolylineArray::Extension = Extension; _p->ns2__PolylineArray::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PolylineArray(struct soap *soap, ns2__PolylineArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PolylineArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PolygonConfiguration
#define SOAP_TYPE_ns2__PolygonConfiguration (573)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PolygonConfiguration(struct soap*, const char*, int, const ns2__PolygonConfiguration *, const char*);
SOAP_FMAC3 ns2__PolygonConfiguration * SOAP_FMAC4 soap_in_ns2__PolygonConfiguration(struct soap*, const char*, ns2__PolygonConfiguration *, const char*);

#ifndef soap_write_ns2__PolygonConfiguration
#define soap_write_ns2__PolygonConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PolygonConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PolygonConfiguration * SOAP_FMAC4 soap_get_ns2__PolygonConfiguration(struct soap*, ns2__PolygonConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__PolygonConfiguration
#define soap_read_ns2__PolygonConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PolygonConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PolygonConfiguration * SOAP_FMAC2 soap_instantiate_ns2__PolygonConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PolygonConfiguration * soap_new_ns2__PolygonConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PolygonConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__PolygonConfiguration * soap_new_req_ns2__PolygonConfiguration(struct soap *soap, ns2__Polygon *Polygon) { ns2__PolygonConfiguration *_p = soap_instantiate_ns2__PolygonConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolygonConfiguration::Polygon = Polygon; } return _p; }

inline ns2__PolygonConfiguration * soap_new_set_ns2__PolygonConfiguration(struct soap *soap, ns2__Polygon *Polygon, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PolygonConfiguration *_p = soap_instantiate_ns2__PolygonConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PolygonConfiguration::Polygon = Polygon; _p->ns2__PolygonConfiguration::__any = __any; _p->ns2__PolygonConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PolygonConfiguration(struct soap *soap, ns2__PolygonConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PolygonConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_ns2__SupportedAnalyticsModulesExtension (572)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SupportedAnalyticsModulesExtension(struct soap*, const char*, int, const ns2__SupportedAnalyticsModulesExtension *, const char*);
SOAP_FMAC3 ns2__SupportedAnalyticsModulesExtension * SOAP_FMAC4 soap_in_ns2__SupportedAnalyticsModulesExtension(struct soap*, const char*, ns2__SupportedAnalyticsModulesExtension *, const char*);

#ifndef soap_write_ns2__SupportedAnalyticsModulesExtension
#define soap_write_ns2__SupportedAnalyticsModulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SupportedAnalyticsModulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportedAnalyticsModulesExtension * SOAP_FMAC4 soap_get_ns2__SupportedAnalyticsModulesExtension(struct soap*, ns2__SupportedAnalyticsModulesExtension *, const char*, const char*);

#ifndef soap_read_ns2__SupportedAnalyticsModulesExtension
#define soap_read_ns2__SupportedAnalyticsModulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SupportedAnalyticsModulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SupportedAnalyticsModulesExtension * SOAP_FMAC2 soap_instantiate_ns2__SupportedAnalyticsModulesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SupportedAnalyticsModulesExtension * soap_new_ns2__SupportedAnalyticsModulesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SupportedAnalyticsModulesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SupportedAnalyticsModulesExtension * soap_new_req_ns2__SupportedAnalyticsModulesExtension(struct soap *soap) { ns2__SupportedAnalyticsModulesExtension *_p = soap_instantiate_ns2__SupportedAnalyticsModulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SupportedAnalyticsModulesExtension * soap_new_set_ns2__SupportedAnalyticsModulesExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__SupportedAnalyticsModulesExtension *_p = soap_instantiate_ns2__SupportedAnalyticsModulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SupportedAnalyticsModulesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SupportedAnalyticsModulesExtension(struct soap *soap, ns2__SupportedAnalyticsModulesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SupportedAnalyticsModulesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SupportedAnalyticsModules
#define SOAP_TYPE_ns2__SupportedAnalyticsModules (571)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SupportedAnalyticsModules(struct soap*, const char*, int, const ns2__SupportedAnalyticsModules *, const char*);
SOAP_FMAC3 ns2__SupportedAnalyticsModules * SOAP_FMAC4 soap_in_ns2__SupportedAnalyticsModules(struct soap*, const char*, ns2__SupportedAnalyticsModules *, const char*);

#ifndef soap_write_ns2__SupportedAnalyticsModules
#define soap_write_ns2__SupportedAnalyticsModules(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SupportedAnalyticsModules", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportedAnalyticsModules * SOAP_FMAC4 soap_get_ns2__SupportedAnalyticsModules(struct soap*, ns2__SupportedAnalyticsModules *, const char*, const char*);

#ifndef soap_read_ns2__SupportedAnalyticsModules
#define soap_read_ns2__SupportedAnalyticsModules(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SupportedAnalyticsModules(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SupportedAnalyticsModules * SOAP_FMAC2 soap_instantiate_ns2__SupportedAnalyticsModules(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SupportedAnalyticsModules * soap_new_ns2__SupportedAnalyticsModules(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SupportedAnalyticsModules(soap, n, NULL, NULL, NULL); }

inline ns2__SupportedAnalyticsModules * soap_new_req_ns2__SupportedAnalyticsModules(struct soap *soap) { ns2__SupportedAnalyticsModules *_p = soap_instantiate_ns2__SupportedAnalyticsModules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SupportedAnalyticsModules * soap_new_set_ns2__SupportedAnalyticsModules(struct soap *soap, const std::vector<std::string >& AnalyticsModuleContentSchemaLocation, const std::vector<ns2__ConfigDescription * >& AnalyticsModuleDescription, ns2__SupportedAnalyticsModulesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SupportedAnalyticsModules *_p = soap_instantiate_ns2__SupportedAnalyticsModules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SupportedAnalyticsModules::AnalyticsModuleContentSchemaLocation = AnalyticsModuleContentSchemaLocation; _p->ns2__SupportedAnalyticsModules::AnalyticsModuleDescription = AnalyticsModuleDescription; _p->ns2__SupportedAnalyticsModules::Extension = Extension; _p->ns2__SupportedAnalyticsModules::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SupportedAnalyticsModules(struct soap *soap, ns2__SupportedAnalyticsModules *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SupportedAnalyticsModules(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SupportedRulesExtension
#define SOAP_TYPE_ns2__SupportedRulesExtension (570)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SupportedRulesExtension(struct soap*, const char*, int, const ns2__SupportedRulesExtension *, const char*);
SOAP_FMAC3 ns2__SupportedRulesExtension * SOAP_FMAC4 soap_in_ns2__SupportedRulesExtension(struct soap*, const char*, ns2__SupportedRulesExtension *, const char*);

#ifndef soap_write_ns2__SupportedRulesExtension
#define soap_write_ns2__SupportedRulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SupportedRulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportedRulesExtension * SOAP_FMAC4 soap_get_ns2__SupportedRulesExtension(struct soap*, ns2__SupportedRulesExtension *, const char*, const char*);

#ifndef soap_read_ns2__SupportedRulesExtension
#define soap_read_ns2__SupportedRulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SupportedRulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SupportedRulesExtension * SOAP_FMAC2 soap_instantiate_ns2__SupportedRulesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SupportedRulesExtension * soap_new_ns2__SupportedRulesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SupportedRulesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SupportedRulesExtension * soap_new_req_ns2__SupportedRulesExtension(struct soap *soap) { ns2__SupportedRulesExtension *_p = soap_instantiate_ns2__SupportedRulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SupportedRulesExtension * soap_new_set_ns2__SupportedRulesExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__SupportedRulesExtension *_p = soap_instantiate_ns2__SupportedRulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SupportedRulesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SupportedRulesExtension(struct soap *soap, ns2__SupportedRulesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SupportedRulesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SupportedRules
#define SOAP_TYPE_ns2__SupportedRules (569)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SupportedRules(struct soap*, const char*, int, const ns2__SupportedRules *, const char*);
SOAP_FMAC3 ns2__SupportedRules * SOAP_FMAC4 soap_in_ns2__SupportedRules(struct soap*, const char*, ns2__SupportedRules *, const char*);

#ifndef soap_write_ns2__SupportedRules
#define soap_write_ns2__SupportedRules(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SupportedRules", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportedRules * SOAP_FMAC4 soap_get_ns2__SupportedRules(struct soap*, ns2__SupportedRules *, const char*, const char*);

#ifndef soap_read_ns2__SupportedRules
#define soap_read_ns2__SupportedRules(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SupportedRules(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SupportedRules * SOAP_FMAC2 soap_instantiate_ns2__SupportedRules(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SupportedRules * soap_new_ns2__SupportedRules(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SupportedRules(soap, n, NULL, NULL, NULL); }

inline ns2__SupportedRules * soap_new_req_ns2__SupportedRules(struct soap *soap) { ns2__SupportedRules *_p = soap_instantiate_ns2__SupportedRules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SupportedRules * soap_new_set_ns2__SupportedRules(struct soap *soap, const std::vector<std::string >& RuleContentSchemaLocation, const std::vector<ns2__ConfigDescription * >& RuleDescription, ns2__SupportedRulesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SupportedRules *_p = soap_instantiate_ns2__SupportedRules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SupportedRules::RuleContentSchemaLocation = RuleContentSchemaLocation; _p->ns2__SupportedRules::RuleDescription = RuleDescription; _p->ns2__SupportedRules::Extension = Extension; _p->ns2__SupportedRules::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SupportedRules(struct soap *soap, ns2__SupportedRules *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SupportedRules(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ConfigDescriptionExtension
#define SOAP_TYPE_ns2__ConfigDescriptionExtension (568)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConfigDescriptionExtension(struct soap*, const char*, int, const ns2__ConfigDescriptionExtension *, const char*);
SOAP_FMAC3 ns2__ConfigDescriptionExtension * SOAP_FMAC4 soap_in_ns2__ConfigDescriptionExtension(struct soap*, const char*, ns2__ConfigDescriptionExtension *, const char*);

#ifndef soap_write_ns2__ConfigDescriptionExtension
#define soap_write_ns2__ConfigDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ConfigDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ConfigDescriptionExtension * SOAP_FMAC4 soap_get_ns2__ConfigDescriptionExtension(struct soap*, ns2__ConfigDescriptionExtension *, const char*, const char*);

#ifndef soap_read_ns2__ConfigDescriptionExtension
#define soap_read_ns2__ConfigDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ConfigDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ConfigDescriptionExtension * SOAP_FMAC2 soap_instantiate_ns2__ConfigDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ConfigDescriptionExtension * soap_new_ns2__ConfigDescriptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ConfigDescriptionExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ConfigDescriptionExtension * soap_new_req_ns2__ConfigDescriptionExtension(struct soap *soap) { ns2__ConfigDescriptionExtension *_p = soap_instantiate_ns2__ConfigDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ConfigDescriptionExtension * soap_new_set_ns2__ConfigDescriptionExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ConfigDescriptionExtension *_p = soap_instantiate_ns2__ConfigDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ConfigDescriptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ConfigDescriptionExtension(struct soap *soap, ns2__ConfigDescriptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ConfigDescriptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ConfigDescription
#define SOAP_TYPE_ns2__ConfigDescription (567)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConfigDescription(struct soap*, const char*, int, const ns2__ConfigDescription *, const char*);
SOAP_FMAC3 ns2__ConfigDescription * SOAP_FMAC4 soap_in_ns2__ConfigDescription(struct soap*, const char*, ns2__ConfigDescription *, const char*);

#ifndef soap_write_ns2__ConfigDescription
#define soap_write_ns2__ConfigDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ConfigDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ConfigDescription * SOAP_FMAC4 soap_get_ns2__ConfigDescription(struct soap*, ns2__ConfigDescription *, const char*, const char*);

#ifndef soap_read_ns2__ConfigDescription
#define soap_read_ns2__ConfigDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ConfigDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ConfigDescription * SOAP_FMAC2 soap_instantiate_ns2__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ConfigDescription * soap_new_ns2__ConfigDescription(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ConfigDescription(soap, n, NULL, NULL, NULL); }

inline ns2__ConfigDescription * soap_new_req_ns2__ConfigDescription(struct soap *soap, ns2__ItemListDescription *Parameters, const std::string& Name) { ns2__ConfigDescription *_p = soap_instantiate_ns2__ConfigDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ConfigDescription::Parameters = Parameters; _p->ns2__ConfigDescription::Name = Name; } return _p; }

inline ns2__ConfigDescription * soap_new_set_ns2__ConfigDescription(struct soap *soap, ns2__ItemListDescription *Parameters, std::vector<_ns2__ConfigDescription_Messages >*Messages, ns2__ConfigDescriptionExtension *Extension, const std::string& Name, char *__anyAttribute, char *__item1) { ns2__ConfigDescription *_p = soap_instantiate_ns2__ConfigDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ConfigDescription::Parameters = Parameters; _p->ns2__ConfigDescription::Messages = Messages; _p->ns2__ConfigDescription::Extension = Extension; _p->ns2__ConfigDescription::Name = Name; _p->ns2__ConfigDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ConfigDescription(struct soap *soap, ns2__ConfigDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ConfigDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Config
#define SOAP_TYPE_ns2__Config (566)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Config(struct soap*, const char*, int, const ns2__Config *, const char*);
SOAP_FMAC3 ns2__Config * SOAP_FMAC4 soap_in_ns2__Config(struct soap*, const char*, ns2__Config *, const char*);

#ifndef soap_write_ns2__Config
#define soap_write_ns2__Config(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Config", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Config * SOAP_FMAC4 soap_get_ns2__Config(struct soap*, ns2__Config *, const char*, const char*);

#ifndef soap_read_ns2__Config
#define soap_read_ns2__Config(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Config(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Config * SOAP_FMAC2 soap_instantiate_ns2__Config(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Config * soap_new_ns2__Config(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Config(soap, n, NULL, NULL, NULL); }

inline ns2__Config * soap_new_req_ns2__Config(struct soap *soap, ns2__ItemList *Parameters, const std::string& Name, const std::string& Type) { ns2__Config *_p = soap_instantiate_ns2__Config(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Config::Parameters = Parameters; _p->ns2__Config::Name = Name; _p->ns2__Config::Type = Type; } return _p; }

inline ns2__Config * soap_new_set_ns2__Config(struct soap *soap, ns2__ItemList *Parameters, const std::string& Name, const std::string& Type, char *__item1) { ns2__Config *_p = soap_instantiate_ns2__Config(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Config::Parameters = Parameters; _p->ns2__Config::Name = Name; _p->ns2__Config::Type = Type; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Config(struct soap *soap, ns2__Config *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Config(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RuleEngineConfigurationExtension
#define SOAP_TYPE_ns2__RuleEngineConfigurationExtension (565)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RuleEngineConfigurationExtension(struct soap*, const char*, int, const ns2__RuleEngineConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_in_ns2__RuleEngineConfigurationExtension(struct soap*, const char*, ns2__RuleEngineConfigurationExtension *, const char*);

#ifndef soap_write_ns2__RuleEngineConfigurationExtension
#define soap_write_ns2__RuleEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RuleEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_get_ns2__RuleEngineConfigurationExtension(struct soap*, ns2__RuleEngineConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__RuleEngineConfigurationExtension
#define soap_read_ns2__RuleEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RuleEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RuleEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__RuleEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RuleEngineConfigurationExtension * soap_new_ns2__RuleEngineConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RuleEngineConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RuleEngineConfigurationExtension * soap_new_req_ns2__RuleEngineConfigurationExtension(struct soap *soap) { ns2__RuleEngineConfigurationExtension *_p = soap_instantiate_ns2__RuleEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RuleEngineConfigurationExtension * soap_new_set_ns2__RuleEngineConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RuleEngineConfigurationExtension *_p = soap_instantiate_ns2__RuleEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RuleEngineConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RuleEngineConfigurationExtension(struct soap *soap, ns2__RuleEngineConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RuleEngineConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RuleEngineConfiguration
#define SOAP_TYPE_ns2__RuleEngineConfiguration (564)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RuleEngineConfiguration(struct soap*, const char*, int, const ns2__RuleEngineConfiguration *, const char*);
SOAP_FMAC3 ns2__RuleEngineConfiguration * SOAP_FMAC4 soap_in_ns2__RuleEngineConfiguration(struct soap*, const char*, ns2__RuleEngineConfiguration *, const char*);

#ifndef soap_write_ns2__RuleEngineConfiguration
#define soap_write_ns2__RuleEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RuleEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RuleEngineConfiguration * SOAP_FMAC4 soap_get_ns2__RuleEngineConfiguration(struct soap*, ns2__RuleEngineConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__RuleEngineConfiguration
#define soap_read_ns2__RuleEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RuleEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RuleEngineConfiguration * SOAP_FMAC2 soap_instantiate_ns2__RuleEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RuleEngineConfiguration * soap_new_ns2__RuleEngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RuleEngineConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__RuleEngineConfiguration * soap_new_req_ns2__RuleEngineConfiguration(struct soap *soap) { ns2__RuleEngineConfiguration *_p = soap_instantiate_ns2__RuleEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RuleEngineConfiguration * soap_new_set_ns2__RuleEngineConfiguration(struct soap *soap, const std::vector<ns2__Config * >& Rule, ns2__RuleEngineConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__RuleEngineConfiguration *_p = soap_instantiate_ns2__RuleEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RuleEngineConfiguration::Rule = Rule; _p->ns2__RuleEngineConfiguration::Extension = Extension; _p->ns2__RuleEngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RuleEngineConfiguration(struct soap *soap, ns2__RuleEngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RuleEngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_ns2__AnalyticsEngineConfigurationExtension (563)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngineConfigurationExtension(struct soap*, const char*, int, const ns2__AnalyticsEngineConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_in_ns2__AnalyticsEngineConfigurationExtension(struct soap*, const char*, ns2__AnalyticsEngineConfigurationExtension *, const char*);

#ifndef soap_write_ns2__AnalyticsEngineConfigurationExtension
#define soap_write_ns2__AnalyticsEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_get_ns2__AnalyticsEngineConfigurationExtension(struct soap*, ns2__AnalyticsEngineConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngineConfigurationExtension
#define soap_read_ns2__AnalyticsEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngineConfigurationExtension * soap_new_ns2__AnalyticsEngineConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngineConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngineConfigurationExtension * soap_new_req_ns2__AnalyticsEngineConfigurationExtension(struct soap *soap) { ns2__AnalyticsEngineConfigurationExtension *_p = soap_instantiate_ns2__AnalyticsEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnalyticsEngineConfigurationExtension * soap_new_set_ns2__AnalyticsEngineConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AnalyticsEngineConfigurationExtension *_p = soap_instantiate_ns2__AnalyticsEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsEngineConfigurationExtension(struct soap *soap, ns2__AnalyticsEngineConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngineConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsEngineConfiguration
#define SOAP_TYPE_ns2__AnalyticsEngineConfiguration (562)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsEngineConfiguration(struct soap*, const char*, int, const ns2__AnalyticsEngineConfiguration *, const char*);
SOAP_FMAC3 ns2__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_in_ns2__AnalyticsEngineConfiguration(struct soap*, const char*, ns2__AnalyticsEngineConfiguration *, const char*);

#ifndef soap_write_ns2__AnalyticsEngineConfiguration
#define soap_write_ns2__AnalyticsEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_get_ns2__AnalyticsEngineConfiguration(struct soap*, ns2__AnalyticsEngineConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsEngineConfiguration
#define soap_read_ns2__AnalyticsEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsEngineConfiguration * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsEngineConfiguration * soap_new_ns2__AnalyticsEngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsEngineConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsEngineConfiguration * soap_new_req_ns2__AnalyticsEngineConfiguration(struct soap *soap) { ns2__AnalyticsEngineConfiguration *_p = soap_instantiate_ns2__AnalyticsEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnalyticsEngineConfiguration * soap_new_set_ns2__AnalyticsEngineConfiguration(struct soap *soap, const std::vector<ns2__Config * >& AnalyticsModule, ns2__AnalyticsEngineConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AnalyticsEngineConfiguration *_p = soap_instantiate_ns2__AnalyticsEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsEngineConfiguration::AnalyticsModule = AnalyticsModule; _p->ns2__AnalyticsEngineConfiguration::Extension = Extension; _p->ns2__AnalyticsEngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsEngineConfiguration(struct soap *soap, ns2__AnalyticsEngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsEngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MotionInCells
#define SOAP_TYPE_ns2__MotionInCells (561)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MotionInCells(struct soap*, const char*, int, const ns2__MotionInCells *, const char*);
SOAP_FMAC3 ns2__MotionInCells * SOAP_FMAC4 soap_in_ns2__MotionInCells(struct soap*, const char*, ns2__MotionInCells *, const char*);

#ifndef soap_write_ns2__MotionInCells
#define soap_write_ns2__MotionInCells(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MotionInCells", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MotionInCells * SOAP_FMAC4 soap_get_ns2__MotionInCells(struct soap*, ns2__MotionInCells *, const char*, const char*);

#ifndef soap_read_ns2__MotionInCells
#define soap_read_ns2__MotionInCells(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MotionInCells(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MotionInCells * SOAP_FMAC2 soap_instantiate_ns2__MotionInCells(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MotionInCells * soap_new_ns2__MotionInCells(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MotionInCells(soap, n, NULL, NULL, NULL); }

inline ns2__MotionInCells * soap_new_req_ns2__MotionInCells(struct soap *soap, const std::string& Columns, const std::string& Rows, const xsd__base64Binary& Cells) { ns2__MotionInCells *_p = soap_instantiate_ns2__MotionInCells(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MotionInCells::Columns = Columns; _p->ns2__MotionInCells::Rows = Rows; _p->ns2__MotionInCells::Cells = Cells; } return _p; }

inline ns2__MotionInCells * soap_new_set_ns2__MotionInCells(struct soap *soap, const std::vector<char * >& __any, const std::string& Columns, const std::string& Rows, const xsd__base64Binary& Cells, char *__anyAttribute, char *__item1) { ns2__MotionInCells *_p = soap_instantiate_ns2__MotionInCells(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MotionInCells::__any = __any; _p->ns2__MotionInCells::Columns = Columns; _p->ns2__MotionInCells::Rows = Rows; _p->ns2__MotionInCells::Cells = Cells; _p->ns2__MotionInCells::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MotionInCells(struct soap *soap, ns2__MotionInCells *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MotionInCells(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ObjectTreeExtension
#define SOAP_TYPE_ns2__ObjectTreeExtension (560)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ObjectTreeExtension(struct soap*, const char*, int, const ns2__ObjectTreeExtension *, const char*);
SOAP_FMAC3 ns2__ObjectTreeExtension * SOAP_FMAC4 soap_in_ns2__ObjectTreeExtension(struct soap*, const char*, ns2__ObjectTreeExtension *, const char*);

#ifndef soap_write_ns2__ObjectTreeExtension
#define soap_write_ns2__ObjectTreeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ObjectTreeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectTreeExtension * SOAP_FMAC4 soap_get_ns2__ObjectTreeExtension(struct soap*, ns2__ObjectTreeExtension *, const char*, const char*);

#ifndef soap_read_ns2__ObjectTreeExtension
#define soap_read_ns2__ObjectTreeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ObjectTreeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ObjectTreeExtension * SOAP_FMAC2 soap_instantiate_ns2__ObjectTreeExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ObjectTreeExtension * soap_new_ns2__ObjectTreeExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ObjectTreeExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ObjectTreeExtension * soap_new_req_ns2__ObjectTreeExtension(struct soap *soap) { ns2__ObjectTreeExtension *_p = soap_instantiate_ns2__ObjectTreeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ObjectTreeExtension * soap_new_set_ns2__ObjectTreeExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ObjectTreeExtension *_p = soap_instantiate_ns2__ObjectTreeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ObjectTreeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ObjectTreeExtension(struct soap *soap, ns2__ObjectTreeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ObjectTreeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ObjectTree
#define SOAP_TYPE_ns2__ObjectTree (559)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ObjectTree(struct soap*, const char*, int, const ns2__ObjectTree *, const char*);
SOAP_FMAC3 ns2__ObjectTree * SOAP_FMAC4 soap_in_ns2__ObjectTree(struct soap*, const char*, ns2__ObjectTree *, const char*);

#ifndef soap_write_ns2__ObjectTree
#define soap_write_ns2__ObjectTree(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ObjectTree", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectTree * SOAP_FMAC4 soap_get_ns2__ObjectTree(struct soap*, ns2__ObjectTree *, const char*, const char*);

#ifndef soap_read_ns2__ObjectTree
#define soap_read_ns2__ObjectTree(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ObjectTree(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ObjectTree * SOAP_FMAC2 soap_instantiate_ns2__ObjectTree(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ObjectTree * soap_new_ns2__ObjectTree(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ObjectTree(soap, n, NULL, NULL, NULL); }

inline ns2__ObjectTree * soap_new_req_ns2__ObjectTree(struct soap *soap) { ns2__ObjectTree *_p = soap_instantiate_ns2__ObjectTree(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ObjectTree * soap_new_set_ns2__ObjectTree(struct soap *soap, const std::vector<ns2__Rename * >& Rename, const std::vector<ns2__Split * >& Split, const std::vector<ns2__Merge * >& Merge, const std::vector<ns2__ObjectId * >& Delete, ns2__ObjectTreeExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ObjectTree *_p = soap_instantiate_ns2__ObjectTree(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ObjectTree::Rename = Rename; _p->ns2__ObjectTree::Split = Split; _p->ns2__ObjectTree::Merge = Merge; _p->ns2__ObjectTree::Delete = Delete; _p->ns2__ObjectTree::Extension = Extension; _p->ns2__ObjectTree::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ObjectTree(struct soap *soap, ns2__ObjectTree *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ObjectTree(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BehaviourExtension
#define SOAP_TYPE_ns2__BehaviourExtension (558)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BehaviourExtension(struct soap*, const char*, int, const ns2__BehaviourExtension *, const char*);
SOAP_FMAC3 ns2__BehaviourExtension * SOAP_FMAC4 soap_in_ns2__BehaviourExtension(struct soap*, const char*, ns2__BehaviourExtension *, const char*);

#ifndef soap_write_ns2__BehaviourExtension
#define soap_write_ns2__BehaviourExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BehaviourExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BehaviourExtension * SOAP_FMAC4 soap_get_ns2__BehaviourExtension(struct soap*, ns2__BehaviourExtension *, const char*, const char*);

#ifndef soap_read_ns2__BehaviourExtension
#define soap_read_ns2__BehaviourExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BehaviourExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BehaviourExtension * SOAP_FMAC2 soap_instantiate_ns2__BehaviourExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BehaviourExtension * soap_new_ns2__BehaviourExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BehaviourExtension(soap, n, NULL, NULL, NULL); }

inline ns2__BehaviourExtension * soap_new_req_ns2__BehaviourExtension(struct soap *soap) { ns2__BehaviourExtension *_p = soap_instantiate_ns2__BehaviourExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__BehaviourExtension * soap_new_set_ns2__BehaviourExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__BehaviourExtension *_p = soap_instantiate_ns2__BehaviourExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BehaviourExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BehaviourExtension(struct soap *soap, ns2__BehaviourExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BehaviourExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Behaviour
#define SOAP_TYPE_ns2__Behaviour (557)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Behaviour(struct soap*, const char*, int, const ns2__Behaviour *, const char*);
SOAP_FMAC3 ns2__Behaviour * SOAP_FMAC4 soap_in_ns2__Behaviour(struct soap*, const char*, ns2__Behaviour *, const char*);

#ifndef soap_write_ns2__Behaviour
#define soap_write_ns2__Behaviour(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Behaviour", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Behaviour * SOAP_FMAC4 soap_get_ns2__Behaviour(struct soap*, ns2__Behaviour *, const char*, const char*);

#ifndef soap_read_ns2__Behaviour
#define soap_read_ns2__Behaviour(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Behaviour(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Behaviour * SOAP_FMAC2 soap_instantiate_ns2__Behaviour(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Behaviour * soap_new_ns2__Behaviour(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Behaviour(soap, n, NULL, NULL, NULL); }

inline ns2__Behaviour * soap_new_req_ns2__Behaviour(struct soap *soap) { ns2__Behaviour *_p = soap_instantiate_ns2__Behaviour(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Behaviour * soap_new_set_ns2__Behaviour(struct soap *soap, _ns2__Behaviour_Removed *Removed, _ns2__Behaviour_Idle *Idle, ns2__BehaviourExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Behaviour *_p = soap_instantiate_ns2__Behaviour(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Behaviour::Removed = Removed; _p->ns2__Behaviour::Idle = Idle; _p->ns2__Behaviour::Extension = Extension; _p->ns2__Behaviour::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Behaviour(struct soap *soap, ns2__Behaviour *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Behaviour(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ObjectId
#define SOAP_TYPE_ns2__ObjectId (556)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ObjectId(struct soap*, const char*, int, const ns2__ObjectId *, const char*);
SOAP_FMAC3 ns2__ObjectId * SOAP_FMAC4 soap_in_ns2__ObjectId(struct soap*, const char*, ns2__ObjectId *, const char*);

#ifndef soap_write_ns2__ObjectId
#define soap_write_ns2__ObjectId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ObjectId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectId * SOAP_FMAC4 soap_get_ns2__ObjectId(struct soap*, ns2__ObjectId *, const char*, const char*);

#ifndef soap_read_ns2__ObjectId
#define soap_read_ns2__ObjectId(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ObjectId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ObjectId * SOAP_FMAC2 soap_instantiate_ns2__ObjectId(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ObjectId * soap_new_ns2__ObjectId(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ObjectId(soap, n, NULL, NULL, NULL); }

inline ns2__ObjectId * soap_new_req_ns2__ObjectId(struct soap *soap) { ns2__ObjectId *_p = soap_instantiate_ns2__ObjectId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ObjectId * soap_new_set_ns2__ObjectId(struct soap *soap, std::string *ObjectId, char *__item1) { ns2__ObjectId *_p = soap_instantiate_ns2__ObjectId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ObjectId::ObjectId = ObjectId; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ObjectId(struct soap *soap, ns2__ObjectId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ObjectId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Rename
#define SOAP_TYPE_ns2__Rename (555)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Rename(struct soap*, const char*, int, const ns2__Rename *, const char*);
SOAP_FMAC3 ns2__Rename * SOAP_FMAC4 soap_in_ns2__Rename(struct soap*, const char*, ns2__Rename *, const char*);

#ifndef soap_write_ns2__Rename
#define soap_write_ns2__Rename(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Rename", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Rename * SOAP_FMAC4 soap_get_ns2__Rename(struct soap*, ns2__Rename *, const char*, const char*);

#ifndef soap_read_ns2__Rename
#define soap_read_ns2__Rename(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Rename(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Rename * SOAP_FMAC2 soap_instantiate_ns2__Rename(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Rename * soap_new_ns2__Rename(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Rename(soap, n, NULL, NULL, NULL); }

inline ns2__Rename * soap_new_req_ns2__Rename(struct soap *soap, ns2__ObjectId *from, ns2__ObjectId *to) { ns2__Rename *_p = soap_instantiate_ns2__Rename(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Rename::from = from; _p->ns2__Rename::to = to; } return _p; }

inline ns2__Rename * soap_new_set_ns2__Rename(struct soap *soap, ns2__ObjectId *from, ns2__ObjectId *to, char *__item1) { ns2__Rename *_p = soap_instantiate_ns2__Rename(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Rename::from = from; _p->ns2__Rename::to = to; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Rename(struct soap *soap, ns2__Rename *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Rename(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Split
#define SOAP_TYPE_ns2__Split (554)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Split(struct soap*, const char*, int, const ns2__Split *, const char*);
SOAP_FMAC3 ns2__Split * SOAP_FMAC4 soap_in_ns2__Split(struct soap*, const char*, ns2__Split *, const char*);

#ifndef soap_write_ns2__Split
#define soap_write_ns2__Split(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Split", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Split * SOAP_FMAC4 soap_get_ns2__Split(struct soap*, ns2__Split *, const char*, const char*);

#ifndef soap_read_ns2__Split
#define soap_read_ns2__Split(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Split(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Split * SOAP_FMAC2 soap_instantiate_ns2__Split(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Split * soap_new_ns2__Split(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Split(soap, n, NULL, NULL, NULL); }

inline ns2__Split * soap_new_req_ns2__Split(struct soap *soap, ns2__ObjectId *from, const std::vector<ns2__ObjectId * >& to) { ns2__Split *_p = soap_instantiate_ns2__Split(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Split::from = from; _p->ns2__Split::to = to; } return _p; }

inline ns2__Split * soap_new_set_ns2__Split(struct soap *soap, ns2__ObjectId *from, const std::vector<ns2__ObjectId * >& to, char *__item1) { ns2__Split *_p = soap_instantiate_ns2__Split(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Split::from = from; _p->ns2__Split::to = to; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Split(struct soap *soap, ns2__Split *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Split(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Merge
#define SOAP_TYPE_ns2__Merge (553)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Merge(struct soap*, const char*, int, const ns2__Merge *, const char*);
SOAP_FMAC3 ns2__Merge * SOAP_FMAC4 soap_in_ns2__Merge(struct soap*, const char*, ns2__Merge *, const char*);

#ifndef soap_write_ns2__Merge
#define soap_write_ns2__Merge(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Merge", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Merge * SOAP_FMAC4 soap_get_ns2__Merge(struct soap*, ns2__Merge *, const char*, const char*);

#ifndef soap_read_ns2__Merge
#define soap_read_ns2__Merge(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Merge(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Merge * SOAP_FMAC2 soap_instantiate_ns2__Merge(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Merge * soap_new_ns2__Merge(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Merge(soap, n, NULL, NULL, NULL); }

inline ns2__Merge * soap_new_req_ns2__Merge(struct soap *soap, const std::vector<ns2__ObjectId * >& from, ns2__ObjectId *to) { ns2__Merge *_p = soap_instantiate_ns2__Merge(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Merge::from = from; _p->ns2__Merge::to = to; } return _p; }

inline ns2__Merge * soap_new_set_ns2__Merge(struct soap *soap, const std::vector<ns2__ObjectId * >& from, ns2__ObjectId *to, char *__item1) { ns2__Merge *_p = soap_instantiate_ns2__Merge(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Merge::from = from; _p->ns2__Merge::to = to; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Merge(struct soap *soap, ns2__Merge *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Merge(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FrameExtension2
#define SOAP_TYPE_ns2__FrameExtension2 (552)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FrameExtension2(struct soap*, const char*, int, const ns2__FrameExtension2 *, const char*);
SOAP_FMAC3 ns2__FrameExtension2 * SOAP_FMAC4 soap_in_ns2__FrameExtension2(struct soap*, const char*, ns2__FrameExtension2 *, const char*);

#ifndef soap_write_ns2__FrameExtension2
#define soap_write_ns2__FrameExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FrameExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FrameExtension2 * SOAP_FMAC4 soap_get_ns2__FrameExtension2(struct soap*, ns2__FrameExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__FrameExtension2
#define soap_read_ns2__FrameExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FrameExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FrameExtension2 * SOAP_FMAC2 soap_instantiate_ns2__FrameExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FrameExtension2 * soap_new_ns2__FrameExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FrameExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__FrameExtension2 * soap_new_req_ns2__FrameExtension2(struct soap *soap) { ns2__FrameExtension2 *_p = soap_instantiate_ns2__FrameExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FrameExtension2 * soap_new_set_ns2__FrameExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__FrameExtension2 *_p = soap_instantiate_ns2__FrameExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FrameExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FrameExtension2(struct soap *soap, ns2__FrameExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FrameExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FrameExtension
#define SOAP_TYPE_ns2__FrameExtension (551)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FrameExtension(struct soap*, const char*, int, const ns2__FrameExtension *, const char*);
SOAP_FMAC3 ns2__FrameExtension * SOAP_FMAC4 soap_in_ns2__FrameExtension(struct soap*, const char*, ns2__FrameExtension *, const char*);

#ifndef soap_write_ns2__FrameExtension
#define soap_write_ns2__FrameExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FrameExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FrameExtension * SOAP_FMAC4 soap_get_ns2__FrameExtension(struct soap*, ns2__FrameExtension *, const char*, const char*);

#ifndef soap_read_ns2__FrameExtension
#define soap_read_ns2__FrameExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FrameExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FrameExtension * SOAP_FMAC2 soap_instantiate_ns2__FrameExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FrameExtension * soap_new_ns2__FrameExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FrameExtension(soap, n, NULL, NULL, NULL); }

inline ns2__FrameExtension * soap_new_req_ns2__FrameExtension(struct soap *soap) { ns2__FrameExtension *_p = soap_instantiate_ns2__FrameExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FrameExtension * soap_new_set_ns2__FrameExtension(struct soap *soap, const std::vector<char * >& __any, ns2__MotionInCells *MotionInCells, ns2__FrameExtension2 *Extension, char *__item1) { ns2__FrameExtension *_p = soap_instantiate_ns2__FrameExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FrameExtension::__any = __any; _p->ns2__FrameExtension::MotionInCells = MotionInCells; _p->ns2__FrameExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FrameExtension(struct soap *soap, ns2__FrameExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FrameExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Frame
#define SOAP_TYPE_ns2__Frame (550)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Frame(struct soap*, const char*, int, const ns2__Frame *, const char*);
SOAP_FMAC3 ns2__Frame * SOAP_FMAC4 soap_in_ns2__Frame(struct soap*, const char*, ns2__Frame *, const char*);

#ifndef soap_write_ns2__Frame
#define soap_write_ns2__Frame(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Frame", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Frame * SOAP_FMAC4 soap_get_ns2__Frame(struct soap*, ns2__Frame *, const char*, const char*);

#ifndef soap_read_ns2__Frame
#define soap_read_ns2__Frame(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Frame(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Frame * SOAP_FMAC2 soap_instantiate_ns2__Frame(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Frame * soap_new_ns2__Frame(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Frame(soap, n, NULL, NULL, NULL); }

inline ns2__Frame * soap_new_req_ns2__Frame(struct soap *soap, time_t UtcTime) { ns2__Frame *_p = soap_instantiate_ns2__Frame(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Frame::UtcTime = UtcTime; } return _p; }

inline ns2__Frame * soap_new_set_ns2__Frame(struct soap *soap, ns2__PTZStatus *PTZStatus, ns2__Transformation *Transformation, const std::vector<ns2__Object * >& Object, ns2__ObjectTree *ObjectTree, ns2__FrameExtension *Extension, time_t UtcTime, char *__anyAttribute, char *__item1) { ns2__Frame *_p = soap_instantiate_ns2__Frame(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Frame::PTZStatus = PTZStatus; _p->ns2__Frame::Transformation = Transformation; _p->ns2__Frame::Object = Object; _p->ns2__Frame::ObjectTree = ObjectTree; _p->ns2__Frame::Extension = Extension; _p->ns2__Frame::UtcTime = UtcTime; _p->ns2__Frame::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Frame(struct soap *soap, ns2__Frame *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Frame(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TransformationExtension
#define SOAP_TYPE_ns2__TransformationExtension (549)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TransformationExtension(struct soap*, const char*, int, const ns2__TransformationExtension *, const char*);
SOAP_FMAC3 ns2__TransformationExtension * SOAP_FMAC4 soap_in_ns2__TransformationExtension(struct soap*, const char*, ns2__TransformationExtension *, const char*);

#ifndef soap_write_ns2__TransformationExtension
#define soap_write_ns2__TransformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TransformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TransformationExtension * SOAP_FMAC4 soap_get_ns2__TransformationExtension(struct soap*, ns2__TransformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__TransformationExtension
#define soap_read_ns2__TransformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TransformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TransformationExtension * SOAP_FMAC2 soap_instantiate_ns2__TransformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TransformationExtension * soap_new_ns2__TransformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TransformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__TransformationExtension * soap_new_req_ns2__TransformationExtension(struct soap *soap) { ns2__TransformationExtension *_p = soap_instantiate_ns2__TransformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__TransformationExtension * soap_new_set_ns2__TransformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__TransformationExtension *_p = soap_instantiate_ns2__TransformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TransformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TransformationExtension(struct soap *soap, ns2__TransformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TransformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Transformation
#define SOAP_TYPE_ns2__Transformation (548)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Transformation(struct soap*, const char*, int, const ns2__Transformation *, const char*);
SOAP_FMAC3 ns2__Transformation * SOAP_FMAC4 soap_in_ns2__Transformation(struct soap*, const char*, ns2__Transformation *, const char*);

#ifndef soap_write_ns2__Transformation
#define soap_write_ns2__Transformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Transformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Transformation * SOAP_FMAC4 soap_get_ns2__Transformation(struct soap*, ns2__Transformation *, const char*, const char*);

#ifndef soap_read_ns2__Transformation
#define soap_read_ns2__Transformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Transformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Transformation * SOAP_FMAC2 soap_instantiate_ns2__Transformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Transformation * soap_new_ns2__Transformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Transformation(soap, n, NULL, NULL, NULL); }

inline ns2__Transformation * soap_new_req_ns2__Transformation(struct soap *soap) { ns2__Transformation *_p = soap_instantiate_ns2__Transformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Transformation * soap_new_set_ns2__Transformation(struct soap *soap, ns2__Vector *Translate, ns2__Vector *Scale, ns2__TransformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Transformation *_p = soap_instantiate_ns2__Transformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Transformation::Translate = Translate; _p->ns2__Transformation::Scale = Scale; _p->ns2__Transformation::Extension = Extension; _p->ns2__Transformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Transformation(struct soap *soap, ns2__Transformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Transformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ObjectExtension
#define SOAP_TYPE_ns2__ObjectExtension (547)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ObjectExtension(struct soap*, const char*, int, const ns2__ObjectExtension *, const char*);
SOAP_FMAC3 ns2__ObjectExtension * SOAP_FMAC4 soap_in_ns2__ObjectExtension(struct soap*, const char*, ns2__ObjectExtension *, const char*);

#ifndef soap_write_ns2__ObjectExtension
#define soap_write_ns2__ObjectExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ObjectExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectExtension * SOAP_FMAC4 soap_get_ns2__ObjectExtension(struct soap*, ns2__ObjectExtension *, const char*, const char*);

#ifndef soap_read_ns2__ObjectExtension
#define soap_read_ns2__ObjectExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ObjectExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ObjectExtension * SOAP_FMAC2 soap_instantiate_ns2__ObjectExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ObjectExtension * soap_new_ns2__ObjectExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ObjectExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ObjectExtension * soap_new_req_ns2__ObjectExtension(struct soap *soap) { ns2__ObjectExtension *_p = soap_instantiate_ns2__ObjectExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ObjectExtension * soap_new_set_ns2__ObjectExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ObjectExtension *_p = soap_instantiate_ns2__ObjectExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ObjectExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ObjectExtension(struct soap *soap, ns2__ObjectExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ObjectExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Object
#define SOAP_TYPE_ns2__Object (546)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Object(struct soap*, const char*, int, const ns2__Object *, const char*);
SOAP_FMAC3 ns2__Object * SOAP_FMAC4 soap_in_ns2__Object(struct soap*, const char*, ns2__Object *, const char*);

#ifndef soap_write_ns2__Object
#define soap_write_ns2__Object(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Object", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Object * SOAP_FMAC4 soap_get_ns2__Object(struct soap*, ns2__Object *, const char*, const char*);

#ifndef soap_read_ns2__Object
#define soap_read_ns2__Object(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Object(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Object * SOAP_FMAC2 soap_instantiate_ns2__Object(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Object * soap_new_ns2__Object(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Object(soap, n, NULL, NULL, NULL); }

inline ns2__Object * soap_new_req_ns2__Object(struct soap *soap) { ns2__Object *_p = soap_instantiate_ns2__Object(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Object * soap_new_set_ns2__Object(struct soap *soap, std::string *ObjectId, ns2__Appearance *Appearance, ns2__Behaviour *Behaviour, ns2__ObjectExtension *Extension, char *__anyAttribute) { ns2__Object *_p = soap_instantiate_ns2__Object(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Object::ObjectId = ObjectId; _p->ns2__Object::Appearance = Appearance; _p->ns2__Object::Behaviour = Behaviour; _p->ns2__Object::Extension = Extension; _p->ns2__Object::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__Object(struct soap *soap, ns2__Object *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Object(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OtherType
#define SOAP_TYPE_ns2__OtherType (545)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OtherType(struct soap*, const char*, int, const ns2__OtherType *, const char*);
SOAP_FMAC3 ns2__OtherType * SOAP_FMAC4 soap_in_ns2__OtherType(struct soap*, const char*, ns2__OtherType *, const char*);

#ifndef soap_write_ns2__OtherType
#define soap_write_ns2__OtherType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OtherType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OtherType * SOAP_FMAC4 soap_get_ns2__OtherType(struct soap*, ns2__OtherType *, const char*, const char*);

#ifndef soap_read_ns2__OtherType
#define soap_read_ns2__OtherType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OtherType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OtherType * SOAP_FMAC2 soap_instantiate_ns2__OtherType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OtherType * soap_new_ns2__OtherType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OtherType(soap, n, NULL, NULL, NULL); }

inline ns2__OtherType * soap_new_req_ns2__OtherType(struct soap *soap, const std::string& Type, float Likelihood) { ns2__OtherType *_p = soap_instantiate_ns2__OtherType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OtherType::Type = Type; _p->ns2__OtherType::Likelihood = Likelihood; } return _p; }

inline ns2__OtherType * soap_new_set_ns2__OtherType(struct soap *soap, const std::string& Type, float Likelihood, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__OtherType *_p = soap_instantiate_ns2__OtherType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OtherType::Type = Type; _p->ns2__OtherType::Likelihood = Likelihood; _p->ns2__OtherType::__any = __any; _p->ns2__OtherType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OtherType(struct soap *soap, ns2__OtherType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OtherType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ClassDescriptorExtension2
#define SOAP_TYPE_ns2__ClassDescriptorExtension2 (544)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClassDescriptorExtension2(struct soap*, const char*, int, const ns2__ClassDescriptorExtension2 *, const char*);
SOAP_FMAC3 ns2__ClassDescriptorExtension2 * SOAP_FMAC4 soap_in_ns2__ClassDescriptorExtension2(struct soap*, const char*, ns2__ClassDescriptorExtension2 *, const char*);

#ifndef soap_write_ns2__ClassDescriptorExtension2
#define soap_write_ns2__ClassDescriptorExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ClassDescriptorExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassDescriptorExtension2 * SOAP_FMAC4 soap_get_ns2__ClassDescriptorExtension2(struct soap*, ns2__ClassDescriptorExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__ClassDescriptorExtension2
#define soap_read_ns2__ClassDescriptorExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ClassDescriptorExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ClassDescriptorExtension2 * SOAP_FMAC2 soap_instantiate_ns2__ClassDescriptorExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ClassDescriptorExtension2 * soap_new_ns2__ClassDescriptorExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ClassDescriptorExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__ClassDescriptorExtension2 * soap_new_req_ns2__ClassDescriptorExtension2(struct soap *soap) { ns2__ClassDescriptorExtension2 *_p = soap_instantiate_ns2__ClassDescriptorExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ClassDescriptorExtension2 * soap_new_set_ns2__ClassDescriptorExtension2(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ClassDescriptorExtension2 *_p = soap_instantiate_ns2__ClassDescriptorExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ClassDescriptorExtension2::__any = __any; _p->ns2__ClassDescriptorExtension2::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ClassDescriptorExtension2(struct soap *soap, ns2__ClassDescriptorExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ClassDescriptorExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ClassDescriptorExtension
#define SOAP_TYPE_ns2__ClassDescriptorExtension (543)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClassDescriptorExtension(struct soap*, const char*, int, const ns2__ClassDescriptorExtension *, const char*);
SOAP_FMAC3 ns2__ClassDescriptorExtension * SOAP_FMAC4 soap_in_ns2__ClassDescriptorExtension(struct soap*, const char*, ns2__ClassDescriptorExtension *, const char*);

#ifndef soap_write_ns2__ClassDescriptorExtension
#define soap_write_ns2__ClassDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ClassDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassDescriptorExtension * SOAP_FMAC4 soap_get_ns2__ClassDescriptorExtension(struct soap*, ns2__ClassDescriptorExtension *, const char*, const char*);

#ifndef soap_read_ns2__ClassDescriptorExtension
#define soap_read_ns2__ClassDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ClassDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_ns2__ClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ClassDescriptorExtension * soap_new_ns2__ClassDescriptorExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ClassDescriptorExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ClassDescriptorExtension * soap_new_req_ns2__ClassDescriptorExtension(struct soap *soap, const std::vector<ns2__OtherType * >& OtherTypes) { ns2__ClassDescriptorExtension *_p = soap_instantiate_ns2__ClassDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ClassDescriptorExtension::OtherTypes = OtherTypes; } return _p; }

inline ns2__ClassDescriptorExtension * soap_new_set_ns2__ClassDescriptorExtension(struct soap *soap, const std::vector<char * >& __any, const std::vector<ns2__OtherType * >& OtherTypes, ns2__ClassDescriptorExtension2 *Extension, char *__item1) { ns2__ClassDescriptorExtension *_p = soap_instantiate_ns2__ClassDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ClassDescriptorExtension::__any = __any; _p->ns2__ClassDescriptorExtension::OtherTypes = OtherTypes; _p->ns2__ClassDescriptorExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ClassDescriptorExtension(struct soap *soap, ns2__ClassDescriptorExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ClassDescriptorExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ClassDescriptor
#define SOAP_TYPE_ns2__ClassDescriptor (542)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClassDescriptor(struct soap*, const char*, int, const ns2__ClassDescriptor *, const char*);
SOAP_FMAC3 ns2__ClassDescriptor * SOAP_FMAC4 soap_in_ns2__ClassDescriptor(struct soap*, const char*, ns2__ClassDescriptor *, const char*);

#ifndef soap_write_ns2__ClassDescriptor
#define soap_write_ns2__ClassDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ClassDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassDescriptor * SOAP_FMAC4 soap_get_ns2__ClassDescriptor(struct soap*, ns2__ClassDescriptor *, const char*, const char*);

#ifndef soap_read_ns2__ClassDescriptor
#define soap_read_ns2__ClassDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ClassDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ClassDescriptor * SOAP_FMAC2 soap_instantiate_ns2__ClassDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ClassDescriptor * soap_new_ns2__ClassDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ClassDescriptor(soap, n, NULL, NULL, NULL); }

inline ns2__ClassDescriptor * soap_new_req_ns2__ClassDescriptor(struct soap *soap) { ns2__ClassDescriptor *_p = soap_instantiate_ns2__ClassDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ClassDescriptor * soap_new_set_ns2__ClassDescriptor(struct soap *soap, std::vector<_ns2__ClassDescriptor_ClassCandidate >*ClassCandidate, ns2__ClassDescriptorExtension *Extension, char *__item1) { ns2__ClassDescriptor *_p = soap_instantiate_ns2__ClassDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ClassDescriptor::ClassCandidate = ClassCandidate; _p->ns2__ClassDescriptor::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ClassDescriptor(struct soap *soap, ns2__ClassDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ClassDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ColorDescriptorExtension
#define SOAP_TYPE_ns2__ColorDescriptorExtension (541)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ColorDescriptorExtension(struct soap*, const char*, int, const ns2__ColorDescriptorExtension *, const char*);
SOAP_FMAC3 ns2__ColorDescriptorExtension * SOAP_FMAC4 soap_in_ns2__ColorDescriptorExtension(struct soap*, const char*, ns2__ColorDescriptorExtension *, const char*);

#ifndef soap_write_ns2__ColorDescriptorExtension
#define soap_write_ns2__ColorDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ColorDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorDescriptorExtension * SOAP_FMAC4 soap_get_ns2__ColorDescriptorExtension(struct soap*, ns2__ColorDescriptorExtension *, const char*, const char*);

#ifndef soap_read_ns2__ColorDescriptorExtension
#define soap_read_ns2__ColorDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ColorDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ColorDescriptorExtension * SOAP_FMAC2 soap_instantiate_ns2__ColorDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ColorDescriptorExtension * soap_new_ns2__ColorDescriptorExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ColorDescriptorExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ColorDescriptorExtension * soap_new_req_ns2__ColorDescriptorExtension(struct soap *soap) { ns2__ColorDescriptorExtension *_p = soap_instantiate_ns2__ColorDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ColorDescriptorExtension * soap_new_set_ns2__ColorDescriptorExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ColorDescriptorExtension *_p = soap_instantiate_ns2__ColorDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorDescriptorExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ColorDescriptorExtension(struct soap *soap, ns2__ColorDescriptorExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ColorDescriptorExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ColorDescriptor
#define SOAP_TYPE_ns2__ColorDescriptor (540)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ColorDescriptor(struct soap*, const char*, int, const ns2__ColorDescriptor *, const char*);
SOAP_FMAC3 ns2__ColorDescriptor * SOAP_FMAC4 soap_in_ns2__ColorDescriptor(struct soap*, const char*, ns2__ColorDescriptor *, const char*);

#ifndef soap_write_ns2__ColorDescriptor
#define soap_write_ns2__ColorDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ColorDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorDescriptor * SOAP_FMAC4 soap_get_ns2__ColorDescriptor(struct soap*, ns2__ColorDescriptor *, const char*, const char*);

#ifndef soap_read_ns2__ColorDescriptor
#define soap_read_ns2__ColorDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ColorDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ColorDescriptor * SOAP_FMAC2 soap_instantiate_ns2__ColorDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ColorDescriptor * soap_new_ns2__ColorDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ColorDescriptor(soap, n, NULL, NULL, NULL); }

inline ns2__ColorDescriptor * soap_new_req_ns2__ColorDescriptor(struct soap *soap) { ns2__ColorDescriptor *_p = soap_instantiate_ns2__ColorDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ColorDescriptor * soap_new_set_ns2__ColorDescriptor(struct soap *soap, std::vector<_ns2__ColorDescriptor_ColorCluster >*ColorCluster, ns2__ColorDescriptorExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ColorDescriptor *_p = soap_instantiate_ns2__ColorDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorDescriptor::ColorCluster = ColorCluster; _p->ns2__ColorDescriptor::Extension = Extension; _p->ns2__ColorDescriptor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ColorDescriptor(struct soap *soap, ns2__ColorDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ColorDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ShapeDescriptorExtension
#define SOAP_TYPE_ns2__ShapeDescriptorExtension (539)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ShapeDescriptorExtension(struct soap*, const char*, int, const ns2__ShapeDescriptorExtension *, const char*);
SOAP_FMAC3 ns2__ShapeDescriptorExtension * SOAP_FMAC4 soap_in_ns2__ShapeDescriptorExtension(struct soap*, const char*, ns2__ShapeDescriptorExtension *, const char*);

#ifndef soap_write_ns2__ShapeDescriptorExtension
#define soap_write_ns2__ShapeDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ShapeDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ShapeDescriptorExtension * SOAP_FMAC4 soap_get_ns2__ShapeDescriptorExtension(struct soap*, ns2__ShapeDescriptorExtension *, const char*, const char*);

#ifndef soap_read_ns2__ShapeDescriptorExtension
#define soap_read_ns2__ShapeDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ShapeDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ShapeDescriptorExtension * SOAP_FMAC2 soap_instantiate_ns2__ShapeDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ShapeDescriptorExtension * soap_new_ns2__ShapeDescriptorExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ShapeDescriptorExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ShapeDescriptorExtension * soap_new_req_ns2__ShapeDescriptorExtension(struct soap *soap) { ns2__ShapeDescriptorExtension *_p = soap_instantiate_ns2__ShapeDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ShapeDescriptorExtension * soap_new_set_ns2__ShapeDescriptorExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ShapeDescriptorExtension *_p = soap_instantiate_ns2__ShapeDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ShapeDescriptorExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ShapeDescriptorExtension(struct soap *soap, ns2__ShapeDescriptorExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ShapeDescriptorExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ShapeDescriptor
#define SOAP_TYPE_ns2__ShapeDescriptor (538)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ShapeDescriptor(struct soap*, const char*, int, const ns2__ShapeDescriptor *, const char*);
SOAP_FMAC3 ns2__ShapeDescriptor * SOAP_FMAC4 soap_in_ns2__ShapeDescriptor(struct soap*, const char*, ns2__ShapeDescriptor *, const char*);

#ifndef soap_write_ns2__ShapeDescriptor
#define soap_write_ns2__ShapeDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ShapeDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ShapeDescriptor * SOAP_FMAC4 soap_get_ns2__ShapeDescriptor(struct soap*, ns2__ShapeDescriptor *, const char*, const char*);

#ifndef soap_read_ns2__ShapeDescriptor
#define soap_read_ns2__ShapeDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ShapeDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ShapeDescriptor * SOAP_FMAC2 soap_instantiate_ns2__ShapeDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ShapeDescriptor * soap_new_ns2__ShapeDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ShapeDescriptor(soap, n, NULL, NULL, NULL); }

inline ns2__ShapeDescriptor * soap_new_req_ns2__ShapeDescriptor(struct soap *soap, ns2__Rectangle *BoundingBox, ns2__Vector *CenterOfGravity) { ns2__ShapeDescriptor *_p = soap_instantiate_ns2__ShapeDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ShapeDescriptor::BoundingBox = BoundingBox; _p->ns2__ShapeDescriptor::CenterOfGravity = CenterOfGravity; } return _p; }

inline ns2__ShapeDescriptor * soap_new_set_ns2__ShapeDescriptor(struct soap *soap, ns2__Rectangle *BoundingBox, ns2__Vector *CenterOfGravity, const std::vector<ns2__Polygon * >& Polygon, ns2__ShapeDescriptorExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ShapeDescriptor *_p = soap_instantiate_ns2__ShapeDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ShapeDescriptor::BoundingBox = BoundingBox; _p->ns2__ShapeDescriptor::CenterOfGravity = CenterOfGravity; _p->ns2__ShapeDescriptor::Polygon = Polygon; _p->ns2__ShapeDescriptor::Extension = Extension; _p->ns2__ShapeDescriptor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ShapeDescriptor(struct soap *soap, ns2__ShapeDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ShapeDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AppearanceExtension
#define SOAP_TYPE_ns2__AppearanceExtension (537)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AppearanceExtension(struct soap*, const char*, int, const ns2__AppearanceExtension *, const char*);
SOAP_FMAC3 ns2__AppearanceExtension * SOAP_FMAC4 soap_in_ns2__AppearanceExtension(struct soap*, const char*, ns2__AppearanceExtension *, const char*);

#ifndef soap_write_ns2__AppearanceExtension
#define soap_write_ns2__AppearanceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AppearanceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AppearanceExtension * SOAP_FMAC4 soap_get_ns2__AppearanceExtension(struct soap*, ns2__AppearanceExtension *, const char*, const char*);

#ifndef soap_read_ns2__AppearanceExtension
#define soap_read_ns2__AppearanceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AppearanceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AppearanceExtension * SOAP_FMAC2 soap_instantiate_ns2__AppearanceExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AppearanceExtension * soap_new_ns2__AppearanceExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AppearanceExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AppearanceExtension * soap_new_req_ns2__AppearanceExtension(struct soap *soap) { ns2__AppearanceExtension *_p = soap_instantiate_ns2__AppearanceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AppearanceExtension * soap_new_set_ns2__AppearanceExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AppearanceExtension *_p = soap_instantiate_ns2__AppearanceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AppearanceExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AppearanceExtension(struct soap *soap, ns2__AppearanceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AppearanceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Appearance
#define SOAP_TYPE_ns2__Appearance (536)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Appearance(struct soap*, const char*, int, const ns2__Appearance *, const char*);
SOAP_FMAC3 ns2__Appearance * SOAP_FMAC4 soap_in_ns2__Appearance(struct soap*, const char*, ns2__Appearance *, const char*);

#ifndef soap_write_ns2__Appearance
#define soap_write_ns2__Appearance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Appearance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Appearance * SOAP_FMAC4 soap_get_ns2__Appearance(struct soap*, ns2__Appearance *, const char*, const char*);

#ifndef soap_read_ns2__Appearance
#define soap_read_ns2__Appearance(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Appearance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Appearance * SOAP_FMAC2 soap_instantiate_ns2__Appearance(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Appearance * soap_new_ns2__Appearance(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Appearance(soap, n, NULL, NULL, NULL); }

inline ns2__Appearance * soap_new_req_ns2__Appearance(struct soap *soap) { ns2__Appearance *_p = soap_instantiate_ns2__Appearance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Appearance * soap_new_set_ns2__Appearance(struct soap *soap, ns2__Transformation *Transformation, ns2__ShapeDescriptor *Shape, ns2__ColorDescriptor *Color, ns2__ClassDescriptor *Class, ns2__AppearanceExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Appearance *_p = soap_instantiate_ns2__Appearance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Appearance::Transformation = Transformation; _p->ns2__Appearance::Shape = Shape; _p->ns2__Appearance::Color = Color; _p->ns2__Appearance::Class = Class; _p->ns2__Appearance::Extension = Extension; _p->ns2__Appearance::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Appearance(struct soap *soap, ns2__Appearance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Appearance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ColorCovariance
#define SOAP_TYPE_ns2__ColorCovariance (535)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ColorCovariance(struct soap*, const char*, int, const ns2__ColorCovariance *, const char*);
SOAP_FMAC3 ns2__ColorCovariance * SOAP_FMAC4 soap_in_ns2__ColorCovariance(struct soap*, const char*, ns2__ColorCovariance *, const char*);

#ifndef soap_write_ns2__ColorCovariance
#define soap_write_ns2__ColorCovariance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ColorCovariance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorCovariance * SOAP_FMAC4 soap_get_ns2__ColorCovariance(struct soap*, ns2__ColorCovariance *, const char*, const char*);

#ifndef soap_read_ns2__ColorCovariance
#define soap_read_ns2__ColorCovariance(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ColorCovariance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ColorCovariance * SOAP_FMAC2 soap_instantiate_ns2__ColorCovariance(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ColorCovariance * soap_new_ns2__ColorCovariance(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ColorCovariance(soap, n, NULL, NULL, NULL); }

inline ns2__ColorCovariance * soap_new_req_ns2__ColorCovariance(struct soap *soap, float XX, float YY, float ZZ) { ns2__ColorCovariance *_p = soap_instantiate_ns2__ColorCovariance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorCovariance::XX = XX; _p->ns2__ColorCovariance::YY = YY; _p->ns2__ColorCovariance::ZZ = ZZ; } return _p; }

inline ns2__ColorCovariance * soap_new_set_ns2__ColorCovariance(struct soap *soap, float XX, float YY, float ZZ, float *XY, float *XZ, float *YZ, std::string *Colorspace, char *__item1) { ns2__ColorCovariance *_p = soap_instantiate_ns2__ColorCovariance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ColorCovariance::XX = XX; _p->ns2__ColorCovariance::YY = YY; _p->ns2__ColorCovariance::ZZ = ZZ; _p->ns2__ColorCovariance::XY = XY; _p->ns2__ColorCovariance::XZ = XZ; _p->ns2__ColorCovariance::YZ = YZ; _p->ns2__ColorCovariance::Colorspace = Colorspace; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ColorCovariance(struct soap *soap, ns2__ColorCovariance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ColorCovariance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Color
#define SOAP_TYPE_ns2__Color (534)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Color(struct soap*, const char*, int, const ns2__Color *, const char*);
SOAP_FMAC3 ns2__Color * SOAP_FMAC4 soap_in_ns2__Color(struct soap*, const char*, ns2__Color *, const char*);

#ifndef soap_write_ns2__Color
#define soap_write_ns2__Color(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Color", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Color * SOAP_FMAC4 soap_get_ns2__Color(struct soap*, ns2__Color *, const char*, const char*);

#ifndef soap_read_ns2__Color
#define soap_read_ns2__Color(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Color(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Color * SOAP_FMAC2 soap_instantiate_ns2__Color(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Color * soap_new_ns2__Color(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Color(soap, n, NULL, NULL, NULL); }

inline ns2__Color * soap_new_req_ns2__Color(struct soap *soap, float X, float Y, float Z) { ns2__Color *_p = soap_instantiate_ns2__Color(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Color::X = X; _p->ns2__Color::Y = Y; _p->ns2__Color::Z = Z; } return _p; }

inline ns2__Color * soap_new_set_ns2__Color(struct soap *soap, float X, float Y, float Z, std::string *Colorspace, char *__item1) { ns2__Color *_p = soap_instantiate_ns2__Color(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Color::X = X; _p->ns2__Color::Y = Y; _p->ns2__Color::Z = Z; _p->ns2__Color::Colorspace = Colorspace; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Color(struct soap *soap, ns2__Color *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Color(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Polyline
#define SOAP_TYPE_ns2__Polyline (533)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Polyline(struct soap*, const char*, int, const ns2__Polyline *, const char*);
SOAP_FMAC3 ns2__Polyline * SOAP_FMAC4 soap_in_ns2__Polyline(struct soap*, const char*, ns2__Polyline *, const char*);

#ifndef soap_write_ns2__Polyline
#define soap_write_ns2__Polyline(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Polyline", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Polyline * SOAP_FMAC4 soap_get_ns2__Polyline(struct soap*, ns2__Polyline *, const char*, const char*);

#ifndef soap_read_ns2__Polyline
#define soap_read_ns2__Polyline(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Polyline(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Polyline * SOAP_FMAC2 soap_instantiate_ns2__Polyline(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Polyline * soap_new_ns2__Polyline(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Polyline(soap, n, NULL, NULL, NULL); }

inline ns2__Polyline * soap_new_req_ns2__Polyline(struct soap *soap, const std::vector<ns2__Vector * >& Point) { ns2__Polyline *_p = soap_instantiate_ns2__Polyline(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Polyline::Point = Point; } return _p; }

inline ns2__Polyline * soap_new_set_ns2__Polyline(struct soap *soap, const std::vector<ns2__Vector * >& Point, char *__item1) { ns2__Polyline *_p = soap_instantiate_ns2__Polyline(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Polyline::Point = Point; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Polyline(struct soap *soap, ns2__Polyline *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Polyline(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Polygon
#define SOAP_TYPE_ns2__Polygon (532)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Polygon(struct soap*, const char*, int, const ns2__Polygon *, const char*);
SOAP_FMAC3 ns2__Polygon * SOAP_FMAC4 soap_in_ns2__Polygon(struct soap*, const char*, ns2__Polygon *, const char*);

#ifndef soap_write_ns2__Polygon
#define soap_write_ns2__Polygon(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Polygon", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Polygon * SOAP_FMAC4 soap_get_ns2__Polygon(struct soap*, ns2__Polygon *, const char*, const char*);

#ifndef soap_read_ns2__Polygon
#define soap_read_ns2__Polygon(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Polygon(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Polygon * SOAP_FMAC2 soap_instantiate_ns2__Polygon(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Polygon * soap_new_ns2__Polygon(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Polygon(soap, n, NULL, NULL, NULL); }

inline ns2__Polygon * soap_new_req_ns2__Polygon(struct soap *soap, const std::vector<ns2__Vector * >& Point) { ns2__Polygon *_p = soap_instantiate_ns2__Polygon(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Polygon::Point = Point; } return _p; }

inline ns2__Polygon * soap_new_set_ns2__Polygon(struct soap *soap, const std::vector<ns2__Vector * >& Point, char *__item1) { ns2__Polygon *_p = soap_instantiate_ns2__Polygon(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Polygon::Point = Point; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Polygon(struct soap *soap, ns2__Polygon *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Polygon(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Rectangle
#define SOAP_TYPE_ns2__Rectangle (531)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Rectangle(struct soap*, const char*, int, const ns2__Rectangle *, const char*);
SOAP_FMAC3 ns2__Rectangle * SOAP_FMAC4 soap_in_ns2__Rectangle(struct soap*, const char*, ns2__Rectangle *, const char*);

#ifndef soap_write_ns2__Rectangle
#define soap_write_ns2__Rectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Rectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Rectangle * SOAP_FMAC4 soap_get_ns2__Rectangle(struct soap*, ns2__Rectangle *, const char*, const char*);

#ifndef soap_read_ns2__Rectangle
#define soap_read_ns2__Rectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Rectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Rectangle * SOAP_FMAC2 soap_instantiate_ns2__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Rectangle * soap_new_ns2__Rectangle(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Rectangle(soap, n, NULL, NULL, NULL); }

inline ns2__Rectangle * soap_new_req_ns2__Rectangle(struct soap *soap) { ns2__Rectangle *_p = soap_instantiate_ns2__Rectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Rectangle * soap_new_set_ns2__Rectangle(struct soap *soap, float *bottom, float *top, float *right, float *left, char *__item1) { ns2__Rectangle *_p = soap_instantiate_ns2__Rectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Rectangle::bottom = bottom; _p->ns2__Rectangle::top = top; _p->ns2__Rectangle::right = right; _p->ns2__Rectangle::left = left; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Rectangle(struct soap *soap, ns2__Rectangle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Rectangle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Vector
#define SOAP_TYPE_ns2__Vector (530)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Vector(struct soap*, const char*, int, const ns2__Vector *, const char*);
SOAP_FMAC3 ns2__Vector * SOAP_FMAC4 soap_in_ns2__Vector(struct soap*, const char*, ns2__Vector *, const char*);

#ifndef soap_write_ns2__Vector
#define soap_write_ns2__Vector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Vector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Vector * SOAP_FMAC4 soap_get_ns2__Vector(struct soap*, ns2__Vector *, const char*, const char*);

#ifndef soap_read_ns2__Vector
#define soap_read_ns2__Vector(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Vector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Vector * SOAP_FMAC2 soap_instantiate_ns2__Vector(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Vector * soap_new_ns2__Vector(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Vector(soap, n, NULL, NULL, NULL); }

inline ns2__Vector * soap_new_req_ns2__Vector(struct soap *soap) { ns2__Vector *_p = soap_instantiate_ns2__Vector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Vector * soap_new_set_ns2__Vector(struct soap *soap, float *x, float *y, char *__item1) { ns2__Vector *_p = soap_instantiate_ns2__Vector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Vector::x = x; _p->ns2__Vector::y = y; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Vector(struct soap *soap, ns2__Vector *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Vector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ItemListDescriptionExtension
#define SOAP_TYPE_ns2__ItemListDescriptionExtension (529)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ItemListDescriptionExtension(struct soap*, const char*, int, const ns2__ItemListDescriptionExtension *, const char*);
SOAP_FMAC3 ns2__ItemListDescriptionExtension * SOAP_FMAC4 soap_in_ns2__ItemListDescriptionExtension(struct soap*, const char*, ns2__ItemListDescriptionExtension *, const char*);

#ifndef soap_write_ns2__ItemListDescriptionExtension
#define soap_write_ns2__ItemListDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemListDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemListDescriptionExtension * SOAP_FMAC4 soap_get_ns2__ItemListDescriptionExtension(struct soap*, ns2__ItemListDescriptionExtension *, const char*, const char*);

#ifndef soap_read_ns2__ItemListDescriptionExtension
#define soap_read_ns2__ItemListDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ItemListDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ItemListDescriptionExtension * SOAP_FMAC2 soap_instantiate_ns2__ItemListDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ItemListDescriptionExtension * soap_new_ns2__ItemListDescriptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ItemListDescriptionExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ItemListDescriptionExtension * soap_new_req_ns2__ItemListDescriptionExtension(struct soap *soap) { ns2__ItemListDescriptionExtension *_p = soap_instantiate_ns2__ItemListDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ItemListDescriptionExtension * soap_new_set_ns2__ItemListDescriptionExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ItemListDescriptionExtension *_p = soap_instantiate_ns2__ItemListDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ItemListDescriptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ItemListDescriptionExtension(struct soap *soap, ns2__ItemListDescriptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ItemListDescriptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ItemListDescription
#define SOAP_TYPE_ns2__ItemListDescription (528)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ItemListDescription(struct soap*, const char*, int, const ns2__ItemListDescription *, const char*);
SOAP_FMAC3 ns2__ItemListDescription * SOAP_FMAC4 soap_in_ns2__ItemListDescription(struct soap*, const char*, ns2__ItemListDescription *, const char*);

#ifndef soap_write_ns2__ItemListDescription
#define soap_write_ns2__ItemListDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemListDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemListDescription * SOAP_FMAC4 soap_get_ns2__ItemListDescription(struct soap*, ns2__ItemListDescription *, const char*, const char*);

#ifndef soap_read_ns2__ItemListDescription
#define soap_read_ns2__ItemListDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ItemListDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ItemListDescription * SOAP_FMAC2 soap_instantiate_ns2__ItemListDescription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ItemListDescription * soap_new_ns2__ItemListDescription(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ItemListDescription(soap, n, NULL, NULL, NULL); }

inline ns2__ItemListDescription * soap_new_req_ns2__ItemListDescription(struct soap *soap) { ns2__ItemListDescription *_p = soap_instantiate_ns2__ItemListDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ItemListDescription * soap_new_set_ns2__ItemListDescription(struct soap *soap, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*SimpleItemDescription, std::vector<_ns2__ItemListDescription_ElementItemDescription >*ElementItemDescription, ns2__ItemListDescriptionExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ItemListDescription *_p = soap_instantiate_ns2__ItemListDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ItemListDescription::SimpleItemDescription = SimpleItemDescription; _p->ns2__ItemListDescription::ElementItemDescription = ElementItemDescription; _p->ns2__ItemListDescription::Extension = Extension; _p->ns2__ItemListDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ItemListDescription(struct soap *soap, ns2__ItemListDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ItemListDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MessageDescriptionExtension
#define SOAP_TYPE_ns2__MessageDescriptionExtension (527)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MessageDescriptionExtension(struct soap*, const char*, int, const ns2__MessageDescriptionExtension *, const char*);
SOAP_FMAC3 ns2__MessageDescriptionExtension * SOAP_FMAC4 soap_in_ns2__MessageDescriptionExtension(struct soap*, const char*, ns2__MessageDescriptionExtension *, const char*);

#ifndef soap_write_ns2__MessageDescriptionExtension
#define soap_write_ns2__MessageDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MessageDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageDescriptionExtension * SOAP_FMAC4 soap_get_ns2__MessageDescriptionExtension(struct soap*, ns2__MessageDescriptionExtension *, const char*, const char*);

#ifndef soap_read_ns2__MessageDescriptionExtension
#define soap_read_ns2__MessageDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MessageDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MessageDescriptionExtension * SOAP_FMAC2 soap_instantiate_ns2__MessageDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MessageDescriptionExtension * soap_new_ns2__MessageDescriptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MessageDescriptionExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MessageDescriptionExtension * soap_new_req_ns2__MessageDescriptionExtension(struct soap *soap) { ns2__MessageDescriptionExtension *_p = soap_instantiate_ns2__MessageDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MessageDescriptionExtension * soap_new_set_ns2__MessageDescriptionExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__MessageDescriptionExtension *_p = soap_instantiate_ns2__MessageDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageDescriptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MessageDescriptionExtension(struct soap *soap, ns2__MessageDescriptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MessageDescriptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MessageDescription
#define SOAP_TYPE_ns2__MessageDescription (526)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MessageDescription(struct soap*, const char*, int, const ns2__MessageDescription *, const char*);
SOAP_FMAC3 ns2__MessageDescription * SOAP_FMAC4 soap_in_ns2__MessageDescription(struct soap*, const char*, ns2__MessageDescription *, const char*);

#ifndef soap_write_ns2__MessageDescription
#define soap_write_ns2__MessageDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MessageDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageDescription * SOAP_FMAC4 soap_get_ns2__MessageDescription(struct soap*, ns2__MessageDescription *, const char*, const char*);

#ifndef soap_read_ns2__MessageDescription
#define soap_read_ns2__MessageDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MessageDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MessageDescription * SOAP_FMAC2 soap_instantiate_ns2__MessageDescription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MessageDescription * soap_new_ns2__MessageDescription(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MessageDescription(soap, n, NULL, NULL, NULL); }

inline ns2__MessageDescription * soap_new_req_ns2__MessageDescription(struct soap *soap) { ns2__MessageDescription *_p = soap_instantiate_ns2__MessageDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MessageDescription * soap_new_set_ns2__MessageDescription(struct soap *soap, ns2__ItemListDescription *Source, ns2__ItemListDescription *Key, ns2__ItemListDescription *Data, ns2__MessageDescriptionExtension *Extension, bool *IsProperty, char *__anyAttribute, char *__item1) { ns2__MessageDescription *_p = soap_instantiate_ns2__MessageDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageDescription::Source = Source; _p->ns2__MessageDescription::Key = Key; _p->ns2__MessageDescription::Data = Data; _p->ns2__MessageDescription::Extension = Extension; _p->ns2__MessageDescription::IsProperty = IsProperty; _p->ns2__MessageDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MessageDescription(struct soap *soap, ns2__MessageDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MessageDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ItemListExtension
#define SOAP_TYPE_ns2__ItemListExtension (525)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ItemListExtension(struct soap*, const char*, int, const ns2__ItemListExtension *, const char*);
SOAP_FMAC3 ns2__ItemListExtension * SOAP_FMAC4 soap_in_ns2__ItemListExtension(struct soap*, const char*, ns2__ItemListExtension *, const char*);

#ifndef soap_write_ns2__ItemListExtension
#define soap_write_ns2__ItemListExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemListExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemListExtension * SOAP_FMAC4 soap_get_ns2__ItemListExtension(struct soap*, ns2__ItemListExtension *, const char*, const char*);

#ifndef soap_read_ns2__ItemListExtension
#define soap_read_ns2__ItemListExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ItemListExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ItemListExtension * SOAP_FMAC2 soap_instantiate_ns2__ItemListExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ItemListExtension * soap_new_ns2__ItemListExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ItemListExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ItemListExtension * soap_new_req_ns2__ItemListExtension(struct soap *soap) { ns2__ItemListExtension *_p = soap_instantiate_ns2__ItemListExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ItemListExtension * soap_new_set_ns2__ItemListExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ItemListExtension *_p = soap_instantiate_ns2__ItemListExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ItemListExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ItemListExtension(struct soap *soap, ns2__ItemListExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ItemListExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ItemList
#define SOAP_TYPE_ns2__ItemList (524)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ItemList(struct soap*, const char*, int, const ns2__ItemList *, const char*);
SOAP_FMAC3 ns2__ItemList * SOAP_FMAC4 soap_in_ns2__ItemList(struct soap*, const char*, ns2__ItemList *, const char*);

#ifndef soap_write_ns2__ItemList
#define soap_write_ns2__ItemList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ItemList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemList * SOAP_FMAC4 soap_get_ns2__ItemList(struct soap*, ns2__ItemList *, const char*, const char*);

#ifndef soap_read_ns2__ItemList
#define soap_read_ns2__ItemList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ItemList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ItemList * SOAP_FMAC2 soap_instantiate_ns2__ItemList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ItemList * soap_new_ns2__ItemList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ItemList(soap, n, NULL, NULL, NULL); }

inline ns2__ItemList * soap_new_req_ns2__ItemList(struct soap *soap) { ns2__ItemList *_p = soap_instantiate_ns2__ItemList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ItemList * soap_new_set_ns2__ItemList(struct soap *soap, std::vector<_ns2__ItemList_SimpleItem >*SimpleItem, std::vector<_ns2__ItemList_ElementItem >*ElementItem, ns2__ItemListExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ItemList *_p = soap_instantiate_ns2__ItemList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ItemList::SimpleItem = SimpleItem; _p->ns2__ItemList::ElementItem = ElementItem; _p->ns2__ItemList::Extension = Extension; _p->ns2__ItemList::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ItemList(struct soap *soap, ns2__ItemList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ItemList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MessageExtension
#define SOAP_TYPE_ns2__MessageExtension (523)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MessageExtension(struct soap*, const char*, int, const ns2__MessageExtension *, const char*);
SOAP_FMAC3 ns2__MessageExtension * SOAP_FMAC4 soap_in_ns2__MessageExtension(struct soap*, const char*, ns2__MessageExtension *, const char*);

#ifndef soap_write_ns2__MessageExtension
#define soap_write_ns2__MessageExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MessageExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageExtension * SOAP_FMAC4 soap_get_ns2__MessageExtension(struct soap*, ns2__MessageExtension *, const char*, const char*);

#ifndef soap_read_ns2__MessageExtension
#define soap_read_ns2__MessageExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MessageExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MessageExtension * SOAP_FMAC2 soap_instantiate_ns2__MessageExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MessageExtension * soap_new_ns2__MessageExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MessageExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MessageExtension * soap_new_req_ns2__MessageExtension(struct soap *soap) { ns2__MessageExtension *_p = soap_instantiate_ns2__MessageExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MessageExtension * soap_new_set_ns2__MessageExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__MessageExtension *_p = soap_instantiate_ns2__MessageExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MessageExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MessageExtension(struct soap *soap, ns2__MessageExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MessageExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NoiseReductionOptions
#define SOAP_TYPE_ns2__NoiseReductionOptions (522)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NoiseReductionOptions(struct soap*, const char*, int, const ns2__NoiseReductionOptions *, const char*);
SOAP_FMAC3 ns2__NoiseReductionOptions * SOAP_FMAC4 soap_in_ns2__NoiseReductionOptions(struct soap*, const char*, ns2__NoiseReductionOptions *, const char*);

#ifndef soap_write_ns2__NoiseReductionOptions
#define soap_write_ns2__NoiseReductionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NoiseReductionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NoiseReductionOptions * SOAP_FMAC4 soap_get_ns2__NoiseReductionOptions(struct soap*, ns2__NoiseReductionOptions *, const char*, const char*);

#ifndef soap_read_ns2__NoiseReductionOptions
#define soap_read_ns2__NoiseReductionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NoiseReductionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NoiseReductionOptions * SOAP_FMAC2 soap_instantiate_ns2__NoiseReductionOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NoiseReductionOptions * soap_new_ns2__NoiseReductionOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NoiseReductionOptions(soap, n, NULL, NULL, NULL); }

inline ns2__NoiseReductionOptions * soap_new_req_ns2__NoiseReductionOptions(struct soap *soap, bool Level) { ns2__NoiseReductionOptions *_p = soap_instantiate_ns2__NoiseReductionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NoiseReductionOptions::Level = Level; } return _p; }

inline ns2__NoiseReductionOptions * soap_new_set_ns2__NoiseReductionOptions(struct soap *soap, bool Level, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__NoiseReductionOptions *_p = soap_instantiate_ns2__NoiseReductionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NoiseReductionOptions::Level = Level; _p->ns2__NoiseReductionOptions::__any = __any; _p->ns2__NoiseReductionOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NoiseReductionOptions(struct soap *soap, ns2__NoiseReductionOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NoiseReductionOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DefoggingOptions
#define SOAP_TYPE_ns2__DefoggingOptions (521)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DefoggingOptions(struct soap*, const char*, int, const ns2__DefoggingOptions *, const char*);
SOAP_FMAC3 ns2__DefoggingOptions * SOAP_FMAC4 soap_in_ns2__DefoggingOptions(struct soap*, const char*, ns2__DefoggingOptions *, const char*);

#ifndef soap_write_ns2__DefoggingOptions
#define soap_write_ns2__DefoggingOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DefoggingOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DefoggingOptions * SOAP_FMAC4 soap_get_ns2__DefoggingOptions(struct soap*, ns2__DefoggingOptions *, const char*, const char*);

#ifndef soap_read_ns2__DefoggingOptions
#define soap_read_ns2__DefoggingOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DefoggingOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DefoggingOptions * SOAP_FMAC2 soap_instantiate_ns2__DefoggingOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DefoggingOptions * soap_new_ns2__DefoggingOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DefoggingOptions(soap, n, NULL, NULL, NULL); }

inline ns2__DefoggingOptions * soap_new_req_ns2__DefoggingOptions(struct soap *soap, const std::vector<std::string >& Mode, bool Level) { ns2__DefoggingOptions *_p = soap_instantiate_ns2__DefoggingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DefoggingOptions::Mode = Mode; _p->ns2__DefoggingOptions::Level = Level; } return _p; }

inline ns2__DefoggingOptions * soap_new_set_ns2__DefoggingOptions(struct soap *soap, const std::vector<std::string >& Mode, bool Level, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__DefoggingOptions *_p = soap_instantiate_ns2__DefoggingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DefoggingOptions::Mode = Mode; _p->ns2__DefoggingOptions::Level = Level; _p->ns2__DefoggingOptions::__any = __any; _p->ns2__DefoggingOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DefoggingOptions(struct soap *soap, ns2__DefoggingOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DefoggingOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ToneCompensationOptions
#define SOAP_TYPE_ns2__ToneCompensationOptions (520)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ToneCompensationOptions(struct soap*, const char*, int, const ns2__ToneCompensationOptions *, const char*);
SOAP_FMAC3 ns2__ToneCompensationOptions * SOAP_FMAC4 soap_in_ns2__ToneCompensationOptions(struct soap*, const char*, ns2__ToneCompensationOptions *, const char*);

#ifndef soap_write_ns2__ToneCompensationOptions
#define soap_write_ns2__ToneCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ToneCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensationOptions * SOAP_FMAC4 soap_get_ns2__ToneCompensationOptions(struct soap*, ns2__ToneCompensationOptions *, const char*, const char*);

#ifndef soap_read_ns2__ToneCompensationOptions
#define soap_read_ns2__ToneCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ToneCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ToneCompensationOptions * SOAP_FMAC2 soap_instantiate_ns2__ToneCompensationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ToneCompensationOptions * soap_new_ns2__ToneCompensationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ToneCompensationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ToneCompensationOptions * soap_new_req_ns2__ToneCompensationOptions(struct soap *soap, const std::vector<std::string >& Mode, bool Level) { ns2__ToneCompensationOptions *_p = soap_instantiate_ns2__ToneCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensationOptions::Mode = Mode; _p->ns2__ToneCompensationOptions::Level = Level; } return _p; }

inline ns2__ToneCompensationOptions * soap_new_set_ns2__ToneCompensationOptions(struct soap *soap, const std::vector<std::string >& Mode, bool Level, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ToneCompensationOptions *_p = soap_instantiate_ns2__ToneCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensationOptions::Mode = Mode; _p->ns2__ToneCompensationOptions::Level = Level; _p->ns2__ToneCompensationOptions::__any = __any; _p->ns2__ToneCompensationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ToneCompensationOptions(struct soap *soap, ns2__ToneCompensationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ToneCompensationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusOptions20Extension
#define SOAP_TYPE_ns2__FocusOptions20Extension (519)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusOptions20Extension(struct soap*, const char*, int, const ns2__FocusOptions20Extension *, const char*);
SOAP_FMAC3 ns2__FocusOptions20Extension * SOAP_FMAC4 soap_in_ns2__FocusOptions20Extension(struct soap*, const char*, ns2__FocusOptions20Extension *, const char*);

#ifndef soap_write_ns2__FocusOptions20Extension
#define soap_write_ns2__FocusOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusOptions20Extension * SOAP_FMAC4 soap_get_ns2__FocusOptions20Extension(struct soap*, ns2__FocusOptions20Extension *, const char*, const char*);

#ifndef soap_read_ns2__FocusOptions20Extension
#define soap_read_ns2__FocusOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusOptions20Extension * SOAP_FMAC2 soap_instantiate_ns2__FocusOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusOptions20Extension * soap_new_ns2__FocusOptions20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusOptions20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__FocusOptions20Extension * soap_new_req_ns2__FocusOptions20Extension(struct soap *soap) { ns2__FocusOptions20Extension *_p = soap_instantiate_ns2__FocusOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FocusOptions20Extension * soap_new_set_ns2__FocusOptions20Extension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__FocusOptions20Extension *_p = soap_instantiate_ns2__FocusOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusOptions20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusOptions20Extension(struct soap *soap, ns2__FocusOptions20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusOptions20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusOptions20
#define SOAP_TYPE_ns2__FocusOptions20 (518)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusOptions20(struct soap*, const char*, int, const ns2__FocusOptions20 *, const char*);
SOAP_FMAC3 ns2__FocusOptions20 * SOAP_FMAC4 soap_in_ns2__FocusOptions20(struct soap*, const char*, ns2__FocusOptions20 *, const char*);

#ifndef soap_write_ns2__FocusOptions20
#define soap_write_ns2__FocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusOptions20 * SOAP_FMAC4 soap_get_ns2__FocusOptions20(struct soap*, ns2__FocusOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__FocusOptions20
#define soap_read_ns2__FocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusOptions20 * SOAP_FMAC2 soap_instantiate_ns2__FocusOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusOptions20 * soap_new_ns2__FocusOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__FocusOptions20 * soap_new_req_ns2__FocusOptions20(struct soap *soap) { ns2__FocusOptions20 *_p = soap_instantiate_ns2__FocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FocusOptions20 * soap_new_set_ns2__FocusOptions20(struct soap *soap, const std::vector<enum ns2__AutoFocusMode >& AutoFocusModes, ns2__FloatRange *DefaultSpeed, ns2__FloatRange *NearLimit, ns2__FloatRange *FarLimit, ns2__FocusOptions20Extension *Extension, char *__item1) { ns2__FocusOptions20 *_p = soap_instantiate_ns2__FocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusOptions20::AutoFocusModes = AutoFocusModes; _p->ns2__FocusOptions20::DefaultSpeed = DefaultSpeed; _p->ns2__FocusOptions20::NearLimit = NearLimit; _p->ns2__FocusOptions20::FarLimit = FarLimit; _p->ns2__FocusOptions20::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusOptions20(struct soap *soap, ns2__FocusOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalanceOptions20Extension
#define SOAP_TYPE_ns2__WhiteBalanceOptions20Extension (517)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalanceOptions20Extension(struct soap*, const char*, int, const ns2__WhiteBalanceOptions20Extension *, const char*);
SOAP_FMAC3 ns2__WhiteBalanceOptions20Extension * SOAP_FMAC4 soap_in_ns2__WhiteBalanceOptions20Extension(struct soap*, const char*, ns2__WhiteBalanceOptions20Extension *, const char*);

#ifndef soap_write_ns2__WhiteBalanceOptions20Extension
#define soap_write_ns2__WhiteBalanceOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalanceOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceOptions20Extension * SOAP_FMAC4 soap_get_ns2__WhiteBalanceOptions20Extension(struct soap*, ns2__WhiteBalanceOptions20Extension *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalanceOptions20Extension
#define soap_read_ns2__WhiteBalanceOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalanceOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalanceOptions20Extension * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalanceOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalanceOptions20Extension * soap_new_ns2__WhiteBalanceOptions20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalanceOptions20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalanceOptions20Extension * soap_new_req_ns2__WhiteBalanceOptions20Extension(struct soap *soap) { ns2__WhiteBalanceOptions20Extension *_p = soap_instantiate_ns2__WhiteBalanceOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__WhiteBalanceOptions20Extension * soap_new_set_ns2__WhiteBalanceOptions20Extension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__WhiteBalanceOptions20Extension *_p = soap_instantiate_ns2__WhiteBalanceOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceOptions20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalanceOptions20Extension(struct soap *soap, ns2__WhiteBalanceOptions20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalanceOptions20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalanceOptions20
#define SOAP_TYPE_ns2__WhiteBalanceOptions20 (516)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalanceOptions20(struct soap*, const char*, int, const ns2__WhiteBalanceOptions20 *, const char*);
SOAP_FMAC3 ns2__WhiteBalanceOptions20 * SOAP_FMAC4 soap_in_ns2__WhiteBalanceOptions20(struct soap*, const char*, ns2__WhiteBalanceOptions20 *, const char*);

#ifndef soap_write_ns2__WhiteBalanceOptions20
#define soap_write_ns2__WhiteBalanceOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalanceOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceOptions20 * SOAP_FMAC4 soap_get_ns2__WhiteBalanceOptions20(struct soap*, ns2__WhiteBalanceOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalanceOptions20
#define soap_read_ns2__WhiteBalanceOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalanceOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalanceOptions20 * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalanceOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalanceOptions20 * soap_new_ns2__WhiteBalanceOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalanceOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalanceOptions20 * soap_new_req_ns2__WhiteBalanceOptions20(struct soap *soap, const std::vector<enum ns2__WhiteBalanceMode >& Mode) { ns2__WhiteBalanceOptions20 *_p = soap_instantiate_ns2__WhiteBalanceOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceOptions20::Mode = Mode; } return _p; }

inline ns2__WhiteBalanceOptions20 * soap_new_set_ns2__WhiteBalanceOptions20(struct soap *soap, const std::vector<enum ns2__WhiteBalanceMode >& Mode, ns2__FloatRange *YrGain, ns2__FloatRange *YbGain, ns2__WhiteBalanceOptions20Extension *Extension, char *__item1) { ns2__WhiteBalanceOptions20 *_p = soap_instantiate_ns2__WhiteBalanceOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceOptions20::Mode = Mode; _p->ns2__WhiteBalanceOptions20::YrGain = YrGain; _p->ns2__WhiteBalanceOptions20::YbGain = YbGain; _p->ns2__WhiteBalanceOptions20::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalanceOptions20(struct soap *soap, ns2__WhiteBalanceOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalanceOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusConfiguration20Extension
#define SOAP_TYPE_ns2__FocusConfiguration20Extension (515)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusConfiguration20Extension(struct soap*, const char*, int, const ns2__FocusConfiguration20Extension *, const char*);
SOAP_FMAC3 ns2__FocusConfiguration20Extension * SOAP_FMAC4 soap_in_ns2__FocusConfiguration20Extension(struct soap*, const char*, ns2__FocusConfiguration20Extension *, const char*);

#ifndef soap_write_ns2__FocusConfiguration20Extension
#define soap_write_ns2__FocusConfiguration20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusConfiguration20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusConfiguration20Extension * SOAP_FMAC4 soap_get_ns2__FocusConfiguration20Extension(struct soap*, ns2__FocusConfiguration20Extension *, const char*, const char*);

#ifndef soap_read_ns2__FocusConfiguration20Extension
#define soap_read_ns2__FocusConfiguration20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusConfiguration20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusConfiguration20Extension * SOAP_FMAC2 soap_instantiate_ns2__FocusConfiguration20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusConfiguration20Extension * soap_new_ns2__FocusConfiguration20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusConfiguration20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__FocusConfiguration20Extension * soap_new_req_ns2__FocusConfiguration20Extension(struct soap *soap) { ns2__FocusConfiguration20Extension *_p = soap_instantiate_ns2__FocusConfiguration20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FocusConfiguration20Extension * soap_new_set_ns2__FocusConfiguration20Extension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__FocusConfiguration20Extension *_p = soap_instantiate_ns2__FocusConfiguration20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusConfiguration20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusConfiguration20Extension(struct soap *soap, ns2__FocusConfiguration20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusConfiguration20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusConfiguration20
#define SOAP_TYPE_ns2__FocusConfiguration20 (514)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusConfiguration20(struct soap*, const char*, int, const ns2__FocusConfiguration20 *, const char*);
SOAP_FMAC3 ns2__FocusConfiguration20 * SOAP_FMAC4 soap_in_ns2__FocusConfiguration20(struct soap*, const char*, ns2__FocusConfiguration20 *, const char*);

#ifndef soap_write_ns2__FocusConfiguration20
#define soap_write_ns2__FocusConfiguration20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusConfiguration20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusConfiguration20 * SOAP_FMAC4 soap_get_ns2__FocusConfiguration20(struct soap*, ns2__FocusConfiguration20 *, const char*, const char*);

#ifndef soap_read_ns2__FocusConfiguration20
#define soap_read_ns2__FocusConfiguration20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusConfiguration20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusConfiguration20 * SOAP_FMAC2 soap_instantiate_ns2__FocusConfiguration20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusConfiguration20 * soap_new_ns2__FocusConfiguration20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusConfiguration20(soap, n, NULL, NULL, NULL); }

inline ns2__FocusConfiguration20 * soap_new_req_ns2__FocusConfiguration20(struct soap *soap, enum ns2__AutoFocusMode AutoFocusMode) { ns2__FocusConfiguration20 *_p = soap_instantiate_ns2__FocusConfiguration20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusConfiguration20::AutoFocusMode = AutoFocusMode; } return _p; }

inline ns2__FocusConfiguration20 * soap_new_set_ns2__FocusConfiguration20(struct soap *soap, enum ns2__AutoFocusMode AutoFocusMode, float *DefaultSpeed, float *NearLimit, float *FarLimit, ns2__FocusConfiguration20Extension *Extension, char *__anyAttribute, char *__item1) { ns2__FocusConfiguration20 *_p = soap_instantiate_ns2__FocusConfiguration20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusConfiguration20::AutoFocusMode = AutoFocusMode; _p->ns2__FocusConfiguration20::DefaultSpeed = DefaultSpeed; _p->ns2__FocusConfiguration20::NearLimit = NearLimit; _p->ns2__FocusConfiguration20::FarLimit = FarLimit; _p->ns2__FocusConfiguration20::Extension = Extension; _p->ns2__FocusConfiguration20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusConfiguration20(struct soap *soap, ns2__FocusConfiguration20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusConfiguration20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalance20Extension
#define SOAP_TYPE_ns2__WhiteBalance20Extension (513)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalance20Extension(struct soap*, const char*, int, const ns2__WhiteBalance20Extension *, const char*);
SOAP_FMAC3 ns2__WhiteBalance20Extension * SOAP_FMAC4 soap_in_ns2__WhiteBalance20Extension(struct soap*, const char*, ns2__WhiteBalance20Extension *, const char*);

#ifndef soap_write_ns2__WhiteBalance20Extension
#define soap_write_ns2__WhiteBalance20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalance20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalance20Extension * SOAP_FMAC4 soap_get_ns2__WhiteBalance20Extension(struct soap*, ns2__WhiteBalance20Extension *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalance20Extension
#define soap_read_ns2__WhiteBalance20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalance20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalance20Extension * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalance20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalance20Extension * soap_new_ns2__WhiteBalance20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalance20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalance20Extension * soap_new_req_ns2__WhiteBalance20Extension(struct soap *soap) { ns2__WhiteBalance20Extension *_p = soap_instantiate_ns2__WhiteBalance20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__WhiteBalance20Extension * soap_new_set_ns2__WhiteBalance20Extension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__WhiteBalance20Extension *_p = soap_instantiate_ns2__WhiteBalance20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalance20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalance20Extension(struct soap *soap, ns2__WhiteBalance20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalance20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalance20
#define SOAP_TYPE_ns2__WhiteBalance20 (512)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalance20(struct soap*, const char*, int, const ns2__WhiteBalance20 *, const char*);
SOAP_FMAC3 ns2__WhiteBalance20 * SOAP_FMAC4 soap_in_ns2__WhiteBalance20(struct soap*, const char*, ns2__WhiteBalance20 *, const char*);

#ifndef soap_write_ns2__WhiteBalance20
#define soap_write_ns2__WhiteBalance20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalance20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalance20 * SOAP_FMAC4 soap_get_ns2__WhiteBalance20(struct soap*, ns2__WhiteBalance20 *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalance20
#define soap_read_ns2__WhiteBalance20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalance20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalance20 * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalance20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalance20 * soap_new_ns2__WhiteBalance20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalance20(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalance20 * soap_new_req_ns2__WhiteBalance20(struct soap *soap, enum ns2__WhiteBalanceMode Mode) { ns2__WhiteBalance20 *_p = soap_instantiate_ns2__WhiteBalance20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalance20::Mode = Mode; } return _p; }

inline ns2__WhiteBalance20 * soap_new_set_ns2__WhiteBalance20(struct soap *soap, enum ns2__WhiteBalanceMode Mode, float *CrGain, float *CbGain, ns2__WhiteBalance20Extension *Extension, char *__anyAttribute, char *__item1) { ns2__WhiteBalance20 *_p = soap_instantiate_ns2__WhiteBalance20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalance20::Mode = Mode; _p->ns2__WhiteBalance20::CrGain = CrGain; _p->ns2__WhiteBalance20::CbGain = CbGain; _p->ns2__WhiteBalance20::Extension = Extension; _p->ns2__WhiteBalance20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalance20(struct soap *soap, ns2__WhiteBalance20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalance20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelativeFocusOptions20
#define SOAP_TYPE_ns2__RelativeFocusOptions20 (511)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelativeFocusOptions20(struct soap*, const char*, int, const ns2__RelativeFocusOptions20 *, const char*);
SOAP_FMAC3 ns2__RelativeFocusOptions20 * SOAP_FMAC4 soap_in_ns2__RelativeFocusOptions20(struct soap*, const char*, ns2__RelativeFocusOptions20 *, const char*);

#ifndef soap_write_ns2__RelativeFocusOptions20
#define soap_write_ns2__RelativeFocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelativeFocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelativeFocusOptions20 * SOAP_FMAC4 soap_get_ns2__RelativeFocusOptions20(struct soap*, ns2__RelativeFocusOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__RelativeFocusOptions20
#define soap_read_ns2__RelativeFocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelativeFocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelativeFocusOptions20 * SOAP_FMAC2 soap_instantiate_ns2__RelativeFocusOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelativeFocusOptions20 * soap_new_ns2__RelativeFocusOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelativeFocusOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__RelativeFocusOptions20 * soap_new_req_ns2__RelativeFocusOptions20(struct soap *soap, ns2__FloatRange *Distance) { ns2__RelativeFocusOptions20 *_p = soap_instantiate_ns2__RelativeFocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelativeFocusOptions20::Distance = Distance; } return _p; }

inline ns2__RelativeFocusOptions20 * soap_new_set_ns2__RelativeFocusOptions20(struct soap *soap, ns2__FloatRange *Distance, ns2__FloatRange *Speed, char *__item1) { ns2__RelativeFocusOptions20 *_p = soap_instantiate_ns2__RelativeFocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelativeFocusOptions20::Distance = Distance; _p->ns2__RelativeFocusOptions20::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelativeFocusOptions20(struct soap *soap, ns2__RelativeFocusOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelativeFocusOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MoveOptions20
#define SOAP_TYPE_ns2__MoveOptions20 (510)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MoveOptions20(struct soap*, const char*, int, const ns2__MoveOptions20 *, const char*);
SOAP_FMAC3 ns2__MoveOptions20 * SOAP_FMAC4 soap_in_ns2__MoveOptions20(struct soap*, const char*, ns2__MoveOptions20 *, const char*);

#ifndef soap_write_ns2__MoveOptions20
#define soap_write_ns2__MoveOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MoveOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MoveOptions20 * SOAP_FMAC4 soap_get_ns2__MoveOptions20(struct soap*, ns2__MoveOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__MoveOptions20
#define soap_read_ns2__MoveOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MoveOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MoveOptions20 * SOAP_FMAC2 soap_instantiate_ns2__MoveOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MoveOptions20 * soap_new_ns2__MoveOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MoveOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__MoveOptions20 * soap_new_req_ns2__MoveOptions20(struct soap *soap) { ns2__MoveOptions20 *_p = soap_instantiate_ns2__MoveOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MoveOptions20 * soap_new_set_ns2__MoveOptions20(struct soap *soap, ns2__AbsoluteFocusOptions *Absolute, ns2__RelativeFocusOptions20 *Relative, ns2__ContinuousFocusOptions *Continuous, char *__item1) { ns2__MoveOptions20 *_p = soap_instantiate_ns2__MoveOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MoveOptions20::Absolute = Absolute; _p->ns2__MoveOptions20::Relative = Relative; _p->ns2__MoveOptions20::Continuous = Continuous; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MoveOptions20(struct soap *soap, ns2__MoveOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MoveOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ExposureOptions20
#define SOAP_TYPE_ns2__ExposureOptions20 (509)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExposureOptions20(struct soap*, const char*, int, const ns2__ExposureOptions20 *, const char*);
SOAP_FMAC3 ns2__ExposureOptions20 * SOAP_FMAC4 soap_in_ns2__ExposureOptions20(struct soap*, const char*, ns2__ExposureOptions20 *, const char*);

#ifndef soap_write_ns2__ExposureOptions20
#define soap_write_ns2__ExposureOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ExposureOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ExposureOptions20 * SOAP_FMAC4 soap_get_ns2__ExposureOptions20(struct soap*, ns2__ExposureOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__ExposureOptions20
#define soap_read_ns2__ExposureOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ExposureOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ExposureOptions20 * SOAP_FMAC2 soap_instantiate_ns2__ExposureOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExposureOptions20 * soap_new_ns2__ExposureOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ExposureOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__ExposureOptions20 * soap_new_req_ns2__ExposureOptions20(struct soap *soap, const std::vector<enum ns2__ExposureMode >& Mode) { ns2__ExposureOptions20 *_p = soap_instantiate_ns2__ExposureOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposureOptions20::Mode = Mode; } return _p; }

inline ns2__ExposureOptions20 * soap_new_set_ns2__ExposureOptions20(struct soap *soap, const std::vector<enum ns2__ExposureMode >& Mode, const std::vector<enum ns2__ExposurePriority >& Priority, ns2__FloatRange *MinExposureTime, ns2__FloatRange *MaxExposureTime, ns2__FloatRange *MinGain, ns2__FloatRange *MaxGain, ns2__FloatRange *MinIris, ns2__FloatRange *MaxIris, ns2__FloatRange *ExposureTime, ns2__FloatRange *Gain, ns2__FloatRange *Iris, char *__item1) { ns2__ExposureOptions20 *_p = soap_instantiate_ns2__ExposureOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposureOptions20::Mode = Mode; _p->ns2__ExposureOptions20::Priority = Priority; _p->ns2__ExposureOptions20::MinExposureTime = MinExposureTime; _p->ns2__ExposureOptions20::MaxExposureTime = MaxExposureTime; _p->ns2__ExposureOptions20::MinGain = MinGain; _p->ns2__ExposureOptions20::MaxGain = MaxGain; _p->ns2__ExposureOptions20::MinIris = MinIris; _p->ns2__ExposureOptions20::MaxIris = MaxIris; _p->ns2__ExposureOptions20::ExposureTime = ExposureTime; _p->ns2__ExposureOptions20::Gain = Gain; _p->ns2__ExposureOptions20::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ExposureOptions20(struct soap *soap, ns2__ExposureOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ExposureOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BacklightCompensationOptions20
#define SOAP_TYPE_ns2__BacklightCompensationOptions20 (508)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BacklightCompensationOptions20(struct soap*, const char*, int, const ns2__BacklightCompensationOptions20 *, const char*);
SOAP_FMAC3 ns2__BacklightCompensationOptions20 * SOAP_FMAC4 soap_in_ns2__BacklightCompensationOptions20(struct soap*, const char*, ns2__BacklightCompensationOptions20 *, const char*);

#ifndef soap_write_ns2__BacklightCompensationOptions20
#define soap_write_ns2__BacklightCompensationOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BacklightCompensationOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensationOptions20 * SOAP_FMAC4 soap_get_ns2__BacklightCompensationOptions20(struct soap*, ns2__BacklightCompensationOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__BacklightCompensationOptions20
#define soap_read_ns2__BacklightCompensationOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BacklightCompensationOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BacklightCompensationOptions20 * SOAP_FMAC2 soap_instantiate_ns2__BacklightCompensationOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BacklightCompensationOptions20 * soap_new_ns2__BacklightCompensationOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BacklightCompensationOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__BacklightCompensationOptions20 * soap_new_req_ns2__BacklightCompensationOptions20(struct soap *soap, const std::vector<enum ns2__BacklightCompensationMode >& Mode) { ns2__BacklightCompensationOptions20 *_p = soap_instantiate_ns2__BacklightCompensationOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensationOptions20::Mode = Mode; } return _p; }

inline ns2__BacklightCompensationOptions20 * soap_new_set_ns2__BacklightCompensationOptions20(struct soap *soap, const std::vector<enum ns2__BacklightCompensationMode >& Mode, ns2__FloatRange *Level, char *__item1) { ns2__BacklightCompensationOptions20 *_p = soap_instantiate_ns2__BacklightCompensationOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensationOptions20::Mode = Mode; _p->ns2__BacklightCompensationOptions20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BacklightCompensationOptions20(struct soap *soap, ns2__BacklightCompensationOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BacklightCompensationOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WideDynamicRangeOptions20
#define SOAP_TYPE_ns2__WideDynamicRangeOptions20 (507)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WideDynamicRangeOptions20(struct soap*, const char*, int, const ns2__WideDynamicRangeOptions20 *, const char*);
SOAP_FMAC3 ns2__WideDynamicRangeOptions20 * SOAP_FMAC4 soap_in_ns2__WideDynamicRangeOptions20(struct soap*, const char*, ns2__WideDynamicRangeOptions20 *, const char*);

#ifndef soap_write_ns2__WideDynamicRangeOptions20
#define soap_write_ns2__WideDynamicRangeOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WideDynamicRangeOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRangeOptions20 * SOAP_FMAC4 soap_get_ns2__WideDynamicRangeOptions20(struct soap*, ns2__WideDynamicRangeOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__WideDynamicRangeOptions20
#define soap_read_ns2__WideDynamicRangeOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WideDynamicRangeOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WideDynamicRangeOptions20 * SOAP_FMAC2 soap_instantiate_ns2__WideDynamicRangeOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WideDynamicRangeOptions20 * soap_new_ns2__WideDynamicRangeOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WideDynamicRangeOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__WideDynamicRangeOptions20 * soap_new_req_ns2__WideDynamicRangeOptions20(struct soap *soap, const std::vector<enum ns2__WideDynamicMode >& Mode) { ns2__WideDynamicRangeOptions20 *_p = soap_instantiate_ns2__WideDynamicRangeOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRangeOptions20::Mode = Mode; } return _p; }

inline ns2__WideDynamicRangeOptions20 * soap_new_set_ns2__WideDynamicRangeOptions20(struct soap *soap, const std::vector<enum ns2__WideDynamicMode >& Mode, ns2__FloatRange *Level, char *__item1) { ns2__WideDynamicRangeOptions20 *_p = soap_instantiate_ns2__WideDynamicRangeOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRangeOptions20::Mode = Mode; _p->ns2__WideDynamicRangeOptions20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WideDynamicRangeOptions20(struct soap *soap, ns2__WideDynamicRangeOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WideDynamicRangeOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_ns2__IrCutFilterAutoAdjustmentOptionsExtension (506)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, int, const ns2__IrCutFilterAutoAdjustmentOptionsExtension *, const char*);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC4 soap_in_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, ns2__IrCutFilterAutoAdjustmentOptionsExtension *, const char*);

#ifndef soap_write_ns2__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_write_ns2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IrCutFilterAutoAdjustmentOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC4 soap_get_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_read_ns2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_req_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap) { ns2__IrCutFilterAutoAdjustmentOptionsExtension *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_set_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__IrCutFilterAutoAdjustmentOptionsExtension *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoAdjustmentOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, ns2__IrCutFilterAutoAdjustmentOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_ns2__IrCutFilterAutoAdjustmentOptions (505)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, int, const ns2__IrCutFilterAutoAdjustmentOptions *, const char*);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC4 soap_in_ns2__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, ns2__IrCutFilterAutoAdjustmentOptions *, const char*);

#ifndef soap_write_ns2__IrCutFilterAutoAdjustmentOptions
#define soap_write_ns2__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IrCutFilterAutoAdjustmentOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC4 soap_get_ns2__IrCutFilterAutoAdjustmentOptions(struct soap*, ns2__IrCutFilterAutoAdjustmentOptions *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterAutoAdjustmentOptions
#define soap_read_ns2__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterAutoAdjustmentOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC2 soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IrCutFilterAutoAdjustmentOptions * soap_new_ns2__IrCutFilterAutoAdjustmentOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptions(soap, n, NULL, NULL, NULL); }

inline ns2__IrCutFilterAutoAdjustmentOptions * soap_new_req_ns2__IrCutFilterAutoAdjustmentOptions(struct soap *soap, const std::vector<std::string >& BoundaryType) { ns2__IrCutFilterAutoAdjustmentOptions *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoAdjustmentOptions::BoundaryType = BoundaryType; } return _p; }

inline ns2__IrCutFilterAutoAdjustmentOptions * soap_new_set_ns2__IrCutFilterAutoAdjustmentOptions(struct soap *soap, const std::vector<std::string >& BoundaryType, bool *BoundaryOffset, ns2__DurationRange *ResponseTimeRange, ns2__IrCutFilterAutoAdjustmentOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__IrCutFilterAutoAdjustmentOptions *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustmentOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoAdjustmentOptions::BoundaryType = BoundaryType; _p->ns2__IrCutFilterAutoAdjustmentOptions::BoundaryOffset = BoundaryOffset; _p->ns2__IrCutFilterAutoAdjustmentOptions::ResponseTimeRange = ResponseTimeRange; _p->ns2__IrCutFilterAutoAdjustmentOptions::Extension = Extension; _p->ns2__IrCutFilterAutoAdjustmentOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IrCutFilterAutoAdjustmentOptions(struct soap *soap, ns2__IrCutFilterAutoAdjustmentOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IrCutFilterAutoAdjustmentOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImageStabilizationOptionsExtension
#define SOAP_TYPE_ns2__ImageStabilizationOptionsExtension (504)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImageStabilizationOptionsExtension(struct soap*, const char*, int, const ns2__ImageStabilizationOptionsExtension *, const char*);
SOAP_FMAC3 ns2__ImageStabilizationOptionsExtension * SOAP_FMAC4 soap_in_ns2__ImageStabilizationOptionsExtension(struct soap*, const char*, ns2__ImageStabilizationOptionsExtension *, const char*);

#ifndef soap_write_ns2__ImageStabilizationOptionsExtension
#define soap_write_ns2__ImageStabilizationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImageStabilizationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationOptionsExtension * SOAP_FMAC4 soap_get_ns2__ImageStabilizationOptionsExtension(struct soap*, ns2__ImageStabilizationOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__ImageStabilizationOptionsExtension
#define soap_read_ns2__ImageStabilizationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImageStabilizationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImageStabilizationOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__ImageStabilizationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImageStabilizationOptionsExtension * soap_new_ns2__ImageStabilizationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImageStabilizationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ImageStabilizationOptionsExtension * soap_new_req_ns2__ImageStabilizationOptionsExtension(struct soap *soap) { ns2__ImageStabilizationOptionsExtension *_p = soap_instantiate_ns2__ImageStabilizationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImageStabilizationOptionsExtension * soap_new_set_ns2__ImageStabilizationOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ImageStabilizationOptionsExtension *_p = soap_instantiate_ns2__ImageStabilizationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilizationOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImageStabilizationOptionsExtension(struct soap *soap, ns2__ImageStabilizationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImageStabilizationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImageStabilizationOptions
#define SOAP_TYPE_ns2__ImageStabilizationOptions (503)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImageStabilizationOptions(struct soap*, const char*, int, const ns2__ImageStabilizationOptions *, const char*);
SOAP_FMAC3 ns2__ImageStabilizationOptions * SOAP_FMAC4 soap_in_ns2__ImageStabilizationOptions(struct soap*, const char*, ns2__ImageStabilizationOptions *, const char*);

#ifndef soap_write_ns2__ImageStabilizationOptions
#define soap_write_ns2__ImageStabilizationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImageStabilizationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationOptions * SOAP_FMAC4 soap_get_ns2__ImageStabilizationOptions(struct soap*, ns2__ImageStabilizationOptions *, const char*, const char*);

#ifndef soap_read_ns2__ImageStabilizationOptions
#define soap_read_ns2__ImageStabilizationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImageStabilizationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImageStabilizationOptions * SOAP_FMAC2 soap_instantiate_ns2__ImageStabilizationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImageStabilizationOptions * soap_new_ns2__ImageStabilizationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImageStabilizationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ImageStabilizationOptions * soap_new_req_ns2__ImageStabilizationOptions(struct soap *soap, const std::vector<enum ns2__ImageStabilizationMode >& Mode) { ns2__ImageStabilizationOptions *_p = soap_instantiate_ns2__ImageStabilizationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilizationOptions::Mode = Mode; } return _p; }

inline ns2__ImageStabilizationOptions * soap_new_set_ns2__ImageStabilizationOptions(struct soap *soap, const std::vector<enum ns2__ImageStabilizationMode >& Mode, ns2__FloatRange *Level, ns2__ImageStabilizationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ImageStabilizationOptions *_p = soap_instantiate_ns2__ImageStabilizationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilizationOptions::Mode = Mode; _p->ns2__ImageStabilizationOptions::Level = Level; _p->ns2__ImageStabilizationOptions::Extension = Extension; _p->ns2__ImageStabilizationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImageStabilizationOptions(struct soap *soap, ns2__ImageStabilizationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImageStabilizationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingOptions20Extension4
#define SOAP_TYPE_ns2__ImagingOptions20Extension4 (502)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingOptions20Extension4(struct soap*, const char*, int, const ns2__ImagingOptions20Extension4 *, const char*);
SOAP_FMAC3 ns2__ImagingOptions20Extension4 * SOAP_FMAC4 soap_in_ns2__ImagingOptions20Extension4(struct soap*, const char*, ns2__ImagingOptions20Extension4 *, const char*);

#ifndef soap_write_ns2__ImagingOptions20Extension4
#define soap_write_ns2__ImagingOptions20Extension4(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingOptions20Extension4", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension4 * SOAP_FMAC4 soap_get_ns2__ImagingOptions20Extension4(struct soap*, ns2__ImagingOptions20Extension4 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingOptions20Extension4
#define soap_read_ns2__ImagingOptions20Extension4(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingOptions20Extension4(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingOptions20Extension4 * SOAP_FMAC2 soap_instantiate_ns2__ImagingOptions20Extension4(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingOptions20Extension4 * soap_new_ns2__ImagingOptions20Extension4(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingOptions20Extension4(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingOptions20Extension4 * soap_new_req_ns2__ImagingOptions20Extension4(struct soap *soap) { ns2__ImagingOptions20Extension4 *_p = soap_instantiate_ns2__ImagingOptions20Extension4(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingOptions20Extension4 * soap_new_set_ns2__ImagingOptions20Extension4(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ImagingOptions20Extension4 *_p = soap_instantiate_ns2__ImagingOptions20Extension4(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions20Extension4::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingOptions20Extension4(struct soap *soap, ns2__ImagingOptions20Extension4 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingOptions20Extension4(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingOptions20Extension3
#define SOAP_TYPE_ns2__ImagingOptions20Extension3 (501)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingOptions20Extension3(struct soap*, const char*, int, const ns2__ImagingOptions20Extension3 *, const char*);
SOAP_FMAC3 ns2__ImagingOptions20Extension3 * SOAP_FMAC4 soap_in_ns2__ImagingOptions20Extension3(struct soap*, const char*, ns2__ImagingOptions20Extension3 *, const char*);

#ifndef soap_write_ns2__ImagingOptions20Extension3
#define soap_write_ns2__ImagingOptions20Extension3(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingOptions20Extension3", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension3 * SOAP_FMAC4 soap_get_ns2__ImagingOptions20Extension3(struct soap*, ns2__ImagingOptions20Extension3 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingOptions20Extension3
#define soap_read_ns2__ImagingOptions20Extension3(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingOptions20Extension3(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingOptions20Extension3 * SOAP_FMAC2 soap_instantiate_ns2__ImagingOptions20Extension3(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingOptions20Extension3 * soap_new_ns2__ImagingOptions20Extension3(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingOptions20Extension3(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingOptions20Extension3 * soap_new_req_ns2__ImagingOptions20Extension3(struct soap *soap) { ns2__ImagingOptions20Extension3 *_p = soap_instantiate_ns2__ImagingOptions20Extension3(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingOptions20Extension3 * soap_new_set_ns2__ImagingOptions20Extension3(struct soap *soap, ns2__ToneCompensationOptions *ToneCompensationOptions, ns2__DefoggingOptions *DefoggingOptions, ns2__NoiseReductionOptions *NoiseReductionOptions, ns2__ImagingOptions20Extension4 *Extension, char *__item1) { ns2__ImagingOptions20Extension3 *_p = soap_instantiate_ns2__ImagingOptions20Extension3(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions20Extension3::ToneCompensationOptions = ToneCompensationOptions; _p->ns2__ImagingOptions20Extension3::DefoggingOptions = DefoggingOptions; _p->ns2__ImagingOptions20Extension3::NoiseReductionOptions = NoiseReductionOptions; _p->ns2__ImagingOptions20Extension3::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingOptions20Extension3(struct soap *soap, ns2__ImagingOptions20Extension3 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingOptions20Extension3(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingOptions20Extension2
#define SOAP_TYPE_ns2__ImagingOptions20Extension2 (500)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingOptions20Extension2(struct soap*, const char*, int, const ns2__ImagingOptions20Extension2 *, const char*);
SOAP_FMAC3 ns2__ImagingOptions20Extension2 * SOAP_FMAC4 soap_in_ns2__ImagingOptions20Extension2(struct soap*, const char*, ns2__ImagingOptions20Extension2 *, const char*);

#ifndef soap_write_ns2__ImagingOptions20Extension2
#define soap_write_ns2__ImagingOptions20Extension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingOptions20Extension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension2 * SOAP_FMAC4 soap_get_ns2__ImagingOptions20Extension2(struct soap*, ns2__ImagingOptions20Extension2 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingOptions20Extension2
#define soap_read_ns2__ImagingOptions20Extension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingOptions20Extension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingOptions20Extension2 * SOAP_FMAC2 soap_instantiate_ns2__ImagingOptions20Extension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingOptions20Extension2 * soap_new_ns2__ImagingOptions20Extension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingOptions20Extension2(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingOptions20Extension2 * soap_new_req_ns2__ImagingOptions20Extension2(struct soap *soap) { ns2__ImagingOptions20Extension2 *_p = soap_instantiate_ns2__ImagingOptions20Extension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingOptions20Extension2 * soap_new_set_ns2__ImagingOptions20Extension2(struct soap *soap, ns2__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment, ns2__ImagingOptions20Extension3 *Extension, char *__item1) { ns2__ImagingOptions20Extension2 *_p = soap_instantiate_ns2__ImagingOptions20Extension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions20Extension2::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment; _p->ns2__ImagingOptions20Extension2::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingOptions20Extension2(struct soap *soap, ns2__ImagingOptions20Extension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingOptions20Extension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingOptions20Extension
#define SOAP_TYPE_ns2__ImagingOptions20Extension (499)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingOptions20Extension(struct soap*, const char*, int, const ns2__ImagingOptions20Extension *, const char*);
SOAP_FMAC3 ns2__ImagingOptions20Extension * SOAP_FMAC4 soap_in_ns2__ImagingOptions20Extension(struct soap*, const char*, ns2__ImagingOptions20Extension *, const char*);

#ifndef soap_write_ns2__ImagingOptions20Extension
#define soap_write_ns2__ImagingOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension * SOAP_FMAC4 soap_get_ns2__ImagingOptions20Extension(struct soap*, ns2__ImagingOptions20Extension *, const char*, const char*);

#ifndef soap_read_ns2__ImagingOptions20Extension
#define soap_read_ns2__ImagingOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingOptions20Extension * SOAP_FMAC2 soap_instantiate_ns2__ImagingOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingOptions20Extension * soap_new_ns2__ImagingOptions20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingOptions20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingOptions20Extension * soap_new_req_ns2__ImagingOptions20Extension(struct soap *soap) { ns2__ImagingOptions20Extension *_p = soap_instantiate_ns2__ImagingOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingOptions20Extension * soap_new_set_ns2__ImagingOptions20Extension(struct soap *soap, const std::vector<char * >& __any, ns2__ImageStabilizationOptions *ImageStabilization, ns2__ImagingOptions20Extension2 *Extension, char *__item1) { ns2__ImagingOptions20Extension *_p = soap_instantiate_ns2__ImagingOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions20Extension::__any = __any; _p->ns2__ImagingOptions20Extension::ImageStabilization = ImageStabilization; _p->ns2__ImagingOptions20Extension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingOptions20Extension(struct soap *soap, ns2__ImagingOptions20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingOptions20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingOptions20
#define SOAP_TYPE_ns2__ImagingOptions20 (498)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingOptions20(struct soap*, const char*, int, const ns2__ImagingOptions20 *, const char*);
SOAP_FMAC3 ns2__ImagingOptions20 * SOAP_FMAC4 soap_in_ns2__ImagingOptions20(struct soap*, const char*, ns2__ImagingOptions20 *, const char*);

#ifndef soap_write_ns2__ImagingOptions20
#define soap_write_ns2__ImagingOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20 * SOAP_FMAC4 soap_get_ns2__ImagingOptions20(struct soap*, ns2__ImagingOptions20 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingOptions20
#define soap_read_ns2__ImagingOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingOptions20 * SOAP_FMAC2 soap_instantiate_ns2__ImagingOptions20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingOptions20 * soap_new_ns2__ImagingOptions20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingOptions20(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingOptions20 * soap_new_req_ns2__ImagingOptions20(struct soap *soap) { ns2__ImagingOptions20 *_p = soap_instantiate_ns2__ImagingOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingOptions20 * soap_new_set_ns2__ImagingOptions20(struct soap *soap, ns2__BacklightCompensationOptions20 *BacklightCompensation, ns2__FloatRange *Brightness, ns2__FloatRange *ColorSaturation, ns2__FloatRange *Contrast, ns2__ExposureOptions20 *Exposure, ns2__FocusOptions20 *Focus, const std::vector<enum ns2__IrCutFilterMode >& IrCutFilterModes, ns2__FloatRange *Sharpness, ns2__WideDynamicRangeOptions20 *WideDynamicRange, ns2__WhiteBalanceOptions20 *WhiteBalance, ns2__ImagingOptions20Extension *Extension, char *__anyAttribute, char *__item1) { ns2__ImagingOptions20 *_p = soap_instantiate_ns2__ImagingOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions20::BacklightCompensation = BacklightCompensation; _p->ns2__ImagingOptions20::Brightness = Brightness; _p->ns2__ImagingOptions20::ColorSaturation = ColorSaturation; _p->ns2__ImagingOptions20::Contrast = Contrast; _p->ns2__ImagingOptions20::Exposure = Exposure; _p->ns2__ImagingOptions20::Focus = Focus; _p->ns2__ImagingOptions20::IrCutFilterModes = IrCutFilterModes; _p->ns2__ImagingOptions20::Sharpness = Sharpness; _p->ns2__ImagingOptions20::WideDynamicRange = WideDynamicRange; _p->ns2__ImagingOptions20::WhiteBalance = WhiteBalance; _p->ns2__ImagingOptions20::Extension = Extension; _p->ns2__ImagingOptions20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingOptions20(struct soap *soap, ns2__ImagingOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NoiseReduction
#define SOAP_TYPE_ns2__NoiseReduction (497)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NoiseReduction(struct soap*, const char*, int, const ns2__NoiseReduction *, const char*);
SOAP_FMAC3 ns2__NoiseReduction * SOAP_FMAC4 soap_in_ns2__NoiseReduction(struct soap*, const char*, ns2__NoiseReduction *, const char*);

#ifndef soap_write_ns2__NoiseReduction
#define soap_write_ns2__NoiseReduction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NoiseReduction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NoiseReduction * SOAP_FMAC4 soap_get_ns2__NoiseReduction(struct soap*, ns2__NoiseReduction *, const char*, const char*);

#ifndef soap_read_ns2__NoiseReduction
#define soap_read_ns2__NoiseReduction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NoiseReduction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NoiseReduction * SOAP_FMAC2 soap_instantiate_ns2__NoiseReduction(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NoiseReduction * soap_new_ns2__NoiseReduction(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NoiseReduction(soap, n, NULL, NULL, NULL); }

inline ns2__NoiseReduction * soap_new_req_ns2__NoiseReduction(struct soap *soap, float Level) { ns2__NoiseReduction *_p = soap_instantiate_ns2__NoiseReduction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NoiseReduction::Level = Level; } return _p; }

inline ns2__NoiseReduction * soap_new_set_ns2__NoiseReduction(struct soap *soap, float Level, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__NoiseReduction *_p = soap_instantiate_ns2__NoiseReduction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NoiseReduction::Level = Level; _p->ns2__NoiseReduction::__any = __any; _p->ns2__NoiseReduction::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NoiseReduction(struct soap *soap, ns2__NoiseReduction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NoiseReduction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DefoggingExtension
#define SOAP_TYPE_ns2__DefoggingExtension (496)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DefoggingExtension(struct soap*, const char*, int, const ns2__DefoggingExtension *, const char*);
SOAP_FMAC3 ns2__DefoggingExtension * SOAP_FMAC4 soap_in_ns2__DefoggingExtension(struct soap*, const char*, ns2__DefoggingExtension *, const char*);

#ifndef soap_write_ns2__DefoggingExtension
#define soap_write_ns2__DefoggingExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DefoggingExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DefoggingExtension * SOAP_FMAC4 soap_get_ns2__DefoggingExtension(struct soap*, ns2__DefoggingExtension *, const char*, const char*);

#ifndef soap_read_ns2__DefoggingExtension
#define soap_read_ns2__DefoggingExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DefoggingExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DefoggingExtension * SOAP_FMAC2 soap_instantiate_ns2__DefoggingExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DefoggingExtension * soap_new_ns2__DefoggingExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DefoggingExtension(soap, n, NULL, NULL, NULL); }

inline ns2__DefoggingExtension * soap_new_req_ns2__DefoggingExtension(struct soap *soap) { ns2__DefoggingExtension *_p = soap_instantiate_ns2__DefoggingExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DefoggingExtension * soap_new_set_ns2__DefoggingExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__DefoggingExtension *_p = soap_instantiate_ns2__DefoggingExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DefoggingExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DefoggingExtension(struct soap *soap, ns2__DefoggingExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DefoggingExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Defogging
#define SOAP_TYPE_ns2__Defogging (495)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Defogging(struct soap*, const char*, int, const ns2__Defogging *, const char*);
SOAP_FMAC3 ns2__Defogging * SOAP_FMAC4 soap_in_ns2__Defogging(struct soap*, const char*, ns2__Defogging *, const char*);

#ifndef soap_write_ns2__Defogging
#define soap_write_ns2__Defogging(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Defogging", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Defogging * SOAP_FMAC4 soap_get_ns2__Defogging(struct soap*, ns2__Defogging *, const char*, const char*);

#ifndef soap_read_ns2__Defogging
#define soap_read_ns2__Defogging(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Defogging(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Defogging * SOAP_FMAC2 soap_instantiate_ns2__Defogging(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Defogging * soap_new_ns2__Defogging(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Defogging(soap, n, NULL, NULL, NULL); }

inline ns2__Defogging * soap_new_req_ns2__Defogging(struct soap *soap, const std::string& Mode) { ns2__Defogging *_p = soap_instantiate_ns2__Defogging(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Defogging::Mode = Mode; } return _p; }

inline ns2__Defogging * soap_new_set_ns2__Defogging(struct soap *soap, const std::string& Mode, float *Level, ns2__DefoggingExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Defogging *_p = soap_instantiate_ns2__Defogging(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Defogging::Mode = Mode; _p->ns2__Defogging::Level = Level; _p->ns2__Defogging::Extension = Extension; _p->ns2__Defogging::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Defogging(struct soap *soap, ns2__Defogging *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Defogging(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ToneCompensationExtension
#define SOAP_TYPE_ns2__ToneCompensationExtension (494)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ToneCompensationExtension(struct soap*, const char*, int, const ns2__ToneCompensationExtension *, const char*);
SOAP_FMAC3 ns2__ToneCompensationExtension * SOAP_FMAC4 soap_in_ns2__ToneCompensationExtension(struct soap*, const char*, ns2__ToneCompensationExtension *, const char*);

#ifndef soap_write_ns2__ToneCompensationExtension
#define soap_write_ns2__ToneCompensationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ToneCompensationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensationExtension * SOAP_FMAC4 soap_get_ns2__ToneCompensationExtension(struct soap*, ns2__ToneCompensationExtension *, const char*, const char*);

#ifndef soap_read_ns2__ToneCompensationExtension
#define soap_read_ns2__ToneCompensationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ToneCompensationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ToneCompensationExtension * SOAP_FMAC2 soap_instantiate_ns2__ToneCompensationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ToneCompensationExtension * soap_new_ns2__ToneCompensationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ToneCompensationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ToneCompensationExtension * soap_new_req_ns2__ToneCompensationExtension(struct soap *soap) { ns2__ToneCompensationExtension *_p = soap_instantiate_ns2__ToneCompensationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ToneCompensationExtension * soap_new_set_ns2__ToneCompensationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ToneCompensationExtension *_p = soap_instantiate_ns2__ToneCompensationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ToneCompensationExtension(struct soap *soap, ns2__ToneCompensationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ToneCompensationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ToneCompensation
#define SOAP_TYPE_ns2__ToneCompensation (493)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ToneCompensation(struct soap*, const char*, int, const ns2__ToneCompensation *, const char*);
SOAP_FMAC3 ns2__ToneCompensation * SOAP_FMAC4 soap_in_ns2__ToneCompensation(struct soap*, const char*, ns2__ToneCompensation *, const char*);

#ifndef soap_write_ns2__ToneCompensation
#define soap_write_ns2__ToneCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ToneCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensation * SOAP_FMAC4 soap_get_ns2__ToneCompensation(struct soap*, ns2__ToneCompensation *, const char*, const char*);

#ifndef soap_read_ns2__ToneCompensation
#define soap_read_ns2__ToneCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ToneCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ToneCompensation * SOAP_FMAC2 soap_instantiate_ns2__ToneCompensation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ToneCompensation * soap_new_ns2__ToneCompensation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ToneCompensation(soap, n, NULL, NULL, NULL); }

inline ns2__ToneCompensation * soap_new_req_ns2__ToneCompensation(struct soap *soap, const std::string& Mode) { ns2__ToneCompensation *_p = soap_instantiate_ns2__ToneCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensation::Mode = Mode; } return _p; }

inline ns2__ToneCompensation * soap_new_set_ns2__ToneCompensation(struct soap *soap, const std::string& Mode, float *Level, ns2__ToneCompensationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ToneCompensation *_p = soap_instantiate_ns2__ToneCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ToneCompensation::Mode = Mode; _p->ns2__ToneCompensation::Level = Level; _p->ns2__ToneCompensation::Extension = Extension; _p->ns2__ToneCompensation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ToneCompensation(struct soap *soap, ns2__ToneCompensation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ToneCompensation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Exposure20
#define SOAP_TYPE_ns2__Exposure20 (492)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Exposure20(struct soap*, const char*, int, const ns2__Exposure20 *, const char*);
SOAP_FMAC3 ns2__Exposure20 * SOAP_FMAC4 soap_in_ns2__Exposure20(struct soap*, const char*, ns2__Exposure20 *, const char*);

#ifndef soap_write_ns2__Exposure20
#define soap_write_ns2__Exposure20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Exposure20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Exposure20 * SOAP_FMAC4 soap_get_ns2__Exposure20(struct soap*, ns2__Exposure20 *, const char*, const char*);

#ifndef soap_read_ns2__Exposure20
#define soap_read_ns2__Exposure20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Exposure20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Exposure20 * SOAP_FMAC2 soap_instantiate_ns2__Exposure20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Exposure20 * soap_new_ns2__Exposure20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Exposure20(soap, n, NULL, NULL, NULL); }

inline ns2__Exposure20 * soap_new_req_ns2__Exposure20(struct soap *soap, enum ns2__ExposureMode Mode) { ns2__Exposure20 *_p = soap_instantiate_ns2__Exposure20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Exposure20::Mode = Mode; } return _p; }

inline ns2__Exposure20 * soap_new_set_ns2__Exposure20(struct soap *soap, enum ns2__ExposureMode Mode, enum ns2__ExposurePriority *Priority, ns2__Rectangle *Window, float *MinExposureTime, float *MaxExposureTime, float *MinGain, float *MaxGain, float *MinIris, float *MaxIris, float *ExposureTime, float *Gain, float *Iris, char *__item1) { ns2__Exposure20 *_p = soap_instantiate_ns2__Exposure20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Exposure20::Mode = Mode; _p->ns2__Exposure20::Priority = Priority; _p->ns2__Exposure20::Window = Window; _p->ns2__Exposure20::MinExposureTime = MinExposureTime; _p->ns2__Exposure20::MaxExposureTime = MaxExposureTime; _p->ns2__Exposure20::MinGain = MinGain; _p->ns2__Exposure20::MaxGain = MaxGain; _p->ns2__Exposure20::MinIris = MinIris; _p->ns2__Exposure20::MaxIris = MaxIris; _p->ns2__Exposure20::ExposureTime = ExposureTime; _p->ns2__Exposure20::Gain = Gain; _p->ns2__Exposure20::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Exposure20(struct soap *soap, ns2__Exposure20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Exposure20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BacklightCompensation20
#define SOAP_TYPE_ns2__BacklightCompensation20 (491)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BacklightCompensation20(struct soap*, const char*, int, const ns2__BacklightCompensation20 *, const char*);
SOAP_FMAC3 ns2__BacklightCompensation20 * SOAP_FMAC4 soap_in_ns2__BacklightCompensation20(struct soap*, const char*, ns2__BacklightCompensation20 *, const char*);

#ifndef soap_write_ns2__BacklightCompensation20
#define soap_write_ns2__BacklightCompensation20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BacklightCompensation20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensation20 * SOAP_FMAC4 soap_get_ns2__BacklightCompensation20(struct soap*, ns2__BacklightCompensation20 *, const char*, const char*);

#ifndef soap_read_ns2__BacklightCompensation20
#define soap_read_ns2__BacklightCompensation20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BacklightCompensation20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BacklightCompensation20 * SOAP_FMAC2 soap_instantiate_ns2__BacklightCompensation20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BacklightCompensation20 * soap_new_ns2__BacklightCompensation20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BacklightCompensation20(soap, n, NULL, NULL, NULL); }

inline ns2__BacklightCompensation20 * soap_new_req_ns2__BacklightCompensation20(struct soap *soap, enum ns2__BacklightCompensationMode Mode) { ns2__BacklightCompensation20 *_p = soap_instantiate_ns2__BacklightCompensation20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensation20::Mode = Mode; } return _p; }

inline ns2__BacklightCompensation20 * soap_new_set_ns2__BacklightCompensation20(struct soap *soap, enum ns2__BacklightCompensationMode Mode, float *Level, char *__item1) { ns2__BacklightCompensation20 *_p = soap_instantiate_ns2__BacklightCompensation20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensation20::Mode = Mode; _p->ns2__BacklightCompensation20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BacklightCompensation20(struct soap *soap, ns2__BacklightCompensation20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BacklightCompensation20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WideDynamicRange20
#define SOAP_TYPE_ns2__WideDynamicRange20 (490)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WideDynamicRange20(struct soap*, const char*, int, const ns2__WideDynamicRange20 *, const char*);
SOAP_FMAC3 ns2__WideDynamicRange20 * SOAP_FMAC4 soap_in_ns2__WideDynamicRange20(struct soap*, const char*, ns2__WideDynamicRange20 *, const char*);

#ifndef soap_write_ns2__WideDynamicRange20
#define soap_write_ns2__WideDynamicRange20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WideDynamicRange20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRange20 * SOAP_FMAC4 soap_get_ns2__WideDynamicRange20(struct soap*, ns2__WideDynamicRange20 *, const char*, const char*);

#ifndef soap_read_ns2__WideDynamicRange20
#define soap_read_ns2__WideDynamicRange20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WideDynamicRange20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WideDynamicRange20 * SOAP_FMAC2 soap_instantiate_ns2__WideDynamicRange20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WideDynamicRange20 * soap_new_ns2__WideDynamicRange20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WideDynamicRange20(soap, n, NULL, NULL, NULL); }

inline ns2__WideDynamicRange20 * soap_new_req_ns2__WideDynamicRange20(struct soap *soap, enum ns2__WideDynamicMode Mode) { ns2__WideDynamicRange20 *_p = soap_instantiate_ns2__WideDynamicRange20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRange20::Mode = Mode; } return _p; }

inline ns2__WideDynamicRange20 * soap_new_set_ns2__WideDynamicRange20(struct soap *soap, enum ns2__WideDynamicMode Mode, float *Level, char *__item1) { ns2__WideDynamicRange20 *_p = soap_instantiate_ns2__WideDynamicRange20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRange20::Mode = Mode; _p->ns2__WideDynamicRange20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WideDynamicRange20(struct soap *soap, ns2__WideDynamicRange20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WideDynamicRange20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_ns2__IrCutFilterAutoAdjustmentExtension (489)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, int, const ns2__IrCutFilterAutoAdjustmentExtension *, const char*);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_in_ns2__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, ns2__IrCutFilterAutoAdjustmentExtension *, const char*);

#ifndef soap_write_ns2__IrCutFilterAutoAdjustmentExtension
#define soap_write_ns2__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IrCutFilterAutoAdjustmentExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_get_ns2__IrCutFilterAutoAdjustmentExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentExtension *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterAutoAdjustmentExtension
#define soap_read_ns2__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterAutoAdjustmentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC2 soap_instantiate_ns2__IrCutFilterAutoAdjustmentExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IrCutFilterAutoAdjustmentExtension * soap_new_ns2__IrCutFilterAutoAdjustmentExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IrCutFilterAutoAdjustmentExtension(soap, n, NULL, NULL, NULL); }

inline ns2__IrCutFilterAutoAdjustmentExtension * soap_new_req_ns2__IrCutFilterAutoAdjustmentExtension(struct soap *soap) { ns2__IrCutFilterAutoAdjustmentExtension *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustmentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IrCutFilterAutoAdjustmentExtension * soap_new_set_ns2__IrCutFilterAutoAdjustmentExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__IrCutFilterAutoAdjustmentExtension *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustmentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoAdjustmentExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IrCutFilterAutoAdjustmentExtension(struct soap *soap, ns2__IrCutFilterAutoAdjustmentExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IrCutFilterAutoAdjustmentExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IrCutFilterAutoAdjustment
#define SOAP_TYPE_ns2__IrCutFilterAutoAdjustment (488)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const ns2__IrCutFilterAutoAdjustment *, const char*);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_in_ns2__IrCutFilterAutoAdjustment(struct soap*, const char*, ns2__IrCutFilterAutoAdjustment *, const char*);

#ifndef soap_write_ns2__IrCutFilterAutoAdjustment
#define soap_write_ns2__IrCutFilterAutoAdjustment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IrCutFilterAutoAdjustment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_get_ns2__IrCutFilterAutoAdjustment(struct soap*, ns2__IrCutFilterAutoAdjustment *, const char*, const char*);

#ifndef soap_read_ns2__IrCutFilterAutoAdjustment
#define soap_read_ns2__IrCutFilterAutoAdjustment(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IrCutFilterAutoAdjustment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IrCutFilterAutoAdjustment * SOAP_FMAC2 soap_instantiate_ns2__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IrCutFilterAutoAdjustment * soap_new_ns2__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL); }

inline ns2__IrCutFilterAutoAdjustment * soap_new_req_ns2__IrCutFilterAutoAdjustment(struct soap *soap, const std::string& BoundaryType) { ns2__IrCutFilterAutoAdjustment *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType; } return _p; }

inline ns2__IrCutFilterAutoAdjustment * soap_new_set_ns2__IrCutFilterAutoAdjustment(struct soap *soap, const std::string& BoundaryType, float *BoundaryOffset, std::string *ResponseTime, ns2__IrCutFilterAutoAdjustmentExtension *Extension, char *__anyAttribute, char *__item1) { ns2__IrCutFilterAutoAdjustment *_p = soap_instantiate_ns2__IrCutFilterAutoAdjustment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType; _p->ns2__IrCutFilterAutoAdjustment::BoundaryOffset = BoundaryOffset; _p->ns2__IrCutFilterAutoAdjustment::ResponseTime = ResponseTime; _p->ns2__IrCutFilterAutoAdjustment::Extension = Extension; _p->ns2__IrCutFilterAutoAdjustment::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IrCutFilterAutoAdjustment(struct soap *soap, ns2__IrCutFilterAutoAdjustment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IrCutFilterAutoAdjustment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImageStabilizationExtension
#define SOAP_TYPE_ns2__ImageStabilizationExtension (487)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImageStabilizationExtension(struct soap*, const char*, int, const ns2__ImageStabilizationExtension *, const char*);
SOAP_FMAC3 ns2__ImageStabilizationExtension * SOAP_FMAC4 soap_in_ns2__ImageStabilizationExtension(struct soap*, const char*, ns2__ImageStabilizationExtension *, const char*);

#ifndef soap_write_ns2__ImageStabilizationExtension
#define soap_write_ns2__ImageStabilizationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImageStabilizationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationExtension * SOAP_FMAC4 soap_get_ns2__ImageStabilizationExtension(struct soap*, ns2__ImageStabilizationExtension *, const char*, const char*);

#ifndef soap_read_ns2__ImageStabilizationExtension
#define soap_read_ns2__ImageStabilizationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImageStabilizationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImageStabilizationExtension * SOAP_FMAC2 soap_instantiate_ns2__ImageStabilizationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImageStabilizationExtension * soap_new_ns2__ImageStabilizationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImageStabilizationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ImageStabilizationExtension * soap_new_req_ns2__ImageStabilizationExtension(struct soap *soap) { ns2__ImageStabilizationExtension *_p = soap_instantiate_ns2__ImageStabilizationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImageStabilizationExtension * soap_new_set_ns2__ImageStabilizationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ImageStabilizationExtension *_p = soap_instantiate_ns2__ImageStabilizationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilizationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImageStabilizationExtension(struct soap *soap, ns2__ImageStabilizationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImageStabilizationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImageStabilization
#define SOAP_TYPE_ns2__ImageStabilization (486)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImageStabilization(struct soap*, const char*, int, const ns2__ImageStabilization *, const char*);
SOAP_FMAC3 ns2__ImageStabilization * SOAP_FMAC4 soap_in_ns2__ImageStabilization(struct soap*, const char*, ns2__ImageStabilization *, const char*);

#ifndef soap_write_ns2__ImageStabilization
#define soap_write_ns2__ImageStabilization(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImageStabilization", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilization * SOAP_FMAC4 soap_get_ns2__ImageStabilization(struct soap*, ns2__ImageStabilization *, const char*, const char*);

#ifndef soap_read_ns2__ImageStabilization
#define soap_read_ns2__ImageStabilization(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImageStabilization(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImageStabilization * SOAP_FMAC2 soap_instantiate_ns2__ImageStabilization(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImageStabilization * soap_new_ns2__ImageStabilization(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImageStabilization(soap, n, NULL, NULL, NULL); }

inline ns2__ImageStabilization * soap_new_req_ns2__ImageStabilization(struct soap *soap, enum ns2__ImageStabilizationMode Mode) { ns2__ImageStabilization *_p = soap_instantiate_ns2__ImageStabilization(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilization::Mode = Mode; } return _p; }

inline ns2__ImageStabilization * soap_new_set_ns2__ImageStabilization(struct soap *soap, enum ns2__ImageStabilizationMode Mode, float *Level, ns2__ImageStabilizationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ImageStabilization *_p = soap_instantiate_ns2__ImageStabilization(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImageStabilization::Mode = Mode; _p->ns2__ImageStabilization::Level = Level; _p->ns2__ImageStabilization::Extension = Extension; _p->ns2__ImageStabilization::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImageStabilization(struct soap *soap, ns2__ImageStabilization *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImageStabilization(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettingsExtension204
#define SOAP_TYPE_ns2__ImagingSettingsExtension204 (485)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettingsExtension204(struct soap*, const char*, int, const ns2__ImagingSettingsExtension204 *, const char*);
SOAP_FMAC3 ns2__ImagingSettingsExtension204 * SOAP_FMAC4 soap_in_ns2__ImagingSettingsExtension204(struct soap*, const char*, ns2__ImagingSettingsExtension204 *, const char*);

#ifndef soap_write_ns2__ImagingSettingsExtension204
#define soap_write_ns2__ImagingSettingsExtension204(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettingsExtension204", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension204 * SOAP_FMAC4 soap_get_ns2__ImagingSettingsExtension204(struct soap*, ns2__ImagingSettingsExtension204 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettingsExtension204
#define soap_read_ns2__ImagingSettingsExtension204(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettingsExtension204(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettingsExtension204 * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettingsExtension204(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettingsExtension204 * soap_new_ns2__ImagingSettingsExtension204(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettingsExtension204(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettingsExtension204 * soap_new_req_ns2__ImagingSettingsExtension204(struct soap *soap) { ns2__ImagingSettingsExtension204 *_p = soap_instantiate_ns2__ImagingSettingsExtension204(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettingsExtension204 * soap_new_set_ns2__ImagingSettingsExtension204(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ImagingSettingsExtension204 *_p = soap_instantiate_ns2__ImagingSettingsExtension204(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettingsExtension204::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettingsExtension204(struct soap *soap, ns2__ImagingSettingsExtension204 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettingsExtension204(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettingsExtension203
#define SOAP_TYPE_ns2__ImagingSettingsExtension203 (484)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettingsExtension203(struct soap*, const char*, int, const ns2__ImagingSettingsExtension203 *, const char*);
SOAP_FMAC3 ns2__ImagingSettingsExtension203 * SOAP_FMAC4 soap_in_ns2__ImagingSettingsExtension203(struct soap*, const char*, ns2__ImagingSettingsExtension203 *, const char*);

#ifndef soap_write_ns2__ImagingSettingsExtension203
#define soap_write_ns2__ImagingSettingsExtension203(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettingsExtension203", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension203 * SOAP_FMAC4 soap_get_ns2__ImagingSettingsExtension203(struct soap*, ns2__ImagingSettingsExtension203 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettingsExtension203
#define soap_read_ns2__ImagingSettingsExtension203(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettingsExtension203(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettingsExtension203 * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettingsExtension203(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettingsExtension203 * soap_new_ns2__ImagingSettingsExtension203(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettingsExtension203(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettingsExtension203 * soap_new_req_ns2__ImagingSettingsExtension203(struct soap *soap) { ns2__ImagingSettingsExtension203 *_p = soap_instantiate_ns2__ImagingSettingsExtension203(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettingsExtension203 * soap_new_set_ns2__ImagingSettingsExtension203(struct soap *soap, ns2__ToneCompensation *ToneCompensation, ns2__Defogging *Defogging, ns2__NoiseReduction *NoiseReduction, ns2__ImagingSettingsExtension204 *Extension, char *__item1) { ns2__ImagingSettingsExtension203 *_p = soap_instantiate_ns2__ImagingSettingsExtension203(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettingsExtension203::ToneCompensation = ToneCompensation; _p->ns2__ImagingSettingsExtension203::Defogging = Defogging; _p->ns2__ImagingSettingsExtension203::NoiseReduction = NoiseReduction; _p->ns2__ImagingSettingsExtension203::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettingsExtension203(struct soap *soap, ns2__ImagingSettingsExtension203 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettingsExtension203(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettingsExtension202
#define SOAP_TYPE_ns2__ImagingSettingsExtension202 (483)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettingsExtension202(struct soap*, const char*, int, const ns2__ImagingSettingsExtension202 *, const char*);
SOAP_FMAC3 ns2__ImagingSettingsExtension202 * SOAP_FMAC4 soap_in_ns2__ImagingSettingsExtension202(struct soap*, const char*, ns2__ImagingSettingsExtension202 *, const char*);

#ifndef soap_write_ns2__ImagingSettingsExtension202
#define soap_write_ns2__ImagingSettingsExtension202(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettingsExtension202", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension202 * SOAP_FMAC4 soap_get_ns2__ImagingSettingsExtension202(struct soap*, ns2__ImagingSettingsExtension202 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettingsExtension202
#define soap_read_ns2__ImagingSettingsExtension202(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettingsExtension202(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettingsExtension202 * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettingsExtension202(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettingsExtension202 * soap_new_ns2__ImagingSettingsExtension202(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettingsExtension202(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettingsExtension202 * soap_new_req_ns2__ImagingSettingsExtension202(struct soap *soap) { ns2__ImagingSettingsExtension202 *_p = soap_instantiate_ns2__ImagingSettingsExtension202(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettingsExtension202 * soap_new_set_ns2__ImagingSettingsExtension202(struct soap *soap, const std::vector<ns2__IrCutFilterAutoAdjustment * >& IrCutFilterAutoAdjustment, ns2__ImagingSettingsExtension203 *Extension, char *__item1) { ns2__ImagingSettingsExtension202 *_p = soap_instantiate_ns2__ImagingSettingsExtension202(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettingsExtension202::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment; _p->ns2__ImagingSettingsExtension202::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettingsExtension202(struct soap *soap, ns2__ImagingSettingsExtension202 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettingsExtension202(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettingsExtension20
#define SOAP_TYPE_ns2__ImagingSettingsExtension20 (482)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettingsExtension20(struct soap*, const char*, int, const ns2__ImagingSettingsExtension20 *, const char*);
SOAP_FMAC3 ns2__ImagingSettingsExtension20 * SOAP_FMAC4 soap_in_ns2__ImagingSettingsExtension20(struct soap*, const char*, ns2__ImagingSettingsExtension20 *, const char*);

#ifndef soap_write_ns2__ImagingSettingsExtension20
#define soap_write_ns2__ImagingSettingsExtension20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettingsExtension20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension20 * SOAP_FMAC4 soap_get_ns2__ImagingSettingsExtension20(struct soap*, ns2__ImagingSettingsExtension20 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettingsExtension20
#define soap_read_ns2__ImagingSettingsExtension20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettingsExtension20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettingsExtension20 * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettingsExtension20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettingsExtension20 * soap_new_ns2__ImagingSettingsExtension20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettingsExtension20(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettingsExtension20 * soap_new_req_ns2__ImagingSettingsExtension20(struct soap *soap) { ns2__ImagingSettingsExtension20 *_p = soap_instantiate_ns2__ImagingSettingsExtension20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettingsExtension20 * soap_new_set_ns2__ImagingSettingsExtension20(struct soap *soap, const std::vector<char * >& __any, ns2__ImageStabilization *ImageStabilization, ns2__ImagingSettingsExtension202 *Extension, char *__item1) { ns2__ImagingSettingsExtension20 *_p = soap_instantiate_ns2__ImagingSettingsExtension20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettingsExtension20::__any = __any; _p->ns2__ImagingSettingsExtension20::ImageStabilization = ImageStabilization; _p->ns2__ImagingSettingsExtension20::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettingsExtension20(struct soap *soap, ns2__ImagingSettingsExtension20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettingsExtension20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettings20
#define SOAP_TYPE_ns2__ImagingSettings20 (481)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettings20(struct soap*, const char*, int, const ns2__ImagingSettings20 *, const char*);
SOAP_FMAC3 ns2__ImagingSettings20 * SOAP_FMAC4 soap_in_ns2__ImagingSettings20(struct soap*, const char*, ns2__ImagingSettings20 *, const char*);

#ifndef soap_write_ns2__ImagingSettings20
#define soap_write_ns2__ImagingSettings20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettings20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettings20 * SOAP_FMAC4 soap_get_ns2__ImagingSettings20(struct soap*, ns2__ImagingSettings20 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettings20
#define soap_read_ns2__ImagingSettings20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettings20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettings20 * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettings20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettings20 * soap_new_ns2__ImagingSettings20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettings20(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettings20 * soap_new_req_ns2__ImagingSettings20(struct soap *soap) { ns2__ImagingSettings20 *_p = soap_instantiate_ns2__ImagingSettings20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettings20 * soap_new_set_ns2__ImagingSettings20(struct soap *soap, ns2__BacklightCompensation20 *BacklightCompensation, float *Brightness, float *ColorSaturation, float *Contrast, ns2__Exposure20 *Exposure, ns2__FocusConfiguration20 *Focus, enum ns2__IrCutFilterMode *IrCutFilter, float *Sharpness, ns2__WideDynamicRange20 *WideDynamicRange, ns2__WhiteBalance20 *WhiteBalance, ns2__ImagingSettingsExtension20 *Extension, char *__anyAttribute, char *__item1) { ns2__ImagingSettings20 *_p = soap_instantiate_ns2__ImagingSettings20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettings20::BacklightCompensation = BacklightCompensation; _p->ns2__ImagingSettings20::Brightness = Brightness; _p->ns2__ImagingSettings20::ColorSaturation = ColorSaturation; _p->ns2__ImagingSettings20::Contrast = Contrast; _p->ns2__ImagingSettings20::Exposure = Exposure; _p->ns2__ImagingSettings20::Focus = Focus; _p->ns2__ImagingSettings20::IrCutFilter = IrCutFilter; _p->ns2__ImagingSettings20::Sharpness = Sharpness; _p->ns2__ImagingSettings20::WideDynamicRange = WideDynamicRange; _p->ns2__ImagingSettings20::WhiteBalance = WhiteBalance; _p->ns2__ImagingSettings20::Extension = Extension; _p->ns2__ImagingSettings20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettings20(struct soap *soap, ns2__ImagingSettings20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettings20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusStatus20Extension
#define SOAP_TYPE_ns2__FocusStatus20Extension (480)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusStatus20Extension(struct soap*, const char*, int, const ns2__FocusStatus20Extension *, const char*);
SOAP_FMAC3 ns2__FocusStatus20Extension * SOAP_FMAC4 soap_in_ns2__FocusStatus20Extension(struct soap*, const char*, ns2__FocusStatus20Extension *, const char*);

#ifndef soap_write_ns2__FocusStatus20Extension
#define soap_write_ns2__FocusStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusStatus20Extension * SOAP_FMAC4 soap_get_ns2__FocusStatus20Extension(struct soap*, ns2__FocusStatus20Extension *, const char*, const char*);

#ifndef soap_read_ns2__FocusStatus20Extension
#define soap_read_ns2__FocusStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusStatus20Extension * SOAP_FMAC2 soap_instantiate_ns2__FocusStatus20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusStatus20Extension * soap_new_ns2__FocusStatus20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusStatus20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__FocusStatus20Extension * soap_new_req_ns2__FocusStatus20Extension(struct soap *soap) { ns2__FocusStatus20Extension *_p = soap_instantiate_ns2__FocusStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FocusStatus20Extension * soap_new_set_ns2__FocusStatus20Extension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__FocusStatus20Extension *_p = soap_instantiate_ns2__FocusStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusStatus20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusStatus20Extension(struct soap *soap, ns2__FocusStatus20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusStatus20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusStatus20
#define SOAP_TYPE_ns2__FocusStatus20 (479)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusStatus20(struct soap*, const char*, int, const ns2__FocusStatus20 *, const char*);
SOAP_FMAC3 ns2__FocusStatus20 * SOAP_FMAC4 soap_in_ns2__FocusStatus20(struct soap*, const char*, ns2__FocusStatus20 *, const char*);

#ifndef soap_write_ns2__FocusStatus20
#define soap_write_ns2__FocusStatus20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusStatus20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusStatus20 * SOAP_FMAC4 soap_get_ns2__FocusStatus20(struct soap*, ns2__FocusStatus20 *, const char*, const char*);

#ifndef soap_read_ns2__FocusStatus20
#define soap_read_ns2__FocusStatus20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusStatus20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusStatus20 * SOAP_FMAC2 soap_instantiate_ns2__FocusStatus20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusStatus20 * soap_new_ns2__FocusStatus20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusStatus20(soap, n, NULL, NULL, NULL); }

inline ns2__FocusStatus20 * soap_new_req_ns2__FocusStatus20(struct soap *soap, float Position, enum ns2__MoveStatus MoveStatus) { ns2__FocusStatus20 *_p = soap_instantiate_ns2__FocusStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusStatus20::Position = Position; _p->ns2__FocusStatus20::MoveStatus = MoveStatus; } return _p; }

inline ns2__FocusStatus20 * soap_new_set_ns2__FocusStatus20(struct soap *soap, float Position, enum ns2__MoveStatus MoveStatus, std::string *Error, ns2__FocusStatus20Extension *Extension, char *__anyAttribute, char *__item1) { ns2__FocusStatus20 *_p = soap_instantiate_ns2__FocusStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusStatus20::Position = Position; _p->ns2__FocusStatus20::MoveStatus = MoveStatus; _p->ns2__FocusStatus20::Error = Error; _p->ns2__FocusStatus20::Extension = Extension; _p->ns2__FocusStatus20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusStatus20(struct soap *soap, ns2__FocusStatus20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusStatus20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingStatus20Extension
#define SOAP_TYPE_ns2__ImagingStatus20Extension (478)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingStatus20Extension(struct soap*, const char*, int, const ns2__ImagingStatus20Extension *, const char*);
SOAP_FMAC3 ns2__ImagingStatus20Extension * SOAP_FMAC4 soap_in_ns2__ImagingStatus20Extension(struct soap*, const char*, ns2__ImagingStatus20Extension *, const char*);

#ifndef soap_write_ns2__ImagingStatus20Extension
#define soap_write_ns2__ImagingStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingStatus20Extension * SOAP_FMAC4 soap_get_ns2__ImagingStatus20Extension(struct soap*, ns2__ImagingStatus20Extension *, const char*, const char*);

#ifndef soap_read_ns2__ImagingStatus20Extension
#define soap_read_ns2__ImagingStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingStatus20Extension * SOAP_FMAC2 soap_instantiate_ns2__ImagingStatus20Extension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingStatus20Extension * soap_new_ns2__ImagingStatus20Extension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingStatus20Extension(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingStatus20Extension * soap_new_req_ns2__ImagingStatus20Extension(struct soap *soap) { ns2__ImagingStatus20Extension *_p = soap_instantiate_ns2__ImagingStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingStatus20Extension * soap_new_set_ns2__ImagingStatus20Extension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ImagingStatus20Extension *_p = soap_instantiate_ns2__ImagingStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingStatus20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingStatus20Extension(struct soap *soap, ns2__ImagingStatus20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingStatus20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingStatus20
#define SOAP_TYPE_ns2__ImagingStatus20 (477)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingStatus20(struct soap*, const char*, int, const ns2__ImagingStatus20 *, const char*);
SOAP_FMAC3 ns2__ImagingStatus20 * SOAP_FMAC4 soap_in_ns2__ImagingStatus20(struct soap*, const char*, ns2__ImagingStatus20 *, const char*);

#ifndef soap_write_ns2__ImagingStatus20
#define soap_write_ns2__ImagingStatus20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingStatus20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingStatus20 * SOAP_FMAC4 soap_get_ns2__ImagingStatus20(struct soap*, ns2__ImagingStatus20 *, const char*, const char*);

#ifndef soap_read_ns2__ImagingStatus20
#define soap_read_ns2__ImagingStatus20(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingStatus20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingStatus20 * SOAP_FMAC2 soap_instantiate_ns2__ImagingStatus20(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingStatus20 * soap_new_ns2__ImagingStatus20(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingStatus20(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingStatus20 * soap_new_req_ns2__ImagingStatus20(struct soap *soap) { ns2__ImagingStatus20 *_p = soap_instantiate_ns2__ImagingStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingStatus20 * soap_new_set_ns2__ImagingStatus20(struct soap *soap, ns2__FocusStatus20 *FocusStatus20, ns2__ImagingStatus20Extension *Extension, char *__anyAttribute, char *__item1) { ns2__ImagingStatus20 *_p = soap_instantiate_ns2__ImagingStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingStatus20::FocusStatus20 = FocusStatus20; _p->ns2__ImagingStatus20::Extension = Extension; _p->ns2__ImagingStatus20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingStatus20(struct soap *soap, ns2__ImagingStatus20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingStatus20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalance
#define SOAP_TYPE_ns2__WhiteBalance (476)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalance(struct soap*, const char*, int, const ns2__WhiteBalance *, const char*);
SOAP_FMAC3 ns2__WhiteBalance * SOAP_FMAC4 soap_in_ns2__WhiteBalance(struct soap*, const char*, ns2__WhiteBalance *, const char*);

#ifndef soap_write_ns2__WhiteBalance
#define soap_write_ns2__WhiteBalance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalance * SOAP_FMAC4 soap_get_ns2__WhiteBalance(struct soap*, ns2__WhiteBalance *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalance
#define soap_read_ns2__WhiteBalance(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalance * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalance(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalance * soap_new_ns2__WhiteBalance(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalance(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalance * soap_new_req_ns2__WhiteBalance(struct soap *soap, enum ns2__WhiteBalanceMode Mode, float CrGain, float CbGain) { ns2__WhiteBalance *_p = soap_instantiate_ns2__WhiteBalance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalance::Mode = Mode; _p->ns2__WhiteBalance::CrGain = CrGain; _p->ns2__WhiteBalance::CbGain = CbGain; } return _p; }

inline ns2__WhiteBalance * soap_new_set_ns2__WhiteBalance(struct soap *soap, enum ns2__WhiteBalanceMode Mode, float CrGain, float CbGain, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__WhiteBalance *_p = soap_instantiate_ns2__WhiteBalance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalance::Mode = Mode; _p->ns2__WhiteBalance::CrGain = CrGain; _p->ns2__WhiteBalance::CbGain = CbGain; _p->ns2__WhiteBalance::__any = __any; _p->ns2__WhiteBalance::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalance(struct soap *soap, ns2__WhiteBalance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ContinuousFocusOptions
#define SOAP_TYPE_ns2__ContinuousFocusOptions (475)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ContinuousFocusOptions(struct soap*, const char*, int, const ns2__ContinuousFocusOptions *, const char*);
SOAP_FMAC3 ns2__ContinuousFocusOptions * SOAP_FMAC4 soap_in_ns2__ContinuousFocusOptions(struct soap*, const char*, ns2__ContinuousFocusOptions *, const char*);

#ifndef soap_write_ns2__ContinuousFocusOptions
#define soap_write_ns2__ContinuousFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ContinuousFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ContinuousFocusOptions * SOAP_FMAC4 soap_get_ns2__ContinuousFocusOptions(struct soap*, ns2__ContinuousFocusOptions *, const char*, const char*);

#ifndef soap_read_ns2__ContinuousFocusOptions
#define soap_read_ns2__ContinuousFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ContinuousFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ContinuousFocusOptions * SOAP_FMAC2 soap_instantiate_ns2__ContinuousFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ContinuousFocusOptions * soap_new_ns2__ContinuousFocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ContinuousFocusOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ContinuousFocusOptions * soap_new_req_ns2__ContinuousFocusOptions(struct soap *soap, ns2__FloatRange *Speed) { ns2__ContinuousFocusOptions *_p = soap_instantiate_ns2__ContinuousFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ContinuousFocusOptions::Speed = Speed; } return _p; }

inline ns2__ContinuousFocusOptions * soap_new_set_ns2__ContinuousFocusOptions(struct soap *soap, ns2__FloatRange *Speed, char *__item1) { ns2__ContinuousFocusOptions *_p = soap_instantiate_ns2__ContinuousFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ContinuousFocusOptions::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ContinuousFocusOptions(struct soap *soap, ns2__ContinuousFocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ContinuousFocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelativeFocusOptions
#define SOAP_TYPE_ns2__RelativeFocusOptions (474)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelativeFocusOptions(struct soap*, const char*, int, const ns2__RelativeFocusOptions *, const char*);
SOAP_FMAC3 ns2__RelativeFocusOptions * SOAP_FMAC4 soap_in_ns2__RelativeFocusOptions(struct soap*, const char*, ns2__RelativeFocusOptions *, const char*);

#ifndef soap_write_ns2__RelativeFocusOptions
#define soap_write_ns2__RelativeFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelativeFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelativeFocusOptions * SOAP_FMAC4 soap_get_ns2__RelativeFocusOptions(struct soap*, ns2__RelativeFocusOptions *, const char*, const char*);

#ifndef soap_read_ns2__RelativeFocusOptions
#define soap_read_ns2__RelativeFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelativeFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelativeFocusOptions * SOAP_FMAC2 soap_instantiate_ns2__RelativeFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelativeFocusOptions * soap_new_ns2__RelativeFocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelativeFocusOptions(soap, n, NULL, NULL, NULL); }

inline ns2__RelativeFocusOptions * soap_new_req_ns2__RelativeFocusOptions(struct soap *soap, ns2__FloatRange *Distance, ns2__FloatRange *Speed) { ns2__RelativeFocusOptions *_p = soap_instantiate_ns2__RelativeFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelativeFocusOptions::Distance = Distance; _p->ns2__RelativeFocusOptions::Speed = Speed; } return _p; }

inline ns2__RelativeFocusOptions * soap_new_set_ns2__RelativeFocusOptions(struct soap *soap, ns2__FloatRange *Distance, ns2__FloatRange *Speed, char *__item1) { ns2__RelativeFocusOptions *_p = soap_instantiate_ns2__RelativeFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelativeFocusOptions::Distance = Distance; _p->ns2__RelativeFocusOptions::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelativeFocusOptions(struct soap *soap, ns2__RelativeFocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelativeFocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AbsoluteFocusOptions
#define SOAP_TYPE_ns2__AbsoluteFocusOptions (473)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AbsoluteFocusOptions(struct soap*, const char*, int, const ns2__AbsoluteFocusOptions *, const char*);
SOAP_FMAC3 ns2__AbsoluteFocusOptions * SOAP_FMAC4 soap_in_ns2__AbsoluteFocusOptions(struct soap*, const char*, ns2__AbsoluteFocusOptions *, const char*);

#ifndef soap_write_ns2__AbsoluteFocusOptions
#define soap_write_ns2__AbsoluteFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AbsoluteFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AbsoluteFocusOptions * SOAP_FMAC4 soap_get_ns2__AbsoluteFocusOptions(struct soap*, ns2__AbsoluteFocusOptions *, const char*, const char*);

#ifndef soap_read_ns2__AbsoluteFocusOptions
#define soap_read_ns2__AbsoluteFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AbsoluteFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AbsoluteFocusOptions * SOAP_FMAC2 soap_instantiate_ns2__AbsoluteFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AbsoluteFocusOptions * soap_new_ns2__AbsoluteFocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AbsoluteFocusOptions(soap, n, NULL, NULL, NULL); }

inline ns2__AbsoluteFocusOptions * soap_new_req_ns2__AbsoluteFocusOptions(struct soap *soap, ns2__FloatRange *Position) { ns2__AbsoluteFocusOptions *_p = soap_instantiate_ns2__AbsoluteFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AbsoluteFocusOptions::Position = Position; } return _p; }

inline ns2__AbsoluteFocusOptions * soap_new_set_ns2__AbsoluteFocusOptions(struct soap *soap, ns2__FloatRange *Position, ns2__FloatRange *Speed, char *__item1) { ns2__AbsoluteFocusOptions *_p = soap_instantiate_ns2__AbsoluteFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AbsoluteFocusOptions::Position = Position; _p->ns2__AbsoluteFocusOptions::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AbsoluteFocusOptions(struct soap *soap, ns2__AbsoluteFocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AbsoluteFocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MoveOptions
#define SOAP_TYPE_ns2__MoveOptions (472)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MoveOptions(struct soap*, const char*, int, const ns2__MoveOptions *, const char*);
SOAP_FMAC3 ns2__MoveOptions * SOAP_FMAC4 soap_in_ns2__MoveOptions(struct soap*, const char*, ns2__MoveOptions *, const char*);

#ifndef soap_write_ns2__MoveOptions
#define soap_write_ns2__MoveOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MoveOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MoveOptions * SOAP_FMAC4 soap_get_ns2__MoveOptions(struct soap*, ns2__MoveOptions *, const char*, const char*);

#ifndef soap_read_ns2__MoveOptions
#define soap_read_ns2__MoveOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MoveOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MoveOptions * SOAP_FMAC2 soap_instantiate_ns2__MoveOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MoveOptions * soap_new_ns2__MoveOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MoveOptions(soap, n, NULL, NULL, NULL); }

inline ns2__MoveOptions * soap_new_req_ns2__MoveOptions(struct soap *soap) { ns2__MoveOptions *_p = soap_instantiate_ns2__MoveOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MoveOptions * soap_new_set_ns2__MoveOptions(struct soap *soap, ns2__AbsoluteFocusOptions *Absolute, ns2__RelativeFocusOptions *Relative, ns2__ContinuousFocusOptions *Continuous, char *__item1) { ns2__MoveOptions *_p = soap_instantiate_ns2__MoveOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MoveOptions::Absolute = Absolute; _p->ns2__MoveOptions::Relative = Relative; _p->ns2__MoveOptions::Continuous = Continuous; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MoveOptions(struct soap *soap, ns2__MoveOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MoveOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ContinuousFocus
#define SOAP_TYPE_ns2__ContinuousFocus (471)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ContinuousFocus(struct soap*, const char*, int, const ns2__ContinuousFocus *, const char*);
SOAP_FMAC3 ns2__ContinuousFocus * SOAP_FMAC4 soap_in_ns2__ContinuousFocus(struct soap*, const char*, ns2__ContinuousFocus *, const char*);

#ifndef soap_write_ns2__ContinuousFocus
#define soap_write_ns2__ContinuousFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ContinuousFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ContinuousFocus * SOAP_FMAC4 soap_get_ns2__ContinuousFocus(struct soap*, ns2__ContinuousFocus *, const char*, const char*);

#ifndef soap_read_ns2__ContinuousFocus
#define soap_read_ns2__ContinuousFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ContinuousFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ContinuousFocus * SOAP_FMAC2 soap_instantiate_ns2__ContinuousFocus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ContinuousFocus * soap_new_ns2__ContinuousFocus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ContinuousFocus(soap, n, NULL, NULL, NULL); }

inline ns2__ContinuousFocus * soap_new_req_ns2__ContinuousFocus(struct soap *soap, float Speed) { ns2__ContinuousFocus *_p = soap_instantiate_ns2__ContinuousFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ContinuousFocus::Speed = Speed; } return _p; }

inline ns2__ContinuousFocus * soap_new_set_ns2__ContinuousFocus(struct soap *soap, float Speed, char *__item1) { ns2__ContinuousFocus *_p = soap_instantiate_ns2__ContinuousFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ContinuousFocus::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ContinuousFocus(struct soap *soap, ns2__ContinuousFocus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ContinuousFocus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelativeFocus
#define SOAP_TYPE_ns2__RelativeFocus (470)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelativeFocus(struct soap*, const char*, int, const ns2__RelativeFocus *, const char*);
SOAP_FMAC3 ns2__RelativeFocus * SOAP_FMAC4 soap_in_ns2__RelativeFocus(struct soap*, const char*, ns2__RelativeFocus *, const char*);

#ifndef soap_write_ns2__RelativeFocus
#define soap_write_ns2__RelativeFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelativeFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelativeFocus * SOAP_FMAC4 soap_get_ns2__RelativeFocus(struct soap*, ns2__RelativeFocus *, const char*, const char*);

#ifndef soap_read_ns2__RelativeFocus
#define soap_read_ns2__RelativeFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelativeFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelativeFocus * SOAP_FMAC2 soap_instantiate_ns2__RelativeFocus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelativeFocus * soap_new_ns2__RelativeFocus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelativeFocus(soap, n, NULL, NULL, NULL); }

inline ns2__RelativeFocus * soap_new_req_ns2__RelativeFocus(struct soap *soap, float Distance) { ns2__RelativeFocus *_p = soap_instantiate_ns2__RelativeFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelativeFocus::Distance = Distance; } return _p; }

inline ns2__RelativeFocus * soap_new_set_ns2__RelativeFocus(struct soap *soap, float Distance, float *Speed, char *__item1) { ns2__RelativeFocus *_p = soap_instantiate_ns2__RelativeFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelativeFocus::Distance = Distance; _p->ns2__RelativeFocus::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelativeFocus(struct soap *soap, ns2__RelativeFocus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelativeFocus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AbsoluteFocus
#define SOAP_TYPE_ns2__AbsoluteFocus (469)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AbsoluteFocus(struct soap*, const char*, int, const ns2__AbsoluteFocus *, const char*);
SOAP_FMAC3 ns2__AbsoluteFocus * SOAP_FMAC4 soap_in_ns2__AbsoluteFocus(struct soap*, const char*, ns2__AbsoluteFocus *, const char*);

#ifndef soap_write_ns2__AbsoluteFocus
#define soap_write_ns2__AbsoluteFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AbsoluteFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AbsoluteFocus * SOAP_FMAC4 soap_get_ns2__AbsoluteFocus(struct soap*, ns2__AbsoluteFocus *, const char*, const char*);

#ifndef soap_read_ns2__AbsoluteFocus
#define soap_read_ns2__AbsoluteFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AbsoluteFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AbsoluteFocus * SOAP_FMAC2 soap_instantiate_ns2__AbsoluteFocus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AbsoluteFocus * soap_new_ns2__AbsoluteFocus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AbsoluteFocus(soap, n, NULL, NULL, NULL); }

inline ns2__AbsoluteFocus * soap_new_req_ns2__AbsoluteFocus(struct soap *soap, float Position) { ns2__AbsoluteFocus *_p = soap_instantiate_ns2__AbsoluteFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AbsoluteFocus::Position = Position; } return _p; }

inline ns2__AbsoluteFocus * soap_new_set_ns2__AbsoluteFocus(struct soap *soap, float Position, float *Speed, char *__item1) { ns2__AbsoluteFocus *_p = soap_instantiate_ns2__AbsoluteFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AbsoluteFocus::Position = Position; _p->ns2__AbsoluteFocus::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AbsoluteFocus(struct soap *soap, ns2__AbsoluteFocus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AbsoluteFocus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusMove
#define SOAP_TYPE_ns2__FocusMove (468)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusMove(struct soap*, const char*, int, const ns2__FocusMove *, const char*);
SOAP_FMAC3 ns2__FocusMove * SOAP_FMAC4 soap_in_ns2__FocusMove(struct soap*, const char*, ns2__FocusMove *, const char*);

#ifndef soap_write_ns2__FocusMove
#define soap_write_ns2__FocusMove(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusMove", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusMove * SOAP_FMAC4 soap_get_ns2__FocusMove(struct soap*, ns2__FocusMove *, const char*, const char*);

#ifndef soap_read_ns2__FocusMove
#define soap_read_ns2__FocusMove(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusMove(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusMove * SOAP_FMAC2 soap_instantiate_ns2__FocusMove(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusMove * soap_new_ns2__FocusMove(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusMove(soap, n, NULL, NULL, NULL); }

inline ns2__FocusMove * soap_new_req_ns2__FocusMove(struct soap *soap) { ns2__FocusMove *_p = soap_instantiate_ns2__FocusMove(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FocusMove * soap_new_set_ns2__FocusMove(struct soap *soap, ns2__AbsoluteFocus *Absolute, ns2__RelativeFocus *Relative, ns2__ContinuousFocus *Continuous, char *__item1) { ns2__FocusMove *_p = soap_instantiate_ns2__FocusMove(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusMove::Absolute = Absolute; _p->ns2__FocusMove::Relative = Relative; _p->ns2__FocusMove::Continuous = Continuous; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusMove(struct soap *soap, ns2__FocusMove *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusMove(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WhiteBalanceOptions
#define SOAP_TYPE_ns2__WhiteBalanceOptions (467)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WhiteBalanceOptions(struct soap*, const char*, int, const ns2__WhiteBalanceOptions *, const char*);
SOAP_FMAC3 ns2__WhiteBalanceOptions * SOAP_FMAC4 soap_in_ns2__WhiteBalanceOptions(struct soap*, const char*, ns2__WhiteBalanceOptions *, const char*);

#ifndef soap_write_ns2__WhiteBalanceOptions
#define soap_write_ns2__WhiteBalanceOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WhiteBalanceOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceOptions * SOAP_FMAC4 soap_get_ns2__WhiteBalanceOptions(struct soap*, ns2__WhiteBalanceOptions *, const char*, const char*);

#ifndef soap_read_ns2__WhiteBalanceOptions
#define soap_read_ns2__WhiteBalanceOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WhiteBalanceOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WhiteBalanceOptions * SOAP_FMAC2 soap_instantiate_ns2__WhiteBalanceOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WhiteBalanceOptions * soap_new_ns2__WhiteBalanceOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WhiteBalanceOptions(soap, n, NULL, NULL, NULL); }

inline ns2__WhiteBalanceOptions * soap_new_req_ns2__WhiteBalanceOptions(struct soap *soap, const std::vector<enum ns2__WhiteBalanceMode >& Mode, ns2__FloatRange *YrGain, ns2__FloatRange *YbGain) { ns2__WhiteBalanceOptions *_p = soap_instantiate_ns2__WhiteBalanceOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceOptions::Mode = Mode; _p->ns2__WhiteBalanceOptions::YrGain = YrGain; _p->ns2__WhiteBalanceOptions::YbGain = YbGain; } return _p; }

inline ns2__WhiteBalanceOptions * soap_new_set_ns2__WhiteBalanceOptions(struct soap *soap, const std::vector<enum ns2__WhiteBalanceMode >& Mode, ns2__FloatRange *YrGain, ns2__FloatRange *YbGain, char *__item1) { ns2__WhiteBalanceOptions *_p = soap_instantiate_ns2__WhiteBalanceOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WhiteBalanceOptions::Mode = Mode; _p->ns2__WhiteBalanceOptions::YrGain = YrGain; _p->ns2__WhiteBalanceOptions::YbGain = YbGain; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WhiteBalanceOptions(struct soap *soap, ns2__WhiteBalanceOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WhiteBalanceOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ExposureOptions
#define SOAP_TYPE_ns2__ExposureOptions (466)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExposureOptions(struct soap*, const char*, int, const ns2__ExposureOptions *, const char*);
SOAP_FMAC3 ns2__ExposureOptions * SOAP_FMAC4 soap_in_ns2__ExposureOptions(struct soap*, const char*, ns2__ExposureOptions *, const char*);

#ifndef soap_write_ns2__ExposureOptions
#define soap_write_ns2__ExposureOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ExposureOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ExposureOptions * SOAP_FMAC4 soap_get_ns2__ExposureOptions(struct soap*, ns2__ExposureOptions *, const char*, const char*);

#ifndef soap_read_ns2__ExposureOptions
#define soap_read_ns2__ExposureOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ExposureOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ExposureOptions * SOAP_FMAC2 soap_instantiate_ns2__ExposureOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExposureOptions * soap_new_ns2__ExposureOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ExposureOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ExposureOptions * soap_new_req_ns2__ExposureOptions(struct soap *soap, const std::vector<enum ns2__ExposureMode >& Mode, const std::vector<enum ns2__ExposurePriority >& Priority, ns2__FloatRange *MinExposureTime, ns2__FloatRange *MaxExposureTime, ns2__FloatRange *MinGain, ns2__FloatRange *MaxGain, ns2__FloatRange *MinIris, ns2__FloatRange *MaxIris, ns2__FloatRange *ExposureTime, ns2__FloatRange *Gain, ns2__FloatRange *Iris) { ns2__ExposureOptions *_p = soap_instantiate_ns2__ExposureOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposureOptions::Mode = Mode; _p->ns2__ExposureOptions::Priority = Priority; _p->ns2__ExposureOptions::MinExposureTime = MinExposureTime; _p->ns2__ExposureOptions::MaxExposureTime = MaxExposureTime; _p->ns2__ExposureOptions::MinGain = MinGain; _p->ns2__ExposureOptions::MaxGain = MaxGain; _p->ns2__ExposureOptions::MinIris = MinIris; _p->ns2__ExposureOptions::MaxIris = MaxIris; _p->ns2__ExposureOptions::ExposureTime = ExposureTime; _p->ns2__ExposureOptions::Gain = Gain; _p->ns2__ExposureOptions::Iris = Iris; } return _p; }

inline ns2__ExposureOptions * soap_new_set_ns2__ExposureOptions(struct soap *soap, const std::vector<enum ns2__ExposureMode >& Mode, const std::vector<enum ns2__ExposurePriority >& Priority, ns2__FloatRange *MinExposureTime, ns2__FloatRange *MaxExposureTime, ns2__FloatRange *MinGain, ns2__FloatRange *MaxGain, ns2__FloatRange *MinIris, ns2__FloatRange *MaxIris, ns2__FloatRange *ExposureTime, ns2__FloatRange *Gain, ns2__FloatRange *Iris, char *__item1) { ns2__ExposureOptions *_p = soap_instantiate_ns2__ExposureOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ExposureOptions::Mode = Mode; _p->ns2__ExposureOptions::Priority = Priority; _p->ns2__ExposureOptions::MinExposureTime = MinExposureTime; _p->ns2__ExposureOptions::MaxExposureTime = MaxExposureTime; _p->ns2__ExposureOptions::MinGain = MinGain; _p->ns2__ExposureOptions::MaxGain = MaxGain; _p->ns2__ExposureOptions::MinIris = MinIris; _p->ns2__ExposureOptions::MaxIris = MaxIris; _p->ns2__ExposureOptions::ExposureTime = ExposureTime; _p->ns2__ExposureOptions::Gain = Gain; _p->ns2__ExposureOptions::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ExposureOptions(struct soap *soap, ns2__ExposureOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ExposureOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusOptions
#define SOAP_TYPE_ns2__FocusOptions (465)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusOptions(struct soap*, const char*, int, const ns2__FocusOptions *, const char*);
SOAP_FMAC3 ns2__FocusOptions * SOAP_FMAC4 soap_in_ns2__FocusOptions(struct soap*, const char*, ns2__FocusOptions *, const char*);

#ifndef soap_write_ns2__FocusOptions
#define soap_write_ns2__FocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusOptions * SOAP_FMAC4 soap_get_ns2__FocusOptions(struct soap*, ns2__FocusOptions *, const char*, const char*);

#ifndef soap_read_ns2__FocusOptions
#define soap_read_ns2__FocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusOptions * SOAP_FMAC2 soap_instantiate_ns2__FocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusOptions * soap_new_ns2__FocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusOptions(soap, n, NULL, NULL, NULL); }

inline ns2__FocusOptions * soap_new_req_ns2__FocusOptions(struct soap *soap, ns2__FloatRange *DefaultSpeed, ns2__FloatRange *NearLimit, ns2__FloatRange *FarLimit) { ns2__FocusOptions *_p = soap_instantiate_ns2__FocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusOptions::DefaultSpeed = DefaultSpeed; _p->ns2__FocusOptions::NearLimit = NearLimit; _p->ns2__FocusOptions::FarLimit = FarLimit; } return _p; }

inline ns2__FocusOptions * soap_new_set_ns2__FocusOptions(struct soap *soap, const std::vector<enum ns2__AutoFocusMode >& AutoFocusModes, ns2__FloatRange *DefaultSpeed, ns2__FloatRange *NearLimit, ns2__FloatRange *FarLimit, char *__item1) { ns2__FocusOptions *_p = soap_instantiate_ns2__FocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusOptions::AutoFocusModes = AutoFocusModes; _p->ns2__FocusOptions::DefaultSpeed = DefaultSpeed; _p->ns2__FocusOptions::NearLimit = NearLimit; _p->ns2__FocusOptions::FarLimit = FarLimit; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusOptions(struct soap *soap, ns2__FocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BacklightCompensationOptions
#define SOAP_TYPE_ns2__BacklightCompensationOptions (464)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BacklightCompensationOptions(struct soap*, const char*, int, const ns2__BacklightCompensationOptions *, const char*);
SOAP_FMAC3 ns2__BacklightCompensationOptions * SOAP_FMAC4 soap_in_ns2__BacklightCompensationOptions(struct soap*, const char*, ns2__BacklightCompensationOptions *, const char*);

#ifndef soap_write_ns2__BacklightCompensationOptions
#define soap_write_ns2__BacklightCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BacklightCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensationOptions * SOAP_FMAC4 soap_get_ns2__BacklightCompensationOptions(struct soap*, ns2__BacklightCompensationOptions *, const char*, const char*);

#ifndef soap_read_ns2__BacklightCompensationOptions
#define soap_read_ns2__BacklightCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BacklightCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BacklightCompensationOptions * SOAP_FMAC2 soap_instantiate_ns2__BacklightCompensationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BacklightCompensationOptions * soap_new_ns2__BacklightCompensationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BacklightCompensationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__BacklightCompensationOptions * soap_new_req_ns2__BacklightCompensationOptions(struct soap *soap, const std::vector<enum ns2__WideDynamicMode >& Mode, ns2__FloatRange *Level) { ns2__BacklightCompensationOptions *_p = soap_instantiate_ns2__BacklightCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensationOptions::Mode = Mode; _p->ns2__BacklightCompensationOptions::Level = Level; } return _p; }

inline ns2__BacklightCompensationOptions * soap_new_set_ns2__BacklightCompensationOptions(struct soap *soap, const std::vector<enum ns2__WideDynamicMode >& Mode, ns2__FloatRange *Level, char *__item1) { ns2__BacklightCompensationOptions *_p = soap_instantiate_ns2__BacklightCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensationOptions::Mode = Mode; _p->ns2__BacklightCompensationOptions::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BacklightCompensationOptions(struct soap *soap, ns2__BacklightCompensationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BacklightCompensationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WideDynamicRangeOptions
#define SOAP_TYPE_ns2__WideDynamicRangeOptions (463)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WideDynamicRangeOptions(struct soap*, const char*, int, const ns2__WideDynamicRangeOptions *, const char*);
SOAP_FMAC3 ns2__WideDynamicRangeOptions * SOAP_FMAC4 soap_in_ns2__WideDynamicRangeOptions(struct soap*, const char*, ns2__WideDynamicRangeOptions *, const char*);

#ifndef soap_write_ns2__WideDynamicRangeOptions
#define soap_write_ns2__WideDynamicRangeOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WideDynamicRangeOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRangeOptions * SOAP_FMAC4 soap_get_ns2__WideDynamicRangeOptions(struct soap*, ns2__WideDynamicRangeOptions *, const char*, const char*);

#ifndef soap_read_ns2__WideDynamicRangeOptions
#define soap_read_ns2__WideDynamicRangeOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WideDynamicRangeOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WideDynamicRangeOptions * SOAP_FMAC2 soap_instantiate_ns2__WideDynamicRangeOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WideDynamicRangeOptions * soap_new_ns2__WideDynamicRangeOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WideDynamicRangeOptions(soap, n, NULL, NULL, NULL); }

inline ns2__WideDynamicRangeOptions * soap_new_req_ns2__WideDynamicRangeOptions(struct soap *soap, const std::vector<enum ns2__WideDynamicMode >& Mode, ns2__FloatRange *Level) { ns2__WideDynamicRangeOptions *_p = soap_instantiate_ns2__WideDynamicRangeOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRangeOptions::Mode = Mode; _p->ns2__WideDynamicRangeOptions::Level = Level; } return _p; }

inline ns2__WideDynamicRangeOptions * soap_new_set_ns2__WideDynamicRangeOptions(struct soap *soap, const std::vector<enum ns2__WideDynamicMode >& Mode, ns2__FloatRange *Level, char *__item1) { ns2__WideDynamicRangeOptions *_p = soap_instantiate_ns2__WideDynamicRangeOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRangeOptions::Mode = Mode; _p->ns2__WideDynamicRangeOptions::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WideDynamicRangeOptions(struct soap *soap, ns2__WideDynamicRangeOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WideDynamicRangeOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingOptions
#define SOAP_TYPE_ns2__ImagingOptions (462)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingOptions(struct soap*, const char*, int, const ns2__ImagingOptions *, const char*);
SOAP_FMAC3 ns2__ImagingOptions * SOAP_FMAC4 soap_in_ns2__ImagingOptions(struct soap*, const char*, ns2__ImagingOptions *, const char*);

#ifndef soap_write_ns2__ImagingOptions
#define soap_write_ns2__ImagingOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions * SOAP_FMAC4 soap_get_ns2__ImagingOptions(struct soap*, ns2__ImagingOptions *, const char*, const char*);

#ifndef soap_read_ns2__ImagingOptions
#define soap_read_ns2__ImagingOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingOptions * SOAP_FMAC2 soap_instantiate_ns2__ImagingOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingOptions * soap_new_ns2__ImagingOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingOptions * soap_new_req_ns2__ImagingOptions(struct soap *soap, ns2__BacklightCompensationOptions *BacklightCompensation, ns2__FloatRange *Brightness, ns2__FloatRange *ColorSaturation, ns2__FloatRange *Contrast, ns2__ExposureOptions *Exposure, ns2__FocusOptions *Focus, const std::vector<enum ns2__IrCutFilterMode >& IrCutFilterModes, ns2__FloatRange *Sharpness, ns2__WideDynamicRangeOptions *WideDynamicRange, ns2__WhiteBalanceOptions *WhiteBalance) { ns2__ImagingOptions *_p = soap_instantiate_ns2__ImagingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions::BacklightCompensation = BacklightCompensation; _p->ns2__ImagingOptions::Brightness = Brightness; _p->ns2__ImagingOptions::ColorSaturation = ColorSaturation; _p->ns2__ImagingOptions::Contrast = Contrast; _p->ns2__ImagingOptions::Exposure = Exposure; _p->ns2__ImagingOptions::Focus = Focus; _p->ns2__ImagingOptions::IrCutFilterModes = IrCutFilterModes; _p->ns2__ImagingOptions::Sharpness = Sharpness; _p->ns2__ImagingOptions::WideDynamicRange = WideDynamicRange; _p->ns2__ImagingOptions::WhiteBalance = WhiteBalance; } return _p; }

inline ns2__ImagingOptions * soap_new_set_ns2__ImagingOptions(struct soap *soap, ns2__BacklightCompensationOptions *BacklightCompensation, ns2__FloatRange *Brightness, ns2__FloatRange *ColorSaturation, ns2__FloatRange *Contrast, ns2__ExposureOptions *Exposure, ns2__FocusOptions *Focus, const std::vector<enum ns2__IrCutFilterMode >& IrCutFilterModes, ns2__FloatRange *Sharpness, ns2__WideDynamicRangeOptions *WideDynamicRange, ns2__WhiteBalanceOptions *WhiteBalance, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ImagingOptions *_p = soap_instantiate_ns2__ImagingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingOptions::BacklightCompensation = BacklightCompensation; _p->ns2__ImagingOptions::Brightness = Brightness; _p->ns2__ImagingOptions::ColorSaturation = ColorSaturation; _p->ns2__ImagingOptions::Contrast = Contrast; _p->ns2__ImagingOptions::Exposure = Exposure; _p->ns2__ImagingOptions::Focus = Focus; _p->ns2__ImagingOptions::IrCutFilterModes = IrCutFilterModes; _p->ns2__ImagingOptions::Sharpness = Sharpness; _p->ns2__ImagingOptions::WideDynamicRange = WideDynamicRange; _p->ns2__ImagingOptions::WhiteBalance = WhiteBalance; _p->ns2__ImagingOptions::__any = __any; _p->ns2__ImagingOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingOptions(struct soap *soap, ns2__ImagingOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BacklightCompensation
#define SOAP_TYPE_ns2__BacklightCompensation (461)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BacklightCompensation(struct soap*, const char*, int, const ns2__BacklightCompensation *, const char*);
SOAP_FMAC3 ns2__BacklightCompensation * SOAP_FMAC4 soap_in_ns2__BacklightCompensation(struct soap*, const char*, ns2__BacklightCompensation *, const char*);

#ifndef soap_write_ns2__BacklightCompensation
#define soap_write_ns2__BacklightCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BacklightCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensation * SOAP_FMAC4 soap_get_ns2__BacklightCompensation(struct soap*, ns2__BacklightCompensation *, const char*, const char*);

#ifndef soap_read_ns2__BacklightCompensation
#define soap_read_ns2__BacklightCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BacklightCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BacklightCompensation * SOAP_FMAC2 soap_instantiate_ns2__BacklightCompensation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BacklightCompensation * soap_new_ns2__BacklightCompensation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BacklightCompensation(soap, n, NULL, NULL, NULL); }

inline ns2__BacklightCompensation * soap_new_req_ns2__BacklightCompensation(struct soap *soap, enum ns2__BacklightCompensationMode Mode, float Level) { ns2__BacklightCompensation *_p = soap_instantiate_ns2__BacklightCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensation::Mode = Mode; _p->ns2__BacklightCompensation::Level = Level; } return _p; }

inline ns2__BacklightCompensation * soap_new_set_ns2__BacklightCompensation(struct soap *soap, enum ns2__BacklightCompensationMode Mode, float Level, char *__item1) { ns2__BacklightCompensation *_p = soap_instantiate_ns2__BacklightCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BacklightCompensation::Mode = Mode; _p->ns2__BacklightCompensation::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BacklightCompensation(struct soap *soap, ns2__BacklightCompensation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BacklightCompensation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__WideDynamicRange
#define SOAP_TYPE_ns2__WideDynamicRange (460)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__WideDynamicRange(struct soap*, const char*, int, const ns2__WideDynamicRange *, const char*);
SOAP_FMAC3 ns2__WideDynamicRange * SOAP_FMAC4 soap_in_ns2__WideDynamicRange(struct soap*, const char*, ns2__WideDynamicRange *, const char*);

#ifndef soap_write_ns2__WideDynamicRange
#define soap_write_ns2__WideDynamicRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:WideDynamicRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRange * SOAP_FMAC4 soap_get_ns2__WideDynamicRange(struct soap*, ns2__WideDynamicRange *, const char*, const char*);

#ifndef soap_read_ns2__WideDynamicRange
#define soap_read_ns2__WideDynamicRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__WideDynamicRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__WideDynamicRange * SOAP_FMAC2 soap_instantiate_ns2__WideDynamicRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__WideDynamicRange * soap_new_ns2__WideDynamicRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__WideDynamicRange(soap, n, NULL, NULL, NULL); }

inline ns2__WideDynamicRange * soap_new_req_ns2__WideDynamicRange(struct soap *soap, enum ns2__WideDynamicMode Mode, float Level) { ns2__WideDynamicRange *_p = soap_instantiate_ns2__WideDynamicRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRange::Mode = Mode; _p->ns2__WideDynamicRange::Level = Level; } return _p; }

inline ns2__WideDynamicRange * soap_new_set_ns2__WideDynamicRange(struct soap *soap, enum ns2__WideDynamicMode Mode, float Level, char *__item1) { ns2__WideDynamicRange *_p = soap_instantiate_ns2__WideDynamicRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__WideDynamicRange::Mode = Mode; _p->ns2__WideDynamicRange::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__WideDynamicRange(struct soap *soap, ns2__WideDynamicRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__WideDynamicRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Exposure
#define SOAP_TYPE_ns2__Exposure (459)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Exposure(struct soap*, const char*, int, const ns2__Exposure *, const char*);
SOAP_FMAC3 ns2__Exposure * SOAP_FMAC4 soap_in_ns2__Exposure(struct soap*, const char*, ns2__Exposure *, const char*);

#ifndef soap_write_ns2__Exposure
#define soap_write_ns2__Exposure(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Exposure", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Exposure * SOAP_FMAC4 soap_get_ns2__Exposure(struct soap*, ns2__Exposure *, const char*, const char*);

#ifndef soap_read_ns2__Exposure
#define soap_read_ns2__Exposure(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Exposure(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Exposure * SOAP_FMAC2 soap_instantiate_ns2__Exposure(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Exposure * soap_new_ns2__Exposure(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Exposure(soap, n, NULL, NULL, NULL); }

inline ns2__Exposure * soap_new_req_ns2__Exposure(struct soap *soap, enum ns2__ExposureMode Mode, enum ns2__ExposurePriority Priority, ns2__Rectangle *Window, float MinExposureTime, float MaxExposureTime, float MinGain, float MaxGain, float MinIris, float MaxIris, float ExposureTime, float Gain, float Iris) { ns2__Exposure *_p = soap_instantiate_ns2__Exposure(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Exposure::Mode = Mode; _p->ns2__Exposure::Priority = Priority; _p->ns2__Exposure::Window = Window; _p->ns2__Exposure::MinExposureTime = MinExposureTime; _p->ns2__Exposure::MaxExposureTime = MaxExposureTime; _p->ns2__Exposure::MinGain = MinGain; _p->ns2__Exposure::MaxGain = MaxGain; _p->ns2__Exposure::MinIris = MinIris; _p->ns2__Exposure::MaxIris = MaxIris; _p->ns2__Exposure::ExposureTime = ExposureTime; _p->ns2__Exposure::Gain = Gain; _p->ns2__Exposure::Iris = Iris; } return _p; }

inline ns2__Exposure * soap_new_set_ns2__Exposure(struct soap *soap, enum ns2__ExposureMode Mode, enum ns2__ExposurePriority Priority, ns2__Rectangle *Window, float MinExposureTime, float MaxExposureTime, float MinGain, float MaxGain, float MinIris, float MaxIris, float ExposureTime, float Gain, float Iris, char *__item1) { ns2__Exposure *_p = soap_instantiate_ns2__Exposure(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Exposure::Mode = Mode; _p->ns2__Exposure::Priority = Priority; _p->ns2__Exposure::Window = Window; _p->ns2__Exposure::MinExposureTime = MinExposureTime; _p->ns2__Exposure::MaxExposureTime = MaxExposureTime; _p->ns2__Exposure::MinGain = MinGain; _p->ns2__Exposure::MaxGain = MaxGain; _p->ns2__Exposure::MinIris = MinIris; _p->ns2__Exposure::MaxIris = MaxIris; _p->ns2__Exposure::ExposureTime = ExposureTime; _p->ns2__Exposure::Gain = Gain; _p->ns2__Exposure::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Exposure(struct soap *soap, ns2__Exposure *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Exposure(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettingsExtension
#define SOAP_TYPE_ns2__ImagingSettingsExtension (458)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettingsExtension(struct soap*, const char*, int, const ns2__ImagingSettingsExtension *, const char*);
SOAP_FMAC3 ns2__ImagingSettingsExtension * SOAP_FMAC4 soap_in_ns2__ImagingSettingsExtension(struct soap*, const char*, ns2__ImagingSettingsExtension *, const char*);

#ifndef soap_write_ns2__ImagingSettingsExtension
#define soap_write_ns2__ImagingSettingsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettingsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension * SOAP_FMAC4 soap_get_ns2__ImagingSettingsExtension(struct soap*, ns2__ImagingSettingsExtension *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettingsExtension
#define soap_read_ns2__ImagingSettingsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettingsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettingsExtension * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettingsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettingsExtension * soap_new_ns2__ImagingSettingsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettingsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettingsExtension * soap_new_req_ns2__ImagingSettingsExtension(struct soap *soap) { ns2__ImagingSettingsExtension *_p = soap_instantiate_ns2__ImagingSettingsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettingsExtension * soap_new_set_ns2__ImagingSettingsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ImagingSettingsExtension *_p = soap_instantiate_ns2__ImagingSettingsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettingsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettingsExtension(struct soap *soap, ns2__ImagingSettingsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettingsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingSettings
#define SOAP_TYPE_ns2__ImagingSettings (457)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingSettings(struct soap*, const char*, int, const ns2__ImagingSettings *, const char*);
SOAP_FMAC3 ns2__ImagingSettings * SOAP_FMAC4 soap_in_ns2__ImagingSettings(struct soap*, const char*, ns2__ImagingSettings *, const char*);

#ifndef soap_write_ns2__ImagingSettings
#define soap_write_ns2__ImagingSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettings * SOAP_FMAC4 soap_get_ns2__ImagingSettings(struct soap*, ns2__ImagingSettings *, const char*, const char*);

#ifndef soap_read_ns2__ImagingSettings
#define soap_read_ns2__ImagingSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingSettings * SOAP_FMAC2 soap_instantiate_ns2__ImagingSettings(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingSettings * soap_new_ns2__ImagingSettings(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingSettings(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingSettings * soap_new_req_ns2__ImagingSettings(struct soap *soap) { ns2__ImagingSettings *_p = soap_instantiate_ns2__ImagingSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ImagingSettings * soap_new_set_ns2__ImagingSettings(struct soap *soap, ns2__BacklightCompensation *BacklightCompensation, float *Brightness, float *ColorSaturation, float *Contrast, ns2__Exposure *Exposure, ns2__FocusConfiguration *Focus, enum ns2__IrCutFilterMode *IrCutFilter, float *Sharpness, ns2__WideDynamicRange *WideDynamicRange, ns2__WhiteBalance *WhiteBalance, ns2__ImagingSettingsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ImagingSettings *_p = soap_instantiate_ns2__ImagingSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingSettings::BacklightCompensation = BacklightCompensation; _p->ns2__ImagingSettings::Brightness = Brightness; _p->ns2__ImagingSettings::ColorSaturation = ColorSaturation; _p->ns2__ImagingSettings::Contrast = Contrast; _p->ns2__ImagingSettings::Exposure = Exposure; _p->ns2__ImagingSettings::Focus = Focus; _p->ns2__ImagingSettings::IrCutFilter = IrCutFilter; _p->ns2__ImagingSettings::Sharpness = Sharpness; _p->ns2__ImagingSettings::WideDynamicRange = WideDynamicRange; _p->ns2__ImagingSettings::WhiteBalance = WhiteBalance; _p->ns2__ImagingSettings::Extension = Extension; _p->ns2__ImagingSettings::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingSettings(struct soap *soap, ns2__ImagingSettings *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingSettings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusConfiguration
#define SOAP_TYPE_ns2__FocusConfiguration (456)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusConfiguration(struct soap*, const char*, int, const ns2__FocusConfiguration *, const char*);
SOAP_FMAC3 ns2__FocusConfiguration * SOAP_FMAC4 soap_in_ns2__FocusConfiguration(struct soap*, const char*, ns2__FocusConfiguration *, const char*);

#ifndef soap_write_ns2__FocusConfiguration
#define soap_write_ns2__FocusConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusConfiguration * SOAP_FMAC4 soap_get_ns2__FocusConfiguration(struct soap*, ns2__FocusConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__FocusConfiguration
#define soap_read_ns2__FocusConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusConfiguration * SOAP_FMAC2 soap_instantiate_ns2__FocusConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusConfiguration * soap_new_ns2__FocusConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__FocusConfiguration * soap_new_req_ns2__FocusConfiguration(struct soap *soap, enum ns2__AutoFocusMode AutoFocusMode, float DefaultSpeed, float NearLimit, float FarLimit) { ns2__FocusConfiguration *_p = soap_instantiate_ns2__FocusConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusConfiguration::AutoFocusMode = AutoFocusMode; _p->ns2__FocusConfiguration::DefaultSpeed = DefaultSpeed; _p->ns2__FocusConfiguration::NearLimit = NearLimit; _p->ns2__FocusConfiguration::FarLimit = FarLimit; } return _p; }

inline ns2__FocusConfiguration * soap_new_set_ns2__FocusConfiguration(struct soap *soap, enum ns2__AutoFocusMode AutoFocusMode, float DefaultSpeed, float NearLimit, float FarLimit, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__FocusConfiguration *_p = soap_instantiate_ns2__FocusConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusConfiguration::AutoFocusMode = AutoFocusMode; _p->ns2__FocusConfiguration::DefaultSpeed = DefaultSpeed; _p->ns2__FocusConfiguration::NearLimit = NearLimit; _p->ns2__FocusConfiguration::FarLimit = FarLimit; _p->ns2__FocusConfiguration::__any = __any; _p->ns2__FocusConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusConfiguration(struct soap *soap, ns2__FocusConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FocusStatus
#define SOAP_TYPE_ns2__FocusStatus (455)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FocusStatus(struct soap*, const char*, int, const ns2__FocusStatus *, const char*);
SOAP_FMAC3 ns2__FocusStatus * SOAP_FMAC4 soap_in_ns2__FocusStatus(struct soap*, const char*, ns2__FocusStatus *, const char*);

#ifndef soap_write_ns2__FocusStatus
#define soap_write_ns2__FocusStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FocusStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusStatus * SOAP_FMAC4 soap_get_ns2__FocusStatus(struct soap*, ns2__FocusStatus *, const char*, const char*);

#ifndef soap_read_ns2__FocusStatus
#define soap_read_ns2__FocusStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FocusStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FocusStatus * SOAP_FMAC2 soap_instantiate_ns2__FocusStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FocusStatus * soap_new_ns2__FocusStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FocusStatus(soap, n, NULL, NULL, NULL); }

inline ns2__FocusStatus * soap_new_req_ns2__FocusStatus(struct soap *soap, float Position, enum ns2__MoveStatus MoveStatus, const std::string& Error) { ns2__FocusStatus *_p = soap_instantiate_ns2__FocusStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusStatus::Position = Position; _p->ns2__FocusStatus::MoveStatus = MoveStatus; _p->ns2__FocusStatus::Error = Error; } return _p; }

inline ns2__FocusStatus * soap_new_set_ns2__FocusStatus(struct soap *soap, float Position, enum ns2__MoveStatus MoveStatus, const std::string& Error, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__FocusStatus *_p = soap_instantiate_ns2__FocusStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FocusStatus::Position = Position; _p->ns2__FocusStatus::MoveStatus = MoveStatus; _p->ns2__FocusStatus::Error = Error; _p->ns2__FocusStatus::__any = __any; _p->ns2__FocusStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FocusStatus(struct soap *soap, ns2__FocusStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FocusStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingStatus
#define SOAP_TYPE_ns2__ImagingStatus (454)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingStatus(struct soap*, const char*, int, const ns2__ImagingStatus *, const char*);
SOAP_FMAC3 ns2__ImagingStatus * SOAP_FMAC4 soap_in_ns2__ImagingStatus(struct soap*, const char*, ns2__ImagingStatus *, const char*);

#ifndef soap_write_ns2__ImagingStatus
#define soap_write_ns2__ImagingStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingStatus * SOAP_FMAC4 soap_get_ns2__ImagingStatus(struct soap*, ns2__ImagingStatus *, const char*, const char*);

#ifndef soap_read_ns2__ImagingStatus
#define soap_read_ns2__ImagingStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingStatus * SOAP_FMAC2 soap_instantiate_ns2__ImagingStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingStatus * soap_new_ns2__ImagingStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingStatus(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingStatus * soap_new_req_ns2__ImagingStatus(struct soap *soap, ns2__FocusStatus *FocusStatus) { ns2__ImagingStatus *_p = soap_instantiate_ns2__ImagingStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingStatus::FocusStatus = FocusStatus; } return _p; }

inline ns2__ImagingStatus * soap_new_set_ns2__ImagingStatus(struct soap *soap, ns2__FocusStatus *FocusStatus, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ImagingStatus *_p = soap_instantiate_ns2__ImagingStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingStatus::FocusStatus = FocusStatus; _p->ns2__ImagingStatus::__any = __any; _p->ns2__ImagingStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingStatus(struct soap *soap, ns2__ImagingStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_ns2__PTZPresetTourStartingConditionOptionsExtension (453)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, int, const ns2__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, ns2__PTZPresetTourStartingConditionOptionsExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourStartingConditionOptionsExtension
#define soap_write_ns2__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourStartingConditionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, ns2__PTZPresetTourStartingConditionOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourStartingConditionOptionsExtension
#define soap_read_ns2__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourStartingConditionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourStartingConditionOptionsExtension * soap_new_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourStartingConditionOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourStartingConditionOptionsExtension * soap_new_req_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap) { ns2__PTZPresetTourStartingConditionOptionsExtension *_p = soap_instantiate_ns2__PTZPresetTourStartingConditionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourStartingConditionOptionsExtension * soap_new_set_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourStartingConditionOptionsExtension *_p = soap_instantiate_ns2__PTZPresetTourStartingConditionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStartingConditionOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, ns2__PTZPresetTourStartingConditionOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_ns2__PTZPresetTourStartingConditionOptions (452)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourStartingConditionOptions(struct soap*, const char*, int, const ns2__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_in_ns2__PTZPresetTourStartingConditionOptions(struct soap*, const char*, ns2__PTZPresetTourStartingConditionOptions *, const char*);

#ifndef soap_write_ns2__PTZPresetTourStartingConditionOptions
#define soap_write_ns2__PTZPresetTourStartingConditionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourStartingConditionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_get_ns2__PTZPresetTourStartingConditionOptions(struct soap*, ns2__PTZPresetTourStartingConditionOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourStartingConditionOptions
#define soap_read_ns2__PTZPresetTourStartingConditionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourStartingConditionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourStartingConditionOptions * soap_new_ns2__PTZPresetTourStartingConditionOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourStartingConditionOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourStartingConditionOptions * soap_new_req_ns2__PTZPresetTourStartingConditionOptions(struct soap *soap) { ns2__PTZPresetTourStartingConditionOptions *_p = soap_instantiate_ns2__PTZPresetTourStartingConditionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourStartingConditionOptions * soap_new_set_ns2__PTZPresetTourStartingConditionOptions(struct soap *soap, ns2__IntRange *RecurringTime, ns2__DurationRange *RecurringDuration, const std::vector<enum ns2__PTZPresetTourDirection >& Direction, ns2__PTZPresetTourStartingConditionOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourStartingConditionOptions *_p = soap_instantiate_ns2__PTZPresetTourStartingConditionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStartingConditionOptions::RecurringTime = RecurringTime; _p->ns2__PTZPresetTourStartingConditionOptions::RecurringDuration = RecurringDuration; _p->ns2__PTZPresetTourStartingConditionOptions::Direction = Direction; _p->ns2__PTZPresetTourStartingConditionOptions::Extension = Extension; _p->ns2__PTZPresetTourStartingConditionOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourStartingConditionOptions(struct soap *soap, ns2__PTZPresetTourStartingConditionOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourStartingConditionOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_ns2__PTZPresetTourPresetDetailOptionsExtension (451)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, int, const ns2__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, ns2__PTZPresetTourPresetDetailOptionsExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourPresetDetailOptionsExtension
#define soap_write_ns2__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourPresetDetailOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, ns2__PTZPresetTourPresetDetailOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourPresetDetailOptionsExtension
#define soap_read_ns2__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourPresetDetailOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourPresetDetailOptionsExtension * soap_new_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourPresetDetailOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourPresetDetailOptionsExtension * soap_new_req_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap) { ns2__PTZPresetTourPresetDetailOptionsExtension *_p = soap_instantiate_ns2__PTZPresetTourPresetDetailOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourPresetDetailOptionsExtension * soap_new_set_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourPresetDetailOptionsExtension *_p = soap_instantiate_ns2__PTZPresetTourPresetDetailOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourPresetDetailOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, ns2__PTZPresetTourPresetDetailOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_ns2__PTZPresetTourPresetDetailOptions (450)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourPresetDetailOptions(struct soap*, const char*, int, const ns2__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_in_ns2__PTZPresetTourPresetDetailOptions(struct soap*, const char*, ns2__PTZPresetTourPresetDetailOptions *, const char*);

#ifndef soap_write_ns2__PTZPresetTourPresetDetailOptions
#define soap_write_ns2__PTZPresetTourPresetDetailOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourPresetDetailOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_get_ns2__PTZPresetTourPresetDetailOptions(struct soap*, ns2__PTZPresetTourPresetDetailOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourPresetDetailOptions
#define soap_read_ns2__PTZPresetTourPresetDetailOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourPresetDetailOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourPresetDetailOptions * soap_new_ns2__PTZPresetTourPresetDetailOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourPresetDetailOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourPresetDetailOptions * soap_new_req_ns2__PTZPresetTourPresetDetailOptions(struct soap *soap) { ns2__PTZPresetTourPresetDetailOptions *_p = soap_instantiate_ns2__PTZPresetTourPresetDetailOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourPresetDetailOptions * soap_new_set_ns2__PTZPresetTourPresetDetailOptions(struct soap *soap, const std::vector<std::string >& PresetToken, bool *Home, ns2__Space2DDescription *PanTiltPositionSpace, ns2__Space1DDescription *ZoomPositionSpace, ns2__PTZPresetTourPresetDetailOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourPresetDetailOptions *_p = soap_instantiate_ns2__PTZPresetTourPresetDetailOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourPresetDetailOptions::PresetToken = PresetToken; _p->ns2__PTZPresetTourPresetDetailOptions::Home = Home; _p->ns2__PTZPresetTourPresetDetailOptions::PanTiltPositionSpace = PanTiltPositionSpace; _p->ns2__PTZPresetTourPresetDetailOptions::ZoomPositionSpace = ZoomPositionSpace; _p->ns2__PTZPresetTourPresetDetailOptions::Extension = Extension; _p->ns2__PTZPresetTourPresetDetailOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourPresetDetailOptions(struct soap *soap, ns2__PTZPresetTourPresetDetailOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourPresetDetailOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourSpotOptions
#define SOAP_TYPE_ns2__PTZPresetTourSpotOptions (449)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourSpotOptions(struct soap*, const char*, int, const ns2__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_in_ns2__PTZPresetTourSpotOptions(struct soap*, const char*, ns2__PTZPresetTourSpotOptions *, const char*);

#ifndef soap_write_ns2__PTZPresetTourSpotOptions
#define soap_write_ns2__PTZPresetTourSpotOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourSpotOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_get_ns2__PTZPresetTourSpotOptions(struct soap*, ns2__PTZPresetTourSpotOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourSpotOptions
#define soap_read_ns2__PTZPresetTourSpotOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourSpotOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourSpotOptions * soap_new_ns2__PTZPresetTourSpotOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourSpotOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourSpotOptions * soap_new_req_ns2__PTZPresetTourSpotOptions(struct soap *soap, ns2__PTZPresetTourPresetDetailOptions *PresetDetail, ns2__DurationRange *StayTime) { ns2__PTZPresetTourSpotOptions *_p = soap_instantiate_ns2__PTZPresetTourSpotOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSpotOptions::PresetDetail = PresetDetail; _p->ns2__PTZPresetTourSpotOptions::StayTime = StayTime; } return _p; }

inline ns2__PTZPresetTourSpotOptions * soap_new_set_ns2__PTZPresetTourSpotOptions(struct soap *soap, ns2__PTZPresetTourPresetDetailOptions *PresetDetail, ns2__DurationRange *StayTime, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourSpotOptions *_p = soap_instantiate_ns2__PTZPresetTourSpotOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSpotOptions::PresetDetail = PresetDetail; _p->ns2__PTZPresetTourSpotOptions::StayTime = StayTime; _p->ns2__PTZPresetTourSpotOptions::__any = __any; _p->ns2__PTZPresetTourSpotOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourSpotOptions(struct soap *soap, ns2__PTZPresetTourSpotOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourSpotOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourOptions
#define SOAP_TYPE_ns2__PTZPresetTourOptions (448)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourOptions(struct soap*, const char*, int, const ns2__PTZPresetTourOptions *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourOptions * SOAP_FMAC4 soap_in_ns2__PTZPresetTourOptions(struct soap*, const char*, ns2__PTZPresetTourOptions *, const char*);

#ifndef soap_write_ns2__PTZPresetTourOptions
#define soap_write_ns2__PTZPresetTourOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourOptions * SOAP_FMAC4 soap_get_ns2__PTZPresetTourOptions(struct soap*, ns2__PTZPresetTourOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourOptions
#define soap_read_ns2__PTZPresetTourOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourOptions * soap_new_ns2__PTZPresetTourOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourOptions * soap_new_req_ns2__PTZPresetTourOptions(struct soap *soap, bool AutoStart, ns2__PTZPresetTourStartingConditionOptions *StartingCondition, ns2__PTZPresetTourSpotOptions *TourSpot) { ns2__PTZPresetTourOptions *_p = soap_instantiate_ns2__PTZPresetTourOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourOptions::AutoStart = AutoStart; _p->ns2__PTZPresetTourOptions::StartingCondition = StartingCondition; _p->ns2__PTZPresetTourOptions::TourSpot = TourSpot; } return _p; }

inline ns2__PTZPresetTourOptions * soap_new_set_ns2__PTZPresetTourOptions(struct soap *soap, bool AutoStart, ns2__PTZPresetTourStartingConditionOptions *StartingCondition, ns2__PTZPresetTourSpotOptions *TourSpot, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourOptions *_p = soap_instantiate_ns2__PTZPresetTourOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourOptions::AutoStart = AutoStart; _p->ns2__PTZPresetTourOptions::StartingCondition = StartingCondition; _p->ns2__PTZPresetTourOptions::TourSpot = TourSpot; _p->ns2__PTZPresetTourOptions::__any = __any; _p->ns2__PTZPresetTourOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourOptions(struct soap *soap, ns2__PTZPresetTourOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_ns2__PTZPresetTourStartingConditionExtension (447)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourStartingConditionExtension(struct soap*, const char*, int, const ns2__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourStartingConditionExtension(struct soap*, const char*, ns2__PTZPresetTourStartingConditionExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourStartingConditionExtension
#define soap_write_ns2__PTZPresetTourStartingConditionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourStartingConditionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourStartingConditionExtension(struct soap*, ns2__PTZPresetTourStartingConditionExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourStartingConditionExtension
#define soap_read_ns2__PTZPresetTourStartingConditionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourStartingConditionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourStartingConditionExtension * soap_new_ns2__PTZPresetTourStartingConditionExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourStartingConditionExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourStartingConditionExtension * soap_new_req_ns2__PTZPresetTourStartingConditionExtension(struct soap *soap) { ns2__PTZPresetTourStartingConditionExtension *_p = soap_instantiate_ns2__PTZPresetTourStartingConditionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourStartingConditionExtension * soap_new_set_ns2__PTZPresetTourStartingConditionExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourStartingConditionExtension *_p = soap_instantiate_ns2__PTZPresetTourStartingConditionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStartingConditionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourStartingConditionExtension(struct soap *soap, ns2__PTZPresetTourStartingConditionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourStartingConditionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourStartingCondition
#define SOAP_TYPE_ns2__PTZPresetTourStartingCondition (446)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourStartingCondition(struct soap*, const char*, int, const ns2__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_in_ns2__PTZPresetTourStartingCondition(struct soap*, const char*, ns2__PTZPresetTourStartingCondition *, const char*);

#ifndef soap_write_ns2__PTZPresetTourStartingCondition
#define soap_write_ns2__PTZPresetTourStartingCondition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourStartingCondition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_get_ns2__PTZPresetTourStartingCondition(struct soap*, ns2__PTZPresetTourStartingCondition *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourStartingCondition
#define soap_read_ns2__PTZPresetTourStartingCondition(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourStartingCondition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourStartingCondition * soap_new_ns2__PTZPresetTourStartingCondition(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourStartingCondition(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourStartingCondition * soap_new_req_ns2__PTZPresetTourStartingCondition(struct soap *soap) { ns2__PTZPresetTourStartingCondition *_p = soap_instantiate_ns2__PTZPresetTourStartingCondition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourStartingCondition * soap_new_set_ns2__PTZPresetTourStartingCondition(struct soap *soap, int *RecurringTime, std::string *RecurringDuration, enum ns2__PTZPresetTourDirection *Direction, ns2__PTZPresetTourStartingConditionExtension *Extension, bool *RandomPresetOrder, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourStartingCondition *_p = soap_instantiate_ns2__PTZPresetTourStartingCondition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStartingCondition::RecurringTime = RecurringTime; _p->ns2__PTZPresetTourStartingCondition::RecurringDuration = RecurringDuration; _p->ns2__PTZPresetTourStartingCondition::Direction = Direction; _p->ns2__PTZPresetTourStartingCondition::Extension = Extension; _p->ns2__PTZPresetTourStartingCondition::RandomPresetOrder = RandomPresetOrder; _p->ns2__PTZPresetTourStartingCondition::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourStartingCondition(struct soap *soap, ns2__PTZPresetTourStartingCondition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourStartingCondition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourStatusExtension
#define SOAP_TYPE_ns2__PTZPresetTourStatusExtension (445)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourStatusExtension(struct soap*, const char*, int, const ns2__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourStatusExtension(struct soap*, const char*, ns2__PTZPresetTourStatusExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourStatusExtension
#define soap_write_ns2__PTZPresetTourStatusExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourStatusExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourStatusExtension(struct soap*, ns2__PTZPresetTourStatusExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourStatusExtension
#define soap_read_ns2__PTZPresetTourStatusExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourStatusExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourStatusExtension * soap_new_ns2__PTZPresetTourStatusExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourStatusExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourStatusExtension * soap_new_req_ns2__PTZPresetTourStatusExtension(struct soap *soap) { ns2__PTZPresetTourStatusExtension *_p = soap_instantiate_ns2__PTZPresetTourStatusExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourStatusExtension * soap_new_set_ns2__PTZPresetTourStatusExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourStatusExtension *_p = soap_instantiate_ns2__PTZPresetTourStatusExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStatusExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourStatusExtension(struct soap *soap, ns2__PTZPresetTourStatusExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourStatusExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourStatus
#define SOAP_TYPE_ns2__PTZPresetTourStatus (444)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourStatus(struct soap*, const char*, int, const ns2__PTZPresetTourStatus *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourStatus * SOAP_FMAC4 soap_in_ns2__PTZPresetTourStatus(struct soap*, const char*, ns2__PTZPresetTourStatus *, const char*);

#ifndef soap_write_ns2__PTZPresetTourStatus
#define soap_write_ns2__PTZPresetTourStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStatus * SOAP_FMAC4 soap_get_ns2__PTZPresetTourStatus(struct soap*, ns2__PTZPresetTourStatus *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourStatus
#define soap_read_ns2__PTZPresetTourStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourStatus * soap_new_ns2__PTZPresetTourStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourStatus(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourStatus * soap_new_req_ns2__PTZPresetTourStatus(struct soap *soap, enum ns2__PTZPresetTourState State) { ns2__PTZPresetTourStatus *_p = soap_instantiate_ns2__PTZPresetTourStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStatus::State = State; } return _p; }

inline ns2__PTZPresetTourStatus * soap_new_set_ns2__PTZPresetTourStatus(struct soap *soap, enum ns2__PTZPresetTourState State, ns2__PTZPresetTourSpot *CurrentTourSpot, ns2__PTZPresetTourStatusExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourStatus *_p = soap_instantiate_ns2__PTZPresetTourStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourStatus::State = State; _p->ns2__PTZPresetTourStatus::CurrentTourSpot = CurrentTourSpot; _p->ns2__PTZPresetTourStatus::Extension = Extension; _p->ns2__PTZPresetTourStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourStatus(struct soap *soap, ns2__PTZPresetTourStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourTypeExtension
#define SOAP_TYPE_ns2__PTZPresetTourTypeExtension (443)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourTypeExtension(struct soap*, const char*, int, const ns2__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourTypeExtension(struct soap*, const char*, ns2__PTZPresetTourTypeExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourTypeExtension
#define soap_write_ns2__PTZPresetTourTypeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourTypeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourTypeExtension(struct soap*, ns2__PTZPresetTourTypeExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourTypeExtension
#define soap_read_ns2__PTZPresetTourTypeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourTypeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourTypeExtension * soap_new_ns2__PTZPresetTourTypeExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourTypeExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourTypeExtension * soap_new_req_ns2__PTZPresetTourTypeExtension(struct soap *soap) { ns2__PTZPresetTourTypeExtension *_p = soap_instantiate_ns2__PTZPresetTourTypeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourTypeExtension * soap_new_set_ns2__PTZPresetTourTypeExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourTypeExtension *_p = soap_instantiate_ns2__PTZPresetTourTypeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourTypeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourTypeExtension(struct soap *soap, ns2__PTZPresetTourTypeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourTypeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourPresetDetail
#define SOAP_TYPE_ns2__PTZPresetTourPresetDetail (442)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourPresetDetail(struct soap*, const char*, int, const ns2__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in_ns2__PTZPresetTourPresetDetail(struct soap*, const char*, ns2__PTZPresetTourPresetDetail *, const char*);

#ifndef soap_write_ns2__PTZPresetTourPresetDetail
#define soap_write_ns2__PTZPresetTourPresetDetail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourPresetDetail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_get_ns2__PTZPresetTourPresetDetail(struct soap*, ns2__PTZPresetTourPresetDetail *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourPresetDetail
#define soap_read_ns2__PTZPresetTourPresetDetail(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourPresetDetail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourPresetDetail * soap_new_ns2__PTZPresetTourPresetDetail(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourPresetDetail(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourPresetDetail * soap_new_req_ns2__PTZPresetTourPresetDetail(struct soap *soap, int __union_PTZPresetTourPresetDetail, const union _ns2__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail) { ns2__PTZPresetTourPresetDetail *_p = soap_instantiate_ns2__PTZPresetTourPresetDetail(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail; _p->ns2__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail; } return _p; }

inline ns2__PTZPresetTourPresetDetail * soap_new_set_ns2__PTZPresetTourPresetDetail(struct soap *soap, int __union_PTZPresetTourPresetDetail, const union _ns2__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourPresetDetail *_p = soap_instantiate_ns2__PTZPresetTourPresetDetail(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail; _p->ns2__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail; _p->ns2__PTZPresetTourPresetDetail::__any = __any; _p->ns2__PTZPresetTourPresetDetail::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourPresetDetail(struct soap *soap, ns2__PTZPresetTourPresetDetail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourPresetDetail(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourSpotExtension
#define SOAP_TYPE_ns2__PTZPresetTourSpotExtension (441)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourSpotExtension(struct soap*, const char*, int, const ns2__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourSpotExtension(struct soap*, const char*, ns2__PTZPresetTourSpotExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourSpotExtension
#define soap_write_ns2__PTZPresetTourSpotExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourSpotExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourSpotExtension(struct soap*, ns2__PTZPresetTourSpotExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourSpotExtension
#define soap_read_ns2__PTZPresetTourSpotExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourSpotExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourSpotExtension * soap_new_ns2__PTZPresetTourSpotExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourSpotExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourSpotExtension * soap_new_req_ns2__PTZPresetTourSpotExtension(struct soap *soap) { ns2__PTZPresetTourSpotExtension *_p = soap_instantiate_ns2__PTZPresetTourSpotExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourSpotExtension * soap_new_set_ns2__PTZPresetTourSpotExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourSpotExtension *_p = soap_instantiate_ns2__PTZPresetTourSpotExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSpotExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourSpotExtension(struct soap *soap, ns2__PTZPresetTourSpotExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourSpotExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourSpot
#define SOAP_TYPE_ns2__PTZPresetTourSpot (440)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourSpot(struct soap*, const char*, int, const ns2__PTZPresetTourSpot *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourSpot * SOAP_FMAC4 soap_in_ns2__PTZPresetTourSpot(struct soap*, const char*, ns2__PTZPresetTourSpot *, const char*);

#ifndef soap_write_ns2__PTZPresetTourSpot
#define soap_write_ns2__PTZPresetTourSpot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourSpot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSpot * SOAP_FMAC4 soap_get_ns2__PTZPresetTourSpot(struct soap*, ns2__PTZPresetTourSpot *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourSpot
#define soap_read_ns2__PTZPresetTourSpot(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourSpot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourSpot * soap_new_ns2__PTZPresetTourSpot(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourSpot(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourSpot * soap_new_req_ns2__PTZPresetTourSpot(struct soap *soap, ns2__PTZPresetTourPresetDetail *PresetDetail) { ns2__PTZPresetTourSpot *_p = soap_instantiate_ns2__PTZPresetTourSpot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSpot::PresetDetail = PresetDetail; } return _p; }

inline ns2__PTZPresetTourSpot * soap_new_set_ns2__PTZPresetTourSpot(struct soap *soap, ns2__PTZPresetTourPresetDetail *PresetDetail, ns2__PTZSpeed *Speed, std::string *StayTime, ns2__PTZPresetTourSpotExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourSpot *_p = soap_instantiate_ns2__PTZPresetTourSpot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSpot::PresetDetail = PresetDetail; _p->ns2__PTZPresetTourSpot::Speed = Speed; _p->ns2__PTZPresetTourSpot::StayTime = StayTime; _p->ns2__PTZPresetTourSpot::Extension = Extension; _p->ns2__PTZPresetTourSpot::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourSpot(struct soap *soap, ns2__PTZPresetTourSpot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourSpot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourExtension
#define SOAP_TYPE_ns2__PTZPresetTourExtension (439)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourExtension(struct soap*, const char*, int, const ns2__PTZPresetTourExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourExtension(struct soap*, const char*, ns2__PTZPresetTourExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourExtension
#define soap_write_ns2__PTZPresetTourExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourExtension(struct soap*, ns2__PTZPresetTourExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourExtension
#define soap_read_ns2__PTZPresetTourExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourExtension * soap_new_ns2__PTZPresetTourExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourExtension * soap_new_req_ns2__PTZPresetTourExtension(struct soap *soap) { ns2__PTZPresetTourExtension *_p = soap_instantiate_ns2__PTZPresetTourExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourExtension * soap_new_set_ns2__PTZPresetTourExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourExtension *_p = soap_instantiate_ns2__PTZPresetTourExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourExtension(struct soap *soap, ns2__PTZPresetTourExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PresetTour
#define SOAP_TYPE_ns2__PresetTour (438)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PresetTour(struct soap*, const char*, int, const ns2__PresetTour *, const char*);
SOAP_FMAC3 ns2__PresetTour * SOAP_FMAC4 soap_in_ns2__PresetTour(struct soap*, const char*, ns2__PresetTour *, const char*);

#ifndef soap_write_ns2__PresetTour
#define soap_write_ns2__PresetTour(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PresetTour", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PresetTour * SOAP_FMAC4 soap_get_ns2__PresetTour(struct soap*, ns2__PresetTour *, const char*, const char*);

#ifndef soap_read_ns2__PresetTour
#define soap_read_ns2__PresetTour(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PresetTour(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PresetTour * SOAP_FMAC2 soap_instantiate_ns2__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PresetTour * soap_new_ns2__PresetTour(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PresetTour(soap, n, NULL, NULL, NULL); }

inline ns2__PresetTour * soap_new_req_ns2__PresetTour(struct soap *soap, ns2__PTZPresetTourStatus *Status, bool AutoStart, ns2__PTZPresetTourStartingCondition *StartingCondition) { ns2__PresetTour *_p = soap_instantiate_ns2__PresetTour(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PresetTour::Status = Status; _p->ns2__PresetTour::AutoStart = AutoStart; _p->ns2__PresetTour::StartingCondition = StartingCondition; } return _p; }

inline ns2__PresetTour * soap_new_set_ns2__PresetTour(struct soap *soap, std::string *Name, ns2__PTZPresetTourStatus *Status, bool AutoStart, ns2__PTZPresetTourStartingCondition *StartingCondition, const std::vector<ns2__PTZPresetTourSpot * >& TourSpot, ns2__PTZPresetTourExtension *Extension, std::string *token, char *__anyAttribute, char *__item1) { ns2__PresetTour *_p = soap_instantiate_ns2__PresetTour(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PresetTour::Name = Name; _p->ns2__PresetTour::Status = Status; _p->ns2__PresetTour::AutoStart = AutoStart; _p->ns2__PresetTour::StartingCondition = StartingCondition; _p->ns2__PresetTour::TourSpot = TourSpot; _p->ns2__PresetTour::Extension = Extension; _p->ns2__PresetTour::token = token; _p->ns2__PresetTour::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PresetTour(struct soap *soap, ns2__PresetTour *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PresetTour(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZMoveStatus
#define SOAP_TYPE_ns2__PTZMoveStatus (437)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZMoveStatus(struct soap*, const char*, int, const ns2__PTZMoveStatus *, const char*);
SOAP_FMAC3 ns2__PTZMoveStatus * SOAP_FMAC4 soap_in_ns2__PTZMoveStatus(struct soap*, const char*, ns2__PTZMoveStatus *, const char*);

#ifndef soap_write_ns2__PTZMoveStatus
#define soap_write_ns2__PTZMoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZMoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZMoveStatus * SOAP_FMAC4 soap_get_ns2__PTZMoveStatus(struct soap*, ns2__PTZMoveStatus *, const char*, const char*);

#ifndef soap_read_ns2__PTZMoveStatus
#define soap_read_ns2__PTZMoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZMoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_ns2__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZMoveStatus * soap_new_ns2__PTZMoveStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZMoveStatus(soap, n, NULL, NULL, NULL); }

inline ns2__PTZMoveStatus * soap_new_req_ns2__PTZMoveStatus(struct soap *soap) { ns2__PTZMoveStatus *_p = soap_instantiate_ns2__PTZMoveStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZMoveStatus * soap_new_set_ns2__PTZMoveStatus(struct soap *soap, enum ns2__MoveStatus *PanTilt, enum ns2__MoveStatus *Zoom, char *__item1) { ns2__PTZMoveStatus *_p = soap_instantiate_ns2__PTZMoveStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZMoveStatus::PanTilt = PanTilt; _p->ns2__PTZMoveStatus::Zoom = Zoom; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZMoveStatus(struct soap *soap, ns2__PTZMoveStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZMoveStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPreset
#define SOAP_TYPE_ns2__PTZPreset (436)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPreset(struct soap*, const char*, int, const ns2__PTZPreset *, const char*);
SOAP_FMAC3 ns2__PTZPreset * SOAP_FMAC4 soap_in_ns2__PTZPreset(struct soap*, const char*, ns2__PTZPreset *, const char*);

#ifndef soap_write_ns2__PTZPreset
#define soap_write_ns2__PTZPreset(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPreset", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPreset * SOAP_FMAC4 soap_get_ns2__PTZPreset(struct soap*, ns2__PTZPreset *, const char*, const char*);

#ifndef soap_read_ns2__PTZPreset
#define soap_read_ns2__PTZPreset(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPreset(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPreset * SOAP_FMAC2 soap_instantiate_ns2__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPreset * soap_new_ns2__PTZPreset(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPreset(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPreset * soap_new_req_ns2__PTZPreset(struct soap *soap) { ns2__PTZPreset *_p = soap_instantiate_ns2__PTZPreset(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPreset * soap_new_set_ns2__PTZPreset(struct soap *soap, std::string *Name, ns2__PTZVector *PTZPosition, std::string *token, char *__anyAttribute, char *__item1) { ns2__PTZPreset *_p = soap_instantiate_ns2__PTZPreset(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPreset::Name = Name; _p->ns2__PTZPreset::PTZPosition = PTZPosition; _p->ns2__PTZPreset::token = token; _p->ns2__PTZPreset::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPreset(struct soap *soap, ns2__PTZPreset *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPreset(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZStatus
#define SOAP_TYPE_ns2__PTZStatus (435)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZStatus(struct soap*, const char*, int, const ns2__PTZStatus *, const char*);
SOAP_FMAC3 ns2__PTZStatus * SOAP_FMAC4 soap_in_ns2__PTZStatus(struct soap*, const char*, ns2__PTZStatus *, const char*);

#ifndef soap_write_ns2__PTZStatus
#define soap_write_ns2__PTZStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStatus * SOAP_FMAC4 soap_get_ns2__PTZStatus(struct soap*, ns2__PTZStatus *, const char*, const char*);

#ifndef soap_read_ns2__PTZStatus
#define soap_read_ns2__PTZStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZStatus * SOAP_FMAC2 soap_instantiate_ns2__PTZStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZStatus * soap_new_ns2__PTZStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZStatus(soap, n, NULL, NULL, NULL); }

inline ns2__PTZStatus * soap_new_req_ns2__PTZStatus(struct soap *soap, time_t UtcTime) { ns2__PTZStatus *_p = soap_instantiate_ns2__PTZStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStatus::UtcTime = UtcTime; } return _p; }

inline ns2__PTZStatus * soap_new_set_ns2__PTZStatus(struct soap *soap, ns2__PTZVector *Position, ns2__PTZMoveStatus *MoveStatus, std::string *Error, time_t UtcTime, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTZStatus *_p = soap_instantiate_ns2__PTZStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStatus::Position = Position; _p->ns2__PTZStatus::MoveStatus = MoveStatus; _p->ns2__PTZStatus::Error = Error; _p->ns2__PTZStatus::UtcTime = UtcTime; _p->ns2__PTZStatus::__any = __any; _p->ns2__PTZStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZStatus(struct soap *soap, ns2__PTZStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZSpeed
#define SOAP_TYPE_ns2__PTZSpeed (434)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZSpeed(struct soap*, const char*, int, const ns2__PTZSpeed *, const char*);
SOAP_FMAC3 ns2__PTZSpeed * SOAP_FMAC4 soap_in_ns2__PTZSpeed(struct soap*, const char*, ns2__PTZSpeed *, const char*);

#ifndef soap_write_ns2__PTZSpeed
#define soap_write_ns2__PTZSpeed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZSpeed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZSpeed * SOAP_FMAC4 soap_get_ns2__PTZSpeed(struct soap*, ns2__PTZSpeed *, const char*, const char*);

#ifndef soap_read_ns2__PTZSpeed
#define soap_read_ns2__PTZSpeed(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZSpeed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZSpeed * SOAP_FMAC2 soap_instantiate_ns2__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZSpeed * soap_new_ns2__PTZSpeed(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZSpeed(soap, n, NULL, NULL, NULL); }

inline ns2__PTZSpeed * soap_new_req_ns2__PTZSpeed(struct soap *soap) { ns2__PTZSpeed *_p = soap_instantiate_ns2__PTZSpeed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZSpeed * soap_new_set_ns2__PTZSpeed(struct soap *soap, ns2__Vector2D *PanTilt, ns2__Vector1D *Zoom, char *__item1) { ns2__PTZSpeed *_p = soap_instantiate_ns2__PTZSpeed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZSpeed::PanTilt = PanTilt; _p->ns2__PTZSpeed::Zoom = Zoom; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZSpeed(struct soap *soap, ns2__PTZSpeed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZSpeed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZVector
#define SOAP_TYPE_ns2__PTZVector (433)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZVector(struct soap*, const char*, int, const ns2__PTZVector *, const char*);
SOAP_FMAC3 ns2__PTZVector * SOAP_FMAC4 soap_in_ns2__PTZVector(struct soap*, const char*, ns2__PTZVector *, const char*);

#ifndef soap_write_ns2__PTZVector
#define soap_write_ns2__PTZVector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZVector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZVector * SOAP_FMAC4 soap_get_ns2__PTZVector(struct soap*, ns2__PTZVector *, const char*, const char*);

#ifndef soap_read_ns2__PTZVector
#define soap_read_ns2__PTZVector(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZVector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZVector * SOAP_FMAC2 soap_instantiate_ns2__PTZVector(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZVector * soap_new_ns2__PTZVector(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZVector(soap, n, NULL, NULL, NULL); }

inline ns2__PTZVector * soap_new_req_ns2__PTZVector(struct soap *soap) { ns2__PTZVector *_p = soap_instantiate_ns2__PTZVector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZVector * soap_new_set_ns2__PTZVector(struct soap *soap, ns2__Vector2D *PanTilt, ns2__Vector1D *Zoom, char *__item1) { ns2__PTZVector *_p = soap_instantiate_ns2__PTZVector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZVector::PanTilt = PanTilt; _p->ns2__PTZVector::Zoom = Zoom; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZVector(struct soap *soap, ns2__PTZVector *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZVector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Vector1D
#define SOAP_TYPE_ns2__Vector1D (432)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Vector1D(struct soap*, const char*, int, const ns2__Vector1D *, const char*);
SOAP_FMAC3 ns2__Vector1D * SOAP_FMAC4 soap_in_ns2__Vector1D(struct soap*, const char*, ns2__Vector1D *, const char*);

#ifndef soap_write_ns2__Vector1D
#define soap_write_ns2__Vector1D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Vector1D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Vector1D * SOAP_FMAC4 soap_get_ns2__Vector1D(struct soap*, ns2__Vector1D *, const char*, const char*);

#ifndef soap_read_ns2__Vector1D
#define soap_read_ns2__Vector1D(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Vector1D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Vector1D * SOAP_FMAC2 soap_instantiate_ns2__Vector1D(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Vector1D * soap_new_ns2__Vector1D(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Vector1D(soap, n, NULL, NULL, NULL); }

inline ns2__Vector1D * soap_new_req_ns2__Vector1D(struct soap *soap, float x) { ns2__Vector1D *_p = soap_instantiate_ns2__Vector1D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Vector1D::x = x; } return _p; }

inline ns2__Vector1D * soap_new_set_ns2__Vector1D(struct soap *soap, float x, std::string *space, char *__item1) { ns2__Vector1D *_p = soap_instantiate_ns2__Vector1D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Vector1D::x = x; _p->ns2__Vector1D::space = space; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Vector1D(struct soap *soap, ns2__Vector1D *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Vector1D(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Vector2D
#define SOAP_TYPE_ns2__Vector2D (431)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Vector2D(struct soap*, const char*, int, const ns2__Vector2D *, const char*);
SOAP_FMAC3 ns2__Vector2D * SOAP_FMAC4 soap_in_ns2__Vector2D(struct soap*, const char*, ns2__Vector2D *, const char*);

#ifndef soap_write_ns2__Vector2D
#define soap_write_ns2__Vector2D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Vector2D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Vector2D * SOAP_FMAC4 soap_get_ns2__Vector2D(struct soap*, ns2__Vector2D *, const char*, const char*);

#ifndef soap_read_ns2__Vector2D
#define soap_read_ns2__Vector2D(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Vector2D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Vector2D * SOAP_FMAC2 soap_instantiate_ns2__Vector2D(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Vector2D * soap_new_ns2__Vector2D(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Vector2D(soap, n, NULL, NULL, NULL); }

inline ns2__Vector2D * soap_new_req_ns2__Vector2D(struct soap *soap, float x, float y) { ns2__Vector2D *_p = soap_instantiate_ns2__Vector2D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Vector2D::x = x; _p->ns2__Vector2D::y = y; } return _p; }

inline ns2__Vector2D * soap_new_set_ns2__Vector2D(struct soap *soap, float x, float y, std::string *space, char *__item1) { ns2__Vector2D *_p = soap_instantiate_ns2__Vector2D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Vector2D::x = x; _p->ns2__Vector2D::y = y; _p->ns2__Vector2D::space = space; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Vector2D(struct soap *soap, ns2__Vector2D *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Vector2D(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Space1DDescription
#define SOAP_TYPE_ns2__Space1DDescription (430)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Space1DDescription(struct soap*, const char*, int, const ns2__Space1DDescription *, const char*);
SOAP_FMAC3 ns2__Space1DDescription * SOAP_FMAC4 soap_in_ns2__Space1DDescription(struct soap*, const char*, ns2__Space1DDescription *, const char*);

#ifndef soap_write_ns2__Space1DDescription
#define soap_write_ns2__Space1DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Space1DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Space1DDescription * SOAP_FMAC4 soap_get_ns2__Space1DDescription(struct soap*, ns2__Space1DDescription *, const char*, const char*);

#ifndef soap_read_ns2__Space1DDescription
#define soap_read_ns2__Space1DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Space1DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Space1DDescription * SOAP_FMAC2 soap_instantiate_ns2__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Space1DDescription * soap_new_ns2__Space1DDescription(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Space1DDescription(soap, n, NULL, NULL, NULL); }

inline ns2__Space1DDescription * soap_new_req_ns2__Space1DDescription(struct soap *soap, const std::string& URI, ns2__FloatRange *XRange) { ns2__Space1DDescription *_p = soap_instantiate_ns2__Space1DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Space1DDescription::URI = URI; _p->ns2__Space1DDescription::XRange = XRange; } return _p; }

inline ns2__Space1DDescription * soap_new_set_ns2__Space1DDescription(struct soap *soap, const std::string& URI, ns2__FloatRange *XRange, char *__item1) { ns2__Space1DDescription *_p = soap_instantiate_ns2__Space1DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Space1DDescription::URI = URI; _p->ns2__Space1DDescription::XRange = XRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Space1DDescription(struct soap *soap, ns2__Space1DDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Space1DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Space2DDescription
#define SOAP_TYPE_ns2__Space2DDescription (429)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Space2DDescription(struct soap*, const char*, int, const ns2__Space2DDescription *, const char*);
SOAP_FMAC3 ns2__Space2DDescription * SOAP_FMAC4 soap_in_ns2__Space2DDescription(struct soap*, const char*, ns2__Space2DDescription *, const char*);

#ifndef soap_write_ns2__Space2DDescription
#define soap_write_ns2__Space2DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Space2DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Space2DDescription * SOAP_FMAC4 soap_get_ns2__Space2DDescription(struct soap*, ns2__Space2DDescription *, const char*, const char*);

#ifndef soap_read_ns2__Space2DDescription
#define soap_read_ns2__Space2DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Space2DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Space2DDescription * SOAP_FMAC2 soap_instantiate_ns2__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Space2DDescription * soap_new_ns2__Space2DDescription(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Space2DDescription(soap, n, NULL, NULL, NULL); }

inline ns2__Space2DDescription * soap_new_req_ns2__Space2DDescription(struct soap *soap, const std::string& URI, ns2__FloatRange *XRange, ns2__FloatRange *YRange) { ns2__Space2DDescription *_p = soap_instantiate_ns2__Space2DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Space2DDescription::URI = URI; _p->ns2__Space2DDescription::XRange = XRange; _p->ns2__Space2DDescription::YRange = YRange; } return _p; }

inline ns2__Space2DDescription * soap_new_set_ns2__Space2DDescription(struct soap *soap, const std::string& URI, ns2__FloatRange *XRange, ns2__FloatRange *YRange, char *__item1) { ns2__Space2DDescription *_p = soap_instantiate_ns2__Space2DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Space2DDescription::URI = URI; _p->ns2__Space2DDescription::XRange = XRange; _p->ns2__Space2DDescription::YRange = YRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Space2DDescription(struct soap *soap, ns2__Space2DDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Space2DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZSpacesExtension
#define SOAP_TYPE_ns2__PTZSpacesExtension (428)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZSpacesExtension(struct soap*, const char*, int, const ns2__PTZSpacesExtension *, const char*);
SOAP_FMAC3 ns2__PTZSpacesExtension * SOAP_FMAC4 soap_in_ns2__PTZSpacesExtension(struct soap*, const char*, ns2__PTZSpacesExtension *, const char*);

#ifndef soap_write_ns2__PTZSpacesExtension
#define soap_write_ns2__PTZSpacesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZSpacesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZSpacesExtension * SOAP_FMAC4 soap_get_ns2__PTZSpacesExtension(struct soap*, ns2__PTZSpacesExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZSpacesExtension
#define soap_read_ns2__PTZSpacesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZSpacesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZSpacesExtension * soap_new_ns2__PTZSpacesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZSpacesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZSpacesExtension * soap_new_req_ns2__PTZSpacesExtension(struct soap *soap) { ns2__PTZSpacesExtension *_p = soap_instantiate_ns2__PTZSpacesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZSpacesExtension * soap_new_set_ns2__PTZSpacesExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZSpacesExtension *_p = soap_instantiate_ns2__PTZSpacesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZSpacesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZSpacesExtension(struct soap *soap, ns2__PTZSpacesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZSpacesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZSpaces
#define SOAP_TYPE_ns2__PTZSpaces (427)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZSpaces(struct soap*, const char*, int, const ns2__PTZSpaces *, const char*);
SOAP_FMAC3 ns2__PTZSpaces * SOAP_FMAC4 soap_in_ns2__PTZSpaces(struct soap*, const char*, ns2__PTZSpaces *, const char*);

#ifndef soap_write_ns2__PTZSpaces
#define soap_write_ns2__PTZSpaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZSpaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZSpaces * SOAP_FMAC4 soap_get_ns2__PTZSpaces(struct soap*, ns2__PTZSpaces *, const char*, const char*);

#ifndef soap_read_ns2__PTZSpaces
#define soap_read_ns2__PTZSpaces(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZSpaces(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZSpaces * SOAP_FMAC2 soap_instantiate_ns2__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZSpaces * soap_new_ns2__PTZSpaces(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZSpaces(soap, n, NULL, NULL, NULL); }

inline ns2__PTZSpaces * soap_new_req_ns2__PTZSpaces(struct soap *soap) { ns2__PTZSpaces *_p = soap_instantiate_ns2__PTZSpaces(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZSpaces * soap_new_set_ns2__PTZSpaces(struct soap *soap, const std::vector<ns2__Space2DDescription * >& AbsolutePanTiltPositionSpace, const std::vector<ns2__Space1DDescription * >& AbsoluteZoomPositionSpace, const std::vector<ns2__Space2DDescription * >& RelativePanTiltTranslationSpace, const std::vector<ns2__Space1DDescription * >& RelativeZoomTranslationSpace, const std::vector<ns2__Space2DDescription * >& ContinuousPanTiltVelocitySpace, const std::vector<ns2__Space1DDescription * >& ContinuousZoomVelocitySpace, const std::vector<ns2__Space1DDescription * >& PanTiltSpeedSpace, const std::vector<ns2__Space1DDescription * >& ZoomSpeedSpace, ns2__PTZSpacesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZSpaces *_p = soap_instantiate_ns2__PTZSpaces(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZSpaces::AbsolutePanTiltPositionSpace = AbsolutePanTiltPositionSpace; _p->ns2__PTZSpaces::AbsoluteZoomPositionSpace = AbsoluteZoomPositionSpace; _p->ns2__PTZSpaces::RelativePanTiltTranslationSpace = RelativePanTiltTranslationSpace; _p->ns2__PTZSpaces::RelativeZoomTranslationSpace = RelativeZoomTranslationSpace; _p->ns2__PTZSpaces::ContinuousPanTiltVelocitySpace = ContinuousPanTiltVelocitySpace; _p->ns2__PTZSpaces::ContinuousZoomVelocitySpace = ContinuousZoomVelocitySpace; _p->ns2__PTZSpaces::PanTiltSpeedSpace = PanTiltSpeedSpace; _p->ns2__PTZSpaces::ZoomSpeedSpace = ZoomSpeedSpace; _p->ns2__PTZSpaces::Extension = Extension; _p->ns2__PTZSpaces::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZSpaces(struct soap *soap, ns2__PTZSpaces *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZSpaces(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ZoomLimits
#define SOAP_TYPE_ns2__ZoomLimits (426)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ZoomLimits(struct soap*, const char*, int, const ns2__ZoomLimits *, const char*);
SOAP_FMAC3 ns2__ZoomLimits * SOAP_FMAC4 soap_in_ns2__ZoomLimits(struct soap*, const char*, ns2__ZoomLimits *, const char*);

#ifndef soap_write_ns2__ZoomLimits
#define soap_write_ns2__ZoomLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ZoomLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ZoomLimits * SOAP_FMAC4 soap_get_ns2__ZoomLimits(struct soap*, ns2__ZoomLimits *, const char*, const char*);

#ifndef soap_read_ns2__ZoomLimits
#define soap_read_ns2__ZoomLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ZoomLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ZoomLimits * SOAP_FMAC2 soap_instantiate_ns2__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ZoomLimits * soap_new_ns2__ZoomLimits(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ZoomLimits(soap, n, NULL, NULL, NULL); }

inline ns2__ZoomLimits * soap_new_req_ns2__ZoomLimits(struct soap *soap, ns2__Space1DDescription *Range) { ns2__ZoomLimits *_p = soap_instantiate_ns2__ZoomLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ZoomLimits::Range = Range; } return _p; }

inline ns2__ZoomLimits * soap_new_set_ns2__ZoomLimits(struct soap *soap, ns2__Space1DDescription *Range, char *__item1) { ns2__ZoomLimits *_p = soap_instantiate_ns2__ZoomLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ZoomLimits::Range = Range; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ZoomLimits(struct soap *soap, ns2__ZoomLimits *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ZoomLimits(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PanTiltLimits
#define SOAP_TYPE_ns2__PanTiltLimits (425)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PanTiltLimits(struct soap*, const char*, int, const ns2__PanTiltLimits *, const char*);
SOAP_FMAC3 ns2__PanTiltLimits * SOAP_FMAC4 soap_in_ns2__PanTiltLimits(struct soap*, const char*, ns2__PanTiltLimits *, const char*);

#ifndef soap_write_ns2__PanTiltLimits
#define soap_write_ns2__PanTiltLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PanTiltLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PanTiltLimits * SOAP_FMAC4 soap_get_ns2__PanTiltLimits(struct soap*, ns2__PanTiltLimits *, const char*, const char*);

#ifndef soap_read_ns2__PanTiltLimits
#define soap_read_ns2__PanTiltLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PanTiltLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PanTiltLimits * SOAP_FMAC2 soap_instantiate_ns2__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PanTiltLimits * soap_new_ns2__PanTiltLimits(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PanTiltLimits(soap, n, NULL, NULL, NULL); }

inline ns2__PanTiltLimits * soap_new_req_ns2__PanTiltLimits(struct soap *soap, ns2__Space2DDescription *Range) { ns2__PanTiltLimits *_p = soap_instantiate_ns2__PanTiltLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PanTiltLimits::Range = Range; } return _p; }

inline ns2__PanTiltLimits * soap_new_set_ns2__PanTiltLimits(struct soap *soap, ns2__Space2DDescription *Range, char *__item1) { ns2__PanTiltLimits *_p = soap_instantiate_ns2__PanTiltLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PanTiltLimits::Range = Range; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PanTiltLimits(struct soap *soap, ns2__PanTiltLimits *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PanTiltLimits(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReverseOptionsExtension
#define SOAP_TYPE_ns2__ReverseOptionsExtension (424)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReverseOptionsExtension(struct soap*, const char*, int, const ns2__ReverseOptionsExtension *, const char*);
SOAP_FMAC3 ns2__ReverseOptionsExtension * SOAP_FMAC4 soap_in_ns2__ReverseOptionsExtension(struct soap*, const char*, ns2__ReverseOptionsExtension *, const char*);

#ifndef soap_write_ns2__ReverseOptionsExtension
#define soap_write_ns2__ReverseOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReverseOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReverseOptionsExtension * SOAP_FMAC4 soap_get_ns2__ReverseOptionsExtension(struct soap*, ns2__ReverseOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__ReverseOptionsExtension
#define soap_read_ns2__ReverseOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReverseOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReverseOptionsExtension * soap_new_ns2__ReverseOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReverseOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ReverseOptionsExtension * soap_new_req_ns2__ReverseOptionsExtension(struct soap *soap) { ns2__ReverseOptionsExtension *_p = soap_instantiate_ns2__ReverseOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ReverseOptionsExtension * soap_new_set_ns2__ReverseOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ReverseOptionsExtension *_p = soap_instantiate_ns2__ReverseOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReverseOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReverseOptionsExtension(struct soap *soap, ns2__ReverseOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReverseOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReverseOptions
#define SOAP_TYPE_ns2__ReverseOptions (423)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReverseOptions(struct soap*, const char*, int, const ns2__ReverseOptions *, const char*);
SOAP_FMAC3 ns2__ReverseOptions * SOAP_FMAC4 soap_in_ns2__ReverseOptions(struct soap*, const char*, ns2__ReverseOptions *, const char*);

#ifndef soap_write_ns2__ReverseOptions
#define soap_write_ns2__ReverseOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReverseOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReverseOptions * SOAP_FMAC4 soap_get_ns2__ReverseOptions(struct soap*, ns2__ReverseOptions *, const char*, const char*);

#ifndef soap_read_ns2__ReverseOptions
#define soap_read_ns2__ReverseOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReverseOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReverseOptions * SOAP_FMAC2 soap_instantiate_ns2__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReverseOptions * soap_new_ns2__ReverseOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReverseOptions(soap, n, NULL, NULL, NULL); }

inline ns2__ReverseOptions * soap_new_req_ns2__ReverseOptions(struct soap *soap) { ns2__ReverseOptions *_p = soap_instantiate_ns2__ReverseOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ReverseOptions * soap_new_set_ns2__ReverseOptions(struct soap *soap, const std::vector<enum ns2__ReverseMode >& Mode, ns2__ReverseOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__ReverseOptions *_p = soap_instantiate_ns2__ReverseOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReverseOptions::Mode = Mode; _p->ns2__ReverseOptions::Extension = Extension; _p->ns2__ReverseOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReverseOptions(struct soap *soap, ns2__ReverseOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReverseOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EFlipOptionsExtension
#define SOAP_TYPE_ns2__EFlipOptionsExtension (422)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EFlipOptionsExtension(struct soap*, const char*, int, const ns2__EFlipOptionsExtension *, const char*);
SOAP_FMAC3 ns2__EFlipOptionsExtension * SOAP_FMAC4 soap_in_ns2__EFlipOptionsExtension(struct soap*, const char*, ns2__EFlipOptionsExtension *, const char*);

#ifndef soap_write_ns2__EFlipOptionsExtension
#define soap_write_ns2__EFlipOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EFlipOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlipOptionsExtension * SOAP_FMAC4 soap_get_ns2__EFlipOptionsExtension(struct soap*, ns2__EFlipOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__EFlipOptionsExtension
#define soap_read_ns2__EFlipOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EFlipOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EFlipOptionsExtension * soap_new_ns2__EFlipOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EFlipOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__EFlipOptionsExtension * soap_new_req_ns2__EFlipOptionsExtension(struct soap *soap) { ns2__EFlipOptionsExtension *_p = soap_instantiate_ns2__EFlipOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EFlipOptionsExtension * soap_new_set_ns2__EFlipOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__EFlipOptionsExtension *_p = soap_instantiate_ns2__EFlipOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EFlipOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EFlipOptionsExtension(struct soap *soap, ns2__EFlipOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EFlipOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EFlipOptions
#define SOAP_TYPE_ns2__EFlipOptions (421)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EFlipOptions(struct soap*, const char*, int, const ns2__EFlipOptions *, const char*);
SOAP_FMAC3 ns2__EFlipOptions * SOAP_FMAC4 soap_in_ns2__EFlipOptions(struct soap*, const char*, ns2__EFlipOptions *, const char*);

#ifndef soap_write_ns2__EFlipOptions
#define soap_write_ns2__EFlipOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EFlipOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlipOptions * SOAP_FMAC4 soap_get_ns2__EFlipOptions(struct soap*, ns2__EFlipOptions *, const char*, const char*);

#ifndef soap_read_ns2__EFlipOptions
#define soap_read_ns2__EFlipOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EFlipOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EFlipOptions * SOAP_FMAC2 soap_instantiate_ns2__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EFlipOptions * soap_new_ns2__EFlipOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EFlipOptions(soap, n, NULL, NULL, NULL); }

inline ns2__EFlipOptions * soap_new_req_ns2__EFlipOptions(struct soap *soap) { ns2__EFlipOptions *_p = soap_instantiate_ns2__EFlipOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EFlipOptions * soap_new_set_ns2__EFlipOptions(struct soap *soap, const std::vector<enum ns2__EFlipMode >& Mode, ns2__EFlipOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__EFlipOptions *_p = soap_instantiate_ns2__EFlipOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EFlipOptions::Mode = Mode; _p->ns2__EFlipOptions::Extension = Extension; _p->ns2__EFlipOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EFlipOptions(struct soap *soap, ns2__EFlipOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EFlipOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTControlDirectionOptionsExtension
#define SOAP_TYPE_ns2__PTControlDirectionOptionsExtension (420)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTControlDirectionOptionsExtension(struct soap*, const char*, int, const ns2__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC3 ns2__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_in_ns2__PTControlDirectionOptionsExtension(struct soap*, const char*, ns2__PTControlDirectionOptionsExtension *, const char*);

#ifndef soap_write_ns2__PTControlDirectionOptionsExtension
#define soap_write_ns2__PTControlDirectionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTControlDirectionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_get_ns2__PTControlDirectionOptionsExtension(struct soap*, ns2__PTControlDirectionOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTControlDirectionOptionsExtension
#define soap_read_ns2__PTControlDirectionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTControlDirectionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTControlDirectionOptionsExtension * soap_new_ns2__PTControlDirectionOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTControlDirectionOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTControlDirectionOptionsExtension * soap_new_req_ns2__PTControlDirectionOptionsExtension(struct soap *soap) { ns2__PTControlDirectionOptionsExtension *_p = soap_instantiate_ns2__PTControlDirectionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTControlDirectionOptionsExtension * soap_new_set_ns2__PTControlDirectionOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTControlDirectionOptionsExtension *_p = soap_instantiate_ns2__PTControlDirectionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTControlDirectionOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTControlDirectionOptionsExtension(struct soap *soap, ns2__PTControlDirectionOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTControlDirectionOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTControlDirectionOptions
#define SOAP_TYPE_ns2__PTControlDirectionOptions (419)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTControlDirectionOptions(struct soap*, const char*, int, const ns2__PTControlDirectionOptions *, const char*);
SOAP_FMAC3 ns2__PTControlDirectionOptions * SOAP_FMAC4 soap_in_ns2__PTControlDirectionOptions(struct soap*, const char*, ns2__PTControlDirectionOptions *, const char*);

#ifndef soap_write_ns2__PTControlDirectionOptions
#define soap_write_ns2__PTControlDirectionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTControlDirectionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirectionOptions * SOAP_FMAC4 soap_get_ns2__PTControlDirectionOptions(struct soap*, ns2__PTControlDirectionOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTControlDirectionOptions
#define soap_read_ns2__PTControlDirectionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTControlDirectionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_ns2__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTControlDirectionOptions * soap_new_ns2__PTControlDirectionOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTControlDirectionOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTControlDirectionOptions * soap_new_req_ns2__PTControlDirectionOptions(struct soap *soap) { ns2__PTControlDirectionOptions *_p = soap_instantiate_ns2__PTControlDirectionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTControlDirectionOptions * soap_new_set_ns2__PTControlDirectionOptions(struct soap *soap, ns2__EFlipOptions *EFlip, ns2__ReverseOptions *Reverse, ns2__PTControlDirectionOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTControlDirectionOptions *_p = soap_instantiate_ns2__PTControlDirectionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTControlDirectionOptions::EFlip = EFlip; _p->ns2__PTControlDirectionOptions::Reverse = Reverse; _p->ns2__PTControlDirectionOptions::Extension = Extension; _p->ns2__PTControlDirectionOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTControlDirectionOptions(struct soap *soap, ns2__PTControlDirectionOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTControlDirectionOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZConfigurationOptions2
#define SOAP_TYPE_ns2__PTZConfigurationOptions2 (418)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZConfigurationOptions2(struct soap*, const char*, int, const ns2__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC3 ns2__PTZConfigurationOptions2 * SOAP_FMAC4 soap_in_ns2__PTZConfigurationOptions2(struct soap*, const char*, ns2__PTZConfigurationOptions2 *, const char*);

#ifndef soap_write_ns2__PTZConfigurationOptions2
#define soap_write_ns2__PTZConfigurationOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZConfigurationOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationOptions2 * SOAP_FMAC4 soap_get_ns2__PTZConfigurationOptions2(struct soap*, ns2__PTZConfigurationOptions2 *, const char*, const char*);

#ifndef soap_read_ns2__PTZConfigurationOptions2
#define soap_read_ns2__PTZConfigurationOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZConfigurationOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_ns2__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZConfigurationOptions2 * soap_new_ns2__PTZConfigurationOptions2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZConfigurationOptions2(soap, n, NULL, NULL, NULL); }

inline ns2__PTZConfigurationOptions2 * soap_new_req_ns2__PTZConfigurationOptions2(struct soap *soap) { ns2__PTZConfigurationOptions2 *_p = soap_instantiate_ns2__PTZConfigurationOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZConfigurationOptions2 * soap_new_set_ns2__PTZConfigurationOptions2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZConfigurationOptions2 *_p = soap_instantiate_ns2__PTZConfigurationOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfigurationOptions2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZConfigurationOptions2(struct soap *soap, ns2__PTZConfigurationOptions2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZConfigurationOptions2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZConfigurationOptions
#define SOAP_TYPE_ns2__PTZConfigurationOptions (417)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZConfigurationOptions(struct soap*, const char*, int, const ns2__PTZConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__PTZConfigurationOptions * SOAP_FMAC4 soap_in_ns2__PTZConfigurationOptions(struct soap*, const char*, ns2__PTZConfigurationOptions *, const char*);

#ifndef soap_write_ns2__PTZConfigurationOptions
#define soap_write_ns2__PTZConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationOptions * SOAP_FMAC4 soap_get_ns2__PTZConfigurationOptions(struct soap*, ns2__PTZConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTZConfigurationOptions
#define soap_read_ns2__PTZConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZConfigurationOptions * soap_new_ns2__PTZConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTZConfigurationOptions * soap_new_req_ns2__PTZConfigurationOptions(struct soap *soap, ns2__PTZSpaces *Spaces, ns2__DurationRange *PTZTimeout) { ns2__PTZConfigurationOptions *_p = soap_instantiate_ns2__PTZConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfigurationOptions::Spaces = Spaces; _p->ns2__PTZConfigurationOptions::PTZTimeout = PTZTimeout; } return _p; }

inline ns2__PTZConfigurationOptions * soap_new_set_ns2__PTZConfigurationOptions(struct soap *soap, ns2__PTZSpaces *Spaces, ns2__DurationRange *PTZTimeout, const std::vector<char * >& __any, ns2__PTControlDirectionOptions *PTControlDirection, ns2__PTZConfigurationOptions2 *Extension, std::string *PTZRamps, char *__anyAttribute, char *__item1) { ns2__PTZConfigurationOptions *_p = soap_instantiate_ns2__PTZConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfigurationOptions::Spaces = Spaces; _p->ns2__PTZConfigurationOptions::PTZTimeout = PTZTimeout; _p->ns2__PTZConfigurationOptions::__any = __any; _p->ns2__PTZConfigurationOptions::PTControlDirection = PTControlDirection; _p->ns2__PTZConfigurationOptions::Extension = Extension; _p->ns2__PTZConfigurationOptions::PTZRamps = PTZRamps; _p->ns2__PTZConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZConfigurationOptions(struct soap *soap, ns2__PTZConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Reverse
#define SOAP_TYPE_ns2__Reverse (416)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Reverse(struct soap*, const char*, int, const ns2__Reverse *, const char*);
SOAP_FMAC3 ns2__Reverse * SOAP_FMAC4 soap_in_ns2__Reverse(struct soap*, const char*, ns2__Reverse *, const char*);

#ifndef soap_write_ns2__Reverse
#define soap_write_ns2__Reverse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Reverse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Reverse * SOAP_FMAC4 soap_get_ns2__Reverse(struct soap*, ns2__Reverse *, const char*, const char*);

#ifndef soap_read_ns2__Reverse
#define soap_read_ns2__Reverse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Reverse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Reverse * SOAP_FMAC2 soap_instantiate_ns2__Reverse(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Reverse * soap_new_ns2__Reverse(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Reverse(soap, n, NULL, NULL, NULL); }

inline ns2__Reverse * soap_new_req_ns2__Reverse(struct soap *soap, enum ns2__ReverseMode Mode) { ns2__Reverse *_p = soap_instantiate_ns2__Reverse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Reverse::Mode = Mode; } return _p; }

inline ns2__Reverse * soap_new_set_ns2__Reverse(struct soap *soap, enum ns2__ReverseMode Mode, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Reverse *_p = soap_instantiate_ns2__Reverse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Reverse::Mode = Mode; _p->ns2__Reverse::__any = __any; _p->ns2__Reverse::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Reverse(struct soap *soap, ns2__Reverse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Reverse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EFlip
#define SOAP_TYPE_ns2__EFlip (415)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EFlip(struct soap*, const char*, int, const ns2__EFlip *, const char*);
SOAP_FMAC3 ns2__EFlip * SOAP_FMAC4 soap_in_ns2__EFlip(struct soap*, const char*, ns2__EFlip *, const char*);

#ifndef soap_write_ns2__EFlip
#define soap_write_ns2__EFlip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EFlip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlip * SOAP_FMAC4 soap_get_ns2__EFlip(struct soap*, ns2__EFlip *, const char*, const char*);

#ifndef soap_read_ns2__EFlip
#define soap_read_ns2__EFlip(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EFlip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EFlip * SOAP_FMAC2 soap_instantiate_ns2__EFlip(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EFlip * soap_new_ns2__EFlip(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EFlip(soap, n, NULL, NULL, NULL); }

inline ns2__EFlip * soap_new_req_ns2__EFlip(struct soap *soap, enum ns2__EFlipMode Mode) { ns2__EFlip *_p = soap_instantiate_ns2__EFlip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EFlip::Mode = Mode; } return _p; }

inline ns2__EFlip * soap_new_set_ns2__EFlip(struct soap *soap, enum ns2__EFlipMode Mode, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__EFlip *_p = soap_instantiate_ns2__EFlip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EFlip::Mode = Mode; _p->ns2__EFlip::__any = __any; _p->ns2__EFlip::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EFlip(struct soap *soap, ns2__EFlip *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EFlip(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTControlDirectionExtension
#define SOAP_TYPE_ns2__PTControlDirectionExtension (414)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTControlDirectionExtension(struct soap*, const char*, int, const ns2__PTControlDirectionExtension *, const char*);
SOAP_FMAC3 ns2__PTControlDirectionExtension * SOAP_FMAC4 soap_in_ns2__PTControlDirectionExtension(struct soap*, const char*, ns2__PTControlDirectionExtension *, const char*);

#ifndef soap_write_ns2__PTControlDirectionExtension
#define soap_write_ns2__PTControlDirectionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTControlDirectionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirectionExtension * SOAP_FMAC4 soap_get_ns2__PTControlDirectionExtension(struct soap*, ns2__PTControlDirectionExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTControlDirectionExtension
#define soap_read_ns2__PTControlDirectionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTControlDirectionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_ns2__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTControlDirectionExtension * soap_new_ns2__PTControlDirectionExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTControlDirectionExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTControlDirectionExtension * soap_new_req_ns2__PTControlDirectionExtension(struct soap *soap) { ns2__PTControlDirectionExtension *_p = soap_instantiate_ns2__PTControlDirectionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTControlDirectionExtension * soap_new_set_ns2__PTControlDirectionExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTControlDirectionExtension *_p = soap_instantiate_ns2__PTControlDirectionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTControlDirectionExtension::__any = __any; _p->ns2__PTControlDirectionExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTControlDirectionExtension(struct soap *soap, ns2__PTControlDirectionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTControlDirectionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTControlDirection
#define SOAP_TYPE_ns2__PTControlDirection (413)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTControlDirection(struct soap*, const char*, int, const ns2__PTControlDirection *, const char*);
SOAP_FMAC3 ns2__PTControlDirection * SOAP_FMAC4 soap_in_ns2__PTControlDirection(struct soap*, const char*, ns2__PTControlDirection *, const char*);

#ifndef soap_write_ns2__PTControlDirection
#define soap_write_ns2__PTControlDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTControlDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirection * SOAP_FMAC4 soap_get_ns2__PTControlDirection(struct soap*, ns2__PTControlDirection *, const char*, const char*);

#ifndef soap_read_ns2__PTControlDirection
#define soap_read_ns2__PTControlDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTControlDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTControlDirection * SOAP_FMAC2 soap_instantiate_ns2__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTControlDirection * soap_new_ns2__PTControlDirection(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTControlDirection(soap, n, NULL, NULL, NULL); }

inline ns2__PTControlDirection * soap_new_req_ns2__PTControlDirection(struct soap *soap) { ns2__PTControlDirection *_p = soap_instantiate_ns2__PTControlDirection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTControlDirection * soap_new_set_ns2__PTControlDirection(struct soap *soap, ns2__EFlip *EFlip, ns2__Reverse *Reverse, ns2__PTControlDirectionExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTControlDirection *_p = soap_instantiate_ns2__PTControlDirection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTControlDirection::EFlip = EFlip; _p->ns2__PTControlDirection::Reverse = Reverse; _p->ns2__PTControlDirection::Extension = Extension; _p->ns2__PTControlDirection::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTControlDirection(struct soap *soap, ns2__PTControlDirection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTControlDirection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZConfigurationExtension2
#define SOAP_TYPE_ns2__PTZConfigurationExtension2 (412)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZConfigurationExtension2(struct soap*, const char*, int, const ns2__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC3 ns2__PTZConfigurationExtension2 * SOAP_FMAC4 soap_in_ns2__PTZConfigurationExtension2(struct soap*, const char*, ns2__PTZConfigurationExtension2 *, const char*);

#ifndef soap_write_ns2__PTZConfigurationExtension2
#define soap_write_ns2__PTZConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationExtension2 * SOAP_FMAC4 soap_get_ns2__PTZConfigurationExtension2(struct soap*, ns2__PTZConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__PTZConfigurationExtension2
#define soap_read_ns2__PTZConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_ns2__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZConfigurationExtension2 * soap_new_ns2__PTZConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__PTZConfigurationExtension2 * soap_new_req_ns2__PTZConfigurationExtension2(struct soap *soap) { ns2__PTZConfigurationExtension2 *_p = soap_instantiate_ns2__PTZConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZConfigurationExtension2 * soap_new_set_ns2__PTZConfigurationExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZConfigurationExtension2 *_p = soap_instantiate_ns2__PTZConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZConfigurationExtension2(struct soap *soap, ns2__PTZConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZConfigurationExtension
#define SOAP_TYPE_ns2__PTZConfigurationExtension (411)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZConfigurationExtension(struct soap*, const char*, int, const ns2__PTZConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__PTZConfigurationExtension * SOAP_FMAC4 soap_in_ns2__PTZConfigurationExtension(struct soap*, const char*, ns2__PTZConfigurationExtension *, const char*);

#ifndef soap_write_ns2__PTZConfigurationExtension
#define soap_write_ns2__PTZConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationExtension * SOAP_FMAC4 soap_get_ns2__PTZConfigurationExtension(struct soap*, ns2__PTZConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZConfigurationExtension
#define soap_read_ns2__PTZConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZConfigurationExtension * soap_new_ns2__PTZConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZConfigurationExtension * soap_new_req_ns2__PTZConfigurationExtension(struct soap *soap) { ns2__PTZConfigurationExtension *_p = soap_instantiate_ns2__PTZConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZConfigurationExtension * soap_new_set_ns2__PTZConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, ns2__PTControlDirection *PTControlDirection, ns2__PTZConfigurationExtension2 *Extension, char *__item1) { ns2__PTZConfigurationExtension *_p = soap_instantiate_ns2__PTZConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfigurationExtension::__any = __any; _p->ns2__PTZConfigurationExtension::PTControlDirection = PTControlDirection; _p->ns2__PTZConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZConfigurationExtension(struct soap *soap, ns2__PTZConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZConfiguration
#define SOAP_TYPE_ns2__PTZConfiguration (410)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZConfiguration(struct soap*, const char*, int, const ns2__PTZConfiguration *, const char*);
SOAP_FMAC3 ns2__PTZConfiguration * SOAP_FMAC4 soap_in_ns2__PTZConfiguration(struct soap*, const char*, ns2__PTZConfiguration *, const char*);

#ifndef soap_write_ns2__PTZConfiguration
#define soap_write_ns2__PTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfiguration * SOAP_FMAC4 soap_get_ns2__PTZConfiguration(struct soap*, ns2__PTZConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__PTZConfiguration
#define soap_read_ns2__PTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZConfiguration * SOAP_FMAC2 soap_instantiate_ns2__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZConfiguration * soap_new_ns2__PTZConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__PTZConfiguration * soap_new_req_ns2__PTZConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& NodeToken) { ns2__PTZConfiguration *_p = soap_instantiate_ns2__PTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfiguration::Name = Name; _p->ns2__PTZConfiguration::UseCount = UseCount; _p->ns2__PTZConfiguration::token = token; _p->ns2__PTZConfiguration::NodeToken = NodeToken; } return _p; }

inline ns2__PTZConfiguration * soap_new_set_ns2__PTZConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& NodeToken, std::string *DefaultAbsolutePantTiltPositionSpace, std::string *DefaultAbsoluteZoomPositionSpace, std::string *DefaultRelativePanTiltTranslationSpace, std::string *DefaultRelativeZoomTranslationSpace, std::string *DefaultContinuousPanTiltVelocitySpace, std::string *DefaultContinuousZoomVelocitySpace, ns2__PTZSpeed *DefaultPTZSpeed, std::string *DefaultPTZTimeout, ns2__PanTiltLimits *PanTiltLimits, ns2__ZoomLimits *ZoomLimits, ns2__PTZConfigurationExtension *Extension, int *MoveRamp, int *PresetRamp, int *PresetTourRamp, char *__anyAttribute) { ns2__PTZConfiguration *_p = soap_instantiate_ns2__PTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZConfiguration::Name = Name; _p->ns2__PTZConfiguration::UseCount = UseCount; _p->ns2__PTZConfiguration::token = token; _p->ns2__PTZConfiguration::NodeToken = NodeToken; _p->ns2__PTZConfiguration::DefaultAbsolutePantTiltPositionSpace = DefaultAbsolutePantTiltPositionSpace; _p->ns2__PTZConfiguration::DefaultAbsoluteZoomPositionSpace = DefaultAbsoluteZoomPositionSpace; _p->ns2__PTZConfiguration::DefaultRelativePanTiltTranslationSpace = DefaultRelativePanTiltTranslationSpace; _p->ns2__PTZConfiguration::DefaultRelativeZoomTranslationSpace = DefaultRelativeZoomTranslationSpace; _p->ns2__PTZConfiguration::DefaultContinuousPanTiltVelocitySpace = DefaultContinuousPanTiltVelocitySpace; _p->ns2__PTZConfiguration::DefaultContinuousZoomVelocitySpace = DefaultContinuousZoomVelocitySpace; _p->ns2__PTZConfiguration::DefaultPTZSpeed = DefaultPTZSpeed; _p->ns2__PTZConfiguration::DefaultPTZTimeout = DefaultPTZTimeout; _p->ns2__PTZConfiguration::PanTiltLimits = PanTiltLimits; _p->ns2__PTZConfiguration::ZoomLimits = ZoomLimits; _p->ns2__PTZConfiguration::Extension = Extension; _p->ns2__PTZConfiguration::MoveRamp = MoveRamp; _p->ns2__PTZConfiguration::PresetRamp = PresetRamp; _p->ns2__PTZConfiguration::PresetTourRamp = PresetTourRamp; _p->ns2__PTZConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__PTZConfiguration(struct soap *soap, ns2__PTZConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourSupportedExtension
#define SOAP_TYPE_ns2__PTZPresetTourSupportedExtension (409)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourSupportedExtension(struct soap*, const char*, int, const ns2__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_in_ns2__PTZPresetTourSupportedExtension(struct soap*, const char*, ns2__PTZPresetTourSupportedExtension *, const char*);

#ifndef soap_write_ns2__PTZPresetTourSupportedExtension
#define soap_write_ns2__PTZPresetTourSupportedExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourSupportedExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_get_ns2__PTZPresetTourSupportedExtension(struct soap*, ns2__PTZPresetTourSupportedExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourSupportedExtension
#define soap_read_ns2__PTZPresetTourSupportedExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourSupportedExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourSupportedExtension * soap_new_ns2__PTZPresetTourSupportedExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourSupportedExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourSupportedExtension * soap_new_req_ns2__PTZPresetTourSupportedExtension(struct soap *soap) { ns2__PTZPresetTourSupportedExtension *_p = soap_instantiate_ns2__PTZPresetTourSupportedExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZPresetTourSupportedExtension * soap_new_set_ns2__PTZPresetTourSupportedExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZPresetTourSupportedExtension *_p = soap_instantiate_ns2__PTZPresetTourSupportedExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSupportedExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourSupportedExtension(struct soap *soap, ns2__PTZPresetTourSupportedExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourSupportedExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZPresetTourSupported
#define SOAP_TYPE_ns2__PTZPresetTourSupported (408)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZPresetTourSupported(struct soap*, const char*, int, const ns2__PTZPresetTourSupported *, const char*);
SOAP_FMAC3 ns2__PTZPresetTourSupported * SOAP_FMAC4 soap_in_ns2__PTZPresetTourSupported(struct soap*, const char*, ns2__PTZPresetTourSupported *, const char*);

#ifndef soap_write_ns2__PTZPresetTourSupported
#define soap_write_ns2__PTZPresetTourSupported(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZPresetTourSupported", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSupported * SOAP_FMAC4 soap_get_ns2__PTZPresetTourSupported(struct soap*, ns2__PTZPresetTourSupported *, const char*, const char*);

#ifndef soap_read_ns2__PTZPresetTourSupported
#define soap_read_ns2__PTZPresetTourSupported(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZPresetTourSupported(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_ns2__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZPresetTourSupported * soap_new_ns2__PTZPresetTourSupported(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZPresetTourSupported(soap, n, NULL, NULL, NULL); }

inline ns2__PTZPresetTourSupported * soap_new_req_ns2__PTZPresetTourSupported(struct soap *soap, int MaximumNumberOfPresetTours) { ns2__PTZPresetTourSupported *_p = soap_instantiate_ns2__PTZPresetTourSupported(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours; } return _p; }

inline ns2__PTZPresetTourSupported * soap_new_set_ns2__PTZPresetTourSupported(struct soap *soap, int MaximumNumberOfPresetTours, const std::vector<enum ns2__PTZPresetTourOperation >& PTZPresetTourOperation, ns2__PTZPresetTourSupportedExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZPresetTourSupported *_p = soap_instantiate_ns2__PTZPresetTourSupported(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours; _p->ns2__PTZPresetTourSupported::PTZPresetTourOperation = PTZPresetTourOperation; _p->ns2__PTZPresetTourSupported::Extension = Extension; _p->ns2__PTZPresetTourSupported::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZPresetTourSupported(struct soap *soap, ns2__PTZPresetTourSupported *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZPresetTourSupported(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZNodeExtension2
#define SOAP_TYPE_ns2__PTZNodeExtension2 (407)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZNodeExtension2(struct soap*, const char*, int, const ns2__PTZNodeExtension2 *, const char*);
SOAP_FMAC3 ns2__PTZNodeExtension2 * SOAP_FMAC4 soap_in_ns2__PTZNodeExtension2(struct soap*, const char*, ns2__PTZNodeExtension2 *, const char*);

#ifndef soap_write_ns2__PTZNodeExtension2
#define soap_write_ns2__PTZNodeExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZNodeExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZNodeExtension2 * SOAP_FMAC4 soap_get_ns2__PTZNodeExtension2(struct soap*, ns2__PTZNodeExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__PTZNodeExtension2
#define soap_read_ns2__PTZNodeExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZNodeExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_ns2__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZNodeExtension2 * soap_new_ns2__PTZNodeExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZNodeExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__PTZNodeExtension2 * soap_new_req_ns2__PTZNodeExtension2(struct soap *soap) { ns2__PTZNodeExtension2 *_p = soap_instantiate_ns2__PTZNodeExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZNodeExtension2 * soap_new_set_ns2__PTZNodeExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZNodeExtension2 *_p = soap_instantiate_ns2__PTZNodeExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZNodeExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZNodeExtension2(struct soap *soap, ns2__PTZNodeExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZNodeExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZNodeExtension
#define SOAP_TYPE_ns2__PTZNodeExtension (406)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZNodeExtension(struct soap*, const char*, int, const ns2__PTZNodeExtension *, const char*);
SOAP_FMAC3 ns2__PTZNodeExtension * SOAP_FMAC4 soap_in_ns2__PTZNodeExtension(struct soap*, const char*, ns2__PTZNodeExtension *, const char*);

#ifndef soap_write_ns2__PTZNodeExtension
#define soap_write_ns2__PTZNodeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZNodeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZNodeExtension * SOAP_FMAC4 soap_get_ns2__PTZNodeExtension(struct soap*, ns2__PTZNodeExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZNodeExtension
#define soap_read_ns2__PTZNodeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZNodeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZNodeExtension * soap_new_ns2__PTZNodeExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZNodeExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZNodeExtension * soap_new_req_ns2__PTZNodeExtension(struct soap *soap) { ns2__PTZNodeExtension *_p = soap_instantiate_ns2__PTZNodeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZNodeExtension * soap_new_set_ns2__PTZNodeExtension(struct soap *soap, const std::vector<char * >& __any, ns2__PTZPresetTourSupported *SupportedPresetTour, ns2__PTZNodeExtension2 *Extension, char *__item1) { ns2__PTZNodeExtension *_p = soap_instantiate_ns2__PTZNodeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZNodeExtension::__any = __any; _p->ns2__PTZNodeExtension::SupportedPresetTour = SupportedPresetTour; _p->ns2__PTZNodeExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZNodeExtension(struct soap *soap, ns2__PTZNodeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZNodeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZNode
#define SOAP_TYPE_ns2__PTZNode (405)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZNode(struct soap*, const char*, int, const ns2__PTZNode *, const char*);
SOAP_FMAC3 ns2__PTZNode * SOAP_FMAC4 soap_in_ns2__PTZNode(struct soap*, const char*, ns2__PTZNode *, const char*);

#ifndef soap_write_ns2__PTZNode
#define soap_write_ns2__PTZNode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZNode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZNode * SOAP_FMAC4 soap_get_ns2__PTZNode(struct soap*, ns2__PTZNode *, const char*, const char*);

#ifndef soap_read_ns2__PTZNode
#define soap_read_ns2__PTZNode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZNode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZNode * SOAP_FMAC2 soap_instantiate_ns2__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZNode * soap_new_ns2__PTZNode(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZNode(soap, n, NULL, NULL, NULL); }

inline ns2__PTZNode * soap_new_req_ns2__PTZNode(struct soap *soap, const std::string& token, ns2__PTZSpaces *SupportedPTZSpaces, int MaximumNumberOfPresets, bool HomeSupported) { ns2__PTZNode *_p = soap_instantiate_ns2__PTZNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZNode::token = token; _p->ns2__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces; _p->ns2__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets; _p->ns2__PTZNode::HomeSupported = HomeSupported; } return _p; }

inline ns2__PTZNode * soap_new_set_ns2__PTZNode(struct soap *soap, const std::string& token, std::string *Name, ns2__PTZSpaces *SupportedPTZSpaces, int MaximumNumberOfPresets, bool HomeSupported, const std::vector<std::string >& AuxiliaryCommands, ns2__PTZNodeExtension *Extension, bool *FixedHomePosition, char *__anyAttribute) { ns2__PTZNode *_p = soap_instantiate_ns2__PTZNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZNode::token = token; _p->ns2__PTZNode::Name = Name; _p->ns2__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces; _p->ns2__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets; _p->ns2__PTZNode::HomeSupported = HomeSupported; _p->ns2__PTZNode::AuxiliaryCommands = AuxiliaryCommands; _p->ns2__PTZNode::Extension = Extension; _p->ns2__PTZNode::FixedHomePosition = FixedHomePosition; _p->ns2__PTZNode::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__PTZNode(struct soap *soap, ns2__PTZNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DigitalInput
#define SOAP_TYPE_ns2__DigitalInput (404)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DigitalInput(struct soap*, const char*, int, const ns2__DigitalInput *, const char*);
SOAP_FMAC3 ns2__DigitalInput * SOAP_FMAC4 soap_in_ns2__DigitalInput(struct soap*, const char*, ns2__DigitalInput *, const char*);

#ifndef soap_write_ns2__DigitalInput
#define soap_write_ns2__DigitalInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DigitalInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DigitalInput * SOAP_FMAC4 soap_get_ns2__DigitalInput(struct soap*, ns2__DigitalInput *, const char*, const char*);

#ifndef soap_read_ns2__DigitalInput
#define soap_read_ns2__DigitalInput(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DigitalInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DigitalInput * SOAP_FMAC2 soap_instantiate_ns2__DigitalInput(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DigitalInput * soap_new_ns2__DigitalInput(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DigitalInput(soap, n, NULL, NULL, NULL); }

inline ns2__DigitalInput * soap_new_req_ns2__DigitalInput(struct soap *soap, const std::string& token) { ns2__DigitalInput *_p = soap_instantiate_ns2__DigitalInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DigitalInput::token = token; } return _p; }

inline ns2__DigitalInput * soap_new_set_ns2__DigitalInput(struct soap *soap, const std::string& token, const std::vector<char * >& __any, char *__anyAttribute) { ns2__DigitalInput *_p = soap_instantiate_ns2__DigitalInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DigitalInput::token = token; _p->ns2__DigitalInput::__any = __any; _p->ns2__DigitalInput::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__DigitalInput(struct soap *soap, ns2__DigitalInput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DigitalInput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelayOutput
#define SOAP_TYPE_ns2__RelayOutput (403)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayOutput(struct soap*, const char*, int, const ns2__RelayOutput *, const char*);
SOAP_FMAC3 ns2__RelayOutput * SOAP_FMAC4 soap_in_ns2__RelayOutput(struct soap*, const char*, ns2__RelayOutput *, const char*);

#ifndef soap_write_ns2__RelayOutput
#define soap_write_ns2__RelayOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelayOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelayOutput * SOAP_FMAC4 soap_get_ns2__RelayOutput(struct soap*, ns2__RelayOutput *, const char*, const char*);

#ifndef soap_read_ns2__RelayOutput
#define soap_read_ns2__RelayOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelayOutput * SOAP_FMAC2 soap_instantiate_ns2__RelayOutput(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelayOutput * soap_new_ns2__RelayOutput(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelayOutput(soap, n, NULL, NULL, NULL); }

inline ns2__RelayOutput * soap_new_req_ns2__RelayOutput(struct soap *soap, const std::string& token, ns2__RelayOutputSettings *Properties) { ns2__RelayOutput *_p = soap_instantiate_ns2__RelayOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayOutput::token = token; _p->ns2__RelayOutput::Properties = Properties; } return _p; }

inline ns2__RelayOutput * soap_new_set_ns2__RelayOutput(struct soap *soap, const std::string& token, ns2__RelayOutputSettings *Properties, const std::vector<char * >& __any, char *__anyAttribute) { ns2__RelayOutput *_p = soap_instantiate_ns2__RelayOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayOutput::token = token; _p->ns2__RelayOutput::Properties = Properties; _p->ns2__RelayOutput::__any = __any; _p->ns2__RelayOutput::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__RelayOutput(struct soap *soap, ns2__RelayOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelayOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RelayOutputSettings
#define SOAP_TYPE_ns2__RelayOutputSettings (402)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RelayOutputSettings(struct soap*, const char*, int, const ns2__RelayOutputSettings *, const char*);
SOAP_FMAC3 ns2__RelayOutputSettings * SOAP_FMAC4 soap_in_ns2__RelayOutputSettings(struct soap*, const char*, ns2__RelayOutputSettings *, const char*);

#ifndef soap_write_ns2__RelayOutputSettings
#define soap_write_ns2__RelayOutputSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RelayOutputSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelayOutputSettings * SOAP_FMAC4 soap_get_ns2__RelayOutputSettings(struct soap*, ns2__RelayOutputSettings *, const char*, const char*);

#ifndef soap_read_ns2__RelayOutputSettings
#define soap_read_ns2__RelayOutputSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RelayOutputSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_ns2__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RelayOutputSettings * soap_new_ns2__RelayOutputSettings(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RelayOutputSettings(soap, n, NULL, NULL, NULL); }

inline ns2__RelayOutputSettings * soap_new_req_ns2__RelayOutputSettings(struct soap *soap, enum ns2__RelayMode Mode, const std::string& DelayTime, enum ns2__RelayIdleState IdleState) { ns2__RelayOutputSettings *_p = soap_instantiate_ns2__RelayOutputSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayOutputSettings::Mode = Mode; _p->ns2__RelayOutputSettings::DelayTime = DelayTime; _p->ns2__RelayOutputSettings::IdleState = IdleState; } return _p; }

inline ns2__RelayOutputSettings * soap_new_set_ns2__RelayOutputSettings(struct soap *soap, enum ns2__RelayMode Mode, const std::string& DelayTime, enum ns2__RelayIdleState IdleState, char *__item1) { ns2__RelayOutputSettings *_p = soap_instantiate_ns2__RelayOutputSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RelayOutputSettings::Mode = Mode; _p->ns2__RelayOutputSettings::DelayTime = DelayTime; _p->ns2__RelayOutputSettings::IdleState = IdleState; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RelayOutputSettings(struct soap *soap, ns2__RelayOutputSettings *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RelayOutputSettings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_ns2__GenericEapPwdConfigurationExtension (401)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__GenericEapPwdConfigurationExtension(struct soap*, const char*, int, const ns2__GenericEapPwdConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__GenericEapPwdConfigurationExtension * SOAP_FMAC4 soap_in_ns2__GenericEapPwdConfigurationExtension(struct soap*, const char*, ns2__GenericEapPwdConfigurationExtension *, const char*);

#ifndef soap_write_ns2__GenericEapPwdConfigurationExtension
#define soap_write_ns2__GenericEapPwdConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:GenericEapPwdConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GenericEapPwdConfigurationExtension * SOAP_FMAC4 soap_get_ns2__GenericEapPwdConfigurationExtension(struct soap*, ns2__GenericEapPwdConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__GenericEapPwdConfigurationExtension
#define soap_read_ns2__GenericEapPwdConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__GenericEapPwdConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__GenericEapPwdConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__GenericEapPwdConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__GenericEapPwdConfigurationExtension * soap_new_ns2__GenericEapPwdConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__GenericEapPwdConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__GenericEapPwdConfigurationExtension * soap_new_req_ns2__GenericEapPwdConfigurationExtension(struct soap *soap) { ns2__GenericEapPwdConfigurationExtension *_p = soap_instantiate_ns2__GenericEapPwdConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__GenericEapPwdConfigurationExtension * soap_new_set_ns2__GenericEapPwdConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__GenericEapPwdConfigurationExtension *_p = soap_instantiate_ns2__GenericEapPwdConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__GenericEapPwdConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__GenericEapPwdConfigurationExtension(struct soap *soap, ns2__GenericEapPwdConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__GenericEapPwdConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TLSConfiguration
#define SOAP_TYPE_ns2__TLSConfiguration (400)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TLSConfiguration(struct soap*, const char*, int, const ns2__TLSConfiguration *, const char*);
SOAP_FMAC3 ns2__TLSConfiguration * SOAP_FMAC4 soap_in_ns2__TLSConfiguration(struct soap*, const char*, ns2__TLSConfiguration *, const char*);

#ifndef soap_write_ns2__TLSConfiguration
#define soap_write_ns2__TLSConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TLSConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TLSConfiguration * SOAP_FMAC4 soap_get_ns2__TLSConfiguration(struct soap*, ns2__TLSConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__TLSConfiguration
#define soap_read_ns2__TLSConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TLSConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TLSConfiguration * SOAP_FMAC2 soap_instantiate_ns2__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TLSConfiguration * soap_new_ns2__TLSConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TLSConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__TLSConfiguration * soap_new_req_ns2__TLSConfiguration(struct soap *soap, const std::string& CertificateID) { ns2__TLSConfiguration *_p = soap_instantiate_ns2__TLSConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TLSConfiguration::CertificateID = CertificateID; } return _p; }

inline ns2__TLSConfiguration * soap_new_set_ns2__TLSConfiguration(struct soap *soap, const std::string& CertificateID, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__TLSConfiguration *_p = soap_instantiate_ns2__TLSConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TLSConfiguration::CertificateID = CertificateID; _p->ns2__TLSConfiguration::__any = __any; _p->ns2__TLSConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TLSConfiguration(struct soap *soap, ns2__TLSConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TLSConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EapMethodExtension
#define SOAP_TYPE_ns2__EapMethodExtension (399)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EapMethodExtension(struct soap*, const char*, int, const ns2__EapMethodExtension *, const char*);
SOAP_FMAC3 ns2__EapMethodExtension * SOAP_FMAC4 soap_in_ns2__EapMethodExtension(struct soap*, const char*, ns2__EapMethodExtension *, const char*);

#ifndef soap_write_ns2__EapMethodExtension
#define soap_write_ns2__EapMethodExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EapMethodExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EapMethodExtension * SOAP_FMAC4 soap_get_ns2__EapMethodExtension(struct soap*, ns2__EapMethodExtension *, const char*, const char*);

#ifndef soap_read_ns2__EapMethodExtension
#define soap_read_ns2__EapMethodExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EapMethodExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EapMethodExtension * SOAP_FMAC2 soap_instantiate_ns2__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EapMethodExtension * soap_new_ns2__EapMethodExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EapMethodExtension(soap, n, NULL, NULL, NULL); }

inline ns2__EapMethodExtension * soap_new_req_ns2__EapMethodExtension(struct soap *soap) { ns2__EapMethodExtension *_p = soap_instantiate_ns2__EapMethodExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EapMethodExtension * soap_new_set_ns2__EapMethodExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__EapMethodExtension *_p = soap_instantiate_ns2__EapMethodExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EapMethodExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EapMethodExtension(struct soap *soap, ns2__EapMethodExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EapMethodExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EAPMethodConfiguration
#define SOAP_TYPE_ns2__EAPMethodConfiguration (398)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EAPMethodConfiguration(struct soap*, const char*, int, const ns2__EAPMethodConfiguration *, const char*);
SOAP_FMAC3 ns2__EAPMethodConfiguration * SOAP_FMAC4 soap_in_ns2__EAPMethodConfiguration(struct soap*, const char*, ns2__EAPMethodConfiguration *, const char*);

#ifndef soap_write_ns2__EAPMethodConfiguration
#define soap_write_ns2__EAPMethodConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EAPMethodConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EAPMethodConfiguration * SOAP_FMAC4 soap_get_ns2__EAPMethodConfiguration(struct soap*, ns2__EAPMethodConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__EAPMethodConfiguration
#define soap_read_ns2__EAPMethodConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EAPMethodConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_ns2__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EAPMethodConfiguration * soap_new_ns2__EAPMethodConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EAPMethodConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__EAPMethodConfiguration * soap_new_req_ns2__EAPMethodConfiguration(struct soap *soap) { ns2__EAPMethodConfiguration *_p = soap_instantiate_ns2__EAPMethodConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EAPMethodConfiguration * soap_new_set_ns2__EAPMethodConfiguration(struct soap *soap, ns2__TLSConfiguration *TLSConfiguration, std::string *Password, ns2__EapMethodExtension *Extension, char *__anyAttribute, char *__item1) { ns2__EAPMethodConfiguration *_p = soap_instantiate_ns2__EAPMethodConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EAPMethodConfiguration::TLSConfiguration = TLSConfiguration; _p->ns2__EAPMethodConfiguration::Password = Password; _p->ns2__EAPMethodConfiguration::Extension = Extension; _p->ns2__EAPMethodConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EAPMethodConfiguration(struct soap *soap, ns2__EAPMethodConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EAPMethodConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot1XConfigurationExtension
#define SOAP_TYPE_ns2__Dot1XConfigurationExtension (397)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot1XConfigurationExtension(struct soap*, const char*, int, const ns2__Dot1XConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__Dot1XConfigurationExtension * SOAP_FMAC4 soap_in_ns2__Dot1XConfigurationExtension(struct soap*, const char*, ns2__Dot1XConfigurationExtension *, const char*);

#ifndef soap_write_ns2__Dot1XConfigurationExtension
#define soap_write_ns2__Dot1XConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot1XConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot1XConfigurationExtension * SOAP_FMAC4 soap_get_ns2__Dot1XConfigurationExtension(struct soap*, ns2__Dot1XConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__Dot1XConfigurationExtension
#define soap_read_ns2__Dot1XConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot1XConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot1XConfigurationExtension * soap_new_ns2__Dot1XConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot1XConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__Dot1XConfigurationExtension * soap_new_req_ns2__Dot1XConfigurationExtension(struct soap *soap) { ns2__Dot1XConfigurationExtension *_p = soap_instantiate_ns2__Dot1XConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Dot1XConfigurationExtension * soap_new_set_ns2__Dot1XConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__Dot1XConfigurationExtension *_p = soap_instantiate_ns2__Dot1XConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot1XConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot1XConfigurationExtension(struct soap *soap, ns2__Dot1XConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot1XConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot1XConfiguration
#define SOAP_TYPE_ns2__Dot1XConfiguration (396)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot1XConfiguration(struct soap*, const char*, int, const ns2__Dot1XConfiguration *, const char*);
SOAP_FMAC3 ns2__Dot1XConfiguration * SOAP_FMAC4 soap_in_ns2__Dot1XConfiguration(struct soap*, const char*, ns2__Dot1XConfiguration *, const char*);

#ifndef soap_write_ns2__Dot1XConfiguration
#define soap_write_ns2__Dot1XConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot1XConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot1XConfiguration * SOAP_FMAC4 soap_get_ns2__Dot1XConfiguration(struct soap*, ns2__Dot1XConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__Dot1XConfiguration
#define soap_read_ns2__Dot1XConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot1XConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_ns2__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot1XConfiguration * soap_new_ns2__Dot1XConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot1XConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__Dot1XConfiguration * soap_new_req_ns2__Dot1XConfiguration(struct soap *soap, const std::string& Dot1XConfigurationToken, const std::string& Identity, int EAPMethod) { ns2__Dot1XConfiguration *_p = soap_instantiate_ns2__Dot1XConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken; _p->ns2__Dot1XConfiguration::Identity = Identity; _p->ns2__Dot1XConfiguration::EAPMethod = EAPMethod; } return _p; }

inline ns2__Dot1XConfiguration * soap_new_set_ns2__Dot1XConfiguration(struct soap *soap, const std::string& Dot1XConfigurationToken, const std::string& Identity, std::string *AnonymousID, int EAPMethod, const std::vector<std::string >& CACertificateID, ns2__EAPMethodConfiguration *EAPMethodConfiguration, ns2__Dot1XConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Dot1XConfiguration *_p = soap_instantiate_ns2__Dot1XConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken; _p->ns2__Dot1XConfiguration::Identity = Identity; _p->ns2__Dot1XConfiguration::AnonymousID = AnonymousID; _p->ns2__Dot1XConfiguration::EAPMethod = EAPMethod; _p->ns2__Dot1XConfiguration::CACertificateID = CACertificateID; _p->ns2__Dot1XConfiguration::EAPMethodConfiguration = EAPMethodConfiguration; _p->ns2__Dot1XConfiguration::Extension = Extension; _p->ns2__Dot1XConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot1XConfiguration(struct soap *soap, ns2__Dot1XConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot1XConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateInformationExtension
#define SOAP_TYPE_ns2__CertificateInformationExtension (395)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateInformationExtension(struct soap*, const char*, int, const ns2__CertificateInformationExtension *, const char*);
SOAP_FMAC3 ns2__CertificateInformationExtension * SOAP_FMAC4 soap_in_ns2__CertificateInformationExtension(struct soap*, const char*, ns2__CertificateInformationExtension *, const char*);

#ifndef soap_write_ns2__CertificateInformationExtension
#define soap_write_ns2__CertificateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateInformationExtension * SOAP_FMAC4 soap_get_ns2__CertificateInformationExtension(struct soap*, ns2__CertificateInformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__CertificateInformationExtension
#define soap_read_ns2__CertificateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_ns2__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateInformationExtension * soap_new_ns2__CertificateInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateInformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateInformationExtension * soap_new_req_ns2__CertificateInformationExtension(struct soap *soap) { ns2__CertificateInformationExtension *_p = soap_instantiate_ns2__CertificateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CertificateInformationExtension * soap_new_set_ns2__CertificateInformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__CertificateInformationExtension *_p = soap_instantiate_ns2__CertificateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateInformationExtension(struct soap *soap, ns2__CertificateInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateUsage
#define SOAP_TYPE_ns2__CertificateUsage (394)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateUsage(struct soap*, const char*, int, const ns2__CertificateUsage *, const char*);
SOAP_FMAC3 ns2__CertificateUsage * SOAP_FMAC4 soap_in_ns2__CertificateUsage(struct soap*, const char*, ns2__CertificateUsage *, const char*);

#ifndef soap_write_ns2__CertificateUsage
#define soap_write_ns2__CertificateUsage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateUsage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateUsage * SOAP_FMAC4 soap_get_ns2__CertificateUsage(struct soap*, ns2__CertificateUsage *, const char*, const char*);

#ifndef soap_read_ns2__CertificateUsage
#define soap_read_ns2__CertificateUsage(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateUsage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateUsage * SOAP_FMAC2 soap_instantiate_ns2__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateUsage * soap_new_ns2__CertificateUsage(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateUsage(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateUsage * soap_new_req_ns2__CertificateUsage(struct soap *soap, const std::string& __item, bool Critical) { ns2__CertificateUsage *_p = soap_instantiate_ns2__CertificateUsage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateUsage::__item = __item; _p->ns2__CertificateUsage::Critical = Critical; } return _p; }

inline ns2__CertificateUsage * soap_new_set_ns2__CertificateUsage(struct soap *soap, const std::string& __item, bool Critical, char *__item1) { ns2__CertificateUsage *_p = soap_instantiate_ns2__CertificateUsage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateUsage::__item = __item; _p->ns2__CertificateUsage::Critical = Critical; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateUsage(struct soap *soap, ns2__CertificateUsage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateUsage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateInformation
#define SOAP_TYPE_ns2__CertificateInformation (393)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateInformation(struct soap*, const char*, int, const ns2__CertificateInformation *, const char*);
SOAP_FMAC3 ns2__CertificateInformation * SOAP_FMAC4 soap_in_ns2__CertificateInformation(struct soap*, const char*, ns2__CertificateInformation *, const char*);

#ifndef soap_write_ns2__CertificateInformation
#define soap_write_ns2__CertificateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateInformation * SOAP_FMAC4 soap_get_ns2__CertificateInformation(struct soap*, ns2__CertificateInformation *, const char*, const char*);

#ifndef soap_read_ns2__CertificateInformation
#define soap_read_ns2__CertificateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateInformation * SOAP_FMAC2 soap_instantiate_ns2__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateInformation * soap_new_ns2__CertificateInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateInformation(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateInformation * soap_new_req_ns2__CertificateInformation(struct soap *soap, const std::string& CertificateID) { ns2__CertificateInformation *_p = soap_instantiate_ns2__CertificateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateInformation::CertificateID = CertificateID; } return _p; }

inline ns2__CertificateInformation * soap_new_set_ns2__CertificateInformation(struct soap *soap, const std::string& CertificateID, std::string *IssuerDN, std::string *SubjectDN, ns2__CertificateUsage *KeyUsage, ns2__CertificateUsage *ExtendedKeyUsage, int *KeyLength, std::string *Version, std::string *SerialNum, std::string *SignatureAlgorithm, ns2__DateTimeRange *Validity, ns2__CertificateInformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__CertificateInformation *_p = soap_instantiate_ns2__CertificateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateInformation::CertificateID = CertificateID; _p->ns2__CertificateInformation::IssuerDN = IssuerDN; _p->ns2__CertificateInformation::SubjectDN = SubjectDN; _p->ns2__CertificateInformation::KeyUsage = KeyUsage; _p->ns2__CertificateInformation::ExtendedKeyUsage = ExtendedKeyUsage; _p->ns2__CertificateInformation::KeyLength = KeyLength; _p->ns2__CertificateInformation::Version = Version; _p->ns2__CertificateInformation::SerialNum = SerialNum; _p->ns2__CertificateInformation::SignatureAlgorithm = SignatureAlgorithm; _p->ns2__CertificateInformation::Validity = Validity; _p->ns2__CertificateInformation::Extension = Extension; _p->ns2__CertificateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateInformation(struct soap *soap, ns2__CertificateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateWithPrivateKey
#define SOAP_TYPE_ns2__CertificateWithPrivateKey (392)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateWithPrivateKey(struct soap*, const char*, int, const ns2__CertificateWithPrivateKey *, const char*);
SOAP_FMAC3 ns2__CertificateWithPrivateKey * SOAP_FMAC4 soap_in_ns2__CertificateWithPrivateKey(struct soap*, const char*, ns2__CertificateWithPrivateKey *, const char*);

#ifndef soap_write_ns2__CertificateWithPrivateKey
#define soap_write_ns2__CertificateWithPrivateKey(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateWithPrivateKey", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateWithPrivateKey * SOAP_FMAC4 soap_get_ns2__CertificateWithPrivateKey(struct soap*, ns2__CertificateWithPrivateKey *, const char*, const char*);

#ifndef soap_read_ns2__CertificateWithPrivateKey
#define soap_read_ns2__CertificateWithPrivateKey(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateWithPrivateKey(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_ns2__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateWithPrivateKey * soap_new_ns2__CertificateWithPrivateKey(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateWithPrivateKey(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateWithPrivateKey * soap_new_req_ns2__CertificateWithPrivateKey(struct soap *soap, ns2__BinaryData *Certificate, ns2__BinaryData *PrivateKey) { ns2__CertificateWithPrivateKey *_p = soap_instantiate_ns2__CertificateWithPrivateKey(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateWithPrivateKey::Certificate = Certificate; _p->ns2__CertificateWithPrivateKey::PrivateKey = PrivateKey; } return _p; }

inline ns2__CertificateWithPrivateKey * soap_new_set_ns2__CertificateWithPrivateKey(struct soap *soap, std::string *CertificateID, ns2__BinaryData *Certificate, ns2__BinaryData *PrivateKey, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__CertificateWithPrivateKey *_p = soap_instantiate_ns2__CertificateWithPrivateKey(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateWithPrivateKey::CertificateID = CertificateID; _p->ns2__CertificateWithPrivateKey::Certificate = Certificate; _p->ns2__CertificateWithPrivateKey::PrivateKey = PrivateKey; _p->ns2__CertificateWithPrivateKey::__any = __any; _p->ns2__CertificateWithPrivateKey::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateWithPrivateKey(struct soap *soap, ns2__CertificateWithPrivateKey *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateWithPrivateKey(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateStatus
#define SOAP_TYPE_ns2__CertificateStatus (391)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateStatus(struct soap*, const char*, int, const ns2__CertificateStatus *, const char*);
SOAP_FMAC3 ns2__CertificateStatus * SOAP_FMAC4 soap_in_ns2__CertificateStatus(struct soap*, const char*, ns2__CertificateStatus *, const char*);

#ifndef soap_write_ns2__CertificateStatus
#define soap_write_ns2__CertificateStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateStatus * SOAP_FMAC4 soap_get_ns2__CertificateStatus(struct soap*, ns2__CertificateStatus *, const char*, const char*);

#ifndef soap_read_ns2__CertificateStatus
#define soap_read_ns2__CertificateStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateStatus * SOAP_FMAC2 soap_instantiate_ns2__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateStatus * soap_new_ns2__CertificateStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateStatus(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateStatus * soap_new_req_ns2__CertificateStatus(struct soap *soap, const std::string& CertificateID, bool Status) { ns2__CertificateStatus *_p = soap_instantiate_ns2__CertificateStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateStatus::CertificateID = CertificateID; _p->ns2__CertificateStatus::Status = Status; } return _p; }

inline ns2__CertificateStatus * soap_new_set_ns2__CertificateStatus(struct soap *soap, const std::string& CertificateID, bool Status, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__CertificateStatus *_p = soap_instantiate_ns2__CertificateStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateStatus::CertificateID = CertificateID; _p->ns2__CertificateStatus::Status = Status; _p->ns2__CertificateStatus::__any = __any; _p->ns2__CertificateStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateStatus(struct soap *soap, ns2__CertificateStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Certificate
#define SOAP_TYPE_ns2__Certificate (390)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Certificate(struct soap*, const char*, int, const ns2__Certificate *, const char*);
SOAP_FMAC3 ns2__Certificate * SOAP_FMAC4 soap_in_ns2__Certificate(struct soap*, const char*, ns2__Certificate *, const char*);

#ifndef soap_write_ns2__Certificate
#define soap_write_ns2__Certificate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Certificate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Certificate * SOAP_FMAC4 soap_get_ns2__Certificate(struct soap*, ns2__Certificate *, const char*, const char*);

#ifndef soap_read_ns2__Certificate
#define soap_read_ns2__Certificate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Certificate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Certificate * SOAP_FMAC2 soap_instantiate_ns2__Certificate(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Certificate * soap_new_ns2__Certificate(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Certificate(soap, n, NULL, NULL, NULL); }

inline ns2__Certificate * soap_new_req_ns2__Certificate(struct soap *soap, const std::string& CertificateID, ns2__BinaryData *Certificate) { ns2__Certificate *_p = soap_instantiate_ns2__Certificate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Certificate::CertificateID = CertificateID; _p->ns2__Certificate::Certificate = Certificate; } return _p; }

inline ns2__Certificate * soap_new_set_ns2__Certificate(struct soap *soap, const std::string& CertificateID, ns2__BinaryData *Certificate, char *__item1) { ns2__Certificate *_p = soap_instantiate_ns2__Certificate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Certificate::CertificateID = CertificateID; _p->ns2__Certificate::Certificate = Certificate; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Certificate(struct soap *soap, ns2__Certificate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Certificate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateGenerationParametersExtension
#define SOAP_TYPE_ns2__CertificateGenerationParametersExtension (389)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateGenerationParametersExtension(struct soap*, const char*, int, const ns2__CertificateGenerationParametersExtension *, const char*);
SOAP_FMAC3 ns2__CertificateGenerationParametersExtension * SOAP_FMAC4 soap_in_ns2__CertificateGenerationParametersExtension(struct soap*, const char*, ns2__CertificateGenerationParametersExtension *, const char*);

#ifndef soap_write_ns2__CertificateGenerationParametersExtension
#define soap_write_ns2__CertificateGenerationParametersExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateGenerationParametersExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateGenerationParametersExtension * SOAP_FMAC4 soap_get_ns2__CertificateGenerationParametersExtension(struct soap*, ns2__CertificateGenerationParametersExtension *, const char*, const char*);

#ifndef soap_read_ns2__CertificateGenerationParametersExtension
#define soap_read_ns2__CertificateGenerationParametersExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateGenerationParametersExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateGenerationParametersExtension * SOAP_FMAC2 soap_instantiate_ns2__CertificateGenerationParametersExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateGenerationParametersExtension * soap_new_ns2__CertificateGenerationParametersExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateGenerationParametersExtension(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateGenerationParametersExtension * soap_new_req_ns2__CertificateGenerationParametersExtension(struct soap *soap) { ns2__CertificateGenerationParametersExtension *_p = soap_instantiate_ns2__CertificateGenerationParametersExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CertificateGenerationParametersExtension * soap_new_set_ns2__CertificateGenerationParametersExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__CertificateGenerationParametersExtension *_p = soap_instantiate_ns2__CertificateGenerationParametersExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateGenerationParametersExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateGenerationParametersExtension(struct soap *soap, ns2__CertificateGenerationParametersExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateGenerationParametersExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CertificateGenerationParameters
#define SOAP_TYPE_ns2__CertificateGenerationParameters (388)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CertificateGenerationParameters(struct soap*, const char*, int, const ns2__CertificateGenerationParameters *, const char*);
SOAP_FMAC3 ns2__CertificateGenerationParameters * SOAP_FMAC4 soap_in_ns2__CertificateGenerationParameters(struct soap*, const char*, ns2__CertificateGenerationParameters *, const char*);

#ifndef soap_write_ns2__CertificateGenerationParameters
#define soap_write_ns2__CertificateGenerationParameters(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CertificateGenerationParameters", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateGenerationParameters * SOAP_FMAC4 soap_get_ns2__CertificateGenerationParameters(struct soap*, ns2__CertificateGenerationParameters *, const char*, const char*);

#ifndef soap_read_ns2__CertificateGenerationParameters
#define soap_read_ns2__CertificateGenerationParameters(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CertificateGenerationParameters(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CertificateGenerationParameters * SOAP_FMAC2 soap_instantiate_ns2__CertificateGenerationParameters(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CertificateGenerationParameters * soap_new_ns2__CertificateGenerationParameters(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CertificateGenerationParameters(soap, n, NULL, NULL, NULL); }

inline ns2__CertificateGenerationParameters * soap_new_req_ns2__CertificateGenerationParameters(struct soap *soap) { ns2__CertificateGenerationParameters *_p = soap_instantiate_ns2__CertificateGenerationParameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CertificateGenerationParameters * soap_new_set_ns2__CertificateGenerationParameters(struct soap *soap, std::string *CertificateID, std::string *Subject, std::string *ValidNotBefore, std::string *ValidNotAfter, ns2__CertificateGenerationParametersExtension *Extension, char *__anyAttribute, char *__item1) { ns2__CertificateGenerationParameters *_p = soap_instantiate_ns2__CertificateGenerationParameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CertificateGenerationParameters::CertificateID = CertificateID; _p->ns2__CertificateGenerationParameters::Subject = Subject; _p->ns2__CertificateGenerationParameters::ValidNotBefore = ValidNotBefore; _p->ns2__CertificateGenerationParameters::ValidNotAfter = ValidNotAfter; _p->ns2__CertificateGenerationParameters::Extension = Extension; _p->ns2__CertificateGenerationParameters::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CertificateGenerationParameters(struct soap *soap, ns2__CertificateGenerationParameters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CertificateGenerationParameters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__UserExtension
#define SOAP_TYPE_ns2__UserExtension (387)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UserExtension(struct soap*, const char*, int, const ns2__UserExtension *, const char*);
SOAP_FMAC3 ns2__UserExtension * SOAP_FMAC4 soap_in_ns2__UserExtension(struct soap*, const char*, ns2__UserExtension *, const char*);

#ifndef soap_write_ns2__UserExtension
#define soap_write_ns2__UserExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:UserExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__UserExtension * SOAP_FMAC4 soap_get_ns2__UserExtension(struct soap*, ns2__UserExtension *, const char*, const char*);

#ifndef soap_read_ns2__UserExtension
#define soap_read_ns2__UserExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__UserExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__UserExtension * SOAP_FMAC2 soap_instantiate_ns2__UserExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UserExtension * soap_new_ns2__UserExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__UserExtension(soap, n, NULL, NULL, NULL); }

inline ns2__UserExtension * soap_new_req_ns2__UserExtension(struct soap *soap) { ns2__UserExtension *_p = soap_instantiate_ns2__UserExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__UserExtension * soap_new_set_ns2__UserExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__UserExtension *_p = soap_instantiate_ns2__UserExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__UserExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__UserExtension(struct soap *soap, ns2__UserExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__UserExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__User
#define SOAP_TYPE_ns2__User (386)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__User(struct soap*, const char*, int, const ns2__User *, const char*);
SOAP_FMAC3 ns2__User * SOAP_FMAC4 soap_in_ns2__User(struct soap*, const char*, ns2__User *, const char*);

#ifndef soap_write_ns2__User
#define soap_write_ns2__User(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:User", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__User * SOAP_FMAC4 soap_get_ns2__User(struct soap*, ns2__User *, const char*, const char*);

#ifndef soap_read_ns2__User
#define soap_read_ns2__User(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__User(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__User * SOAP_FMAC2 soap_instantiate_ns2__User(struct soap*, int, const char*, const char*, size_t*);

inline ns2__User * soap_new_ns2__User(struct soap *soap, int n = -1) { return soap_instantiate_ns2__User(soap, n, NULL, NULL, NULL); }

inline ns2__User * soap_new_req_ns2__User(struct soap *soap, const std::string& Username, enum ns2__UserLevel UserLevel) { ns2__User *_p = soap_instantiate_ns2__User(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__User::Username = Username; _p->ns2__User::UserLevel = UserLevel; } return _p; }

inline ns2__User * soap_new_set_ns2__User(struct soap *soap, const std::string& Username, std::string *Password, enum ns2__UserLevel UserLevel, ns2__UserExtension *Extension, char *__anyAttribute, char *__item1) { ns2__User *_p = soap_instantiate_ns2__User(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__User::Username = Username; _p->ns2__User::Password = Password; _p->ns2__User::UserLevel = UserLevel; _p->ns2__User::Extension = Extension; _p->ns2__User::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__User(struct soap *soap, ns2__User *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__User(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RemoteUser
#define SOAP_TYPE_ns2__RemoteUser (385)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemoteUser(struct soap*, const char*, int, const ns2__RemoteUser *, const char*);
SOAP_FMAC3 ns2__RemoteUser * SOAP_FMAC4 soap_in_ns2__RemoteUser(struct soap*, const char*, ns2__RemoteUser *, const char*);

#ifndef soap_write_ns2__RemoteUser
#define soap_write_ns2__RemoteUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RemoteUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RemoteUser * SOAP_FMAC4 soap_get_ns2__RemoteUser(struct soap*, ns2__RemoteUser *, const char*, const char*);

#ifndef soap_read_ns2__RemoteUser
#define soap_read_ns2__RemoteUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RemoteUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RemoteUser * SOAP_FMAC2 soap_instantiate_ns2__RemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RemoteUser * soap_new_ns2__RemoteUser(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RemoteUser(soap, n, NULL, NULL, NULL); }

inline ns2__RemoteUser * soap_new_req_ns2__RemoteUser(struct soap *soap, const std::string& Username, bool UseDerivedPassword) { ns2__RemoteUser *_p = soap_instantiate_ns2__RemoteUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RemoteUser::Username = Username; _p->ns2__RemoteUser::UseDerivedPassword = UseDerivedPassword; } return _p; }

inline ns2__RemoteUser * soap_new_set_ns2__RemoteUser(struct soap *soap, const std::string& Username, std::string *Password, bool UseDerivedPassword, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RemoteUser *_p = soap_instantiate_ns2__RemoteUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RemoteUser::Username = Username; _p->ns2__RemoteUser::Password = Password; _p->ns2__RemoteUser::UseDerivedPassword = UseDerivedPassword; _p->ns2__RemoteUser::__any = __any; _p->ns2__RemoteUser::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RemoteUser(struct soap *soap, ns2__RemoteUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemoteUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TimeZone
#define SOAP_TYPE_ns2__TimeZone (384)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TimeZone(struct soap*, const char*, int, const ns2__TimeZone *, const char*);
SOAP_FMAC3 ns2__TimeZone * SOAP_FMAC4 soap_in_ns2__TimeZone(struct soap*, const char*, ns2__TimeZone *, const char*);

#ifndef soap_write_ns2__TimeZone
#define soap_write_ns2__TimeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:TimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TimeZone * SOAP_FMAC4 soap_get_ns2__TimeZone(struct soap*, ns2__TimeZone *, const char*, const char*);

#ifndef soap_read_ns2__TimeZone
#define soap_read_ns2__TimeZone(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TimeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__TimeZone * SOAP_FMAC2 soap_instantiate_ns2__TimeZone(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TimeZone * soap_new_ns2__TimeZone(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TimeZone(soap, n, NULL, NULL, NULL); }

inline ns2__TimeZone * soap_new_req_ns2__TimeZone(struct soap *soap, const std::string& TZ) { ns2__TimeZone *_p = soap_instantiate_ns2__TimeZone(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TimeZone::TZ = TZ; } return _p; }

inline ns2__TimeZone * soap_new_set_ns2__TimeZone(struct soap *soap, const std::string& TZ, char *__item1) { ns2__TimeZone *_p = soap_instantiate_ns2__TimeZone(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TimeZone::TZ = TZ; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__TimeZone(struct soap *soap, ns2__TimeZone *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TimeZone(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Time
#define SOAP_TYPE_ns2__Time (383)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Time(struct soap*, const char*, int, const ns2__Time *, const char*);
SOAP_FMAC3 ns2__Time * SOAP_FMAC4 soap_in_ns2__Time(struct soap*, const char*, ns2__Time *, const char*);

#ifndef soap_write_ns2__Time
#define soap_write_ns2__Time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Time * SOAP_FMAC4 soap_get_ns2__Time(struct soap*, ns2__Time *, const char*, const char*);

#ifndef soap_read_ns2__Time
#define soap_read_ns2__Time(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Time * SOAP_FMAC2 soap_instantiate_ns2__Time(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Time * soap_new_ns2__Time(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Time(soap, n, NULL, NULL, NULL); }

inline ns2__Time * soap_new_req_ns2__Time(struct soap *soap, int Hour, int Minute, int Second) { ns2__Time *_p = soap_instantiate_ns2__Time(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Time::Hour = Hour; _p->ns2__Time::Minute = Minute; _p->ns2__Time::Second = Second; } return _p; }

inline ns2__Time * soap_new_set_ns2__Time(struct soap *soap, int Hour, int Minute, int Second, char *__item1) { ns2__Time *_p = soap_instantiate_ns2__Time(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Time::Hour = Hour; _p->ns2__Time::Minute = Minute; _p->ns2__Time::Second = Second; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Time(struct soap *soap, ns2__Time *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Time(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Date
#define SOAP_TYPE_ns2__Date (382)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Date(struct soap*, const char*, int, const ns2__Date *, const char*);
SOAP_FMAC3 ns2__Date * SOAP_FMAC4 soap_in_ns2__Date(struct soap*, const char*, ns2__Date *, const char*);

#ifndef soap_write_ns2__Date
#define soap_write_ns2__Date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Date * SOAP_FMAC4 soap_get_ns2__Date(struct soap*, ns2__Date *, const char*, const char*);

#ifndef soap_read_ns2__Date
#define soap_read_ns2__Date(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Date(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Date * SOAP_FMAC2 soap_instantiate_ns2__Date(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Date * soap_new_ns2__Date(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Date(soap, n, NULL, NULL, NULL); }

inline ns2__Date * soap_new_req_ns2__Date(struct soap *soap, int Year, int Month, int Day) { ns2__Date *_p = soap_instantiate_ns2__Date(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Date::Year = Year; _p->ns2__Date::Month = Month; _p->ns2__Date::Day = Day; } return _p; }

inline ns2__Date * soap_new_set_ns2__Date(struct soap *soap, int Year, int Month, int Day, char *__item1) { ns2__Date *_p = soap_instantiate_ns2__Date(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Date::Year = Year; _p->ns2__Date::Month = Month; _p->ns2__Date::Day = Day; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Date(struct soap *soap, ns2__Date *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Date(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DateTime
#define SOAP_TYPE_ns2__DateTime (381)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DateTime(struct soap*, const char*, int, const ns2__DateTime *, const char*);
SOAP_FMAC3 ns2__DateTime * SOAP_FMAC4 soap_in_ns2__DateTime(struct soap*, const char*, ns2__DateTime *, const char*);

#ifndef soap_write_ns2__DateTime
#define soap_write_ns2__DateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DateTime * SOAP_FMAC4 soap_get_ns2__DateTime(struct soap*, ns2__DateTime *, const char*, const char*);

#ifndef soap_read_ns2__DateTime
#define soap_read_ns2__DateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DateTime * SOAP_FMAC2 soap_instantiate_ns2__DateTime(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DateTime * soap_new_ns2__DateTime(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DateTime(soap, n, NULL, NULL, NULL); }

inline ns2__DateTime * soap_new_req_ns2__DateTime(struct soap *soap, ns2__Time *Time, ns2__Date *Date) { ns2__DateTime *_p = soap_instantiate_ns2__DateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DateTime::Time = Time; _p->ns2__DateTime::Date = Date; } return _p; }

inline ns2__DateTime * soap_new_set_ns2__DateTime(struct soap *soap, ns2__Time *Time, ns2__Date *Date, char *__item1) { ns2__DateTime *_p = soap_instantiate_ns2__DateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DateTime::Time = Time; _p->ns2__DateTime::Date = Date; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DateTime(struct soap *soap, ns2__DateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemDateTimeExtension
#define SOAP_TYPE_ns2__SystemDateTimeExtension (380)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemDateTimeExtension(struct soap*, const char*, int, const ns2__SystemDateTimeExtension *, const char*);
SOAP_FMAC3 ns2__SystemDateTimeExtension * SOAP_FMAC4 soap_in_ns2__SystemDateTimeExtension(struct soap*, const char*, ns2__SystemDateTimeExtension *, const char*);

#ifndef soap_write_ns2__SystemDateTimeExtension
#define soap_write_ns2__SystemDateTimeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemDateTimeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemDateTimeExtension * SOAP_FMAC4 soap_get_ns2__SystemDateTimeExtension(struct soap*, ns2__SystemDateTimeExtension *, const char*, const char*);

#ifndef soap_read_ns2__SystemDateTimeExtension
#define soap_read_ns2__SystemDateTimeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemDateTimeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_ns2__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemDateTimeExtension * soap_new_ns2__SystemDateTimeExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemDateTimeExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SystemDateTimeExtension * soap_new_req_ns2__SystemDateTimeExtension(struct soap *soap) { ns2__SystemDateTimeExtension *_p = soap_instantiate_ns2__SystemDateTimeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SystemDateTimeExtension * soap_new_set_ns2__SystemDateTimeExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__SystemDateTimeExtension *_p = soap_instantiate_ns2__SystemDateTimeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemDateTimeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemDateTimeExtension(struct soap *soap, ns2__SystemDateTimeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemDateTimeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemDateTime
#define SOAP_TYPE_ns2__SystemDateTime (379)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemDateTime(struct soap*, const char*, int, const ns2__SystemDateTime *, const char*);
SOAP_FMAC3 ns2__SystemDateTime * SOAP_FMAC4 soap_in_ns2__SystemDateTime(struct soap*, const char*, ns2__SystemDateTime *, const char*);

#ifndef soap_write_ns2__SystemDateTime
#define soap_write_ns2__SystemDateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemDateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemDateTime * SOAP_FMAC4 soap_get_ns2__SystemDateTime(struct soap*, ns2__SystemDateTime *, const char*, const char*);

#ifndef soap_read_ns2__SystemDateTime
#define soap_read_ns2__SystemDateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemDateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemDateTime * SOAP_FMAC2 soap_instantiate_ns2__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemDateTime * soap_new_ns2__SystemDateTime(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemDateTime(soap, n, NULL, NULL, NULL); }

inline ns2__SystemDateTime * soap_new_req_ns2__SystemDateTime(struct soap *soap, enum ns2__SetDateTimeType DateTimeType, bool DaylightSavings) { ns2__SystemDateTime *_p = soap_instantiate_ns2__SystemDateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemDateTime::DateTimeType = DateTimeType; _p->ns2__SystemDateTime::DaylightSavings = DaylightSavings; } return _p; }

inline ns2__SystemDateTime * soap_new_set_ns2__SystemDateTime(struct soap *soap, enum ns2__SetDateTimeType DateTimeType, bool DaylightSavings, ns2__TimeZone *TimeZone, ns2__DateTime *UTCDateTime, ns2__DateTime *LocalDateTime, ns2__SystemDateTimeExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SystemDateTime *_p = soap_instantiate_ns2__SystemDateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemDateTime::DateTimeType = DateTimeType; _p->ns2__SystemDateTime::DaylightSavings = DaylightSavings; _p->ns2__SystemDateTime::TimeZone = TimeZone; _p->ns2__SystemDateTime::UTCDateTime = UTCDateTime; _p->ns2__SystemDateTime::LocalDateTime = LocalDateTime; _p->ns2__SystemDateTime::Extension = Extension; _p->ns2__SystemDateTime::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemDateTime(struct soap *soap, ns2__SystemDateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemDateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemLogUri
#define SOAP_TYPE_ns2__SystemLogUri (378)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemLogUri(struct soap*, const char*, int, const ns2__SystemLogUri *, const char*);
SOAP_FMAC3 ns2__SystemLogUri * SOAP_FMAC4 soap_in_ns2__SystemLogUri(struct soap*, const char*, ns2__SystemLogUri *, const char*);

#ifndef soap_write_ns2__SystemLogUri
#define soap_write_ns2__SystemLogUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemLogUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemLogUri * SOAP_FMAC4 soap_get_ns2__SystemLogUri(struct soap*, ns2__SystemLogUri *, const char*, const char*);

#ifndef soap_read_ns2__SystemLogUri
#define soap_read_ns2__SystemLogUri(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemLogUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemLogUri * SOAP_FMAC2 soap_instantiate_ns2__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemLogUri * soap_new_ns2__SystemLogUri(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemLogUri(soap, n, NULL, NULL, NULL); }

inline ns2__SystemLogUri * soap_new_req_ns2__SystemLogUri(struct soap *soap, enum ns2__SystemLogType Type, const std::string& Uri) { ns2__SystemLogUri *_p = soap_instantiate_ns2__SystemLogUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemLogUri::Type = Type; _p->ns2__SystemLogUri::Uri = Uri; } return _p; }

inline ns2__SystemLogUri * soap_new_set_ns2__SystemLogUri(struct soap *soap, enum ns2__SystemLogType Type, const std::string& Uri, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__SystemLogUri *_p = soap_instantiate_ns2__SystemLogUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemLogUri::Type = Type; _p->ns2__SystemLogUri::Uri = Uri; _p->ns2__SystemLogUri::__any = __any; _p->ns2__SystemLogUri::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemLogUri(struct soap *soap, ns2__SystemLogUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemLogUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemLogUriList
#define SOAP_TYPE_ns2__SystemLogUriList (377)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemLogUriList(struct soap*, const char*, int, const ns2__SystemLogUriList *, const char*);
SOAP_FMAC3 ns2__SystemLogUriList * SOAP_FMAC4 soap_in_ns2__SystemLogUriList(struct soap*, const char*, ns2__SystemLogUriList *, const char*);

#ifndef soap_write_ns2__SystemLogUriList
#define soap_write_ns2__SystemLogUriList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemLogUriList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemLogUriList * SOAP_FMAC4 soap_get_ns2__SystemLogUriList(struct soap*, ns2__SystemLogUriList *, const char*, const char*);

#ifndef soap_read_ns2__SystemLogUriList
#define soap_read_ns2__SystemLogUriList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemLogUriList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemLogUriList * SOAP_FMAC2 soap_instantiate_ns2__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemLogUriList * soap_new_ns2__SystemLogUriList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemLogUriList(soap, n, NULL, NULL, NULL); }

inline ns2__SystemLogUriList * soap_new_req_ns2__SystemLogUriList(struct soap *soap) { ns2__SystemLogUriList *_p = soap_instantiate_ns2__SystemLogUriList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SystemLogUriList * soap_new_set_ns2__SystemLogUriList(struct soap *soap, const std::vector<ns2__SystemLogUri * >& SystemLog, char *__item1) { ns2__SystemLogUriList *_p = soap_instantiate_ns2__SystemLogUriList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemLogUriList::SystemLog = SystemLog; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemLogUriList(struct soap *soap, ns2__SystemLogUriList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemLogUriList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BackupFile
#define SOAP_TYPE_ns2__BackupFile (376)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BackupFile(struct soap*, const char*, int, const ns2__BackupFile *, const char*);
SOAP_FMAC3 ns2__BackupFile * SOAP_FMAC4 soap_in_ns2__BackupFile(struct soap*, const char*, ns2__BackupFile *, const char*);

#ifndef soap_write_ns2__BackupFile
#define soap_write_ns2__BackupFile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BackupFile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BackupFile * SOAP_FMAC4 soap_get_ns2__BackupFile(struct soap*, ns2__BackupFile *, const char*, const char*);

#ifndef soap_read_ns2__BackupFile
#define soap_read_ns2__BackupFile(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BackupFile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BackupFile * SOAP_FMAC2 soap_instantiate_ns2__BackupFile(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BackupFile * soap_new_ns2__BackupFile(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BackupFile(soap, n, NULL, NULL, NULL); }

inline ns2__BackupFile * soap_new_req_ns2__BackupFile(struct soap *soap, const std::string& Name, ns2__AttachmentData *Data) { ns2__BackupFile *_p = soap_instantiate_ns2__BackupFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BackupFile::Name = Name; _p->ns2__BackupFile::Data = Data; } return _p; }

inline ns2__BackupFile * soap_new_set_ns2__BackupFile(struct soap *soap, const std::string& Name, ns2__AttachmentData *Data, char *__item1) { ns2__BackupFile *_p = soap_instantiate_ns2__BackupFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BackupFile::Name = Name; _p->ns2__BackupFile::Data = Data; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BackupFile(struct soap *soap, ns2__BackupFile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BackupFile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AttachmentData
#define SOAP_TYPE_ns2__AttachmentData (375)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AttachmentData(struct soap*, const char*, int, const ns2__AttachmentData *, const char*);
SOAP_FMAC3 ns2__AttachmentData * SOAP_FMAC4 soap_in_ns2__AttachmentData(struct soap*, const char*, ns2__AttachmentData *, const char*);

#ifndef soap_write_ns2__AttachmentData
#define soap_write_ns2__AttachmentData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AttachmentData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AttachmentData * SOAP_FMAC4 soap_get_ns2__AttachmentData(struct soap*, ns2__AttachmentData *, const char*, const char*);

#ifndef soap_read_ns2__AttachmentData
#define soap_read_ns2__AttachmentData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AttachmentData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AttachmentData * SOAP_FMAC2 soap_instantiate_ns2__AttachmentData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AttachmentData * soap_new_ns2__AttachmentData(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AttachmentData(soap, n, NULL, NULL, NULL); }

inline ns2__AttachmentData * soap_new_req_ns2__AttachmentData(struct soap *soap, ns4__Include *ns4__Include_) { ns2__AttachmentData *_p = soap_instantiate_ns2__AttachmentData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AttachmentData::ns4__Include_ = ns4__Include_; } return _p; }

inline ns2__AttachmentData * soap_new_set_ns2__AttachmentData(struct soap *soap, ns4__Include *ns4__Include_, std::string *xmime__contentType, char *__item1) { ns2__AttachmentData *_p = soap_instantiate_ns2__AttachmentData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AttachmentData::ns4__Include_ = ns4__Include_; _p->ns2__AttachmentData::xmime__contentType = xmime__contentType; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AttachmentData(struct soap *soap, ns2__AttachmentData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AttachmentData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__BinaryData
#define SOAP_TYPE_ns2__BinaryData (374)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BinaryData(struct soap*, const char*, int, const ns2__BinaryData *, const char*);
SOAP_FMAC3 ns2__BinaryData * SOAP_FMAC4 soap_in_ns2__BinaryData(struct soap*, const char*, ns2__BinaryData *, const char*);

#ifndef soap_write_ns2__BinaryData
#define soap_write_ns2__BinaryData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:BinaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BinaryData * SOAP_FMAC4 soap_get_ns2__BinaryData(struct soap*, ns2__BinaryData *, const char*, const char*);

#ifndef soap_read_ns2__BinaryData
#define soap_read_ns2__BinaryData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__BinaryData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__BinaryData * SOAP_FMAC2 soap_instantiate_ns2__BinaryData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BinaryData * soap_new_ns2__BinaryData(struct soap *soap, int n = -1) { return soap_instantiate_ns2__BinaryData(soap, n, NULL, NULL, NULL); }

inline ns2__BinaryData * soap_new_req_ns2__BinaryData(struct soap *soap, const xsd__base64Binary& Data) { ns2__BinaryData *_p = soap_instantiate_ns2__BinaryData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BinaryData::Data = Data; } return _p; }

inline ns2__BinaryData * soap_new_set_ns2__BinaryData(struct soap *soap, const xsd__base64Binary& Data, std::string *xmime__contentType, char *__item1) { ns2__BinaryData *_p = soap_instantiate_ns2__BinaryData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__BinaryData::Data = Data; _p->ns2__BinaryData::xmime__contentType = xmime__contentType; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__BinaryData(struct soap *soap, ns2__BinaryData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__BinaryData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SupportInformation
#define SOAP_TYPE_ns2__SupportInformation (373)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SupportInformation(struct soap*, const char*, int, const ns2__SupportInformation *, const char*);
SOAP_FMAC3 ns2__SupportInformation * SOAP_FMAC4 soap_in_ns2__SupportInformation(struct soap*, const char*, ns2__SupportInformation *, const char*);

#ifndef soap_write_ns2__SupportInformation
#define soap_write_ns2__SupportInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SupportInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportInformation * SOAP_FMAC4 soap_get_ns2__SupportInformation(struct soap*, ns2__SupportInformation *, const char*, const char*);

#ifndef soap_read_ns2__SupportInformation
#define soap_read_ns2__SupportInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SupportInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SupportInformation * SOAP_FMAC2 soap_instantiate_ns2__SupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SupportInformation * soap_new_ns2__SupportInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SupportInformation(soap, n, NULL, NULL, NULL); }

inline ns2__SupportInformation * soap_new_req_ns2__SupportInformation(struct soap *soap) { ns2__SupportInformation *_p = soap_instantiate_ns2__SupportInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SupportInformation * soap_new_set_ns2__SupportInformation(struct soap *soap, ns2__AttachmentData *Binary, std::string *String, char *__item1) { ns2__SupportInformation *_p = soap_instantiate_ns2__SupportInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SupportInformation::Binary = Binary; _p->ns2__SupportInformation::String = String; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SupportInformation(struct soap *soap, ns2__SupportInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SupportInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemLog
#define SOAP_TYPE_ns2__SystemLog (372)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemLog(struct soap*, const char*, int, const ns2__SystemLog *, const char*);
SOAP_FMAC3 ns2__SystemLog * SOAP_FMAC4 soap_in_ns2__SystemLog(struct soap*, const char*, ns2__SystemLog *, const char*);

#ifndef soap_write_ns2__SystemLog
#define soap_write_ns2__SystemLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemLog * SOAP_FMAC4 soap_get_ns2__SystemLog(struct soap*, ns2__SystemLog *, const char*, const char*);

#ifndef soap_read_ns2__SystemLog
#define soap_read_ns2__SystemLog(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemLog(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemLog * SOAP_FMAC2 soap_instantiate_ns2__SystemLog(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemLog * soap_new_ns2__SystemLog(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemLog(soap, n, NULL, NULL, NULL); }

inline ns2__SystemLog * soap_new_req_ns2__SystemLog(struct soap *soap) { ns2__SystemLog *_p = soap_instantiate_ns2__SystemLog(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SystemLog * soap_new_set_ns2__SystemLog(struct soap *soap, ns2__AttachmentData *Binary, std::string *String, char *__item1) { ns2__SystemLog *_p = soap_instantiate_ns2__SystemLog(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemLog::Binary = Binary; _p->ns2__SystemLog::String = String; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemLog(struct soap *soap, ns2__SystemLog *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemLog(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsDeviceExtension
#define SOAP_TYPE_ns2__AnalyticsDeviceExtension (371)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsDeviceExtension(struct soap*, const char*, int, const ns2__AnalyticsDeviceExtension *, const char*);
SOAP_FMAC3 ns2__AnalyticsDeviceExtension * SOAP_FMAC4 soap_in_ns2__AnalyticsDeviceExtension(struct soap*, const char*, ns2__AnalyticsDeviceExtension *, const char*);

#ifndef soap_write_ns2__AnalyticsDeviceExtension
#define soap_write_ns2__AnalyticsDeviceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsDeviceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceExtension * SOAP_FMAC4 soap_get_ns2__AnalyticsDeviceExtension(struct soap*, ns2__AnalyticsDeviceExtension *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsDeviceExtension
#define soap_read_ns2__AnalyticsDeviceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsDeviceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsDeviceExtension * soap_new_ns2__AnalyticsDeviceExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsDeviceExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsDeviceExtension * soap_new_req_ns2__AnalyticsDeviceExtension(struct soap *soap) { ns2__AnalyticsDeviceExtension *_p = soap_instantiate_ns2__AnalyticsDeviceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnalyticsDeviceExtension * soap_new_set_ns2__AnalyticsDeviceExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AnalyticsDeviceExtension *_p = soap_instantiate_ns2__AnalyticsDeviceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsDeviceExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsDeviceExtension(struct soap *soap, ns2__AnalyticsDeviceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsDeviceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsDeviceCapabilities
#define SOAP_TYPE_ns2__AnalyticsDeviceCapabilities (370)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsDeviceCapabilities(struct soap*, const char*, int, const ns2__AnalyticsDeviceCapabilities *, const char*);
SOAP_FMAC3 ns2__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_in_ns2__AnalyticsDeviceCapabilities(struct soap*, const char*, ns2__AnalyticsDeviceCapabilities *, const char*);

#ifndef soap_write_ns2__AnalyticsDeviceCapabilities
#define soap_write_ns2__AnalyticsDeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsDeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_get_ns2__AnalyticsDeviceCapabilities(struct soap*, ns2__AnalyticsDeviceCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsDeviceCapabilities
#define soap_read_ns2__AnalyticsDeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsDeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsDeviceCapabilities * soap_new_ns2__AnalyticsDeviceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsDeviceCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsDeviceCapabilities * soap_new_req_ns2__AnalyticsDeviceCapabilities(struct soap *soap, const std::string& XAddr) { ns2__AnalyticsDeviceCapabilities *_p = soap_instantiate_ns2__AnalyticsDeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsDeviceCapabilities::XAddr = XAddr; } return _p; }

inline ns2__AnalyticsDeviceCapabilities * soap_new_set_ns2__AnalyticsDeviceCapabilities(struct soap *soap, const std::string& XAddr, bool *RuleSupport, ns2__AnalyticsDeviceExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AnalyticsDeviceCapabilities *_p = soap_instantiate_ns2__AnalyticsDeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsDeviceCapabilities::XAddr = XAddr; _p->ns2__AnalyticsDeviceCapabilities::RuleSupport = RuleSupport; _p->ns2__AnalyticsDeviceCapabilities::Extension = Extension; _p->ns2__AnalyticsDeviceCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsDeviceCapabilities(struct soap *soap, ns2__AnalyticsDeviceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsDeviceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReceiverCapabilities
#define SOAP_TYPE_ns2__ReceiverCapabilities (369)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReceiverCapabilities(struct soap*, const char*, int, const ns2__ReceiverCapabilities *, const char*);
SOAP_FMAC3 ns2__ReceiverCapabilities * SOAP_FMAC4 soap_in_ns2__ReceiverCapabilities(struct soap*, const char*, ns2__ReceiverCapabilities *, const char*);

#ifndef soap_write_ns2__ReceiverCapabilities
#define soap_write_ns2__ReceiverCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReceiverCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverCapabilities * SOAP_FMAC4 soap_get_ns2__ReceiverCapabilities(struct soap*, ns2__ReceiverCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__ReceiverCapabilities
#define soap_read_ns2__ReceiverCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReceiverCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_ns2__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReceiverCapabilities * soap_new_ns2__ReceiverCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReceiverCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__ReceiverCapabilities * soap_new_req_ns2__ReceiverCapabilities(struct soap *soap, const std::string& XAddr, bool RTP_USCOREMulticast, bool RTP_USCORETCP, bool RTP_USCORERTSP_USCORETCP, int SupportedReceivers, int MaximumRTSPURILength) { ns2__ReceiverCapabilities *_p = soap_instantiate_ns2__ReceiverCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverCapabilities::XAddr = XAddr; _p->ns2__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast; _p->ns2__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->ns2__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->ns2__ReceiverCapabilities::SupportedReceivers = SupportedReceivers; _p->ns2__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength; } return _p; }

inline ns2__ReceiverCapabilities * soap_new_set_ns2__ReceiverCapabilities(struct soap *soap, const std::string& XAddr, bool RTP_USCOREMulticast, bool RTP_USCORETCP, bool RTP_USCORERTSP_USCORETCP, int SupportedReceivers, int MaximumRTSPURILength, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ReceiverCapabilities *_p = soap_instantiate_ns2__ReceiverCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReceiverCapabilities::XAddr = XAddr; _p->ns2__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast; _p->ns2__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->ns2__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->ns2__ReceiverCapabilities::SupportedReceivers = SupportedReceivers; _p->ns2__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength; _p->ns2__ReceiverCapabilities::__any = __any; _p->ns2__ReceiverCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReceiverCapabilities(struct soap *soap, ns2__ReceiverCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReceiverCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReplayCapabilities
#define SOAP_TYPE_ns2__ReplayCapabilities (368)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReplayCapabilities(struct soap*, const char*, int, const ns2__ReplayCapabilities *, const char*);
SOAP_FMAC3 ns2__ReplayCapabilities * SOAP_FMAC4 soap_in_ns2__ReplayCapabilities(struct soap*, const char*, ns2__ReplayCapabilities *, const char*);

#ifndef soap_write_ns2__ReplayCapabilities
#define soap_write_ns2__ReplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ReplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplayCapabilities * SOAP_FMAC4 soap_get_ns2__ReplayCapabilities(struct soap*, ns2__ReplayCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__ReplayCapabilities
#define soap_read_ns2__ReplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_ns2__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ReplayCapabilities * soap_new_ns2__ReplayCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReplayCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__ReplayCapabilities * soap_new_req_ns2__ReplayCapabilities(struct soap *soap, const std::string& XAddr) { ns2__ReplayCapabilities *_p = soap_instantiate_ns2__ReplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplayCapabilities::XAddr = XAddr; } return _p; }

inline ns2__ReplayCapabilities * soap_new_set_ns2__ReplayCapabilities(struct soap *soap, const std::string& XAddr, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ReplayCapabilities *_p = soap_instantiate_ns2__ReplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ReplayCapabilities::XAddr = XAddr; _p->ns2__ReplayCapabilities::__any = __any; _p->ns2__ReplayCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ReplayCapabilities(struct soap *soap, ns2__ReplayCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReplayCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SearchCapabilities
#define SOAP_TYPE_ns2__SearchCapabilities (367)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SearchCapabilities(struct soap*, const char*, int, const ns2__SearchCapabilities *, const char*);
SOAP_FMAC3 ns2__SearchCapabilities * SOAP_FMAC4 soap_in_ns2__SearchCapabilities(struct soap*, const char*, ns2__SearchCapabilities *, const char*);

#ifndef soap_write_ns2__SearchCapabilities
#define soap_write_ns2__SearchCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SearchCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SearchCapabilities * SOAP_FMAC4 soap_get_ns2__SearchCapabilities(struct soap*, ns2__SearchCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__SearchCapabilities
#define soap_read_ns2__SearchCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SearchCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SearchCapabilities * SOAP_FMAC2 soap_instantiate_ns2__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SearchCapabilities * soap_new_ns2__SearchCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SearchCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__SearchCapabilities * soap_new_req_ns2__SearchCapabilities(struct soap *soap, const std::string& XAddr, bool MetadataSearch) { ns2__SearchCapabilities *_p = soap_instantiate_ns2__SearchCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SearchCapabilities::XAddr = XAddr; _p->ns2__SearchCapabilities::MetadataSearch = MetadataSearch; } return _p; }

inline ns2__SearchCapabilities * soap_new_set_ns2__SearchCapabilities(struct soap *soap, const std::string& XAddr, bool MetadataSearch, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__SearchCapabilities *_p = soap_instantiate_ns2__SearchCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SearchCapabilities::XAddr = XAddr; _p->ns2__SearchCapabilities::MetadataSearch = MetadataSearch; _p->ns2__SearchCapabilities::__any = __any; _p->ns2__SearchCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SearchCapabilities(struct soap *soap, ns2__SearchCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SearchCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RecordingCapabilities
#define SOAP_TYPE_ns2__RecordingCapabilities (366)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RecordingCapabilities(struct soap*, const char*, int, const ns2__RecordingCapabilities *, const char*);
SOAP_FMAC3 ns2__RecordingCapabilities * SOAP_FMAC4 soap_in_ns2__RecordingCapabilities(struct soap*, const char*, ns2__RecordingCapabilities *, const char*);

#ifndef soap_write_ns2__RecordingCapabilities
#define soap_write_ns2__RecordingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RecordingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingCapabilities * SOAP_FMAC4 soap_get_ns2__RecordingCapabilities(struct soap*, ns2__RecordingCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__RecordingCapabilities
#define soap_read_ns2__RecordingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RecordingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_ns2__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RecordingCapabilities * soap_new_ns2__RecordingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RecordingCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__RecordingCapabilities * soap_new_req_ns2__RecordingCapabilities(struct soap *soap, const std::string& XAddr, bool ReceiverSource, bool MediaProfileSource, bool DynamicRecordings, bool DynamicTracks, int MaxStringLength) { ns2__RecordingCapabilities *_p = soap_instantiate_ns2__RecordingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingCapabilities::XAddr = XAddr; _p->ns2__RecordingCapabilities::ReceiverSource = ReceiverSource; _p->ns2__RecordingCapabilities::MediaProfileSource = MediaProfileSource; _p->ns2__RecordingCapabilities::DynamicRecordings = DynamicRecordings; _p->ns2__RecordingCapabilities::DynamicTracks = DynamicTracks; _p->ns2__RecordingCapabilities::MaxStringLength = MaxStringLength; } return _p; }

inline ns2__RecordingCapabilities * soap_new_set_ns2__RecordingCapabilities(struct soap *soap, const std::string& XAddr, bool ReceiverSource, bool MediaProfileSource, bool DynamicRecordings, bool DynamicTracks, int MaxStringLength, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__RecordingCapabilities *_p = soap_instantiate_ns2__RecordingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RecordingCapabilities::XAddr = XAddr; _p->ns2__RecordingCapabilities::ReceiverSource = ReceiverSource; _p->ns2__RecordingCapabilities::MediaProfileSource = MediaProfileSource; _p->ns2__RecordingCapabilities::DynamicRecordings = DynamicRecordings; _p->ns2__RecordingCapabilities::DynamicTracks = DynamicTracks; _p->ns2__RecordingCapabilities::MaxStringLength = MaxStringLength; _p->ns2__RecordingCapabilities::__any = __any; _p->ns2__RecordingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RecordingCapabilities(struct soap *soap, ns2__RecordingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RecordingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DisplayCapabilities
#define SOAP_TYPE_ns2__DisplayCapabilities (365)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DisplayCapabilities(struct soap*, const char*, int, const ns2__DisplayCapabilities *, const char*);
SOAP_FMAC3 ns2__DisplayCapabilities * SOAP_FMAC4 soap_in_ns2__DisplayCapabilities(struct soap*, const char*, ns2__DisplayCapabilities *, const char*);

#ifndef soap_write_ns2__DisplayCapabilities
#define soap_write_ns2__DisplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DisplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DisplayCapabilities * SOAP_FMAC4 soap_get_ns2__DisplayCapabilities(struct soap*, ns2__DisplayCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__DisplayCapabilities
#define soap_read_ns2__DisplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DisplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_ns2__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DisplayCapabilities * soap_new_ns2__DisplayCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DisplayCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__DisplayCapabilities * soap_new_req_ns2__DisplayCapabilities(struct soap *soap, const std::string& XAddr, bool FixedLayout) { ns2__DisplayCapabilities *_p = soap_instantiate_ns2__DisplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DisplayCapabilities::XAddr = XAddr; _p->ns2__DisplayCapabilities::FixedLayout = FixedLayout; } return _p; }

inline ns2__DisplayCapabilities * soap_new_set_ns2__DisplayCapabilities(struct soap *soap, const std::string& XAddr, bool FixedLayout, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__DisplayCapabilities *_p = soap_instantiate_ns2__DisplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DisplayCapabilities::XAddr = XAddr; _p->ns2__DisplayCapabilities::FixedLayout = FixedLayout; _p->ns2__DisplayCapabilities::__any = __any; _p->ns2__DisplayCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DisplayCapabilities(struct soap *soap, ns2__DisplayCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DisplayCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DeviceIOCapabilities
#define SOAP_TYPE_ns2__DeviceIOCapabilities (364)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeviceIOCapabilities(struct soap*, const char*, int, const ns2__DeviceIOCapabilities *, const char*);
SOAP_FMAC3 ns2__DeviceIOCapabilities * SOAP_FMAC4 soap_in_ns2__DeviceIOCapabilities(struct soap*, const char*, ns2__DeviceIOCapabilities *, const char*);

#ifndef soap_write_ns2__DeviceIOCapabilities
#define soap_write_ns2__DeviceIOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DeviceIOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceIOCapabilities * SOAP_FMAC4 soap_get_ns2__DeviceIOCapabilities(struct soap*, ns2__DeviceIOCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__DeviceIOCapabilities
#define soap_read_ns2__DeviceIOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DeviceIOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_ns2__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeviceIOCapabilities * soap_new_ns2__DeviceIOCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DeviceIOCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__DeviceIOCapabilities * soap_new_req_ns2__DeviceIOCapabilities(struct soap *soap, const std::string& XAddr, int VideoSources, int VideoOutputs, int AudioSources, int AudioOutputs, int RelayOutputs) { ns2__DeviceIOCapabilities *_p = soap_instantiate_ns2__DeviceIOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceIOCapabilities::XAddr = XAddr; _p->ns2__DeviceIOCapabilities::VideoSources = VideoSources; _p->ns2__DeviceIOCapabilities::VideoOutputs = VideoOutputs; _p->ns2__DeviceIOCapabilities::AudioSources = AudioSources; _p->ns2__DeviceIOCapabilities::AudioOutputs = AudioOutputs; _p->ns2__DeviceIOCapabilities::RelayOutputs = RelayOutputs; } return _p; }

inline ns2__DeviceIOCapabilities * soap_new_set_ns2__DeviceIOCapabilities(struct soap *soap, const std::string& XAddr, int VideoSources, int VideoOutputs, int AudioSources, int AudioOutputs, int RelayOutputs, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__DeviceIOCapabilities *_p = soap_instantiate_ns2__DeviceIOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceIOCapabilities::XAddr = XAddr; _p->ns2__DeviceIOCapabilities::VideoSources = VideoSources; _p->ns2__DeviceIOCapabilities::VideoOutputs = VideoOutputs; _p->ns2__DeviceIOCapabilities::AudioSources = AudioSources; _p->ns2__DeviceIOCapabilities::AudioOutputs = AudioOutputs; _p->ns2__DeviceIOCapabilities::RelayOutputs = RelayOutputs; _p->ns2__DeviceIOCapabilities::__any = __any; _p->ns2__DeviceIOCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DeviceIOCapabilities(struct soap *soap, ns2__DeviceIOCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DeviceIOCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZCapabilities
#define SOAP_TYPE_ns2__PTZCapabilities (363)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZCapabilities(struct soap*, const char*, int, const ns2__PTZCapabilities *, const char*);
SOAP_FMAC3 ns2__PTZCapabilities * SOAP_FMAC4 soap_in_ns2__PTZCapabilities(struct soap*, const char*, ns2__PTZCapabilities *, const char*);

#ifndef soap_write_ns2__PTZCapabilities
#define soap_write_ns2__PTZCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZCapabilities * SOAP_FMAC4 soap_get_ns2__PTZCapabilities(struct soap*, ns2__PTZCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__PTZCapabilities
#define soap_read_ns2__PTZCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZCapabilities * SOAP_FMAC2 soap_instantiate_ns2__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZCapabilities * soap_new_ns2__PTZCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__PTZCapabilities * soap_new_req_ns2__PTZCapabilities(struct soap *soap, const std::string& XAddr) { ns2__PTZCapabilities *_p = soap_instantiate_ns2__PTZCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZCapabilities::XAddr = XAddr; } return _p; }

inline ns2__PTZCapabilities * soap_new_set_ns2__PTZCapabilities(struct soap *soap, const std::string& XAddr, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__PTZCapabilities *_p = soap_instantiate_ns2__PTZCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZCapabilities::XAddr = XAddr; _p->ns2__PTZCapabilities::__any = __any; _p->ns2__PTZCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZCapabilities(struct soap *soap, ns2__PTZCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ImagingCapabilities
#define SOAP_TYPE_ns2__ImagingCapabilities (362)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ImagingCapabilities(struct soap*, const char*, int, const ns2__ImagingCapabilities *, const char*);
SOAP_FMAC3 ns2__ImagingCapabilities * SOAP_FMAC4 soap_in_ns2__ImagingCapabilities(struct soap*, const char*, ns2__ImagingCapabilities *, const char*);

#ifndef soap_write_ns2__ImagingCapabilities
#define soap_write_ns2__ImagingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ImagingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingCapabilities * SOAP_FMAC4 soap_get_ns2__ImagingCapabilities(struct soap*, ns2__ImagingCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__ImagingCapabilities
#define soap_read_ns2__ImagingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ImagingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_ns2__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ImagingCapabilities * soap_new_ns2__ImagingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ImagingCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__ImagingCapabilities * soap_new_req_ns2__ImagingCapabilities(struct soap *soap, const std::string& XAddr) { ns2__ImagingCapabilities *_p = soap_instantiate_ns2__ImagingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingCapabilities::XAddr = XAddr; } return _p; }

inline ns2__ImagingCapabilities * soap_new_set_ns2__ImagingCapabilities(struct soap *soap, const std::string& XAddr, char *__anyAttribute, char *__item1) { ns2__ImagingCapabilities *_p = soap_instantiate_ns2__ImagingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ImagingCapabilities::XAddr = XAddr; _p->ns2__ImagingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ImagingCapabilities(struct soap *soap, ns2__ImagingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ImagingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OnvifVersion
#define SOAP_TYPE_ns2__OnvifVersion (361)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OnvifVersion(struct soap*, const char*, int, const ns2__OnvifVersion *, const char*);
SOAP_FMAC3 ns2__OnvifVersion * SOAP_FMAC4 soap_in_ns2__OnvifVersion(struct soap*, const char*, ns2__OnvifVersion *, const char*);

#ifndef soap_write_ns2__OnvifVersion
#define soap_write_ns2__OnvifVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:OnvifVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OnvifVersion * SOAP_FMAC4 soap_get_ns2__OnvifVersion(struct soap*, ns2__OnvifVersion *, const char*, const char*);

#ifndef soap_read_ns2__OnvifVersion
#define soap_read_ns2__OnvifVersion(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OnvifVersion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__OnvifVersion * SOAP_FMAC2 soap_instantiate_ns2__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OnvifVersion * soap_new_ns2__OnvifVersion(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OnvifVersion(soap, n, NULL, NULL, NULL); }

inline ns2__OnvifVersion * soap_new_req_ns2__OnvifVersion(struct soap *soap, int Major, int Minor) { ns2__OnvifVersion *_p = soap_instantiate_ns2__OnvifVersion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OnvifVersion::Major = Major; _p->ns2__OnvifVersion::Minor = Minor; } return _p; }

inline ns2__OnvifVersion * soap_new_set_ns2__OnvifVersion(struct soap *soap, int Major, int Minor, char *__item1) { ns2__OnvifVersion *_p = soap_instantiate_ns2__OnvifVersion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OnvifVersion::Major = Major; _p->ns2__OnvifVersion::Minor = Minor; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__OnvifVersion(struct soap *soap, ns2__OnvifVersion *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OnvifVersion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemCapabilitiesExtension2
#define SOAP_TYPE_ns2__SystemCapabilitiesExtension2 (360)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemCapabilitiesExtension2(struct soap*, const char*, int, const ns2__SystemCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 ns2__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_in_ns2__SystemCapabilitiesExtension2(struct soap*, const char*, ns2__SystemCapabilitiesExtension2 *, const char*);

#ifndef soap_write_ns2__SystemCapabilitiesExtension2
#define soap_write_ns2__SystemCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_get_ns2__SystemCapabilitiesExtension2(struct soap*, ns2__SystemCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__SystemCapabilitiesExtension2
#define soap_read_ns2__SystemCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_ns2__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemCapabilitiesExtension2 * soap_new_ns2__SystemCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__SystemCapabilitiesExtension2 * soap_new_req_ns2__SystemCapabilitiesExtension2(struct soap *soap) { ns2__SystemCapabilitiesExtension2 *_p = soap_instantiate_ns2__SystemCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SystemCapabilitiesExtension2 * soap_new_set_ns2__SystemCapabilitiesExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__SystemCapabilitiesExtension2 *_p = soap_instantiate_ns2__SystemCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemCapabilitiesExtension2(struct soap *soap, ns2__SystemCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemCapabilitiesExtension
#define SOAP_TYPE_ns2__SystemCapabilitiesExtension (359)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemCapabilitiesExtension(struct soap*, const char*, int, const ns2__SystemCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__SystemCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__SystemCapabilitiesExtension(struct soap*, const char*, ns2__SystemCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__SystemCapabilitiesExtension
#define soap_write_ns2__SystemCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__SystemCapabilitiesExtension(struct soap*, ns2__SystemCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__SystemCapabilitiesExtension
#define soap_read_ns2__SystemCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemCapabilitiesExtension * soap_new_ns2__SystemCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SystemCapabilitiesExtension * soap_new_req_ns2__SystemCapabilitiesExtension(struct soap *soap) { ns2__SystemCapabilitiesExtension *_p = soap_instantiate_ns2__SystemCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__SystemCapabilitiesExtension * soap_new_set_ns2__SystemCapabilitiesExtension(struct soap *soap, const std::vector<char * >& __any, bool *HttpFirmwareUpgrade, bool *HttpSystemBackup, bool *HttpSystemLogging, bool *HttpSupportInformation, ns2__SystemCapabilitiesExtension2 *Extension, char *__item1) { ns2__SystemCapabilitiesExtension *_p = soap_instantiate_ns2__SystemCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemCapabilitiesExtension::__any = __any; _p->ns2__SystemCapabilitiesExtension::HttpFirmwareUpgrade = HttpFirmwareUpgrade; _p->ns2__SystemCapabilitiesExtension::HttpSystemBackup = HttpSystemBackup; _p->ns2__SystemCapabilitiesExtension::HttpSystemLogging = HttpSystemLogging; _p->ns2__SystemCapabilitiesExtension::HttpSupportInformation = HttpSupportInformation; _p->ns2__SystemCapabilitiesExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemCapabilitiesExtension(struct soap *soap, ns2__SystemCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SystemCapabilities
#define SOAP_TYPE_ns2__SystemCapabilities (358)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SystemCapabilities(struct soap*, const char*, int, const ns2__SystemCapabilities *, const char*);
SOAP_FMAC3 ns2__SystemCapabilities * SOAP_FMAC4 soap_in_ns2__SystemCapabilities(struct soap*, const char*, ns2__SystemCapabilities *, const char*);

#ifndef soap_write_ns2__SystemCapabilities
#define soap_write_ns2__SystemCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SystemCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemCapabilities * SOAP_FMAC4 soap_get_ns2__SystemCapabilities(struct soap*, ns2__SystemCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__SystemCapabilities
#define soap_read_ns2__SystemCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SystemCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SystemCapabilities * SOAP_FMAC2 soap_instantiate_ns2__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SystemCapabilities * soap_new_ns2__SystemCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SystemCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__SystemCapabilities * soap_new_req_ns2__SystemCapabilities(struct soap *soap, bool DiscoveryResolve, bool DiscoveryBye, bool RemoteDiscovery, bool SystemBackup, bool SystemLogging, bool FirmwareUpgrade, const std::vector<ns2__OnvifVersion * >& SupportedVersions) { ns2__SystemCapabilities *_p = soap_instantiate_ns2__SystemCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemCapabilities::DiscoveryResolve = DiscoveryResolve; _p->ns2__SystemCapabilities::DiscoveryBye = DiscoveryBye; _p->ns2__SystemCapabilities::RemoteDiscovery = RemoteDiscovery; _p->ns2__SystemCapabilities::SystemBackup = SystemBackup; _p->ns2__SystemCapabilities::SystemLogging = SystemLogging; _p->ns2__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade; _p->ns2__SystemCapabilities::SupportedVersions = SupportedVersions; } return _p; }

inline ns2__SystemCapabilities * soap_new_set_ns2__SystemCapabilities(struct soap *soap, bool DiscoveryResolve, bool DiscoveryBye, bool RemoteDiscovery, bool SystemBackup, bool SystemLogging, bool FirmwareUpgrade, const std::vector<ns2__OnvifVersion * >& SupportedVersions, ns2__SystemCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SystemCapabilities *_p = soap_instantiate_ns2__SystemCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SystemCapabilities::DiscoveryResolve = DiscoveryResolve; _p->ns2__SystemCapabilities::DiscoveryBye = DiscoveryBye; _p->ns2__SystemCapabilities::RemoteDiscovery = RemoteDiscovery; _p->ns2__SystemCapabilities::SystemBackup = SystemBackup; _p->ns2__SystemCapabilities::SystemLogging = SystemLogging; _p->ns2__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade; _p->ns2__SystemCapabilities::SupportedVersions = SupportedVersions; _p->ns2__SystemCapabilities::Extension = Extension; _p->ns2__SystemCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SystemCapabilities(struct soap *soap, ns2__SystemCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SystemCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SecurityCapabilitiesExtension2
#define SOAP_TYPE_ns2__SecurityCapabilitiesExtension2 (357)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SecurityCapabilitiesExtension2(struct soap*, const char*, int, const ns2__SecurityCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 ns2__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_in_ns2__SecurityCapabilitiesExtension2(struct soap*, const char*, ns2__SecurityCapabilitiesExtension2 *, const char*);

#ifndef soap_write_ns2__SecurityCapabilitiesExtension2
#define soap_write_ns2__SecurityCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SecurityCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_get_ns2__SecurityCapabilitiesExtension2(struct soap*, ns2__SecurityCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__SecurityCapabilitiesExtension2
#define soap_read_ns2__SecurityCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SecurityCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_ns2__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SecurityCapabilitiesExtension2 * soap_new_ns2__SecurityCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SecurityCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__SecurityCapabilitiesExtension2 * soap_new_req_ns2__SecurityCapabilitiesExtension2(struct soap *soap, bool Dot1X, bool RemoteUserHandling) { ns2__SecurityCapabilitiesExtension2 *_p = soap_instantiate_ns2__SecurityCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SecurityCapabilitiesExtension2::Dot1X = Dot1X; _p->ns2__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling; } return _p; }

inline ns2__SecurityCapabilitiesExtension2 * soap_new_set_ns2__SecurityCapabilitiesExtension2(struct soap *soap, bool Dot1X, const std::vector<int >& SupportedEAPMethod, bool RemoteUserHandling, const std::vector<char * >& __any, char *__item1) { ns2__SecurityCapabilitiesExtension2 *_p = soap_instantiate_ns2__SecurityCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SecurityCapabilitiesExtension2::Dot1X = Dot1X; _p->ns2__SecurityCapabilitiesExtension2::SupportedEAPMethod = SupportedEAPMethod; _p->ns2__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling; _p->ns2__SecurityCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SecurityCapabilitiesExtension2(struct soap *soap, ns2__SecurityCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SecurityCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SecurityCapabilitiesExtension
#define SOAP_TYPE_ns2__SecurityCapabilitiesExtension (356)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SecurityCapabilitiesExtension(struct soap*, const char*, int, const ns2__SecurityCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__SecurityCapabilitiesExtension(struct soap*, const char*, ns2__SecurityCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__SecurityCapabilitiesExtension
#define soap_write_ns2__SecurityCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SecurityCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__SecurityCapabilitiesExtension(struct soap*, ns2__SecurityCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__SecurityCapabilitiesExtension
#define soap_read_ns2__SecurityCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SecurityCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SecurityCapabilitiesExtension * soap_new_ns2__SecurityCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SecurityCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__SecurityCapabilitiesExtension * soap_new_req_ns2__SecurityCapabilitiesExtension(struct soap *soap, bool TLS1_x002e0) { ns2__SecurityCapabilitiesExtension *_p = soap_instantiate_ns2__SecurityCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0; } return _p; }

inline ns2__SecurityCapabilitiesExtension * soap_new_set_ns2__SecurityCapabilitiesExtension(struct soap *soap, bool TLS1_x002e0, ns2__SecurityCapabilitiesExtension2 *Extension, char *__item1) { ns2__SecurityCapabilitiesExtension *_p = soap_instantiate_ns2__SecurityCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0; _p->ns2__SecurityCapabilitiesExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SecurityCapabilitiesExtension(struct soap *soap, ns2__SecurityCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SecurityCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__SecurityCapabilities
#define SOAP_TYPE_ns2__SecurityCapabilities (355)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SecurityCapabilities(struct soap*, const char*, int, const ns2__SecurityCapabilities *, const char*);
SOAP_FMAC3 ns2__SecurityCapabilities * SOAP_FMAC4 soap_in_ns2__SecurityCapabilities(struct soap*, const char*, ns2__SecurityCapabilities *, const char*);

#ifndef soap_write_ns2__SecurityCapabilities
#define soap_write_ns2__SecurityCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:SecurityCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SecurityCapabilities * SOAP_FMAC4 soap_get_ns2__SecurityCapabilities(struct soap*, ns2__SecurityCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__SecurityCapabilities
#define soap_read_ns2__SecurityCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__SecurityCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_ns2__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SecurityCapabilities * soap_new_ns2__SecurityCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__SecurityCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__SecurityCapabilities * soap_new_req_ns2__SecurityCapabilities(struct soap *soap, bool TLS1_x002e1, bool TLS1_x002e2, bool OnboardKeyGeneration, bool AccessPolicyConfig, bool X_x002e509Token, bool SAMLToken, bool KerberosToken, bool RELToken) { ns2__SecurityCapabilities *_p = soap_instantiate_ns2__SecurityCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1; _p->ns2__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2; _p->ns2__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration; _p->ns2__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig; _p->ns2__SecurityCapabilities::X_x002e509Token = X_x002e509Token; _p->ns2__SecurityCapabilities::SAMLToken = SAMLToken; _p->ns2__SecurityCapabilities::KerberosToken = KerberosToken; _p->ns2__SecurityCapabilities::RELToken = RELToken; } return _p; }

inline ns2__SecurityCapabilities * soap_new_set_ns2__SecurityCapabilities(struct soap *soap, bool TLS1_x002e1, bool TLS1_x002e2, bool OnboardKeyGeneration, bool AccessPolicyConfig, bool X_x002e509Token, bool SAMLToken, bool KerberosToken, bool RELToken, const std::vector<char * >& __any, ns2__SecurityCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__SecurityCapabilities *_p = soap_instantiate_ns2__SecurityCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1; _p->ns2__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2; _p->ns2__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration; _p->ns2__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig; _p->ns2__SecurityCapabilities::X_x002e509Token = X_x002e509Token; _p->ns2__SecurityCapabilities::SAMLToken = SAMLToken; _p->ns2__SecurityCapabilities::KerberosToken = KerberosToken; _p->ns2__SecurityCapabilities::RELToken = RELToken; _p->ns2__SecurityCapabilities::__any = __any; _p->ns2__SecurityCapabilities::Extension = Extension; _p->ns2__SecurityCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__SecurityCapabilities(struct soap *soap, ns2__SecurityCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SecurityCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkCapabilitiesExtension2
#define SOAP_TYPE_ns2__NetworkCapabilitiesExtension2 (354)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkCapabilitiesExtension2(struct soap*, const char*, int, const ns2__NetworkCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 ns2__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_in_ns2__NetworkCapabilitiesExtension2(struct soap*, const char*, ns2__NetworkCapabilitiesExtension2 *, const char*);

#ifndef soap_write_ns2__NetworkCapabilitiesExtension2
#define soap_write_ns2__NetworkCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_get_ns2__NetworkCapabilitiesExtension2(struct soap*, ns2__NetworkCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__NetworkCapabilitiesExtension2
#define soap_read_ns2__NetworkCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_ns2__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkCapabilitiesExtension2 * soap_new_ns2__NetworkCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkCapabilitiesExtension2 * soap_new_req_ns2__NetworkCapabilitiesExtension2(struct soap *soap) { ns2__NetworkCapabilitiesExtension2 *_p = soap_instantiate_ns2__NetworkCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkCapabilitiesExtension2 * soap_new_set_ns2__NetworkCapabilitiesExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NetworkCapabilitiesExtension2 *_p = soap_instantiate_ns2__NetworkCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkCapabilitiesExtension2(struct soap *soap, ns2__NetworkCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkCapabilitiesExtension
#define SOAP_TYPE_ns2__NetworkCapabilitiesExtension (353)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkCapabilitiesExtension(struct soap*, const char*, int, const ns2__NetworkCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__NetworkCapabilitiesExtension(struct soap*, const char*, ns2__NetworkCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__NetworkCapabilitiesExtension
#define soap_write_ns2__NetworkCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__NetworkCapabilitiesExtension(struct soap*, ns2__NetworkCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__NetworkCapabilitiesExtension
#define soap_read_ns2__NetworkCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkCapabilitiesExtension * soap_new_ns2__NetworkCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkCapabilitiesExtension * soap_new_req_ns2__NetworkCapabilitiesExtension(struct soap *soap) { ns2__NetworkCapabilitiesExtension *_p = soap_instantiate_ns2__NetworkCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkCapabilitiesExtension * soap_new_set_ns2__NetworkCapabilitiesExtension(struct soap *soap, const std::vector<char * >& __any, bool *Dot11Configuration, ns2__NetworkCapabilitiesExtension2 *Extension, char *__item1) { ns2__NetworkCapabilitiesExtension *_p = soap_instantiate_ns2__NetworkCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkCapabilitiesExtension::__any = __any; _p->ns2__NetworkCapabilitiesExtension::Dot11Configuration = Dot11Configuration; _p->ns2__NetworkCapabilitiesExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkCapabilitiesExtension(struct soap *soap, ns2__NetworkCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkCapabilities
#define SOAP_TYPE_ns2__NetworkCapabilities (352)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkCapabilities(struct soap*, const char*, int, const ns2__NetworkCapabilities *, const char*);
SOAP_FMAC3 ns2__NetworkCapabilities * SOAP_FMAC4 soap_in_ns2__NetworkCapabilities(struct soap*, const char*, ns2__NetworkCapabilities *, const char*);

#ifndef soap_write_ns2__NetworkCapabilities
#define soap_write_ns2__NetworkCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkCapabilities * SOAP_FMAC4 soap_get_ns2__NetworkCapabilities(struct soap*, ns2__NetworkCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__NetworkCapabilities
#define soap_read_ns2__NetworkCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_ns2__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkCapabilities * soap_new_ns2__NetworkCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkCapabilities * soap_new_req_ns2__NetworkCapabilities(struct soap *soap) { ns2__NetworkCapabilities *_p = soap_instantiate_ns2__NetworkCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkCapabilities * soap_new_set_ns2__NetworkCapabilities(struct soap *soap, bool *IPFilter, bool *ZeroConfiguration, bool *IPVersion6, bool *DynDNS, ns2__NetworkCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__NetworkCapabilities *_p = soap_instantiate_ns2__NetworkCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkCapabilities::IPFilter = IPFilter; _p->ns2__NetworkCapabilities::ZeroConfiguration = ZeroConfiguration; _p->ns2__NetworkCapabilities::IPVersion6 = IPVersion6; _p->ns2__NetworkCapabilities::DynDNS = DynDNS; _p->ns2__NetworkCapabilities::Extension = Extension; _p->ns2__NetworkCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkCapabilities(struct soap *soap, ns2__NetworkCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ProfileCapabilities
#define SOAP_TYPE_ns2__ProfileCapabilities (351)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileCapabilities(struct soap*, const char*, int, const ns2__ProfileCapabilities *, const char*);
SOAP_FMAC3 ns2__ProfileCapabilities * SOAP_FMAC4 soap_in_ns2__ProfileCapabilities(struct soap*, const char*, ns2__ProfileCapabilities *, const char*);

#ifndef soap_write_ns2__ProfileCapabilities
#define soap_write_ns2__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ProfileCapabilities * SOAP_FMAC4 soap_get_ns2__ProfileCapabilities(struct soap*, ns2__ProfileCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__ProfileCapabilities
#define soap_read_ns2__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_ns2__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProfileCapabilities * soap_new_ns2__ProfileCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ProfileCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__ProfileCapabilities * soap_new_req_ns2__ProfileCapabilities(struct soap *soap, int MaximumNumberOfProfiles) { ns2__ProfileCapabilities *_p = soap_instantiate_ns2__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles; } return _p; }

inline ns2__ProfileCapabilities * soap_new_set_ns2__ProfileCapabilities(struct soap *soap, int MaximumNumberOfProfiles, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__ProfileCapabilities *_p = soap_instantiate_ns2__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles; _p->ns2__ProfileCapabilities::__any = __any; _p->ns2__ProfileCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ProfileCapabilities(struct soap *soap, ns2__ProfileCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ProfileCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_ns2__RealTimeStreamingCapabilitiesExtension (350)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, int, const ns2__RealTimeStreamingCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, ns2__RealTimeStreamingCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__RealTimeStreamingCapabilitiesExtension
#define soap_write_ns2__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RealTimeStreamingCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__RealTimeStreamingCapabilitiesExtension(struct soap*, ns2__RealTimeStreamingCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__RealTimeStreamingCapabilitiesExtension
#define soap_read_ns2__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RealTimeStreamingCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RealTimeStreamingCapabilitiesExtension * soap_new_ns2__RealTimeStreamingCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RealTimeStreamingCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RealTimeStreamingCapabilitiesExtension * soap_new_req_ns2__RealTimeStreamingCapabilitiesExtension(struct soap *soap) { ns2__RealTimeStreamingCapabilitiesExtension *_p = soap_instantiate_ns2__RealTimeStreamingCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RealTimeStreamingCapabilitiesExtension * soap_new_set_ns2__RealTimeStreamingCapabilitiesExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RealTimeStreamingCapabilitiesExtension *_p = soap_instantiate_ns2__RealTimeStreamingCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RealTimeStreamingCapabilitiesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RealTimeStreamingCapabilitiesExtension(struct soap *soap, ns2__RealTimeStreamingCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RealTimeStreamingCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RealTimeStreamingCapabilities
#define SOAP_TYPE_ns2__RealTimeStreamingCapabilities (349)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RealTimeStreamingCapabilities(struct soap*, const char*, int, const ns2__RealTimeStreamingCapabilities *, const char*);
SOAP_FMAC3 ns2__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_in_ns2__RealTimeStreamingCapabilities(struct soap*, const char*, ns2__RealTimeStreamingCapabilities *, const char*);

#ifndef soap_write_ns2__RealTimeStreamingCapabilities
#define soap_write_ns2__RealTimeStreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RealTimeStreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_get_ns2__RealTimeStreamingCapabilities(struct soap*, ns2__RealTimeStreamingCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__RealTimeStreamingCapabilities
#define soap_read_ns2__RealTimeStreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RealTimeStreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_ns2__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RealTimeStreamingCapabilities * soap_new_ns2__RealTimeStreamingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RealTimeStreamingCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__RealTimeStreamingCapabilities * soap_new_req_ns2__RealTimeStreamingCapabilities(struct soap *soap) { ns2__RealTimeStreamingCapabilities *_p = soap_instantiate_ns2__RealTimeStreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RealTimeStreamingCapabilities * soap_new_set_ns2__RealTimeStreamingCapabilities(struct soap *soap, bool *RTPMulticast, bool *RTP_USCORETCP, bool *RTP_USCORERTSP_USCORETCP, ns2__RealTimeStreamingCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__RealTimeStreamingCapabilities *_p = soap_instantiate_ns2__RealTimeStreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RealTimeStreamingCapabilities::RTPMulticast = RTPMulticast; _p->ns2__RealTimeStreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->ns2__RealTimeStreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->ns2__RealTimeStreamingCapabilities::Extension = Extension; _p->ns2__RealTimeStreamingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RealTimeStreamingCapabilities(struct soap *soap, ns2__RealTimeStreamingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RealTimeStreamingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MediaCapabilitiesExtension
#define SOAP_TYPE_ns2__MediaCapabilitiesExtension (348)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MediaCapabilitiesExtension(struct soap*, const char*, int, const ns2__MediaCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__MediaCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__MediaCapabilitiesExtension(struct soap*, const char*, ns2__MediaCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__MediaCapabilitiesExtension
#define soap_write_ns2__MediaCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MediaCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__MediaCapabilitiesExtension(struct soap*, ns2__MediaCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__MediaCapabilitiesExtension
#define soap_read_ns2__MediaCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MediaCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MediaCapabilitiesExtension * soap_new_ns2__MediaCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MediaCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MediaCapabilitiesExtension * soap_new_req_ns2__MediaCapabilitiesExtension(struct soap *soap, ns2__ProfileCapabilities *ProfileCapabilities) { ns2__MediaCapabilitiesExtension *_p = soap_instantiate_ns2__MediaCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities; } return _p; }

inline ns2__MediaCapabilitiesExtension * soap_new_set_ns2__MediaCapabilitiesExtension(struct soap *soap, ns2__ProfileCapabilities *ProfileCapabilities, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MediaCapabilitiesExtension *_p = soap_instantiate_ns2__MediaCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities; _p->ns2__MediaCapabilitiesExtension::__any = __any; _p->ns2__MediaCapabilitiesExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MediaCapabilitiesExtension(struct soap *soap, ns2__MediaCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MediaCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MediaCapabilities
#define SOAP_TYPE_ns2__MediaCapabilities (347)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MediaCapabilities(struct soap*, const char*, int, const ns2__MediaCapabilities *, const char*);
SOAP_FMAC3 ns2__MediaCapabilities * SOAP_FMAC4 soap_in_ns2__MediaCapabilities(struct soap*, const char*, ns2__MediaCapabilities *, const char*);

#ifndef soap_write_ns2__MediaCapabilities
#define soap_write_ns2__MediaCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MediaCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaCapabilities * SOAP_FMAC4 soap_get_ns2__MediaCapabilities(struct soap*, ns2__MediaCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__MediaCapabilities
#define soap_read_ns2__MediaCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MediaCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MediaCapabilities * SOAP_FMAC2 soap_instantiate_ns2__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MediaCapabilities * soap_new_ns2__MediaCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MediaCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__MediaCapabilities * soap_new_req_ns2__MediaCapabilities(struct soap *soap, const std::string& XAddr, ns2__RealTimeStreamingCapabilities *StreamingCapabilities) { ns2__MediaCapabilities *_p = soap_instantiate_ns2__MediaCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaCapabilities::XAddr = XAddr; _p->ns2__MediaCapabilities::StreamingCapabilities = StreamingCapabilities; } return _p; }

inline ns2__MediaCapabilities * soap_new_set_ns2__MediaCapabilities(struct soap *soap, const std::string& XAddr, ns2__RealTimeStreamingCapabilities *StreamingCapabilities, const std::vector<char * >& __any, ns2__MediaCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__MediaCapabilities *_p = soap_instantiate_ns2__MediaCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaCapabilities::XAddr = XAddr; _p->ns2__MediaCapabilities::StreamingCapabilities = StreamingCapabilities; _p->ns2__MediaCapabilities::__any = __any; _p->ns2__MediaCapabilities::Extension = Extension; _p->ns2__MediaCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MediaCapabilities(struct soap *soap, ns2__MediaCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MediaCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IOCapabilitiesExtension2
#define SOAP_TYPE_ns2__IOCapabilitiesExtension2 (346)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IOCapabilitiesExtension2(struct soap*, const char*, int, const ns2__IOCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 ns2__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_in_ns2__IOCapabilitiesExtension2(struct soap*, const char*, ns2__IOCapabilitiesExtension2 *, const char*);

#ifndef soap_write_ns2__IOCapabilitiesExtension2
#define soap_write_ns2__IOCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IOCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_get_ns2__IOCapabilitiesExtension2(struct soap*, ns2__IOCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__IOCapabilitiesExtension2
#define soap_read_ns2__IOCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IOCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_ns2__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IOCapabilitiesExtension2 * soap_new_ns2__IOCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IOCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__IOCapabilitiesExtension2 * soap_new_req_ns2__IOCapabilitiesExtension2(struct soap *soap) { ns2__IOCapabilitiesExtension2 *_p = soap_instantiate_ns2__IOCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IOCapabilitiesExtension2 * soap_new_set_ns2__IOCapabilitiesExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__IOCapabilitiesExtension2 *_p = soap_instantiate_ns2__IOCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IOCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IOCapabilitiesExtension2(struct soap *soap, ns2__IOCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IOCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IOCapabilitiesExtension
#define SOAP_TYPE_ns2__IOCapabilitiesExtension (345)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IOCapabilitiesExtension(struct soap*, const char*, int, const ns2__IOCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__IOCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__IOCapabilitiesExtension(struct soap*, const char*, ns2__IOCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__IOCapabilitiesExtension
#define soap_write_ns2__IOCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IOCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IOCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__IOCapabilitiesExtension(struct soap*, ns2__IOCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__IOCapabilitiesExtension
#define soap_read_ns2__IOCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IOCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IOCapabilitiesExtension * soap_new_ns2__IOCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IOCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__IOCapabilitiesExtension * soap_new_req_ns2__IOCapabilitiesExtension(struct soap *soap, ns2__IOCapabilitiesExtension2 *Extension) { ns2__IOCapabilitiesExtension *_p = soap_instantiate_ns2__IOCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IOCapabilitiesExtension::Extension = Extension; } return _p; }

inline ns2__IOCapabilitiesExtension * soap_new_set_ns2__IOCapabilitiesExtension(struct soap *soap, const std::vector<char * >& __any, bool *Auxiliary, const std::vector<std::string >& AuxiliaryCommands, ns2__IOCapabilitiesExtension2 *Extension, char *__anyAttribute, char *__item1) { ns2__IOCapabilitiesExtension *_p = soap_instantiate_ns2__IOCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IOCapabilitiesExtension::__any = __any; _p->ns2__IOCapabilitiesExtension::Auxiliary = Auxiliary; _p->ns2__IOCapabilitiesExtension::AuxiliaryCommands = AuxiliaryCommands; _p->ns2__IOCapabilitiesExtension::Extension = Extension; _p->ns2__IOCapabilitiesExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IOCapabilitiesExtension(struct soap *soap, ns2__IOCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IOCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IOCapabilities
#define SOAP_TYPE_ns2__IOCapabilities (344)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IOCapabilities(struct soap*, const char*, int, const ns2__IOCapabilities *, const char*);
SOAP_FMAC3 ns2__IOCapabilities * SOAP_FMAC4 soap_in_ns2__IOCapabilities(struct soap*, const char*, ns2__IOCapabilities *, const char*);

#ifndef soap_write_ns2__IOCapabilities
#define soap_write_ns2__IOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IOCapabilities * SOAP_FMAC4 soap_get_ns2__IOCapabilities(struct soap*, ns2__IOCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__IOCapabilities
#define soap_read_ns2__IOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IOCapabilities * SOAP_FMAC2 soap_instantiate_ns2__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IOCapabilities * soap_new_ns2__IOCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IOCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__IOCapabilities * soap_new_req_ns2__IOCapabilities(struct soap *soap) { ns2__IOCapabilities *_p = soap_instantiate_ns2__IOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IOCapabilities * soap_new_set_ns2__IOCapabilities(struct soap *soap, int *InputConnectors, int *RelayOutputs, ns2__IOCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__IOCapabilities *_p = soap_instantiate_ns2__IOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IOCapabilities::InputConnectors = InputConnectors; _p->ns2__IOCapabilities::RelayOutputs = RelayOutputs; _p->ns2__IOCapabilities::Extension = Extension; _p->ns2__IOCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IOCapabilities(struct soap *soap, ns2__IOCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IOCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EventCapabilities
#define SOAP_TYPE_ns2__EventCapabilities (343)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EventCapabilities(struct soap*, const char*, int, const ns2__EventCapabilities *, const char*);
SOAP_FMAC3 ns2__EventCapabilities * SOAP_FMAC4 soap_in_ns2__EventCapabilities(struct soap*, const char*, ns2__EventCapabilities *, const char*);

#ifndef soap_write_ns2__EventCapabilities
#define soap_write_ns2__EventCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EventCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventCapabilities * SOAP_FMAC4 soap_get_ns2__EventCapabilities(struct soap*, ns2__EventCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__EventCapabilities
#define soap_read_ns2__EventCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EventCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EventCapabilities * SOAP_FMAC2 soap_instantiate_ns2__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EventCapabilities * soap_new_ns2__EventCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EventCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__EventCapabilities * soap_new_req_ns2__EventCapabilities(struct soap *soap, const std::string& XAddr, bool WSSubscriptionPolicySupport, bool WSPullPointSupport, bool WSPausableSubscriptionManagerInterfaceSupport) { ns2__EventCapabilities *_p = soap_instantiate_ns2__EventCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventCapabilities::XAddr = XAddr; _p->ns2__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport; _p->ns2__EventCapabilities::WSPullPointSupport = WSPullPointSupport; _p->ns2__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport; } return _p; }

inline ns2__EventCapabilities * soap_new_set_ns2__EventCapabilities(struct soap *soap, const std::string& XAddr, bool WSSubscriptionPolicySupport, bool WSPullPointSupport, bool WSPausableSubscriptionManagerInterfaceSupport, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__EventCapabilities *_p = soap_instantiate_ns2__EventCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventCapabilities::XAddr = XAddr; _p->ns2__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport; _p->ns2__EventCapabilities::WSPullPointSupport = WSPullPointSupport; _p->ns2__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport; _p->ns2__EventCapabilities::__any = __any; _p->ns2__EventCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EventCapabilities(struct soap *soap, ns2__EventCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EventCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DeviceCapabilitiesExtension
#define SOAP_TYPE_ns2__DeviceCapabilitiesExtension (342)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeviceCapabilitiesExtension(struct soap*, const char*, int, const ns2__DeviceCapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__DeviceCapabilitiesExtension(struct soap*, const char*, ns2__DeviceCapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__DeviceCapabilitiesExtension
#define soap_write_ns2__DeviceCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DeviceCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__DeviceCapabilitiesExtension(struct soap*, ns2__DeviceCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__DeviceCapabilitiesExtension
#define soap_read_ns2__DeviceCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DeviceCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeviceCapabilitiesExtension * soap_new_ns2__DeviceCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DeviceCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__DeviceCapabilitiesExtension * soap_new_req_ns2__DeviceCapabilitiesExtension(struct soap *soap) { ns2__DeviceCapabilitiesExtension *_p = soap_instantiate_ns2__DeviceCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DeviceCapabilitiesExtension * soap_new_set_ns2__DeviceCapabilitiesExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__DeviceCapabilitiesExtension *_p = soap_instantiate_ns2__DeviceCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceCapabilitiesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DeviceCapabilitiesExtension(struct soap *soap, ns2__DeviceCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DeviceCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DeviceCapabilities
#define SOAP_TYPE_ns2__DeviceCapabilities (341)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeviceCapabilities(struct soap*, const char*, int, const ns2__DeviceCapabilities *, const char*);
SOAP_FMAC3 ns2__DeviceCapabilities * SOAP_FMAC4 soap_in_ns2__DeviceCapabilities(struct soap*, const char*, ns2__DeviceCapabilities *, const char*);

#ifndef soap_write_ns2__DeviceCapabilities
#define soap_write_ns2__DeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceCapabilities * SOAP_FMAC4 soap_get_ns2__DeviceCapabilities(struct soap*, ns2__DeviceCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__DeviceCapabilities
#define soap_read_ns2__DeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_ns2__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeviceCapabilities * soap_new_ns2__DeviceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DeviceCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__DeviceCapabilities * soap_new_req_ns2__DeviceCapabilities(struct soap *soap, const std::string& XAddr) { ns2__DeviceCapabilities *_p = soap_instantiate_ns2__DeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceCapabilities::XAddr = XAddr; } return _p; }

inline ns2__DeviceCapabilities * soap_new_set_ns2__DeviceCapabilities(struct soap *soap, const std::string& XAddr, ns2__NetworkCapabilities *Network, ns2__SystemCapabilities *System, ns2__IOCapabilities *IO, ns2__SecurityCapabilities *Security, ns2__DeviceCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__DeviceCapabilities *_p = soap_instantiate_ns2__DeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceCapabilities::XAddr = XAddr; _p->ns2__DeviceCapabilities::Network = Network; _p->ns2__DeviceCapabilities::System = System; _p->ns2__DeviceCapabilities::IO = IO; _p->ns2__DeviceCapabilities::Security = Security; _p->ns2__DeviceCapabilities::Extension = Extension; _p->ns2__DeviceCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DeviceCapabilities(struct soap *soap, ns2__DeviceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DeviceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnalyticsCapabilities
#define SOAP_TYPE_ns2__AnalyticsCapabilities (340)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnalyticsCapabilities(struct soap*, const char*, int, const ns2__AnalyticsCapabilities *, const char*);
SOAP_FMAC3 ns2__AnalyticsCapabilities * SOAP_FMAC4 soap_in_ns2__AnalyticsCapabilities(struct soap*, const char*, ns2__AnalyticsCapabilities *, const char*);

#ifndef soap_write_ns2__AnalyticsCapabilities
#define soap_write_ns2__AnalyticsCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnalyticsCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsCapabilities * SOAP_FMAC4 soap_get_ns2__AnalyticsCapabilities(struct soap*, ns2__AnalyticsCapabilities *, const char*, const char*);

#ifndef soap_read_ns2__AnalyticsCapabilities
#define soap_read_ns2__AnalyticsCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnalyticsCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_ns2__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnalyticsCapabilities * soap_new_ns2__AnalyticsCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnalyticsCapabilities(soap, n, NULL, NULL, NULL); }

inline ns2__AnalyticsCapabilities * soap_new_req_ns2__AnalyticsCapabilities(struct soap *soap, const std::string& XAddr, bool RuleSupport, bool AnalyticsModuleSupport) { ns2__AnalyticsCapabilities *_p = soap_instantiate_ns2__AnalyticsCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsCapabilities::XAddr = XAddr; _p->ns2__AnalyticsCapabilities::RuleSupport = RuleSupport; _p->ns2__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport; } return _p; }

inline ns2__AnalyticsCapabilities * soap_new_set_ns2__AnalyticsCapabilities(struct soap *soap, const std::string& XAddr, bool RuleSupport, bool AnalyticsModuleSupport, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AnalyticsCapabilities *_p = soap_instantiate_ns2__AnalyticsCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnalyticsCapabilities::XAddr = XAddr; _p->ns2__AnalyticsCapabilities::RuleSupport = RuleSupport; _p->ns2__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport; _p->ns2__AnalyticsCapabilities::__any = __any; _p->ns2__AnalyticsCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnalyticsCapabilities(struct soap *soap, ns2__AnalyticsCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnalyticsCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CapabilitiesExtension2
#define SOAP_TYPE_ns2__CapabilitiesExtension2 (339)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CapabilitiesExtension2(struct soap*, const char*, int, const ns2__CapabilitiesExtension2 *, const char*);
SOAP_FMAC3 ns2__CapabilitiesExtension2 * SOAP_FMAC4 soap_in_ns2__CapabilitiesExtension2(struct soap*, const char*, ns2__CapabilitiesExtension2 *, const char*);

#ifndef soap_write_ns2__CapabilitiesExtension2
#define soap_write_ns2__CapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CapabilitiesExtension2 * SOAP_FMAC4 soap_get_ns2__CapabilitiesExtension2(struct soap*, ns2__CapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__CapabilitiesExtension2
#define soap_read_ns2__CapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_ns2__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CapabilitiesExtension2 * soap_new_ns2__CapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__CapabilitiesExtension2 * soap_new_req_ns2__CapabilitiesExtension2(struct soap *soap) { ns2__CapabilitiesExtension2 *_p = soap_instantiate_ns2__CapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CapabilitiesExtension2 * soap_new_set_ns2__CapabilitiesExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__CapabilitiesExtension2 *_p = soap_instantiate_ns2__CapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CapabilitiesExtension2(struct soap *soap, ns2__CapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CapabilitiesExtension
#define SOAP_TYPE_ns2__CapabilitiesExtension (338)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CapabilitiesExtension(struct soap*, const char*, int, const ns2__CapabilitiesExtension *, const char*);
SOAP_FMAC3 ns2__CapabilitiesExtension * SOAP_FMAC4 soap_in_ns2__CapabilitiesExtension(struct soap*, const char*, ns2__CapabilitiesExtension *, const char*);

#ifndef soap_write_ns2__CapabilitiesExtension
#define soap_write_ns2__CapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:CapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CapabilitiesExtension * SOAP_FMAC4 soap_get_ns2__CapabilitiesExtension(struct soap*, ns2__CapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_ns2__CapabilitiesExtension
#define soap_read_ns2__CapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_ns2__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CapabilitiesExtension * soap_new_ns2__CapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline ns2__CapabilitiesExtension * soap_new_req_ns2__CapabilitiesExtension(struct soap *soap) { ns2__CapabilitiesExtension *_p = soap_instantiate_ns2__CapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CapabilitiesExtension * soap_new_set_ns2__CapabilitiesExtension(struct soap *soap, const std::vector<char * >& __any, ns2__DeviceIOCapabilities *DeviceIO, ns2__DisplayCapabilities *Display, ns2__RecordingCapabilities *Recording, ns2__SearchCapabilities *Search, ns2__ReplayCapabilities *Replay, ns2__ReceiverCapabilities *Receiver, ns2__AnalyticsDeviceCapabilities *AnalyticsDevice, ns2__CapabilitiesExtension2 *Extensions, char *__item1) { ns2__CapabilitiesExtension *_p = soap_instantiate_ns2__CapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CapabilitiesExtension::__any = __any; _p->ns2__CapabilitiesExtension::DeviceIO = DeviceIO; _p->ns2__CapabilitiesExtension::Display = Display; _p->ns2__CapabilitiesExtension::Recording = Recording; _p->ns2__CapabilitiesExtension::Search = Search; _p->ns2__CapabilitiesExtension::Replay = Replay; _p->ns2__CapabilitiesExtension::Receiver = Receiver; _p->ns2__CapabilitiesExtension::AnalyticsDevice = AnalyticsDevice; _p->ns2__CapabilitiesExtension::Extensions = Extensions; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__CapabilitiesExtension(struct soap *soap, ns2__CapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Capabilities
#define SOAP_TYPE_ns2__Capabilities (337)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Capabilities(struct soap*, const char*, int, const ns2__Capabilities *, const char*);
SOAP_FMAC3 ns2__Capabilities * SOAP_FMAC4 soap_in_ns2__Capabilities(struct soap*, const char*, ns2__Capabilities *, const char*);

#ifndef soap_write_ns2__Capabilities
#define soap_write_ns2__Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Capabilities * SOAP_FMAC4 soap_get_ns2__Capabilities(struct soap*, ns2__Capabilities *, const char*, const char*);

#ifndef soap_read_ns2__Capabilities
#define soap_read_ns2__Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Capabilities * SOAP_FMAC2 soap_instantiate_ns2__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Capabilities * soap_new_ns2__Capabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Capabilities(soap, n, NULL, NULL, NULL); }

inline ns2__Capabilities * soap_new_req_ns2__Capabilities(struct soap *soap) { ns2__Capabilities *_p = soap_instantiate_ns2__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Capabilities * soap_new_set_ns2__Capabilities(struct soap *soap, ns2__AnalyticsCapabilities *Analytics, ns2__DeviceCapabilities *Device, ns2__EventCapabilities *Events, ns2__ImagingCapabilities *Imaging, ns2__MediaCapabilities *Media, ns2__PTZCapabilities *PTZ, ns2__CapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Capabilities *_p = soap_instantiate_ns2__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Capabilities::Analytics = Analytics; _p->ns2__Capabilities::Device = Device; _p->ns2__Capabilities::Events = Events; _p->ns2__Capabilities::Imaging = Imaging; _p->ns2__Capabilities::Media = Media; _p->ns2__Capabilities::PTZ = PTZ; _p->ns2__Capabilities::Extension = Extension; _p->ns2__Capabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Capabilities(struct soap *soap, ns2__Capabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Capabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11AvailableNetworksExtension
#define SOAP_TYPE_ns2__Dot11AvailableNetworksExtension (336)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11AvailableNetworksExtension(struct soap*, const char*, int, const ns2__Dot11AvailableNetworksExtension *, const char*);
SOAP_FMAC3 ns2__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_in_ns2__Dot11AvailableNetworksExtension(struct soap*, const char*, ns2__Dot11AvailableNetworksExtension *, const char*);

#ifndef soap_write_ns2__Dot11AvailableNetworksExtension
#define soap_write_ns2__Dot11AvailableNetworksExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11AvailableNetworksExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_get_ns2__Dot11AvailableNetworksExtension(struct soap*, ns2__Dot11AvailableNetworksExtension *, const char*, const char*);

#ifndef soap_read_ns2__Dot11AvailableNetworksExtension
#define soap_read_ns2__Dot11AvailableNetworksExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11AvailableNetworksExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_ns2__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11AvailableNetworksExtension * soap_new_ns2__Dot11AvailableNetworksExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11AvailableNetworksExtension(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11AvailableNetworksExtension * soap_new_req_ns2__Dot11AvailableNetworksExtension(struct soap *soap) { ns2__Dot11AvailableNetworksExtension *_p = soap_instantiate_ns2__Dot11AvailableNetworksExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Dot11AvailableNetworksExtension * soap_new_set_ns2__Dot11AvailableNetworksExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__Dot11AvailableNetworksExtension *_p = soap_instantiate_ns2__Dot11AvailableNetworksExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11AvailableNetworksExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11AvailableNetworksExtension(struct soap *soap, ns2__Dot11AvailableNetworksExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11AvailableNetworksExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11AvailableNetworks
#define SOAP_TYPE_ns2__Dot11AvailableNetworks (335)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11AvailableNetworks(struct soap*, const char*, int, const ns2__Dot11AvailableNetworks *, const char*);
SOAP_FMAC3 ns2__Dot11AvailableNetworks * SOAP_FMAC4 soap_in_ns2__Dot11AvailableNetworks(struct soap*, const char*, ns2__Dot11AvailableNetworks *, const char*);

#ifndef soap_write_ns2__Dot11AvailableNetworks
#define soap_write_ns2__Dot11AvailableNetworks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11AvailableNetworks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11AvailableNetworks * SOAP_FMAC4 soap_get_ns2__Dot11AvailableNetworks(struct soap*, ns2__Dot11AvailableNetworks *, const char*, const char*);

#ifndef soap_read_ns2__Dot11AvailableNetworks
#define soap_read_ns2__Dot11AvailableNetworks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11AvailableNetworks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_ns2__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11AvailableNetworks * soap_new_ns2__Dot11AvailableNetworks(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11AvailableNetworks(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11AvailableNetworks * soap_new_req_ns2__Dot11AvailableNetworks(struct soap *soap, const xsd__hexBinary& SSID) { ns2__Dot11AvailableNetworks *_p = soap_instantiate_ns2__Dot11AvailableNetworks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11AvailableNetworks::SSID = SSID; } return _p; }

inline ns2__Dot11AvailableNetworks * soap_new_set_ns2__Dot11AvailableNetworks(struct soap *soap, const xsd__hexBinary& SSID, std::string *BSSID, const std::vector<enum ns2__Dot11AuthAndMangementSuite >& AuthAndMangementSuite, const std::vector<enum ns2__Dot11Cipher >& PairCipher, const std::vector<enum ns2__Dot11Cipher >& GroupCipher, enum ns2__Dot11SignalStrength *SignalStrength, ns2__Dot11AvailableNetworksExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Dot11AvailableNetworks *_p = soap_instantiate_ns2__Dot11AvailableNetworks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11AvailableNetworks::SSID = SSID; _p->ns2__Dot11AvailableNetworks::BSSID = BSSID; _p->ns2__Dot11AvailableNetworks::AuthAndMangementSuite = AuthAndMangementSuite; _p->ns2__Dot11AvailableNetworks::PairCipher = PairCipher; _p->ns2__Dot11AvailableNetworks::GroupCipher = GroupCipher; _p->ns2__Dot11AvailableNetworks::SignalStrength = SignalStrength; _p->ns2__Dot11AvailableNetworks::Extension = Extension; _p->ns2__Dot11AvailableNetworks::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11AvailableNetworks(struct soap *soap, ns2__Dot11AvailableNetworks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11AvailableNetworks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11Status
#define SOAP_TYPE_ns2__Dot11Status (334)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11Status(struct soap*, const char*, int, const ns2__Dot11Status *, const char*);
SOAP_FMAC3 ns2__Dot11Status * SOAP_FMAC4 soap_in_ns2__Dot11Status(struct soap*, const char*, ns2__Dot11Status *, const char*);

#ifndef soap_write_ns2__Dot11Status
#define soap_write_ns2__Dot11Status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11Status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11Status * SOAP_FMAC4 soap_get_ns2__Dot11Status(struct soap*, ns2__Dot11Status *, const char*, const char*);

#ifndef soap_read_ns2__Dot11Status
#define soap_read_ns2__Dot11Status(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11Status(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11Status * SOAP_FMAC2 soap_instantiate_ns2__Dot11Status(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11Status * soap_new_ns2__Dot11Status(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11Status(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11Status * soap_new_req_ns2__Dot11Status(struct soap *soap, const xsd__hexBinary& SSID, const std::string& ActiveConfigAlias) { ns2__Dot11Status *_p = soap_instantiate_ns2__Dot11Status(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Status::SSID = SSID; _p->ns2__Dot11Status::ActiveConfigAlias = ActiveConfigAlias; } return _p; }

inline ns2__Dot11Status * soap_new_set_ns2__Dot11Status(struct soap *soap, const xsd__hexBinary& SSID, std::string *BSSID, enum ns2__Dot11Cipher *PairCipher, enum ns2__Dot11Cipher *GroupCipher, enum ns2__Dot11SignalStrength *SignalStrength, const std::string& ActiveConfigAlias, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Dot11Status *_p = soap_instantiate_ns2__Dot11Status(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Status::SSID = SSID; _p->ns2__Dot11Status::BSSID = BSSID; _p->ns2__Dot11Status::PairCipher = PairCipher; _p->ns2__Dot11Status::GroupCipher = GroupCipher; _p->ns2__Dot11Status::SignalStrength = SignalStrength; _p->ns2__Dot11Status::ActiveConfigAlias = ActiveConfigAlias; _p->ns2__Dot11Status::__any = __any; _p->ns2__Dot11Status::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11Status(struct soap *soap, ns2__Dot11Status *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11Status(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11Capabilities
#define SOAP_TYPE_ns2__Dot11Capabilities (333)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11Capabilities(struct soap*, const char*, int, const ns2__Dot11Capabilities *, const char*);
SOAP_FMAC3 ns2__Dot11Capabilities * SOAP_FMAC4 soap_in_ns2__Dot11Capabilities(struct soap*, const char*, ns2__Dot11Capabilities *, const char*);

#ifndef soap_write_ns2__Dot11Capabilities
#define soap_write_ns2__Dot11Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11Capabilities * SOAP_FMAC4 soap_get_ns2__Dot11Capabilities(struct soap*, ns2__Dot11Capabilities *, const char*, const char*);

#ifndef soap_read_ns2__Dot11Capabilities
#define soap_read_ns2__Dot11Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_ns2__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11Capabilities * soap_new_ns2__Dot11Capabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11Capabilities(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11Capabilities * soap_new_req_ns2__Dot11Capabilities(struct soap *soap, bool TKIP, bool ScanAvailableNetworks, bool MultipleConfiguration, bool AdHocStationMode, bool WEP) { ns2__Dot11Capabilities *_p = soap_instantiate_ns2__Dot11Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Capabilities::TKIP = TKIP; _p->ns2__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks; _p->ns2__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration; _p->ns2__Dot11Capabilities::AdHocStationMode = AdHocStationMode; _p->ns2__Dot11Capabilities::WEP = WEP; } return _p; }

inline ns2__Dot11Capabilities * soap_new_set_ns2__Dot11Capabilities(struct soap *soap, bool TKIP, bool ScanAvailableNetworks, bool MultipleConfiguration, bool AdHocStationMode, bool WEP, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Dot11Capabilities *_p = soap_instantiate_ns2__Dot11Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Capabilities::TKIP = TKIP; _p->ns2__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks; _p->ns2__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration; _p->ns2__Dot11Capabilities::AdHocStationMode = AdHocStationMode; _p->ns2__Dot11Capabilities::WEP = WEP; _p->ns2__Dot11Capabilities::__any = __any; _p->ns2__Dot11Capabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11Capabilities(struct soap *soap, ns2__Dot11Capabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11Capabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_ns2__NetworkInterfaceSetConfigurationExtension2 (332)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, int, const ns2__NetworkInterfaceSetConfigurationExtension2 *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, ns2__NetworkInterfaceSetConfigurationExtension2 *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceSetConfigurationExtension2
#define soap_write_ns2__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceSetConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceSetConfigurationExtension2
#define soap_read_ns2__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceSetConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceSetConfigurationExtension2 * soap_new_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceSetConfigurationExtension2 * soap_new_req_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap *soap) { ns2__NetworkInterfaceSetConfigurationExtension2 *_p = soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkInterfaceSetConfigurationExtension2 * soap_new_set_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NetworkInterfaceSetConfigurationExtension2 *_p = soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceSetConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, ns2__NetworkInterfaceSetConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11PSKSetExtension
#define SOAP_TYPE_ns2__Dot11PSKSetExtension (331)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11PSKSetExtension(struct soap*, const char*, int, const ns2__Dot11PSKSetExtension *, const char*);
SOAP_FMAC3 ns2__Dot11PSKSetExtension * SOAP_FMAC4 soap_in_ns2__Dot11PSKSetExtension(struct soap*, const char*, ns2__Dot11PSKSetExtension *, const char*);

#ifndef soap_write_ns2__Dot11PSKSetExtension
#define soap_write_ns2__Dot11PSKSetExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11PSKSetExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11PSKSetExtension * SOAP_FMAC4 soap_get_ns2__Dot11PSKSetExtension(struct soap*, ns2__Dot11PSKSetExtension *, const char*, const char*);

#ifndef soap_read_ns2__Dot11PSKSetExtension
#define soap_read_ns2__Dot11PSKSetExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11PSKSetExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_ns2__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11PSKSetExtension * soap_new_ns2__Dot11PSKSetExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11PSKSetExtension(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11PSKSetExtension * soap_new_req_ns2__Dot11PSKSetExtension(struct soap *soap) { ns2__Dot11PSKSetExtension *_p = soap_instantiate_ns2__Dot11PSKSetExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Dot11PSKSetExtension * soap_new_set_ns2__Dot11PSKSetExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__Dot11PSKSetExtension *_p = soap_instantiate_ns2__Dot11PSKSetExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11PSKSetExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11PSKSetExtension(struct soap *soap, ns2__Dot11PSKSetExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11PSKSetExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11PSKSet
#define SOAP_TYPE_ns2__Dot11PSKSet (330)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11PSKSet(struct soap*, const char*, int, const ns2__Dot11PSKSet *, const char*);
SOAP_FMAC3 ns2__Dot11PSKSet * SOAP_FMAC4 soap_in_ns2__Dot11PSKSet(struct soap*, const char*, ns2__Dot11PSKSet *, const char*);

#ifndef soap_write_ns2__Dot11PSKSet
#define soap_write_ns2__Dot11PSKSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11PSKSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11PSKSet * SOAP_FMAC4 soap_get_ns2__Dot11PSKSet(struct soap*, ns2__Dot11PSKSet *, const char*, const char*);

#ifndef soap_read_ns2__Dot11PSKSet
#define soap_read_ns2__Dot11PSKSet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11PSKSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_ns2__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11PSKSet * soap_new_ns2__Dot11PSKSet(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11PSKSet(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11PSKSet * soap_new_req_ns2__Dot11PSKSet(struct soap *soap) { ns2__Dot11PSKSet *_p = soap_instantiate_ns2__Dot11PSKSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Dot11PSKSet * soap_new_set_ns2__Dot11PSKSet(struct soap *soap, xsd__hexBinary *Key, std::string *Passphrase, ns2__Dot11PSKSetExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Dot11PSKSet *_p = soap_instantiate_ns2__Dot11PSKSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11PSKSet::Key = Key; _p->ns2__Dot11PSKSet::Passphrase = Passphrase; _p->ns2__Dot11PSKSet::Extension = Extension; _p->ns2__Dot11PSKSet::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11PSKSet(struct soap *soap, ns2__Dot11PSKSet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11PSKSet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_ns2__Dot11SecurityConfigurationExtension (329)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SecurityConfigurationExtension(struct soap*, const char*, int, const ns2__Dot11SecurityConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_in_ns2__Dot11SecurityConfigurationExtension(struct soap*, const char*, ns2__Dot11SecurityConfigurationExtension *, const char*);

#ifndef soap_write_ns2__Dot11SecurityConfigurationExtension
#define soap_write_ns2__Dot11SecurityConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11SecurityConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_get_ns2__Dot11SecurityConfigurationExtension(struct soap*, ns2__Dot11SecurityConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SecurityConfigurationExtension
#define soap_read_ns2__Dot11SecurityConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SecurityConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11SecurityConfigurationExtension * soap_new_ns2__Dot11SecurityConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11SecurityConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11SecurityConfigurationExtension * soap_new_req_ns2__Dot11SecurityConfigurationExtension(struct soap *soap) { ns2__Dot11SecurityConfigurationExtension *_p = soap_instantiate_ns2__Dot11SecurityConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Dot11SecurityConfigurationExtension * soap_new_set_ns2__Dot11SecurityConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Dot11SecurityConfigurationExtension *_p = soap_instantiate_ns2__Dot11SecurityConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SecurityConfigurationExtension::__any = __any; _p->ns2__Dot11SecurityConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11SecurityConfigurationExtension(struct soap *soap, ns2__Dot11SecurityConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11SecurityConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11SecurityConfiguration
#define SOAP_TYPE_ns2__Dot11SecurityConfiguration (328)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11SecurityConfiguration(struct soap*, const char*, int, const ns2__Dot11SecurityConfiguration *, const char*);
SOAP_FMAC3 ns2__Dot11SecurityConfiguration * SOAP_FMAC4 soap_in_ns2__Dot11SecurityConfiguration(struct soap*, const char*, ns2__Dot11SecurityConfiguration *, const char*);

#ifndef soap_write_ns2__Dot11SecurityConfiguration
#define soap_write_ns2__Dot11SecurityConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11SecurityConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SecurityConfiguration * SOAP_FMAC4 soap_get_ns2__Dot11SecurityConfiguration(struct soap*, ns2__Dot11SecurityConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__Dot11SecurityConfiguration
#define soap_read_ns2__Dot11SecurityConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11SecurityConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_ns2__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11SecurityConfiguration * soap_new_ns2__Dot11SecurityConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11SecurityConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11SecurityConfiguration * soap_new_req_ns2__Dot11SecurityConfiguration(struct soap *soap, enum ns2__Dot11SecurityMode Mode) { ns2__Dot11SecurityConfiguration *_p = soap_instantiate_ns2__Dot11SecurityConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SecurityConfiguration::Mode = Mode; } return _p; }

inline ns2__Dot11SecurityConfiguration * soap_new_set_ns2__Dot11SecurityConfiguration(struct soap *soap, enum ns2__Dot11SecurityMode Mode, enum ns2__Dot11Cipher *Algorithm, ns2__Dot11PSKSet *PSK, std::string *Dot1X, ns2__Dot11SecurityConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Dot11SecurityConfiguration *_p = soap_instantiate_ns2__Dot11SecurityConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11SecurityConfiguration::Mode = Mode; _p->ns2__Dot11SecurityConfiguration::Algorithm = Algorithm; _p->ns2__Dot11SecurityConfiguration::PSK = PSK; _p->ns2__Dot11SecurityConfiguration::Dot1X = Dot1X; _p->ns2__Dot11SecurityConfiguration::Extension = Extension; _p->ns2__Dot11SecurityConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11SecurityConfiguration(struct soap *soap, ns2__Dot11SecurityConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11SecurityConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot11Configuration
#define SOAP_TYPE_ns2__Dot11Configuration (327)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot11Configuration(struct soap*, const char*, int, const ns2__Dot11Configuration *, const char*);
SOAP_FMAC3 ns2__Dot11Configuration * SOAP_FMAC4 soap_in_ns2__Dot11Configuration(struct soap*, const char*, ns2__Dot11Configuration *, const char*);

#ifndef soap_write_ns2__Dot11Configuration
#define soap_write_ns2__Dot11Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot11Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11Configuration * SOAP_FMAC4 soap_get_ns2__Dot11Configuration(struct soap*, ns2__Dot11Configuration *, const char*, const char*);

#ifndef soap_read_ns2__Dot11Configuration
#define soap_read_ns2__Dot11Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot11Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot11Configuration * SOAP_FMAC2 soap_instantiate_ns2__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot11Configuration * soap_new_ns2__Dot11Configuration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot11Configuration(soap, n, NULL, NULL, NULL); }

inline ns2__Dot11Configuration * soap_new_req_ns2__Dot11Configuration(struct soap *soap, const xsd__hexBinary& SSID, enum ns2__Dot11StationMode Mode, const std::string& Alias, const std::string& Priority, ns2__Dot11SecurityConfiguration *Security) { ns2__Dot11Configuration *_p = soap_instantiate_ns2__Dot11Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Configuration::SSID = SSID; _p->ns2__Dot11Configuration::Mode = Mode; _p->ns2__Dot11Configuration::Alias = Alias; _p->ns2__Dot11Configuration::Priority = Priority; _p->ns2__Dot11Configuration::Security = Security; } return _p; }

inline ns2__Dot11Configuration * soap_new_set_ns2__Dot11Configuration(struct soap *soap, const xsd__hexBinary& SSID, enum ns2__Dot11StationMode Mode, const std::string& Alias, const std::string& Priority, ns2__Dot11SecurityConfiguration *Security, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Dot11Configuration *_p = soap_instantiate_ns2__Dot11Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot11Configuration::SSID = SSID; _p->ns2__Dot11Configuration::Mode = Mode; _p->ns2__Dot11Configuration::Alias = Alias; _p->ns2__Dot11Configuration::Priority = Priority; _p->ns2__Dot11Configuration::Security = Security; _p->ns2__Dot11Configuration::__any = __any; _p->ns2__Dot11Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot11Configuration(struct soap *soap, ns2__Dot11Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot11Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPAddressFilterExtension
#define SOAP_TYPE_ns2__IPAddressFilterExtension (326)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPAddressFilterExtension(struct soap*, const char*, int, const ns2__IPAddressFilterExtension *, const char*);
SOAP_FMAC3 ns2__IPAddressFilterExtension * SOAP_FMAC4 soap_in_ns2__IPAddressFilterExtension(struct soap*, const char*, ns2__IPAddressFilterExtension *, const char*);

#ifndef soap_write_ns2__IPAddressFilterExtension
#define soap_write_ns2__IPAddressFilterExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPAddressFilterExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPAddressFilterExtension * SOAP_FMAC4 soap_get_ns2__IPAddressFilterExtension(struct soap*, ns2__IPAddressFilterExtension *, const char*, const char*);

#ifndef soap_read_ns2__IPAddressFilterExtension
#define soap_read_ns2__IPAddressFilterExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPAddressFilterExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_ns2__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPAddressFilterExtension * soap_new_ns2__IPAddressFilterExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPAddressFilterExtension(soap, n, NULL, NULL, NULL); }

inline ns2__IPAddressFilterExtension * soap_new_req_ns2__IPAddressFilterExtension(struct soap *soap) { ns2__IPAddressFilterExtension *_p = soap_instantiate_ns2__IPAddressFilterExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IPAddressFilterExtension * soap_new_set_ns2__IPAddressFilterExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__IPAddressFilterExtension *_p = soap_instantiate_ns2__IPAddressFilterExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddressFilterExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPAddressFilterExtension(struct soap *soap, ns2__IPAddressFilterExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPAddressFilterExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPAddressFilter
#define SOAP_TYPE_ns2__IPAddressFilter (325)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPAddressFilter(struct soap*, const char*, int, const ns2__IPAddressFilter *, const char*);
SOAP_FMAC3 ns2__IPAddressFilter * SOAP_FMAC4 soap_in_ns2__IPAddressFilter(struct soap*, const char*, ns2__IPAddressFilter *, const char*);

#ifndef soap_write_ns2__IPAddressFilter
#define soap_write_ns2__IPAddressFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPAddressFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPAddressFilter * SOAP_FMAC4 soap_get_ns2__IPAddressFilter(struct soap*, ns2__IPAddressFilter *, const char*, const char*);

#ifndef soap_read_ns2__IPAddressFilter
#define soap_read_ns2__IPAddressFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPAddressFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPAddressFilter * SOAP_FMAC2 soap_instantiate_ns2__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPAddressFilter * soap_new_ns2__IPAddressFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPAddressFilter(soap, n, NULL, NULL, NULL); }

inline ns2__IPAddressFilter * soap_new_req_ns2__IPAddressFilter(struct soap *soap, enum ns2__IPAddressFilterType Type) { ns2__IPAddressFilter *_p = soap_instantiate_ns2__IPAddressFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddressFilter::Type = Type; } return _p; }

inline ns2__IPAddressFilter * soap_new_set_ns2__IPAddressFilter(struct soap *soap, enum ns2__IPAddressFilterType Type, const std::vector<ns2__PrefixedIPv4Address * >& IPv4Address, const std::vector<ns2__PrefixedIPv6Address * >& IPv6Address, ns2__IPAddressFilterExtension *Extension, char *__anyAttribute, char *__item1) { ns2__IPAddressFilter *_p = soap_instantiate_ns2__IPAddressFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddressFilter::Type = Type; _p->ns2__IPAddressFilter::IPv4Address = IPv4Address; _p->ns2__IPAddressFilter::IPv6Address = IPv6Address; _p->ns2__IPAddressFilter::Extension = Extension; _p->ns2__IPAddressFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPAddressFilter(struct soap *soap, ns2__IPAddressFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPAddressFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_ns2__NetworkZeroConfigurationExtension2 (324)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkZeroConfigurationExtension2(struct soap*, const char*, int, const ns2__NetworkZeroConfigurationExtension2 *, const char*);
SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_in_ns2__NetworkZeroConfigurationExtension2(struct soap*, const char*, ns2__NetworkZeroConfigurationExtension2 *, const char*);

#ifndef soap_write_ns2__NetworkZeroConfigurationExtension2
#define soap_write_ns2__NetworkZeroConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkZeroConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_get_ns2__NetworkZeroConfigurationExtension2(struct soap*, ns2__NetworkZeroConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__NetworkZeroConfigurationExtension2
#define soap_read_ns2__NetworkZeroConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkZeroConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_ns2__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkZeroConfigurationExtension2 * soap_new_ns2__NetworkZeroConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkZeroConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkZeroConfigurationExtension2 * soap_new_req_ns2__NetworkZeroConfigurationExtension2(struct soap *soap) { ns2__NetworkZeroConfigurationExtension2 *_p = soap_instantiate_ns2__NetworkZeroConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkZeroConfigurationExtension2 * soap_new_set_ns2__NetworkZeroConfigurationExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NetworkZeroConfigurationExtension2 *_p = soap_instantiate_ns2__NetworkZeroConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkZeroConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkZeroConfigurationExtension2(struct soap *soap, ns2__NetworkZeroConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkZeroConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkZeroConfigurationExtension
#define SOAP_TYPE_ns2__NetworkZeroConfigurationExtension (323)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkZeroConfigurationExtension(struct soap*, const char*, int, const ns2__NetworkZeroConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_in_ns2__NetworkZeroConfigurationExtension(struct soap*, const char*, ns2__NetworkZeroConfigurationExtension *, const char*);

#ifndef soap_write_ns2__NetworkZeroConfigurationExtension
#define soap_write_ns2__NetworkZeroConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkZeroConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_get_ns2__NetworkZeroConfigurationExtension(struct soap*, ns2__NetworkZeroConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__NetworkZeroConfigurationExtension
#define soap_read_ns2__NetworkZeroConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkZeroConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkZeroConfigurationExtension * soap_new_ns2__NetworkZeroConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkZeroConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkZeroConfigurationExtension * soap_new_req_ns2__NetworkZeroConfigurationExtension(struct soap *soap) { ns2__NetworkZeroConfigurationExtension *_p = soap_instantiate_ns2__NetworkZeroConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkZeroConfigurationExtension * soap_new_set_ns2__NetworkZeroConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, const std::vector<ns2__NetworkZeroConfiguration * >& Additional, ns2__NetworkZeroConfigurationExtension2 *Extension, char *__item1) { ns2__NetworkZeroConfigurationExtension *_p = soap_instantiate_ns2__NetworkZeroConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkZeroConfigurationExtension::__any = __any; _p->ns2__NetworkZeroConfigurationExtension::Additional = Additional; _p->ns2__NetworkZeroConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkZeroConfigurationExtension(struct soap *soap, ns2__NetworkZeroConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkZeroConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkZeroConfiguration
#define SOAP_TYPE_ns2__NetworkZeroConfiguration (322)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkZeroConfiguration(struct soap*, const char*, int, const ns2__NetworkZeroConfiguration *, const char*);
SOAP_FMAC3 ns2__NetworkZeroConfiguration * SOAP_FMAC4 soap_in_ns2__NetworkZeroConfiguration(struct soap*, const char*, ns2__NetworkZeroConfiguration *, const char*);

#ifndef soap_write_ns2__NetworkZeroConfiguration
#define soap_write_ns2__NetworkZeroConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkZeroConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkZeroConfiguration * SOAP_FMAC4 soap_get_ns2__NetworkZeroConfiguration(struct soap*, ns2__NetworkZeroConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__NetworkZeroConfiguration
#define soap_read_ns2__NetworkZeroConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkZeroConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_ns2__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkZeroConfiguration * soap_new_ns2__NetworkZeroConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkZeroConfiguration * soap_new_req_ns2__NetworkZeroConfiguration(struct soap *soap, const std::string& InterfaceToken, bool Enabled) { ns2__NetworkZeroConfiguration *_p = soap_instantiate_ns2__NetworkZeroConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkZeroConfiguration::InterfaceToken = InterfaceToken; _p->ns2__NetworkZeroConfiguration::Enabled = Enabled; } return _p; }

inline ns2__NetworkZeroConfiguration * soap_new_set_ns2__NetworkZeroConfiguration(struct soap *soap, const std::string& InterfaceToken, bool Enabled, const std::vector<std::string >& Addresses, ns2__NetworkZeroConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__NetworkZeroConfiguration *_p = soap_instantiate_ns2__NetworkZeroConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkZeroConfiguration::InterfaceToken = InterfaceToken; _p->ns2__NetworkZeroConfiguration::Enabled = Enabled; _p->ns2__NetworkZeroConfiguration::Addresses = Addresses; _p->ns2__NetworkZeroConfiguration::Extension = Extension; _p->ns2__NetworkZeroConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkZeroConfiguration(struct soap *soap, ns2__NetworkZeroConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkZeroConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkGateway
#define SOAP_TYPE_ns2__NetworkGateway (321)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkGateway(struct soap*, const char*, int, const ns2__NetworkGateway *, const char*);
SOAP_FMAC3 ns2__NetworkGateway * SOAP_FMAC4 soap_in_ns2__NetworkGateway(struct soap*, const char*, ns2__NetworkGateway *, const char*);

#ifndef soap_write_ns2__NetworkGateway
#define soap_write_ns2__NetworkGateway(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkGateway", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkGateway * SOAP_FMAC4 soap_get_ns2__NetworkGateway(struct soap*, ns2__NetworkGateway *, const char*, const char*);

#ifndef soap_read_ns2__NetworkGateway
#define soap_read_ns2__NetworkGateway(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkGateway(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkGateway * SOAP_FMAC2 soap_instantiate_ns2__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkGateway * soap_new_ns2__NetworkGateway(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkGateway(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkGateway * soap_new_req_ns2__NetworkGateway(struct soap *soap) { ns2__NetworkGateway *_p = soap_instantiate_ns2__NetworkGateway(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkGateway * soap_new_set_ns2__NetworkGateway(struct soap *soap, const std::vector<std::string >& IPv4Address, const std::vector<std::string >& IPv6Address, char *__item1) { ns2__NetworkGateway *_p = soap_instantiate_ns2__NetworkGateway(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkGateway::IPv4Address = IPv4Address; _p->ns2__NetworkGateway::IPv6Address = IPv6Address; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkGateway(struct soap *soap, ns2__NetworkGateway *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkGateway(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_ns2__IPv4NetworkInterfaceSetConfiguration (320)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const ns2__IPv4NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 ns2__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, ns2__IPv4NetworkInterfaceSetConfiguration *, const char*);

#ifndef soap_write_ns2__IPv4NetworkInterfaceSetConfiguration
#define soap_write_ns2__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv4NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv4NetworkInterfaceSetConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__IPv4NetworkInterfaceSetConfiguration
#define soap_read_ns2__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv4NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv4NetworkInterfaceSetConfiguration * soap_new_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv4NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__IPv4NetworkInterfaceSetConfiguration * soap_new_req_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap *soap) { ns2__IPv4NetworkInterfaceSetConfiguration *_p = soap_instantiate_ns2__IPv4NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IPv4NetworkInterfaceSetConfiguration * soap_new_set_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, bool *Enabled, const std::vector<ns2__PrefixedIPv4Address * >& Manual, bool *DHCP, char *__item1) { ns2__IPv4NetworkInterfaceSetConfiguration *_p = soap_instantiate_ns2__IPv4NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4NetworkInterfaceSetConfiguration::Enabled = Enabled; _p->ns2__IPv4NetworkInterfaceSetConfiguration::Manual = Manual; _p->ns2__IPv4NetworkInterfaceSetConfiguration::DHCP = DHCP; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, ns2__IPv4NetworkInterfaceSetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_ns2__IPv6NetworkInterfaceSetConfiguration (319)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const ns2__IPv6NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 ns2__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, ns2__IPv6NetworkInterfaceSetConfiguration *, const char*);

#ifndef soap_write_ns2__IPv6NetworkInterfaceSetConfiguration
#define soap_write_ns2__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv6NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv6NetworkInterfaceSetConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__IPv6NetworkInterfaceSetConfiguration
#define soap_read_ns2__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv6NetworkInterfaceSetConfiguration * soap_new_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv6NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__IPv6NetworkInterfaceSetConfiguration * soap_new_req_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap *soap) { ns2__IPv6NetworkInterfaceSetConfiguration *_p = soap_instantiate_ns2__IPv6NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IPv6NetworkInterfaceSetConfiguration * soap_new_set_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, bool *Enabled, bool *AcceptRouterAdvert, const std::vector<ns2__PrefixedIPv6Address * >& Manual, enum ns2__IPv6DHCPConfiguration *DHCP, char *__item1) { ns2__IPv6NetworkInterfaceSetConfiguration *_p = soap_instantiate_ns2__IPv6NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6NetworkInterfaceSetConfiguration::Enabled = Enabled; _p->ns2__IPv6NetworkInterfaceSetConfiguration::AcceptRouterAdvert = AcceptRouterAdvert; _p->ns2__IPv6NetworkInterfaceSetConfiguration::Manual = Manual; _p->ns2__IPv6NetworkInterfaceSetConfiguration::DHCP = DHCP; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, ns2__IPv6NetworkInterfaceSetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_ns2__NetworkInterfaceSetConfigurationExtension (318)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, int, const ns2__NetworkInterfaceSetConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, ns2__NetworkInterfaceSetConfigurationExtension *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceSetConfigurationExtension
#define soap_write_ns2__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceSetConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceSetConfigurationExtension(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceSetConfigurationExtension
#define soap_read_ns2__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceSetConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceSetConfigurationExtension * soap_new_ns2__NetworkInterfaceSetConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceSetConfigurationExtension * soap_new_req_ns2__NetworkInterfaceSetConfigurationExtension(struct soap *soap) { ns2__NetworkInterfaceSetConfigurationExtension *_p = soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkInterfaceSetConfigurationExtension * soap_new_set_ns2__NetworkInterfaceSetConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, const std::vector<ns2__Dot3Configuration * >& Dot3, const std::vector<ns2__Dot11Configuration * >& Dot11, ns2__NetworkInterfaceSetConfigurationExtension2 *Extension, char *__item1) { ns2__NetworkInterfaceSetConfigurationExtension *_p = soap_instantiate_ns2__NetworkInterfaceSetConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceSetConfigurationExtension::__any = __any; _p->ns2__NetworkInterfaceSetConfigurationExtension::Dot3 = Dot3; _p->ns2__NetworkInterfaceSetConfigurationExtension::Dot11 = Dot11; _p->ns2__NetworkInterfaceSetConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceSetConfigurationExtension(struct soap *soap, ns2__NetworkInterfaceSetConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceSetConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_ns2__NetworkInterfaceSetConfiguration (317)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const ns2__NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceSetConfiguration(struct soap*, const char*, ns2__NetworkInterfaceSetConfiguration *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceSetConfiguration
#define soap_write_ns2__NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceSetConfiguration(struct soap*, ns2__NetworkInterfaceSetConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceSetConfiguration
#define soap_read_ns2__NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceSetConfiguration * soap_new_ns2__NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceSetConfiguration * soap_new_req_ns2__NetworkInterfaceSetConfiguration(struct soap *soap) { ns2__NetworkInterfaceSetConfiguration *_p = soap_instantiate_ns2__NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkInterfaceSetConfiguration * soap_new_set_ns2__NetworkInterfaceSetConfiguration(struct soap *soap, bool *Enabled, ns2__NetworkInterfaceConnectionSetting *Link, int *MTU, ns2__IPv4NetworkInterfaceSetConfiguration *IPv4, ns2__IPv6NetworkInterfaceSetConfiguration *IPv6, ns2__NetworkInterfaceSetConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__NetworkInterfaceSetConfiguration *_p = soap_instantiate_ns2__NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceSetConfiguration::Enabled = Enabled; _p->ns2__NetworkInterfaceSetConfiguration::Link = Link; _p->ns2__NetworkInterfaceSetConfiguration::MTU = MTU; _p->ns2__NetworkInterfaceSetConfiguration::IPv4 = IPv4; _p->ns2__NetworkInterfaceSetConfiguration::IPv6 = IPv6; _p->ns2__NetworkInterfaceSetConfiguration::Extension = Extension; _p->ns2__NetworkInterfaceSetConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceSetConfiguration(struct soap *soap, ns2__NetworkInterfaceSetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceSetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DynamicDNSInformationExtension
#define SOAP_TYPE_ns2__DynamicDNSInformationExtension (316)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DynamicDNSInformationExtension(struct soap*, const char*, int, const ns2__DynamicDNSInformationExtension *, const char*);
SOAP_FMAC3 ns2__DynamicDNSInformationExtension * SOAP_FMAC4 soap_in_ns2__DynamicDNSInformationExtension(struct soap*, const char*, ns2__DynamicDNSInformationExtension *, const char*);

#ifndef soap_write_ns2__DynamicDNSInformationExtension
#define soap_write_ns2__DynamicDNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DynamicDNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DynamicDNSInformationExtension * SOAP_FMAC4 soap_get_ns2__DynamicDNSInformationExtension(struct soap*, ns2__DynamicDNSInformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__DynamicDNSInformationExtension
#define soap_read_ns2__DynamicDNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DynamicDNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_ns2__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DynamicDNSInformationExtension * soap_new_ns2__DynamicDNSInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DynamicDNSInformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__DynamicDNSInformationExtension * soap_new_req_ns2__DynamicDNSInformationExtension(struct soap *soap) { ns2__DynamicDNSInformationExtension *_p = soap_instantiate_ns2__DynamicDNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DynamicDNSInformationExtension * soap_new_set_ns2__DynamicDNSInformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__DynamicDNSInformationExtension *_p = soap_instantiate_ns2__DynamicDNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DynamicDNSInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DynamicDNSInformationExtension(struct soap *soap, ns2__DynamicDNSInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DynamicDNSInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DynamicDNSInformation
#define SOAP_TYPE_ns2__DynamicDNSInformation (315)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DynamicDNSInformation(struct soap*, const char*, int, const ns2__DynamicDNSInformation *, const char*);
SOAP_FMAC3 ns2__DynamicDNSInformation * SOAP_FMAC4 soap_in_ns2__DynamicDNSInformation(struct soap*, const char*, ns2__DynamicDNSInformation *, const char*);

#ifndef soap_write_ns2__DynamicDNSInformation
#define soap_write_ns2__DynamicDNSInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DynamicDNSInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DynamicDNSInformation * SOAP_FMAC4 soap_get_ns2__DynamicDNSInformation(struct soap*, ns2__DynamicDNSInformation *, const char*, const char*);

#ifndef soap_read_ns2__DynamicDNSInformation
#define soap_read_ns2__DynamicDNSInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DynamicDNSInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_ns2__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DynamicDNSInformation * soap_new_ns2__DynamicDNSInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DynamicDNSInformation(soap, n, NULL, NULL, NULL); }

inline ns2__DynamicDNSInformation * soap_new_req_ns2__DynamicDNSInformation(struct soap *soap, enum ns2__DynamicDNSType Type) { ns2__DynamicDNSInformation *_p = soap_instantiate_ns2__DynamicDNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DynamicDNSInformation::Type = Type; } return _p; }

inline ns2__DynamicDNSInformation * soap_new_set_ns2__DynamicDNSInformation(struct soap *soap, enum ns2__DynamicDNSType Type, std::string *Name, std::string *TTL, ns2__DynamicDNSInformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__DynamicDNSInformation *_p = soap_instantiate_ns2__DynamicDNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DynamicDNSInformation::Type = Type; _p->ns2__DynamicDNSInformation::Name = Name; _p->ns2__DynamicDNSInformation::TTL = TTL; _p->ns2__DynamicDNSInformation::Extension = Extension; _p->ns2__DynamicDNSInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DynamicDNSInformation(struct soap *soap, ns2__DynamicDNSInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DynamicDNSInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NTPInformationExtension
#define SOAP_TYPE_ns2__NTPInformationExtension (314)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NTPInformationExtension(struct soap*, const char*, int, const ns2__NTPInformationExtension *, const char*);
SOAP_FMAC3 ns2__NTPInformationExtension * SOAP_FMAC4 soap_in_ns2__NTPInformationExtension(struct soap*, const char*, ns2__NTPInformationExtension *, const char*);

#ifndef soap_write_ns2__NTPInformationExtension
#define soap_write_ns2__NTPInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NTPInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NTPInformationExtension * SOAP_FMAC4 soap_get_ns2__NTPInformationExtension(struct soap*, ns2__NTPInformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__NTPInformationExtension
#define soap_read_ns2__NTPInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NTPInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_ns2__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NTPInformationExtension * soap_new_ns2__NTPInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NTPInformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NTPInformationExtension * soap_new_req_ns2__NTPInformationExtension(struct soap *soap) { ns2__NTPInformationExtension *_p = soap_instantiate_ns2__NTPInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NTPInformationExtension * soap_new_set_ns2__NTPInformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NTPInformationExtension *_p = soap_instantiate_ns2__NTPInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NTPInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NTPInformationExtension(struct soap *soap, ns2__NTPInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NTPInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NTPInformation
#define SOAP_TYPE_ns2__NTPInformation (313)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NTPInformation(struct soap*, const char*, int, const ns2__NTPInformation *, const char*);
SOAP_FMAC3 ns2__NTPInformation * SOAP_FMAC4 soap_in_ns2__NTPInformation(struct soap*, const char*, ns2__NTPInformation *, const char*);

#ifndef soap_write_ns2__NTPInformation
#define soap_write_ns2__NTPInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NTPInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NTPInformation * SOAP_FMAC4 soap_get_ns2__NTPInformation(struct soap*, ns2__NTPInformation *, const char*, const char*);

#ifndef soap_read_ns2__NTPInformation
#define soap_read_ns2__NTPInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NTPInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NTPInformation * SOAP_FMAC2 soap_instantiate_ns2__NTPInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NTPInformation * soap_new_ns2__NTPInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NTPInformation(soap, n, NULL, NULL, NULL); }

inline ns2__NTPInformation * soap_new_req_ns2__NTPInformation(struct soap *soap, bool FromDHCP) { ns2__NTPInformation *_p = soap_instantiate_ns2__NTPInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NTPInformation::FromDHCP = FromDHCP; } return _p; }

inline ns2__NTPInformation * soap_new_set_ns2__NTPInformation(struct soap *soap, bool FromDHCP, const std::vector<ns2__NetworkHost * >& NTPFromDHCP, const std::vector<ns2__NetworkHost * >& NTPManual, ns2__NTPInformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__NTPInformation *_p = soap_instantiate_ns2__NTPInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NTPInformation::FromDHCP = FromDHCP; _p->ns2__NTPInformation::NTPFromDHCP = NTPFromDHCP; _p->ns2__NTPInformation::NTPManual = NTPManual; _p->ns2__NTPInformation::Extension = Extension; _p->ns2__NTPInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NTPInformation(struct soap *soap, ns2__NTPInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NTPInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DNSInformationExtension
#define SOAP_TYPE_ns2__DNSInformationExtension (312)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DNSInformationExtension(struct soap*, const char*, int, const ns2__DNSInformationExtension *, const char*);
SOAP_FMAC3 ns2__DNSInformationExtension * SOAP_FMAC4 soap_in_ns2__DNSInformationExtension(struct soap*, const char*, ns2__DNSInformationExtension *, const char*);

#ifndef soap_write_ns2__DNSInformationExtension
#define soap_write_ns2__DNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DNSInformationExtension * SOAP_FMAC4 soap_get_ns2__DNSInformationExtension(struct soap*, ns2__DNSInformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__DNSInformationExtension
#define soap_read_ns2__DNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_ns2__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DNSInformationExtension * soap_new_ns2__DNSInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DNSInformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__DNSInformationExtension * soap_new_req_ns2__DNSInformationExtension(struct soap *soap) { ns2__DNSInformationExtension *_p = soap_instantiate_ns2__DNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__DNSInformationExtension * soap_new_set_ns2__DNSInformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__DNSInformationExtension *_p = soap_instantiate_ns2__DNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DNSInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DNSInformationExtension(struct soap *soap, ns2__DNSInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DNSInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DNSInformation
#define SOAP_TYPE_ns2__DNSInformation (311)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DNSInformation(struct soap*, const char*, int, const ns2__DNSInformation *, const char*);
SOAP_FMAC3 ns2__DNSInformation * SOAP_FMAC4 soap_in_ns2__DNSInformation(struct soap*, const char*, ns2__DNSInformation *, const char*);

#ifndef soap_write_ns2__DNSInformation
#define soap_write_ns2__DNSInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DNSInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DNSInformation * SOAP_FMAC4 soap_get_ns2__DNSInformation(struct soap*, ns2__DNSInformation *, const char*, const char*);

#ifndef soap_read_ns2__DNSInformation
#define soap_read_ns2__DNSInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DNSInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DNSInformation * SOAP_FMAC2 soap_instantiate_ns2__DNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DNSInformation * soap_new_ns2__DNSInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DNSInformation(soap, n, NULL, NULL, NULL); }

inline ns2__DNSInformation * soap_new_req_ns2__DNSInformation(struct soap *soap, bool FromDHCP) { ns2__DNSInformation *_p = soap_instantiate_ns2__DNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DNSInformation::FromDHCP = FromDHCP; } return _p; }

inline ns2__DNSInformation * soap_new_set_ns2__DNSInformation(struct soap *soap, bool FromDHCP, const std::vector<std::string >& SearchDomain, const std::vector<ns2__IPAddress * >& DNSFromDHCP, const std::vector<ns2__IPAddress * >& DNSManual, ns2__DNSInformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__DNSInformation *_p = soap_instantiate_ns2__DNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DNSInformation::FromDHCP = FromDHCP; _p->ns2__DNSInformation::SearchDomain = SearchDomain; _p->ns2__DNSInformation::DNSFromDHCP = DNSFromDHCP; _p->ns2__DNSInformation::DNSManual = DNSManual; _p->ns2__DNSInformation::Extension = Extension; _p->ns2__DNSInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DNSInformation(struct soap *soap, ns2__DNSInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DNSInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__HostnameInformationExtension
#define SOAP_TYPE_ns2__HostnameInformationExtension (310)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HostnameInformationExtension(struct soap*, const char*, int, const ns2__HostnameInformationExtension *, const char*);
SOAP_FMAC3 ns2__HostnameInformationExtension * SOAP_FMAC4 soap_in_ns2__HostnameInformationExtension(struct soap*, const char*, ns2__HostnameInformationExtension *, const char*);

#ifndef soap_write_ns2__HostnameInformationExtension
#define soap_write_ns2__HostnameInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:HostnameInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__HostnameInformationExtension * SOAP_FMAC4 soap_get_ns2__HostnameInformationExtension(struct soap*, ns2__HostnameInformationExtension *, const char*, const char*);

#ifndef soap_read_ns2__HostnameInformationExtension
#define soap_read_ns2__HostnameInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__HostnameInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_ns2__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HostnameInformationExtension * soap_new_ns2__HostnameInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__HostnameInformationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__HostnameInformationExtension * soap_new_req_ns2__HostnameInformationExtension(struct soap *soap) { ns2__HostnameInformationExtension *_p = soap_instantiate_ns2__HostnameInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__HostnameInformationExtension * soap_new_set_ns2__HostnameInformationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__HostnameInformationExtension *_p = soap_instantiate_ns2__HostnameInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HostnameInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__HostnameInformationExtension(struct soap *soap, ns2__HostnameInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__HostnameInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__HostnameInformation
#define SOAP_TYPE_ns2__HostnameInformation (309)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HostnameInformation(struct soap*, const char*, int, const ns2__HostnameInformation *, const char*);
SOAP_FMAC3 ns2__HostnameInformation * SOAP_FMAC4 soap_in_ns2__HostnameInformation(struct soap*, const char*, ns2__HostnameInformation *, const char*);

#ifndef soap_write_ns2__HostnameInformation
#define soap_write_ns2__HostnameInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:HostnameInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__HostnameInformation * SOAP_FMAC4 soap_get_ns2__HostnameInformation(struct soap*, ns2__HostnameInformation *, const char*, const char*);

#ifndef soap_read_ns2__HostnameInformation
#define soap_read_ns2__HostnameInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__HostnameInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__HostnameInformation * SOAP_FMAC2 soap_instantiate_ns2__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HostnameInformation * soap_new_ns2__HostnameInformation(struct soap *soap, int n = -1) { return soap_instantiate_ns2__HostnameInformation(soap, n, NULL, NULL, NULL); }

inline ns2__HostnameInformation * soap_new_req_ns2__HostnameInformation(struct soap *soap, bool FromDHCP) { ns2__HostnameInformation *_p = soap_instantiate_ns2__HostnameInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HostnameInformation::FromDHCP = FromDHCP; } return _p; }

inline ns2__HostnameInformation * soap_new_set_ns2__HostnameInformation(struct soap *soap, bool FromDHCP, std::string *Name, ns2__HostnameInformationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__HostnameInformation *_p = soap_instantiate_ns2__HostnameInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HostnameInformation::FromDHCP = FromDHCP; _p->ns2__HostnameInformation::Name = Name; _p->ns2__HostnameInformation::Extension = Extension; _p->ns2__HostnameInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__HostnameInformation(struct soap *soap, ns2__HostnameInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__HostnameInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PrefixedIPv6Address
#define SOAP_TYPE_ns2__PrefixedIPv6Address (308)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PrefixedIPv6Address(struct soap*, const char*, int, const ns2__PrefixedIPv6Address *, const char*);
SOAP_FMAC3 ns2__PrefixedIPv6Address * SOAP_FMAC4 soap_in_ns2__PrefixedIPv6Address(struct soap*, const char*, ns2__PrefixedIPv6Address *, const char*);

#ifndef soap_write_ns2__PrefixedIPv6Address
#define soap_write_ns2__PrefixedIPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PrefixedIPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PrefixedIPv6Address * SOAP_FMAC4 soap_get_ns2__PrefixedIPv6Address(struct soap*, ns2__PrefixedIPv6Address *, const char*, const char*);

#ifndef soap_read_ns2__PrefixedIPv6Address
#define soap_read_ns2__PrefixedIPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PrefixedIPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_ns2__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PrefixedIPv6Address * soap_new_ns2__PrefixedIPv6Address(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PrefixedIPv6Address(soap, n, NULL, NULL, NULL); }

inline ns2__PrefixedIPv6Address * soap_new_req_ns2__PrefixedIPv6Address(struct soap *soap, const std::string& Address, int PrefixLength) { ns2__PrefixedIPv6Address *_p = soap_instantiate_ns2__PrefixedIPv6Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PrefixedIPv6Address::Address = Address; _p->ns2__PrefixedIPv6Address::PrefixLength = PrefixLength; } return _p; }

inline ns2__PrefixedIPv6Address * soap_new_set_ns2__PrefixedIPv6Address(struct soap *soap, const std::string& Address, int PrefixLength, char *__item1) { ns2__PrefixedIPv6Address *_p = soap_instantiate_ns2__PrefixedIPv6Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PrefixedIPv6Address::Address = Address; _p->ns2__PrefixedIPv6Address::PrefixLength = PrefixLength; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PrefixedIPv6Address(struct soap *soap, ns2__PrefixedIPv6Address *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PrefixedIPv6Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PrefixedIPv4Address
#define SOAP_TYPE_ns2__PrefixedIPv4Address (307)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PrefixedIPv4Address(struct soap*, const char*, int, const ns2__PrefixedIPv4Address *, const char*);
SOAP_FMAC3 ns2__PrefixedIPv4Address * SOAP_FMAC4 soap_in_ns2__PrefixedIPv4Address(struct soap*, const char*, ns2__PrefixedIPv4Address *, const char*);

#ifndef soap_write_ns2__PrefixedIPv4Address
#define soap_write_ns2__PrefixedIPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PrefixedIPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PrefixedIPv4Address * SOAP_FMAC4 soap_get_ns2__PrefixedIPv4Address(struct soap*, ns2__PrefixedIPv4Address *, const char*, const char*);

#ifndef soap_read_ns2__PrefixedIPv4Address
#define soap_read_ns2__PrefixedIPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PrefixedIPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_ns2__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PrefixedIPv4Address * soap_new_ns2__PrefixedIPv4Address(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PrefixedIPv4Address(soap, n, NULL, NULL, NULL); }

inline ns2__PrefixedIPv4Address * soap_new_req_ns2__PrefixedIPv4Address(struct soap *soap, const std::string& Address, int PrefixLength) { ns2__PrefixedIPv4Address *_p = soap_instantiate_ns2__PrefixedIPv4Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PrefixedIPv4Address::Address = Address; _p->ns2__PrefixedIPv4Address::PrefixLength = PrefixLength; } return _p; }

inline ns2__PrefixedIPv4Address * soap_new_set_ns2__PrefixedIPv4Address(struct soap *soap, const std::string& Address, int PrefixLength, char *__item1) { ns2__PrefixedIPv4Address *_p = soap_instantiate_ns2__PrefixedIPv4Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PrefixedIPv4Address::Address = Address; _p->ns2__PrefixedIPv4Address::PrefixLength = PrefixLength; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PrefixedIPv4Address(struct soap *soap, ns2__PrefixedIPv4Address *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PrefixedIPv4Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPAddress
#define SOAP_TYPE_ns2__IPAddress (306)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPAddress(struct soap*, const char*, int, const ns2__IPAddress *, const char*);
SOAP_FMAC3 ns2__IPAddress * SOAP_FMAC4 soap_in_ns2__IPAddress(struct soap*, const char*, ns2__IPAddress *, const char*);

#ifndef soap_write_ns2__IPAddress
#define soap_write_ns2__IPAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPAddress * SOAP_FMAC4 soap_get_ns2__IPAddress(struct soap*, ns2__IPAddress *, const char*, const char*);

#ifndef soap_read_ns2__IPAddress
#define soap_read_ns2__IPAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPAddress * SOAP_FMAC2 soap_instantiate_ns2__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPAddress * soap_new_ns2__IPAddress(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPAddress(soap, n, NULL, NULL, NULL); }

inline ns2__IPAddress * soap_new_req_ns2__IPAddress(struct soap *soap, enum ns2__IPType Type) { ns2__IPAddress *_p = soap_instantiate_ns2__IPAddress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddress::Type = Type; } return _p; }

inline ns2__IPAddress * soap_new_set_ns2__IPAddress(struct soap *soap, enum ns2__IPType Type, std::string *IPv4Address, std::string *IPv6Address, char *__item1) { ns2__IPAddress *_p = soap_instantiate_ns2__IPAddress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPAddress::Type = Type; _p->ns2__IPAddress::IPv4Address = IPv4Address; _p->ns2__IPAddress::IPv6Address = IPv6Address; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPAddress(struct soap *soap, ns2__IPAddress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPAddress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkHostExtension
#define SOAP_TYPE_ns2__NetworkHostExtension (305)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkHostExtension(struct soap*, const char*, int, const ns2__NetworkHostExtension *, const char*);
SOAP_FMAC3 ns2__NetworkHostExtension * SOAP_FMAC4 soap_in_ns2__NetworkHostExtension(struct soap*, const char*, ns2__NetworkHostExtension *, const char*);

#ifndef soap_write_ns2__NetworkHostExtension
#define soap_write_ns2__NetworkHostExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkHostExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkHostExtension * SOAP_FMAC4 soap_get_ns2__NetworkHostExtension(struct soap*, ns2__NetworkHostExtension *, const char*, const char*);

#ifndef soap_read_ns2__NetworkHostExtension
#define soap_read_ns2__NetworkHostExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkHostExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_ns2__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkHostExtension * soap_new_ns2__NetworkHostExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkHostExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkHostExtension * soap_new_req_ns2__NetworkHostExtension(struct soap *soap) { ns2__NetworkHostExtension *_p = soap_instantiate_ns2__NetworkHostExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkHostExtension * soap_new_set_ns2__NetworkHostExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NetworkHostExtension *_p = soap_instantiate_ns2__NetworkHostExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkHostExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkHostExtension(struct soap *soap, ns2__NetworkHostExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkHostExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkHost
#define SOAP_TYPE_ns2__NetworkHost (304)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkHost(struct soap*, const char*, int, const ns2__NetworkHost *, const char*);
SOAP_FMAC3 ns2__NetworkHost * SOAP_FMAC4 soap_in_ns2__NetworkHost(struct soap*, const char*, ns2__NetworkHost *, const char*);

#ifndef soap_write_ns2__NetworkHost
#define soap_write_ns2__NetworkHost(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkHost", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkHost * SOAP_FMAC4 soap_get_ns2__NetworkHost(struct soap*, ns2__NetworkHost *, const char*, const char*);

#ifndef soap_read_ns2__NetworkHost
#define soap_read_ns2__NetworkHost(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkHost(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkHost * SOAP_FMAC2 soap_instantiate_ns2__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkHost * soap_new_ns2__NetworkHost(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkHost(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkHost * soap_new_req_ns2__NetworkHost(struct soap *soap, enum ns2__NetworkHostType Type) { ns2__NetworkHost *_p = soap_instantiate_ns2__NetworkHost(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkHost::Type = Type; } return _p; }

inline ns2__NetworkHost * soap_new_set_ns2__NetworkHost(struct soap *soap, enum ns2__NetworkHostType Type, std::string *IPv4Address, std::string *IPv6Address, std::string *DNSname, ns2__NetworkHostExtension *Extension, char *__anyAttribute, char *__item1) { ns2__NetworkHost *_p = soap_instantiate_ns2__NetworkHost(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkHost::Type = Type; _p->ns2__NetworkHost::IPv4Address = IPv4Address; _p->ns2__NetworkHost::IPv6Address = IPv6Address; _p->ns2__NetworkHost::DNSname = DNSname; _p->ns2__NetworkHost::Extension = Extension; _p->ns2__NetworkHost::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkHost(struct soap *soap, ns2__NetworkHost *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkHost(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkProtocolExtension
#define SOAP_TYPE_ns2__NetworkProtocolExtension (303)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkProtocolExtension(struct soap*, const char*, int, const ns2__NetworkProtocolExtension *, const char*);
SOAP_FMAC3 ns2__NetworkProtocolExtension * SOAP_FMAC4 soap_in_ns2__NetworkProtocolExtension(struct soap*, const char*, ns2__NetworkProtocolExtension *, const char*);

#ifndef soap_write_ns2__NetworkProtocolExtension
#define soap_write_ns2__NetworkProtocolExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkProtocolExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkProtocolExtension * SOAP_FMAC4 soap_get_ns2__NetworkProtocolExtension(struct soap*, ns2__NetworkProtocolExtension *, const char*, const char*);

#ifndef soap_read_ns2__NetworkProtocolExtension
#define soap_read_ns2__NetworkProtocolExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkProtocolExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_ns2__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkProtocolExtension * soap_new_ns2__NetworkProtocolExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkProtocolExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkProtocolExtension * soap_new_req_ns2__NetworkProtocolExtension(struct soap *soap) { ns2__NetworkProtocolExtension *_p = soap_instantiate_ns2__NetworkProtocolExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkProtocolExtension * soap_new_set_ns2__NetworkProtocolExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NetworkProtocolExtension *_p = soap_instantiate_ns2__NetworkProtocolExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkProtocolExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkProtocolExtension(struct soap *soap, ns2__NetworkProtocolExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkProtocolExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkProtocol
#define SOAP_TYPE_ns2__NetworkProtocol (302)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkProtocol(struct soap*, const char*, int, const ns2__NetworkProtocol *, const char*);
SOAP_FMAC3 ns2__NetworkProtocol * SOAP_FMAC4 soap_in_ns2__NetworkProtocol(struct soap*, const char*, ns2__NetworkProtocol *, const char*);

#ifndef soap_write_ns2__NetworkProtocol
#define soap_write_ns2__NetworkProtocol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkProtocol * SOAP_FMAC4 soap_get_ns2__NetworkProtocol(struct soap*, ns2__NetworkProtocol *, const char*, const char*);

#ifndef soap_read_ns2__NetworkProtocol
#define soap_read_ns2__NetworkProtocol(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkProtocol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkProtocol * SOAP_FMAC2 soap_instantiate_ns2__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkProtocol * soap_new_ns2__NetworkProtocol(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkProtocol(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkProtocol * soap_new_req_ns2__NetworkProtocol(struct soap *soap, enum ns2__NetworkProtocolType Name, bool Enabled, const std::vector<int >& Port) { ns2__NetworkProtocol *_p = soap_instantiate_ns2__NetworkProtocol(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkProtocol::Name = Name; _p->ns2__NetworkProtocol::Enabled = Enabled; _p->ns2__NetworkProtocol::Port = Port; } return _p; }

inline ns2__NetworkProtocol * soap_new_set_ns2__NetworkProtocol(struct soap *soap, enum ns2__NetworkProtocolType Name, bool Enabled, const std::vector<int >& Port, ns2__NetworkProtocolExtension *Extension, char *__anyAttribute, char *__item1) { ns2__NetworkProtocol *_p = soap_instantiate_ns2__NetworkProtocol(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkProtocol::Name = Name; _p->ns2__NetworkProtocol::Enabled = Enabled; _p->ns2__NetworkProtocol::Port = Port; _p->ns2__NetworkProtocol::Extension = Extension; _p->ns2__NetworkProtocol::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkProtocol(struct soap *soap, ns2__NetworkProtocol *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkProtocol(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv6ConfigurationExtension
#define SOAP_TYPE_ns2__IPv6ConfigurationExtension (301)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6ConfigurationExtension(struct soap*, const char*, int, const ns2__IPv6ConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__IPv6ConfigurationExtension * SOAP_FMAC4 soap_in_ns2__IPv6ConfigurationExtension(struct soap*, const char*, ns2__IPv6ConfigurationExtension *, const char*);

#ifndef soap_write_ns2__IPv6ConfigurationExtension
#define soap_write_ns2__IPv6ConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv6ConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6ConfigurationExtension * SOAP_FMAC4 soap_get_ns2__IPv6ConfigurationExtension(struct soap*, ns2__IPv6ConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__IPv6ConfigurationExtension
#define soap_read_ns2__IPv6ConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6ConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv6ConfigurationExtension * soap_new_ns2__IPv6ConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv6ConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__IPv6ConfigurationExtension * soap_new_req_ns2__IPv6ConfigurationExtension(struct soap *soap) { ns2__IPv6ConfigurationExtension *_p = soap_instantiate_ns2__IPv6ConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IPv6ConfigurationExtension * soap_new_set_ns2__IPv6ConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__IPv6ConfigurationExtension *_p = soap_instantiate_ns2__IPv6ConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6ConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv6ConfigurationExtension(struct soap *soap, ns2__IPv6ConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv6ConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv6Configuration
#define SOAP_TYPE_ns2__IPv6Configuration (300)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6Configuration(struct soap*, const char*, int, const ns2__IPv6Configuration *, const char*);
SOAP_FMAC3 ns2__IPv6Configuration * SOAP_FMAC4 soap_in_ns2__IPv6Configuration(struct soap*, const char*, ns2__IPv6Configuration *, const char*);

#ifndef soap_write_ns2__IPv6Configuration
#define soap_write_ns2__IPv6Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv6Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6Configuration * SOAP_FMAC4 soap_get_ns2__IPv6Configuration(struct soap*, ns2__IPv6Configuration *, const char*, const char*);

#ifndef soap_read_ns2__IPv6Configuration
#define soap_read_ns2__IPv6Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv6Configuration * SOAP_FMAC2 soap_instantiate_ns2__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv6Configuration * soap_new_ns2__IPv6Configuration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv6Configuration(soap, n, NULL, NULL, NULL); }

inline ns2__IPv6Configuration * soap_new_req_ns2__IPv6Configuration(struct soap *soap, enum ns2__IPv6DHCPConfiguration DHCP) { ns2__IPv6Configuration *_p = soap_instantiate_ns2__IPv6Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6Configuration::DHCP = DHCP; } return _p; }

inline ns2__IPv6Configuration * soap_new_set_ns2__IPv6Configuration(struct soap *soap, bool *AcceptRouterAdvert, enum ns2__IPv6DHCPConfiguration DHCP, const std::vector<ns2__PrefixedIPv6Address * >& Manual, const std::vector<ns2__PrefixedIPv6Address * >& LinkLocal, const std::vector<ns2__PrefixedIPv6Address * >& FromDHCP, const std::vector<ns2__PrefixedIPv6Address * >& FromRA, ns2__IPv6ConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { ns2__IPv6Configuration *_p = soap_instantiate_ns2__IPv6Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6Configuration::AcceptRouterAdvert = AcceptRouterAdvert; _p->ns2__IPv6Configuration::DHCP = DHCP; _p->ns2__IPv6Configuration::Manual = Manual; _p->ns2__IPv6Configuration::LinkLocal = LinkLocal; _p->ns2__IPv6Configuration::FromDHCP = FromDHCP; _p->ns2__IPv6Configuration::FromRA = FromRA; _p->ns2__IPv6Configuration::Extension = Extension; _p->ns2__IPv6Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv6Configuration(struct soap *soap, ns2__IPv6Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv6Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv4Configuration
#define SOAP_TYPE_ns2__IPv4Configuration (299)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv4Configuration(struct soap*, const char*, int, const ns2__IPv4Configuration *, const char*);
SOAP_FMAC3 ns2__IPv4Configuration * SOAP_FMAC4 soap_in_ns2__IPv4Configuration(struct soap*, const char*, ns2__IPv4Configuration *, const char*);

#ifndef soap_write_ns2__IPv4Configuration
#define soap_write_ns2__IPv4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4Configuration * SOAP_FMAC4 soap_get_ns2__IPv4Configuration(struct soap*, ns2__IPv4Configuration *, const char*, const char*);

#ifndef soap_read_ns2__IPv4Configuration
#define soap_read_ns2__IPv4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv4Configuration * SOAP_FMAC2 soap_instantiate_ns2__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv4Configuration * soap_new_ns2__IPv4Configuration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv4Configuration(soap, n, NULL, NULL, NULL); }

inline ns2__IPv4Configuration * soap_new_req_ns2__IPv4Configuration(struct soap *soap, bool DHCP) { ns2__IPv4Configuration *_p = soap_instantiate_ns2__IPv4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4Configuration::DHCP = DHCP; } return _p; }

inline ns2__IPv4Configuration * soap_new_set_ns2__IPv4Configuration(struct soap *soap, const std::vector<ns2__PrefixedIPv4Address * >& Manual, ns2__PrefixedIPv4Address *LinkLocal, ns2__PrefixedIPv4Address *FromDHCP, bool DHCP, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__IPv4Configuration *_p = soap_instantiate_ns2__IPv4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4Configuration::Manual = Manual; _p->ns2__IPv4Configuration::LinkLocal = LinkLocal; _p->ns2__IPv4Configuration::FromDHCP = FromDHCP; _p->ns2__IPv4Configuration::DHCP = DHCP; _p->ns2__IPv4Configuration::__any = __any; _p->ns2__IPv4Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv4Configuration(struct soap *soap, ns2__IPv4Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv4Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv4NetworkInterface
#define SOAP_TYPE_ns2__IPv4NetworkInterface (298)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv4NetworkInterface(struct soap*, const char*, int, const ns2__IPv4NetworkInterface *, const char*);
SOAP_FMAC3 ns2__IPv4NetworkInterface * SOAP_FMAC4 soap_in_ns2__IPv4NetworkInterface(struct soap*, const char*, ns2__IPv4NetworkInterface *, const char*);

#ifndef soap_write_ns2__IPv4NetworkInterface
#define soap_write_ns2__IPv4NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv4NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4NetworkInterface * SOAP_FMAC4 soap_get_ns2__IPv4NetworkInterface(struct soap*, ns2__IPv4NetworkInterface *, const char*, const char*);

#ifndef soap_read_ns2__IPv4NetworkInterface
#define soap_read_ns2__IPv4NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv4NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_ns2__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv4NetworkInterface * soap_new_ns2__IPv4NetworkInterface(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv4NetworkInterface(soap, n, NULL, NULL, NULL); }

inline ns2__IPv4NetworkInterface * soap_new_req_ns2__IPv4NetworkInterface(struct soap *soap, bool Enabled, ns2__IPv4Configuration *Config) { ns2__IPv4NetworkInterface *_p = soap_instantiate_ns2__IPv4NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4NetworkInterface::Enabled = Enabled; _p->ns2__IPv4NetworkInterface::Config = Config; } return _p; }

inline ns2__IPv4NetworkInterface * soap_new_set_ns2__IPv4NetworkInterface(struct soap *soap, bool Enabled, ns2__IPv4Configuration *Config, char *__item1) { ns2__IPv4NetworkInterface *_p = soap_instantiate_ns2__IPv4NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv4NetworkInterface::Enabled = Enabled; _p->ns2__IPv4NetworkInterface::Config = Config; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv4NetworkInterface(struct soap *soap, ns2__IPv4NetworkInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv4NetworkInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IPv6NetworkInterface
#define SOAP_TYPE_ns2__IPv6NetworkInterface (297)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IPv6NetworkInterface(struct soap*, const char*, int, const ns2__IPv6NetworkInterface *, const char*);
SOAP_FMAC3 ns2__IPv6NetworkInterface * SOAP_FMAC4 soap_in_ns2__IPv6NetworkInterface(struct soap*, const char*, ns2__IPv6NetworkInterface *, const char*);

#ifndef soap_write_ns2__IPv6NetworkInterface
#define soap_write_ns2__IPv6NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IPv6NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6NetworkInterface * SOAP_FMAC4 soap_get_ns2__IPv6NetworkInterface(struct soap*, ns2__IPv6NetworkInterface *, const char*, const char*);

#ifndef soap_read_ns2__IPv6NetworkInterface
#define soap_read_ns2__IPv6NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IPv6NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_ns2__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IPv6NetworkInterface * soap_new_ns2__IPv6NetworkInterface(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IPv6NetworkInterface(soap, n, NULL, NULL, NULL); }

inline ns2__IPv6NetworkInterface * soap_new_req_ns2__IPv6NetworkInterface(struct soap *soap, bool Enabled) { ns2__IPv6NetworkInterface *_p = soap_instantiate_ns2__IPv6NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6NetworkInterface::Enabled = Enabled; } return _p; }

inline ns2__IPv6NetworkInterface * soap_new_set_ns2__IPv6NetworkInterface(struct soap *soap, bool Enabled, ns2__IPv6Configuration *Config, char *__item1) { ns2__IPv6NetworkInterface *_p = soap_instantiate_ns2__IPv6NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IPv6NetworkInterface::Enabled = Enabled; _p->ns2__IPv6NetworkInterface::Config = Config; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IPv6NetworkInterface(struct soap *soap, ns2__IPv6NetworkInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IPv6NetworkInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceInfo
#define SOAP_TYPE_ns2__NetworkInterfaceInfo (296)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceInfo(struct soap*, const char*, int, const ns2__NetworkInterfaceInfo *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceInfo * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceInfo(struct soap*, const char*, ns2__NetworkInterfaceInfo *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceInfo
#define soap_write_ns2__NetworkInterfaceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceInfo * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceInfo(struct soap*, ns2__NetworkInterfaceInfo *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceInfo
#define soap_read_ns2__NetworkInterfaceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceInfo * soap_new_ns2__NetworkInterfaceInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceInfo(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceInfo * soap_new_req_ns2__NetworkInterfaceInfo(struct soap *soap, const std::string& HwAddress) { ns2__NetworkInterfaceInfo *_p = soap_instantiate_ns2__NetworkInterfaceInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceInfo::HwAddress = HwAddress; } return _p; }

inline ns2__NetworkInterfaceInfo * soap_new_set_ns2__NetworkInterfaceInfo(struct soap *soap, std::string *Name, const std::string& HwAddress, int *MTU, char *__item1) { ns2__NetworkInterfaceInfo *_p = soap_instantiate_ns2__NetworkInterfaceInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceInfo::Name = Name; _p->ns2__NetworkInterfaceInfo::HwAddress = HwAddress; _p->ns2__NetworkInterfaceInfo::MTU = MTU; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceInfo(struct soap *soap, ns2__NetworkInterfaceInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_ns2__NetworkInterfaceConnectionSetting (295)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceConnectionSetting(struct soap*, const char*, int, const ns2__NetworkInterfaceConnectionSetting *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceConnectionSetting(struct soap*, const char*, ns2__NetworkInterfaceConnectionSetting *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceConnectionSetting
#define soap_write_ns2__NetworkInterfaceConnectionSetting(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceConnectionSetting", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceConnectionSetting(struct soap*, ns2__NetworkInterfaceConnectionSetting *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceConnectionSetting
#define soap_read_ns2__NetworkInterfaceConnectionSetting(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceConnectionSetting(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceConnectionSetting * soap_new_ns2__NetworkInterfaceConnectionSetting(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceConnectionSetting(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceConnectionSetting * soap_new_req_ns2__NetworkInterfaceConnectionSetting(struct soap *soap, bool AutoNegotiation, int Speed, enum ns2__Duplex Duplex) { ns2__NetworkInterfaceConnectionSetting *_p = soap_instantiate_ns2__NetworkInterfaceConnectionSetting(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation; _p->ns2__NetworkInterfaceConnectionSetting::Speed = Speed; _p->ns2__NetworkInterfaceConnectionSetting::Duplex = Duplex; } return _p; }

inline ns2__NetworkInterfaceConnectionSetting * soap_new_set_ns2__NetworkInterfaceConnectionSetting(struct soap *soap, bool AutoNegotiation, int Speed, enum ns2__Duplex Duplex, char *__item1) { ns2__NetworkInterfaceConnectionSetting *_p = soap_instantiate_ns2__NetworkInterfaceConnectionSetting(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation; _p->ns2__NetworkInterfaceConnectionSetting::Speed = Speed; _p->ns2__NetworkInterfaceConnectionSetting::Duplex = Duplex; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceConnectionSetting(struct soap *soap, ns2__NetworkInterfaceConnectionSetting *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceConnectionSetting(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceLink
#define SOAP_TYPE_ns2__NetworkInterfaceLink (294)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceLink(struct soap*, const char*, int, const ns2__NetworkInterfaceLink *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceLink * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceLink(struct soap*, const char*, ns2__NetworkInterfaceLink *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceLink
#define soap_write_ns2__NetworkInterfaceLink(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceLink", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceLink * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceLink(struct soap*, ns2__NetworkInterfaceLink *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceLink
#define soap_read_ns2__NetworkInterfaceLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceLink(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceLink * soap_new_ns2__NetworkInterfaceLink(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceLink(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceLink * soap_new_req_ns2__NetworkInterfaceLink(struct soap *soap, ns2__NetworkInterfaceConnectionSetting *AdminSettings, ns2__NetworkInterfaceConnectionSetting *OperSettings, int InterfaceType) { ns2__NetworkInterfaceLink *_p = soap_instantiate_ns2__NetworkInterfaceLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceLink::AdminSettings = AdminSettings; _p->ns2__NetworkInterfaceLink::OperSettings = OperSettings; _p->ns2__NetworkInterfaceLink::InterfaceType = InterfaceType; } return _p; }

inline ns2__NetworkInterfaceLink * soap_new_set_ns2__NetworkInterfaceLink(struct soap *soap, ns2__NetworkInterfaceConnectionSetting *AdminSettings, ns2__NetworkInterfaceConnectionSetting *OperSettings, int InterfaceType, char *__item1) { ns2__NetworkInterfaceLink *_p = soap_instantiate_ns2__NetworkInterfaceLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceLink::AdminSettings = AdminSettings; _p->ns2__NetworkInterfaceLink::OperSettings = OperSettings; _p->ns2__NetworkInterfaceLink::InterfaceType = InterfaceType; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceLink(struct soap *soap, ns2__NetworkInterfaceLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceExtension2
#define SOAP_TYPE_ns2__NetworkInterfaceExtension2 (293)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceExtension2(struct soap*, const char*, int, const ns2__NetworkInterfaceExtension2 *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceExtension2(struct soap*, const char*, ns2__NetworkInterfaceExtension2 *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceExtension2
#define soap_write_ns2__NetworkInterfaceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceExtension2(struct soap*, ns2__NetworkInterfaceExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceExtension2
#define soap_read_ns2__NetworkInterfaceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceExtension2 * soap_new_ns2__NetworkInterfaceExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceExtension2 * soap_new_req_ns2__NetworkInterfaceExtension2(struct soap *soap) { ns2__NetworkInterfaceExtension2 *_p = soap_instantiate_ns2__NetworkInterfaceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__NetworkInterfaceExtension2 * soap_new_set_ns2__NetworkInterfaceExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__NetworkInterfaceExtension2 *_p = soap_instantiate_ns2__NetworkInterfaceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceExtension2(struct soap *soap, ns2__NetworkInterfaceExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Dot3Configuration
#define SOAP_TYPE_ns2__Dot3Configuration (292)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Dot3Configuration(struct soap*, const char*, int, const ns2__Dot3Configuration *, const char*);
SOAP_FMAC3 ns2__Dot3Configuration * SOAP_FMAC4 soap_in_ns2__Dot3Configuration(struct soap*, const char*, ns2__Dot3Configuration *, const char*);

#ifndef soap_write_ns2__Dot3Configuration
#define soap_write_ns2__Dot3Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Dot3Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot3Configuration * SOAP_FMAC4 soap_get_ns2__Dot3Configuration(struct soap*, ns2__Dot3Configuration *, const char*, const char*);

#ifndef soap_read_ns2__Dot3Configuration
#define soap_read_ns2__Dot3Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Dot3Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Dot3Configuration * SOAP_FMAC2 soap_instantiate_ns2__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Dot3Configuration * soap_new_ns2__Dot3Configuration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Dot3Configuration(soap, n, NULL, NULL, NULL); }

inline ns2__Dot3Configuration * soap_new_req_ns2__Dot3Configuration(struct soap *soap) { ns2__Dot3Configuration *_p = soap_instantiate_ns2__Dot3Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Dot3Configuration * soap_new_set_ns2__Dot3Configuration(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Dot3Configuration *_p = soap_instantiate_ns2__Dot3Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Dot3Configuration::__any = __any; _p->ns2__Dot3Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Dot3Configuration(struct soap *soap, ns2__Dot3Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Dot3Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterfaceExtension
#define SOAP_TYPE_ns2__NetworkInterfaceExtension (291)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterfaceExtension(struct soap*, const char*, int, const ns2__NetworkInterfaceExtension *, const char*);
SOAP_FMAC3 ns2__NetworkInterfaceExtension * SOAP_FMAC4 soap_in_ns2__NetworkInterfaceExtension(struct soap*, const char*, ns2__NetworkInterfaceExtension *, const char*);

#ifndef soap_write_ns2__NetworkInterfaceExtension
#define soap_write_ns2__NetworkInterfaceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterfaceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceExtension * SOAP_FMAC4 soap_get_ns2__NetworkInterfaceExtension(struct soap*, ns2__NetworkInterfaceExtension *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterfaceExtension
#define soap_read_ns2__NetworkInterfaceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterfaceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterfaceExtension * soap_new_ns2__NetworkInterfaceExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterfaceExtension(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterfaceExtension * soap_new_req_ns2__NetworkInterfaceExtension(struct soap *soap, int InterfaceType) { ns2__NetworkInterfaceExtension *_p = soap_instantiate_ns2__NetworkInterfaceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceExtension::InterfaceType = InterfaceType; } return _p; }

inline ns2__NetworkInterfaceExtension * soap_new_set_ns2__NetworkInterfaceExtension(struct soap *soap, const std::vector<char * >& __any, int InterfaceType, const std::vector<ns2__Dot3Configuration * >& Dot3, const std::vector<ns2__Dot11Configuration * >& Dot11, ns2__NetworkInterfaceExtension2 *Extension, char *__item1) { ns2__NetworkInterfaceExtension *_p = soap_instantiate_ns2__NetworkInterfaceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterfaceExtension::__any = __any; _p->ns2__NetworkInterfaceExtension::InterfaceType = InterfaceType; _p->ns2__NetworkInterfaceExtension::Dot3 = Dot3; _p->ns2__NetworkInterfaceExtension::Dot11 = Dot11; _p->ns2__NetworkInterfaceExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__NetworkInterfaceExtension(struct soap *soap, ns2__NetworkInterfaceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterfaceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__NetworkInterface
#define SOAP_TYPE_ns2__NetworkInterface (290)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NetworkInterface(struct soap*, const char*, int, const ns2__NetworkInterface *, const char*);
SOAP_FMAC3 ns2__NetworkInterface * SOAP_FMAC4 soap_in_ns2__NetworkInterface(struct soap*, const char*, ns2__NetworkInterface *, const char*);

#ifndef soap_write_ns2__NetworkInterface
#define soap_write_ns2__NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterface * SOAP_FMAC4 soap_get_ns2__NetworkInterface(struct soap*, ns2__NetworkInterface *, const char*, const char*);

#ifndef soap_read_ns2__NetworkInterface
#define soap_read_ns2__NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__NetworkInterface * SOAP_FMAC2 soap_instantiate_ns2__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NetworkInterface * soap_new_ns2__NetworkInterface(struct soap *soap, int n = -1) { return soap_instantiate_ns2__NetworkInterface(soap, n, NULL, NULL, NULL); }

inline ns2__NetworkInterface * soap_new_req_ns2__NetworkInterface(struct soap *soap, const std::string& token, bool Enabled) { ns2__NetworkInterface *_p = soap_instantiate_ns2__NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterface::token = token; _p->ns2__NetworkInterface::Enabled = Enabled; } return _p; }

inline ns2__NetworkInterface * soap_new_set_ns2__NetworkInterface(struct soap *soap, const std::string& token, bool Enabled, ns2__NetworkInterfaceInfo *Info, ns2__NetworkInterfaceLink *Link, ns2__IPv4NetworkInterface *IPv4, ns2__IPv6NetworkInterface *IPv6, ns2__NetworkInterfaceExtension *Extension, char *__anyAttribute) { ns2__NetworkInterface *_p = soap_instantiate_ns2__NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__NetworkInterface::token = token; _p->ns2__NetworkInterface::Enabled = Enabled; _p->ns2__NetworkInterface::Info = Info; _p->ns2__NetworkInterface::Link = Link; _p->ns2__NetworkInterface::IPv4 = IPv4; _p->ns2__NetworkInterface::IPv6 = IPv6; _p->ns2__NetworkInterface::Extension = Extension; _p->ns2__NetworkInterface::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__NetworkInterface(struct soap *soap, ns2__NetworkInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__NetworkInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Scope
#define SOAP_TYPE_ns2__Scope (289)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Scope(struct soap*, const char*, int, const ns2__Scope *, const char*);
SOAP_FMAC3 ns2__Scope * SOAP_FMAC4 soap_in_ns2__Scope(struct soap*, const char*, ns2__Scope *, const char*);

#ifndef soap_write_ns2__Scope
#define soap_write_ns2__Scope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Scope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Scope * SOAP_FMAC4 soap_get_ns2__Scope(struct soap*, ns2__Scope *, const char*, const char*);

#ifndef soap_read_ns2__Scope
#define soap_read_ns2__Scope(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Scope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Scope * SOAP_FMAC2 soap_instantiate_ns2__Scope(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Scope * soap_new_ns2__Scope(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Scope(soap, n, NULL, NULL, NULL); }

inline ns2__Scope * soap_new_req_ns2__Scope(struct soap *soap, enum ns2__ScopeDefinition ScopeDef, const std::string& ScopeItem) { ns2__Scope *_p = soap_instantiate_ns2__Scope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Scope::ScopeDef = ScopeDef; _p->ns2__Scope::ScopeItem = ScopeItem; } return _p; }

inline ns2__Scope * soap_new_set_ns2__Scope(struct soap *soap, enum ns2__ScopeDefinition ScopeDef, const std::string& ScopeItem, char *__item1) { ns2__Scope *_p = soap_instantiate_ns2__Scope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Scope::ScopeDef = ScopeDef; _p->ns2__Scope::ScopeItem = ScopeItem; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Scope(struct soap *soap, ns2__Scope *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Scope(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MediaUri
#define SOAP_TYPE_ns2__MediaUri (288)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MediaUri(struct soap*, const char*, int, const ns2__MediaUri *, const char*);
SOAP_FMAC3 ns2__MediaUri * SOAP_FMAC4 soap_in_ns2__MediaUri(struct soap*, const char*, ns2__MediaUri *, const char*);

#ifndef soap_write_ns2__MediaUri
#define soap_write_ns2__MediaUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MediaUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaUri * SOAP_FMAC4 soap_get_ns2__MediaUri(struct soap*, ns2__MediaUri *, const char*, const char*);

#ifndef soap_read_ns2__MediaUri
#define soap_read_ns2__MediaUri(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MediaUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MediaUri * SOAP_FMAC2 soap_instantiate_ns2__MediaUri(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MediaUri * soap_new_ns2__MediaUri(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MediaUri(soap, n, NULL, NULL, NULL); }

inline ns2__MediaUri * soap_new_req_ns2__MediaUri(struct soap *soap, const std::string& Uri, bool InvalidAfterConnect, bool InvalidAfterReboot, const std::string& Timeout) { ns2__MediaUri *_p = soap_instantiate_ns2__MediaUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaUri::Uri = Uri; _p->ns2__MediaUri::InvalidAfterConnect = InvalidAfterConnect; _p->ns2__MediaUri::InvalidAfterReboot = InvalidAfterReboot; _p->ns2__MediaUri::Timeout = Timeout; } return _p; }

inline ns2__MediaUri * soap_new_set_ns2__MediaUri(struct soap *soap, const std::string& Uri, bool InvalidAfterConnect, bool InvalidAfterReboot, const std::string& Timeout, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MediaUri *_p = soap_instantiate_ns2__MediaUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MediaUri::Uri = Uri; _p->ns2__MediaUri::InvalidAfterConnect = InvalidAfterConnect; _p->ns2__MediaUri::InvalidAfterReboot = InvalidAfterReboot; _p->ns2__MediaUri::Timeout = Timeout; _p->ns2__MediaUri::__any = __any; _p->ns2__MediaUri::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MediaUri(struct soap *soap, ns2__MediaUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MediaUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Transport
#define SOAP_TYPE_ns2__Transport (287)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Transport(struct soap*, const char*, int, const ns2__Transport *, const char*);
SOAP_FMAC3 ns2__Transport * SOAP_FMAC4 soap_in_ns2__Transport(struct soap*, const char*, ns2__Transport *, const char*);

#ifndef soap_write_ns2__Transport
#define soap_write_ns2__Transport(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Transport", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Transport * SOAP_FMAC4 soap_get_ns2__Transport(struct soap*, ns2__Transport *, const char*, const char*);

#ifndef soap_read_ns2__Transport
#define soap_read_ns2__Transport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Transport(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Transport * SOAP_FMAC2 soap_instantiate_ns2__Transport(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Transport * soap_new_ns2__Transport(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Transport(soap, n, NULL, NULL, NULL); }

inline ns2__Transport * soap_new_req_ns2__Transport(struct soap *soap, enum ns2__TransportProtocol Protocol) { ns2__Transport *_p = soap_instantiate_ns2__Transport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Transport::Protocol = Protocol; } return _p; }

inline ns2__Transport * soap_new_set_ns2__Transport(struct soap *soap, enum ns2__TransportProtocol Protocol, ns2__Transport *Tunnel, char *__item1) { ns2__Transport *_p = soap_instantiate_ns2__Transport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Transport::Protocol = Protocol; _p->ns2__Transport::Tunnel = Tunnel; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Transport(struct soap *soap, ns2__Transport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Transport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__StreamSetup
#define SOAP_TYPE_ns2__StreamSetup (286)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StreamSetup(struct soap*, const char*, int, const ns2__StreamSetup *, const char*);
SOAP_FMAC3 ns2__StreamSetup * SOAP_FMAC4 soap_in_ns2__StreamSetup(struct soap*, const char*, ns2__StreamSetup *, const char*);

#ifndef soap_write_ns2__StreamSetup
#define soap_write_ns2__StreamSetup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:StreamSetup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__StreamSetup * SOAP_FMAC4 soap_get_ns2__StreamSetup(struct soap*, ns2__StreamSetup *, const char*, const char*);

#ifndef soap_read_ns2__StreamSetup
#define soap_read_ns2__StreamSetup(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StreamSetup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__StreamSetup * SOAP_FMAC2 soap_instantiate_ns2__StreamSetup(struct soap*, int, const char*, const char*, size_t*);

inline ns2__StreamSetup * soap_new_ns2__StreamSetup(struct soap *soap, int n = -1) { return soap_instantiate_ns2__StreamSetup(soap, n, NULL, NULL, NULL); }

inline ns2__StreamSetup * soap_new_req_ns2__StreamSetup(struct soap *soap, enum ns2__StreamType Stream, ns2__Transport *Transport) { ns2__StreamSetup *_p = soap_instantiate_ns2__StreamSetup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StreamSetup::Stream = Stream; _p->ns2__StreamSetup::Transport = Transport; } return _p; }

inline ns2__StreamSetup * soap_new_set_ns2__StreamSetup(struct soap *soap, enum ns2__StreamType Stream, ns2__Transport *Transport, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__StreamSetup *_p = soap_instantiate_ns2__StreamSetup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__StreamSetup::Stream = Stream; _p->ns2__StreamSetup::Transport = Transport; _p->ns2__StreamSetup::__any = __any; _p->ns2__StreamSetup::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__StreamSetup(struct soap *soap, ns2__StreamSetup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__StreamSetup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MulticastConfiguration
#define SOAP_TYPE_ns2__MulticastConfiguration (285)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MulticastConfiguration(struct soap*, const char*, int, const ns2__MulticastConfiguration *, const char*);
SOAP_FMAC3 ns2__MulticastConfiguration * SOAP_FMAC4 soap_in_ns2__MulticastConfiguration(struct soap*, const char*, ns2__MulticastConfiguration *, const char*);

#ifndef soap_write_ns2__MulticastConfiguration
#define soap_write_ns2__MulticastConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MulticastConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MulticastConfiguration * SOAP_FMAC4 soap_get_ns2__MulticastConfiguration(struct soap*, ns2__MulticastConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__MulticastConfiguration
#define soap_read_ns2__MulticastConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MulticastConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MulticastConfiguration * SOAP_FMAC2 soap_instantiate_ns2__MulticastConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MulticastConfiguration * soap_new_ns2__MulticastConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MulticastConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__MulticastConfiguration * soap_new_req_ns2__MulticastConfiguration(struct soap *soap, ns2__IPAddress *Address, int Port, int TTL, bool AutoStart) { ns2__MulticastConfiguration *_p = soap_instantiate_ns2__MulticastConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MulticastConfiguration::Address = Address; _p->ns2__MulticastConfiguration::Port = Port; _p->ns2__MulticastConfiguration::TTL = TTL; _p->ns2__MulticastConfiguration::AutoStart = AutoStart; } return _p; }

inline ns2__MulticastConfiguration * soap_new_set_ns2__MulticastConfiguration(struct soap *soap, ns2__IPAddress *Address, int Port, int TTL, bool AutoStart, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__MulticastConfiguration *_p = soap_instantiate_ns2__MulticastConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MulticastConfiguration::Address = Address; _p->ns2__MulticastConfiguration::Port = Port; _p->ns2__MulticastConfiguration::TTL = TTL; _p->ns2__MulticastConfiguration::AutoStart = AutoStart; _p->ns2__MulticastConfiguration::__any = __any; _p->ns2__MulticastConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MulticastConfiguration(struct soap *soap, ns2__MulticastConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MulticastConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_ns2__AudioDecoderConfigurationOptionsExtension (284)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const ns2__AudioDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 ns2__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_ns2__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, ns2__AudioDecoderConfigurationOptionsExtension *, const char*);

#ifndef soap_write_ns2__AudioDecoderConfigurationOptionsExtension
#define soap_write_ns2__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_ns2__AudioDecoderConfigurationOptionsExtension(struct soap*, ns2__AudioDecoderConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__AudioDecoderConfigurationOptionsExtension
#define soap_read_ns2__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__AudioDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioDecoderConfigurationOptionsExtension * soap_new_ns2__AudioDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AudioDecoderConfigurationOptionsExtension * soap_new_req_ns2__AudioDecoderConfigurationOptionsExtension(struct soap *soap) { ns2__AudioDecoderConfigurationOptionsExtension *_p = soap_instantiate_ns2__AudioDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioDecoderConfigurationOptionsExtension * soap_new_set_ns2__AudioDecoderConfigurationOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AudioDecoderConfigurationOptionsExtension *_p = soap_instantiate_ns2__AudioDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioDecoderConfigurationOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioDecoderConfigurationOptionsExtension(struct soap *soap, ns2__AudioDecoderConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioDecoderConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__G726DecOptions
#define SOAP_TYPE_ns2__G726DecOptions (283)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__G726DecOptions(struct soap*, const char*, int, const ns2__G726DecOptions *, const char*);
SOAP_FMAC3 ns2__G726DecOptions * SOAP_FMAC4 soap_in_ns2__G726DecOptions(struct soap*, const char*, ns2__G726DecOptions *, const char*);

#ifndef soap_write_ns2__G726DecOptions
#define soap_write_ns2__G726DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:G726DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__G726DecOptions * SOAP_FMAC4 soap_get_ns2__G726DecOptions(struct soap*, ns2__G726DecOptions *, const char*, const char*);

#ifndef soap_read_ns2__G726DecOptions
#define soap_read_ns2__G726DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__G726DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__G726DecOptions * SOAP_FMAC2 soap_instantiate_ns2__G726DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__G726DecOptions * soap_new_ns2__G726DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__G726DecOptions(soap, n, NULL, NULL, NULL); }

inline ns2__G726DecOptions * soap_new_req_ns2__G726DecOptions(struct soap *soap, ns2__IntList *Bitrate, ns2__IntList *SampleRateRange) { ns2__G726DecOptions *_p = soap_instantiate_ns2__G726DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__G726DecOptions::Bitrate = Bitrate; _p->ns2__G726DecOptions::SampleRateRange = SampleRateRange; } return _p; }

inline ns2__G726DecOptions * soap_new_set_ns2__G726DecOptions(struct soap *soap, ns2__IntList *Bitrate, ns2__IntList *SampleRateRange, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__G726DecOptions *_p = soap_instantiate_ns2__G726DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__G726DecOptions::Bitrate = Bitrate; _p->ns2__G726DecOptions::SampleRateRange = SampleRateRange; _p->ns2__G726DecOptions::__any = __any; _p->ns2__G726DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__G726DecOptions(struct soap *soap, ns2__G726DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__G726DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AACDecOptions
#define SOAP_TYPE_ns2__AACDecOptions (282)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AACDecOptions(struct soap*, const char*, int, const ns2__AACDecOptions *, const char*);
SOAP_FMAC3 ns2__AACDecOptions * SOAP_FMAC4 soap_in_ns2__AACDecOptions(struct soap*, const char*, ns2__AACDecOptions *, const char*);

#ifndef soap_write_ns2__AACDecOptions
#define soap_write_ns2__AACDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AACDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AACDecOptions * SOAP_FMAC4 soap_get_ns2__AACDecOptions(struct soap*, ns2__AACDecOptions *, const char*, const char*);

#ifndef soap_read_ns2__AACDecOptions
#define soap_read_ns2__AACDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AACDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AACDecOptions * SOAP_FMAC2 soap_instantiate_ns2__AACDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AACDecOptions * soap_new_ns2__AACDecOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AACDecOptions(soap, n, NULL, NULL, NULL); }

inline ns2__AACDecOptions * soap_new_req_ns2__AACDecOptions(struct soap *soap, ns2__IntList *Bitrate, ns2__IntList *SampleRateRange) { ns2__AACDecOptions *_p = soap_instantiate_ns2__AACDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AACDecOptions::Bitrate = Bitrate; _p->ns2__AACDecOptions::SampleRateRange = SampleRateRange; } return _p; }

inline ns2__AACDecOptions * soap_new_set_ns2__AACDecOptions(struct soap *soap, ns2__IntList *Bitrate, ns2__IntList *SampleRateRange, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AACDecOptions *_p = soap_instantiate_ns2__AACDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AACDecOptions::Bitrate = Bitrate; _p->ns2__AACDecOptions::SampleRateRange = SampleRateRange; _p->ns2__AACDecOptions::__any = __any; _p->ns2__AACDecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AACDecOptions(struct soap *soap, ns2__AACDecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AACDecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__G711DecOptions
#define SOAP_TYPE_ns2__G711DecOptions (281)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__G711DecOptions(struct soap*, const char*, int, const ns2__G711DecOptions *, const char*);
SOAP_FMAC3 ns2__G711DecOptions * SOAP_FMAC4 soap_in_ns2__G711DecOptions(struct soap*, const char*, ns2__G711DecOptions *, const char*);

#ifndef soap_write_ns2__G711DecOptions
#define soap_write_ns2__G711DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:G711DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__G711DecOptions * SOAP_FMAC4 soap_get_ns2__G711DecOptions(struct soap*, ns2__G711DecOptions *, const char*, const char*);

#ifndef soap_read_ns2__G711DecOptions
#define soap_read_ns2__G711DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__G711DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__G711DecOptions * SOAP_FMAC2 soap_instantiate_ns2__G711DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__G711DecOptions * soap_new_ns2__G711DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__G711DecOptions(soap, n, NULL, NULL, NULL); }

inline ns2__G711DecOptions * soap_new_req_ns2__G711DecOptions(struct soap *soap, ns2__IntList *Bitrate, ns2__IntList *SampleRateRange) { ns2__G711DecOptions *_p = soap_instantiate_ns2__G711DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__G711DecOptions::Bitrate = Bitrate; _p->ns2__G711DecOptions::SampleRateRange = SampleRateRange; } return _p; }

inline ns2__G711DecOptions * soap_new_set_ns2__G711DecOptions(struct soap *soap, ns2__IntList *Bitrate, ns2__IntList *SampleRateRange, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__G711DecOptions *_p = soap_instantiate_ns2__G711DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__G711DecOptions::Bitrate = Bitrate; _p->ns2__G711DecOptions::SampleRateRange = SampleRateRange; _p->ns2__G711DecOptions::__any = __any; _p->ns2__G711DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__G711DecOptions(struct soap *soap, ns2__G711DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__G711DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioDecoderConfigurationOptions
#define SOAP_TYPE_ns2__AudioDecoderConfigurationOptions (280)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioDecoderConfigurationOptions(struct soap*, const char*, int, const ns2__AudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in_ns2__AudioDecoderConfigurationOptions(struct soap*, const char*, ns2__AudioDecoderConfigurationOptions *, const char*);

#ifndef soap_write_ns2__AudioDecoderConfigurationOptions
#define soap_write_ns2__AudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get_ns2__AudioDecoderConfigurationOptions(struct soap*, ns2__AudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__AudioDecoderConfigurationOptions
#define soap_read_ns2__AudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__AudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioDecoderConfigurationOptions * soap_new_ns2__AudioDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__AudioDecoderConfigurationOptions * soap_new_req_ns2__AudioDecoderConfigurationOptions(struct soap *soap) { ns2__AudioDecoderConfigurationOptions *_p = soap_instantiate_ns2__AudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioDecoderConfigurationOptions * soap_new_set_ns2__AudioDecoderConfigurationOptions(struct soap *soap, ns2__AACDecOptions *AACDecOptions, ns2__G711DecOptions *G711DecOptions, ns2__G726DecOptions *G726DecOptions, ns2__AudioDecoderConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AudioDecoderConfigurationOptions *_p = soap_instantiate_ns2__AudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioDecoderConfigurationOptions::AACDecOptions = AACDecOptions; _p->ns2__AudioDecoderConfigurationOptions::G711DecOptions = G711DecOptions; _p->ns2__AudioDecoderConfigurationOptions::G726DecOptions = G726DecOptions; _p->ns2__AudioDecoderConfigurationOptions::Extension = Extension; _p->ns2__AudioDecoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioDecoderConfigurationOptions(struct soap *soap, ns2__AudioDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioDecoderConfiguration
#define SOAP_TYPE_ns2__AudioDecoderConfiguration (279)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioDecoderConfiguration(struct soap*, const char*, int, const ns2__AudioDecoderConfiguration *, const char*);
SOAP_FMAC3 ns2__AudioDecoderConfiguration * SOAP_FMAC4 soap_in_ns2__AudioDecoderConfiguration(struct soap*, const char*, ns2__AudioDecoderConfiguration *, const char*);

#ifndef soap_write_ns2__AudioDecoderConfiguration
#define soap_write_ns2__AudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDecoderConfiguration * SOAP_FMAC4 soap_get_ns2__AudioDecoderConfiguration(struct soap*, ns2__AudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__AudioDecoderConfiguration
#define soap_read_ns2__AudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate_ns2__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioDecoderConfiguration * soap_new_ns2__AudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__AudioDecoderConfiguration * soap_new_req_ns2__AudioDecoderConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token) { ns2__AudioDecoderConfiguration *_p = soap_instantiate_ns2__AudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioDecoderConfiguration::Name = Name; _p->ns2__AudioDecoderConfiguration::UseCount = UseCount; _p->ns2__AudioDecoderConfiguration::token = token; } return _p; }

inline ns2__AudioDecoderConfiguration * soap_new_set_ns2__AudioDecoderConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AudioDecoderConfiguration *_p = soap_instantiate_ns2__AudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioDecoderConfiguration::Name = Name; _p->ns2__AudioDecoderConfiguration::UseCount = UseCount; _p->ns2__AudioDecoderConfiguration::token = token; _p->ns2__AudioDecoderConfiguration::__any = __any; _p->ns2__AudioDecoderConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AudioDecoderConfiguration(struct soap *soap, ns2__AudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioOutputConfigurationOptions
#define SOAP_TYPE_ns2__AudioOutputConfigurationOptions (278)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioOutputConfigurationOptions(struct soap*, const char*, int, const ns2__AudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_in_ns2__AudioOutputConfigurationOptions(struct soap*, const char*, ns2__AudioOutputConfigurationOptions *, const char*);

#ifndef soap_write_ns2__AudioOutputConfigurationOptions
#define soap_write_ns2__AudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_get_ns2__AudioOutputConfigurationOptions(struct soap*, ns2__AudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__AudioOutputConfigurationOptions
#define soap_read_ns2__AudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__AudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioOutputConfigurationOptions * soap_new_ns2__AudioOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__AudioOutputConfigurationOptions * soap_new_req_ns2__AudioOutputConfigurationOptions(struct soap *soap, const std::vector<std::string >& OutputTokensAvailable, ns2__IntRange *OutputLevelRange) { ns2__AudioOutputConfigurationOptions *_p = soap_instantiate_ns2__AudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable; _p->ns2__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange; } return _p; }

inline ns2__AudioOutputConfigurationOptions * soap_new_set_ns2__AudioOutputConfigurationOptions(struct soap *soap, const std::vector<std::string >& OutputTokensAvailable, const std::vector<std::string >& SendPrimacyOptions, ns2__IntRange *OutputLevelRange, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AudioOutputConfigurationOptions *_p = soap_instantiate_ns2__AudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable; _p->ns2__AudioOutputConfigurationOptions::SendPrimacyOptions = SendPrimacyOptions; _p->ns2__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange; _p->ns2__AudioOutputConfigurationOptions::__any = __any; _p->ns2__AudioOutputConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioOutputConfigurationOptions(struct soap *soap, ns2__AudioOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioOutputConfiguration
#define SOAP_TYPE_ns2__AudioOutputConfiguration (277)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioOutputConfiguration(struct soap*, const char*, int, const ns2__AudioOutputConfiguration *, const char*);
SOAP_FMAC3 ns2__AudioOutputConfiguration * SOAP_FMAC4 soap_in_ns2__AudioOutputConfiguration(struct soap*, const char*, ns2__AudioOutputConfiguration *, const char*);

#ifndef soap_write_ns2__AudioOutputConfiguration
#define soap_write_ns2__AudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioOutputConfiguration * SOAP_FMAC4 soap_get_ns2__AudioOutputConfiguration(struct soap*, ns2__AudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__AudioOutputConfiguration
#define soap_read_ns2__AudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioOutputConfiguration * SOAP_FMAC2 soap_instantiate_ns2__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioOutputConfiguration * soap_new_ns2__AudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__AudioOutputConfiguration * soap_new_req_ns2__AudioOutputConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& OutputToken, int OutputLevel) { ns2__AudioOutputConfiguration *_p = soap_instantiate_ns2__AudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioOutputConfiguration::Name = Name; _p->ns2__AudioOutputConfiguration::UseCount = UseCount; _p->ns2__AudioOutputConfiguration::token = token; _p->ns2__AudioOutputConfiguration::OutputToken = OutputToken; _p->ns2__AudioOutputConfiguration::OutputLevel = OutputLevel; } return _p; }

inline ns2__AudioOutputConfiguration * soap_new_set_ns2__AudioOutputConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& OutputToken, std::string *SendPrimacy, int OutputLevel, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AudioOutputConfiguration *_p = soap_instantiate_ns2__AudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioOutputConfiguration::Name = Name; _p->ns2__AudioOutputConfiguration::UseCount = UseCount; _p->ns2__AudioOutputConfiguration::token = token; _p->ns2__AudioOutputConfiguration::OutputToken = OutputToken; _p->ns2__AudioOutputConfiguration::SendPrimacy = SendPrimacy; _p->ns2__AudioOutputConfiguration::OutputLevel = OutputLevel; _p->ns2__AudioOutputConfiguration::__any = __any; _p->ns2__AudioOutputConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AudioOutputConfiguration(struct soap *soap, ns2__AudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioOutput
#define SOAP_TYPE_ns2__AudioOutput (276)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioOutput(struct soap*, const char*, int, const ns2__AudioOutput *, const char*);
SOAP_FMAC3 ns2__AudioOutput * SOAP_FMAC4 soap_in_ns2__AudioOutput(struct soap*, const char*, ns2__AudioOutput *, const char*);

#ifndef soap_write_ns2__AudioOutput
#define soap_write_ns2__AudioOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioOutput * SOAP_FMAC4 soap_get_ns2__AudioOutput(struct soap*, ns2__AudioOutput *, const char*, const char*);

#ifndef soap_read_ns2__AudioOutput
#define soap_read_ns2__AudioOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioOutput * SOAP_FMAC2 soap_instantiate_ns2__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioOutput * soap_new_ns2__AudioOutput(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioOutput(soap, n, NULL, NULL, NULL); }

inline ns2__AudioOutput * soap_new_req_ns2__AudioOutput(struct soap *soap, const std::string& token) { ns2__AudioOutput *_p = soap_instantiate_ns2__AudioOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioOutput::token = token; } return _p; }

inline ns2__AudioOutput * soap_new_set_ns2__AudioOutput(struct soap *soap, const std::string& token, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AudioOutput *_p = soap_instantiate_ns2__AudioOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioOutput::token = token; _p->ns2__AudioOutput::__any = __any; _p->ns2__AudioOutput::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AudioOutput(struct soap *soap, ns2__AudioOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_ns2__VideoDecoderConfigurationOptionsExtension (275)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const ns2__VideoDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 ns2__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_ns2__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, ns2__VideoDecoderConfigurationOptionsExtension *, const char*);

#ifndef soap_write_ns2__VideoDecoderConfigurationOptionsExtension
#define soap_write_ns2__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_ns2__VideoDecoderConfigurationOptionsExtension(struct soap*, ns2__VideoDecoderConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoDecoderConfigurationOptionsExtension
#define soap_read_ns2__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoDecoderConfigurationOptionsExtension * soap_new_ns2__VideoDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoDecoderConfigurationOptionsExtension * soap_new_req_ns2__VideoDecoderConfigurationOptionsExtension(struct soap *soap) { ns2__VideoDecoderConfigurationOptionsExtension *_p = soap_instantiate_ns2__VideoDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoDecoderConfigurationOptionsExtension * soap_new_set_ns2__VideoDecoderConfigurationOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoDecoderConfigurationOptionsExtension *_p = soap_instantiate_ns2__VideoDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoDecoderConfigurationOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoDecoderConfigurationOptionsExtension(struct soap *soap, ns2__VideoDecoderConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoDecoderConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Mpeg4DecOptions
#define SOAP_TYPE_ns2__Mpeg4DecOptions (274)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Mpeg4DecOptions(struct soap*, const char*, int, const ns2__Mpeg4DecOptions *, const char*);
SOAP_FMAC3 ns2__Mpeg4DecOptions * SOAP_FMAC4 soap_in_ns2__Mpeg4DecOptions(struct soap*, const char*, ns2__Mpeg4DecOptions *, const char*);

#ifndef soap_write_ns2__Mpeg4DecOptions
#define soap_write_ns2__Mpeg4DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Mpeg4DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4DecOptions * SOAP_FMAC4 soap_get_ns2__Mpeg4DecOptions(struct soap*, ns2__Mpeg4DecOptions *, const char*, const char*);

#ifndef soap_read_ns2__Mpeg4DecOptions
#define soap_read_ns2__Mpeg4DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Mpeg4DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Mpeg4DecOptions * SOAP_FMAC2 soap_instantiate_ns2__Mpeg4DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Mpeg4DecOptions * soap_new_ns2__Mpeg4DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Mpeg4DecOptions(soap, n, NULL, NULL, NULL); }

inline ns2__Mpeg4DecOptions * soap_new_req_ns2__Mpeg4DecOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, const std::vector<enum ns2__Mpeg4Profile >& SupportedMpeg4Profiles, ns2__IntRange *SupportedInputBitrate, ns2__IntRange *SupportedFrameRate) { ns2__Mpeg4DecOptions *_p = soap_instantiate_ns2__Mpeg4DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__Mpeg4DecOptions::SupportedMpeg4Profiles = SupportedMpeg4Profiles; _p->ns2__Mpeg4DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->ns2__Mpeg4DecOptions::SupportedFrameRate = SupportedFrameRate; } return _p; }

inline ns2__Mpeg4DecOptions * soap_new_set_ns2__Mpeg4DecOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, const std::vector<enum ns2__Mpeg4Profile >& SupportedMpeg4Profiles, ns2__IntRange *SupportedInputBitrate, ns2__IntRange *SupportedFrameRate, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__Mpeg4DecOptions *_p = soap_instantiate_ns2__Mpeg4DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__Mpeg4DecOptions::SupportedMpeg4Profiles = SupportedMpeg4Profiles; _p->ns2__Mpeg4DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->ns2__Mpeg4DecOptions::SupportedFrameRate = SupportedFrameRate; _p->ns2__Mpeg4DecOptions::__any = __any; _p->ns2__Mpeg4DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Mpeg4DecOptions(struct soap *soap, ns2__Mpeg4DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Mpeg4DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__JpegDecOptions
#define SOAP_TYPE_ns2__JpegDecOptions (273)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JpegDecOptions(struct soap*, const char*, int, const ns2__JpegDecOptions *, const char*);
SOAP_FMAC3 ns2__JpegDecOptions * SOAP_FMAC4 soap_in_ns2__JpegDecOptions(struct soap*, const char*, ns2__JpegDecOptions *, const char*);

#ifndef soap_write_ns2__JpegDecOptions
#define soap_write_ns2__JpegDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:JpegDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JpegDecOptions * SOAP_FMAC4 soap_get_ns2__JpegDecOptions(struct soap*, ns2__JpegDecOptions *, const char*, const char*);

#ifndef soap_read_ns2__JpegDecOptions
#define soap_read_ns2__JpegDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__JpegDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__JpegDecOptions * SOAP_FMAC2 soap_instantiate_ns2__JpegDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__JpegDecOptions * soap_new_ns2__JpegDecOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__JpegDecOptions(soap, n, NULL, NULL, NULL); }

inline ns2__JpegDecOptions * soap_new_req_ns2__JpegDecOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *SupportedInputBitrate, ns2__IntRange *SupportedFrameRate) { ns2__JpegDecOptions *_p = soap_instantiate_ns2__JpegDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JpegDecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__JpegDecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->ns2__JpegDecOptions::SupportedFrameRate = SupportedFrameRate; } return _p; }

inline ns2__JpegDecOptions * soap_new_set_ns2__JpegDecOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *SupportedInputBitrate, ns2__IntRange *SupportedFrameRate, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__JpegDecOptions *_p = soap_instantiate_ns2__JpegDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JpegDecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__JpegDecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->ns2__JpegDecOptions::SupportedFrameRate = SupportedFrameRate; _p->ns2__JpegDecOptions::__any = __any; _p->ns2__JpegDecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__JpegDecOptions(struct soap *soap, ns2__JpegDecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__JpegDecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__H264DecOptions
#define SOAP_TYPE_ns2__H264DecOptions (272)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__H264DecOptions(struct soap*, const char*, int, const ns2__H264DecOptions *, const char*);
SOAP_FMAC3 ns2__H264DecOptions * SOAP_FMAC4 soap_in_ns2__H264DecOptions(struct soap*, const char*, ns2__H264DecOptions *, const char*);

#ifndef soap_write_ns2__H264DecOptions
#define soap_write_ns2__H264DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:H264DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264DecOptions * SOAP_FMAC4 soap_get_ns2__H264DecOptions(struct soap*, ns2__H264DecOptions *, const char*, const char*);

#ifndef soap_read_ns2__H264DecOptions
#define soap_read_ns2__H264DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__H264DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__H264DecOptions * SOAP_FMAC2 soap_instantiate_ns2__H264DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__H264DecOptions * soap_new_ns2__H264DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__H264DecOptions(soap, n, NULL, NULL, NULL); }

inline ns2__H264DecOptions * soap_new_req_ns2__H264DecOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, const std::vector<enum ns2__H264Profile >& SupportedH264Profiles, ns2__IntRange *SupportedInputBitrate, ns2__IntRange *SupportedFrameRate) { ns2__H264DecOptions *_p = soap_instantiate_ns2__H264DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__H264DecOptions::SupportedH264Profiles = SupportedH264Profiles; _p->ns2__H264DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->ns2__H264DecOptions::SupportedFrameRate = SupportedFrameRate; } return _p; }

inline ns2__H264DecOptions * soap_new_set_ns2__H264DecOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, const std::vector<enum ns2__H264Profile >& SupportedH264Profiles, ns2__IntRange *SupportedInputBitrate, ns2__IntRange *SupportedFrameRate, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__H264DecOptions *_p = soap_instantiate_ns2__H264DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__H264DecOptions::SupportedH264Profiles = SupportedH264Profiles; _p->ns2__H264DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->ns2__H264DecOptions::SupportedFrameRate = SupportedFrameRate; _p->ns2__H264DecOptions::__any = __any; _p->ns2__H264DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__H264DecOptions(struct soap *soap, ns2__H264DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__H264DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoDecoderConfigurationOptions
#define SOAP_TYPE_ns2__VideoDecoderConfigurationOptions (271)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoDecoderConfigurationOptions(struct soap*, const char*, int, const ns2__VideoDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__VideoDecoderConfigurationOptions * SOAP_FMAC4 soap_in_ns2__VideoDecoderConfigurationOptions(struct soap*, const char*, ns2__VideoDecoderConfigurationOptions *, const char*);

#ifndef soap_write_ns2__VideoDecoderConfigurationOptions
#define soap_write_ns2__VideoDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoDecoderConfigurationOptions * SOAP_FMAC4 soap_get_ns2__VideoDecoderConfigurationOptions(struct soap*, ns2__VideoDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__VideoDecoderConfigurationOptions
#define soap_read_ns2__VideoDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__VideoDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoDecoderConfigurationOptions * soap_new_ns2__VideoDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__VideoDecoderConfigurationOptions * soap_new_req_ns2__VideoDecoderConfigurationOptions(struct soap *soap) { ns2__VideoDecoderConfigurationOptions *_p = soap_instantiate_ns2__VideoDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoDecoderConfigurationOptions * soap_new_set_ns2__VideoDecoderConfigurationOptions(struct soap *soap, ns2__JpegDecOptions *JpegDecOptions, ns2__H264DecOptions *H264DecOptions, ns2__Mpeg4DecOptions *Mpeg4DecOptions, ns2__VideoDecoderConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__VideoDecoderConfigurationOptions *_p = soap_instantiate_ns2__VideoDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoDecoderConfigurationOptions::JpegDecOptions = JpegDecOptions; _p->ns2__VideoDecoderConfigurationOptions::H264DecOptions = H264DecOptions; _p->ns2__VideoDecoderConfigurationOptions::Mpeg4DecOptions = Mpeg4DecOptions; _p->ns2__VideoDecoderConfigurationOptions::Extension = Extension; _p->ns2__VideoDecoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoDecoderConfigurationOptions(struct soap *soap, ns2__VideoDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoOutputConfigurationOptions
#define SOAP_TYPE_ns2__VideoOutputConfigurationOptions (270)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoOutputConfigurationOptions(struct soap*, const char*, int, const ns2__VideoOutputConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__VideoOutputConfigurationOptions * SOAP_FMAC4 soap_in_ns2__VideoOutputConfigurationOptions(struct soap*, const char*, ns2__VideoOutputConfigurationOptions *, const char*);

#ifndef soap_write_ns2__VideoOutputConfigurationOptions
#define soap_write_ns2__VideoOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoOutputConfigurationOptions * SOAP_FMAC4 soap_get_ns2__VideoOutputConfigurationOptions(struct soap*, ns2__VideoOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__VideoOutputConfigurationOptions
#define soap_read_ns2__VideoOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__VideoOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoOutputConfigurationOptions * soap_new_ns2__VideoOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__VideoOutputConfigurationOptions * soap_new_req_ns2__VideoOutputConfigurationOptions(struct soap *soap) { ns2__VideoOutputConfigurationOptions *_p = soap_instantiate_ns2__VideoOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoOutputConfigurationOptions * soap_new_set_ns2__VideoOutputConfigurationOptions(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__VideoOutputConfigurationOptions *_p = soap_instantiate_ns2__VideoOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoOutputConfigurationOptions::__any = __any; _p->ns2__VideoOutputConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoOutputConfigurationOptions(struct soap *soap, ns2__VideoOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoOutputConfiguration
#define SOAP_TYPE_ns2__VideoOutputConfiguration (269)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoOutputConfiguration(struct soap*, const char*, int, const ns2__VideoOutputConfiguration *, const char*);
SOAP_FMAC3 ns2__VideoOutputConfiguration * SOAP_FMAC4 soap_in_ns2__VideoOutputConfiguration(struct soap*, const char*, ns2__VideoOutputConfiguration *, const char*);

#ifndef soap_write_ns2__VideoOutputConfiguration
#define soap_write_ns2__VideoOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoOutputConfiguration * SOAP_FMAC4 soap_get_ns2__VideoOutputConfiguration(struct soap*, ns2__VideoOutputConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__VideoOutputConfiguration
#define soap_read_ns2__VideoOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoOutputConfiguration * SOAP_FMAC2 soap_instantiate_ns2__VideoOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoOutputConfiguration * soap_new_ns2__VideoOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__VideoOutputConfiguration * soap_new_req_ns2__VideoOutputConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& OutputToken) { ns2__VideoOutputConfiguration *_p = soap_instantiate_ns2__VideoOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoOutputConfiguration::Name = Name; _p->ns2__VideoOutputConfiguration::UseCount = UseCount; _p->ns2__VideoOutputConfiguration::token = token; _p->ns2__VideoOutputConfiguration::OutputToken = OutputToken; } return _p; }

inline ns2__VideoOutputConfiguration * soap_new_set_ns2__VideoOutputConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& OutputToken, const std::vector<char * >& __any, char *__anyAttribute) { ns2__VideoOutputConfiguration *_p = soap_instantiate_ns2__VideoOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoOutputConfiguration::Name = Name; _p->ns2__VideoOutputConfiguration::UseCount = UseCount; _p->ns2__VideoOutputConfiguration::token = token; _p->ns2__VideoOutputConfiguration::OutputToken = OutputToken; _p->ns2__VideoOutputConfiguration::__any = __any; _p->ns2__VideoOutputConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__VideoOutputConfiguration(struct soap *soap, ns2__VideoOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoOutputExtension
#define SOAP_TYPE_ns2__VideoOutputExtension (268)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoOutputExtension(struct soap*, const char*, int, const ns2__VideoOutputExtension *, const char*);
SOAP_FMAC3 ns2__VideoOutputExtension * SOAP_FMAC4 soap_in_ns2__VideoOutputExtension(struct soap*, const char*, ns2__VideoOutputExtension *, const char*);

#ifndef soap_write_ns2__VideoOutputExtension
#define soap_write_ns2__VideoOutputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoOutputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoOutputExtension * SOAP_FMAC4 soap_get_ns2__VideoOutputExtension(struct soap*, ns2__VideoOutputExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoOutputExtension
#define soap_read_ns2__VideoOutputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoOutputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoOutputExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoOutputExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoOutputExtension * soap_new_ns2__VideoOutputExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoOutputExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoOutputExtension * soap_new_req_ns2__VideoOutputExtension(struct soap *soap) { ns2__VideoOutputExtension *_p = soap_instantiate_ns2__VideoOutputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoOutputExtension * soap_new_set_ns2__VideoOutputExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoOutputExtension *_p = soap_instantiate_ns2__VideoOutputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoOutputExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoOutputExtension(struct soap *soap, ns2__VideoOutputExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoOutputExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoOutput
#define SOAP_TYPE_ns2__VideoOutput (267)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoOutput(struct soap*, const char*, int, const ns2__VideoOutput *, const char*);
SOAP_FMAC3 ns2__VideoOutput * SOAP_FMAC4 soap_in_ns2__VideoOutput(struct soap*, const char*, ns2__VideoOutput *, const char*);

#ifndef soap_write_ns2__VideoOutput
#define soap_write_ns2__VideoOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoOutput * SOAP_FMAC4 soap_get_ns2__VideoOutput(struct soap*, ns2__VideoOutput *, const char*, const char*);

#ifndef soap_read_ns2__VideoOutput
#define soap_read_ns2__VideoOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoOutput * SOAP_FMAC2 soap_instantiate_ns2__VideoOutput(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoOutput * soap_new_ns2__VideoOutput(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoOutput(soap, n, NULL, NULL, NULL); }

inline ns2__VideoOutput * soap_new_req_ns2__VideoOutput(struct soap *soap, const std::string& token, ns2__Layout *Layout) { ns2__VideoOutput *_p = soap_instantiate_ns2__VideoOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoOutput::token = token; _p->ns2__VideoOutput::Layout = Layout; } return _p; }

inline ns2__VideoOutput * soap_new_set_ns2__VideoOutput(struct soap *soap, const std::string& token, ns2__Layout *Layout, ns2__VideoResolution *Resolution, float *RefreshRate, float *AspectRatio, ns2__VideoOutputExtension *Extension, char *__anyAttribute) { ns2__VideoOutput *_p = soap_instantiate_ns2__VideoOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoOutput::token = token; _p->ns2__VideoOutput::Layout = Layout; _p->ns2__VideoOutput::Resolution = Resolution; _p->ns2__VideoOutput::RefreshRate = RefreshRate; _p->ns2__VideoOutput::AspectRatio = AspectRatio; _p->ns2__VideoOutput::Extension = Extension; _p->ns2__VideoOutput::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__VideoOutput(struct soap *soap, ns2__VideoOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_ns2__PTZStatusFilterOptionsExtension (266)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZStatusFilterOptionsExtension(struct soap*, const char*, int, const ns2__PTZStatusFilterOptionsExtension *, const char*);
SOAP_FMAC3 ns2__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_in_ns2__PTZStatusFilterOptionsExtension(struct soap*, const char*, ns2__PTZStatusFilterOptionsExtension *, const char*);

#ifndef soap_write_ns2__PTZStatusFilterOptionsExtension
#define soap_write_ns2__PTZStatusFilterOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZStatusFilterOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_get_ns2__PTZStatusFilterOptionsExtension(struct soap*, ns2__PTZStatusFilterOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__PTZStatusFilterOptionsExtension
#define soap_read_ns2__PTZStatusFilterOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZStatusFilterOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZStatusFilterOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__PTZStatusFilterOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZStatusFilterOptionsExtension * soap_new_ns2__PTZStatusFilterOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZStatusFilterOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__PTZStatusFilterOptionsExtension * soap_new_req_ns2__PTZStatusFilterOptionsExtension(struct soap *soap) { ns2__PTZStatusFilterOptionsExtension *_p = soap_instantiate_ns2__PTZStatusFilterOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__PTZStatusFilterOptionsExtension * soap_new_set_ns2__PTZStatusFilterOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__PTZStatusFilterOptionsExtension *_p = soap_instantiate_ns2__PTZStatusFilterOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStatusFilterOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZStatusFilterOptionsExtension(struct soap *soap, ns2__PTZStatusFilterOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZStatusFilterOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZStatusFilterOptions
#define SOAP_TYPE_ns2__PTZStatusFilterOptions (265)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZStatusFilterOptions(struct soap*, const char*, int, const ns2__PTZStatusFilterOptions *, const char*);
SOAP_FMAC3 ns2__PTZStatusFilterOptions * SOAP_FMAC4 soap_in_ns2__PTZStatusFilterOptions(struct soap*, const char*, ns2__PTZStatusFilterOptions *, const char*);

#ifndef soap_write_ns2__PTZStatusFilterOptions
#define soap_write_ns2__PTZStatusFilterOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZStatusFilterOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStatusFilterOptions * SOAP_FMAC4 soap_get_ns2__PTZStatusFilterOptions(struct soap*, ns2__PTZStatusFilterOptions *, const char*, const char*);

#ifndef soap_read_ns2__PTZStatusFilterOptions
#define soap_read_ns2__PTZStatusFilterOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZStatusFilterOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZStatusFilterOptions * SOAP_FMAC2 soap_instantiate_ns2__PTZStatusFilterOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZStatusFilterOptions * soap_new_ns2__PTZStatusFilterOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZStatusFilterOptions(soap, n, NULL, NULL, NULL); }

inline ns2__PTZStatusFilterOptions * soap_new_req_ns2__PTZStatusFilterOptions(struct soap *soap, bool PanTiltStatusSupported, bool ZoomStatusSupported) { ns2__PTZStatusFilterOptions *_p = soap_instantiate_ns2__PTZStatusFilterOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported; _p->ns2__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported; } return _p; }

inline ns2__PTZStatusFilterOptions * soap_new_set_ns2__PTZStatusFilterOptions(struct soap *soap, bool PanTiltStatusSupported, bool ZoomStatusSupported, const std::vector<char * >& __any, bool *PanTiltPositionSupported, bool *ZoomPositionSupported, ns2__PTZStatusFilterOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__PTZStatusFilterOptions *_p = soap_instantiate_ns2__PTZStatusFilterOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported; _p->ns2__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported; _p->ns2__PTZStatusFilterOptions::__any = __any; _p->ns2__PTZStatusFilterOptions::PanTiltPositionSupported = PanTiltPositionSupported; _p->ns2__PTZStatusFilterOptions::ZoomPositionSupported = ZoomPositionSupported; _p->ns2__PTZStatusFilterOptions::Extension = Extension; _p->ns2__PTZStatusFilterOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZStatusFilterOptions(struct soap *soap, ns2__PTZStatusFilterOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZStatusFilterOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_ns2__MetadataConfigurationOptionsExtension2 (264)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataConfigurationOptionsExtension2(struct soap*, const char*, int, const ns2__MetadataConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_ns2__MetadataConfigurationOptionsExtension2(struct soap*, const char*, ns2__MetadataConfigurationOptionsExtension2 *, const char*);

#ifndef soap_write_ns2__MetadataConfigurationOptionsExtension2
#define soap_write_ns2__MetadataConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_ns2__MetadataConfigurationOptionsExtension2(struct soap*, ns2__MetadataConfigurationOptionsExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__MetadataConfigurationOptionsExtension2
#define soap_read_ns2__MetadataConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_ns2__MetadataConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataConfigurationOptionsExtension2 * soap_new_ns2__MetadataConfigurationOptionsExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataConfigurationOptionsExtension2 * soap_new_req_ns2__MetadataConfigurationOptionsExtension2(struct soap *soap) { ns2__MetadataConfigurationOptionsExtension2 *_p = soap_instantiate_ns2__MetadataConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataConfigurationOptionsExtension2 * soap_new_set_ns2__MetadataConfigurationOptionsExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__MetadataConfigurationOptionsExtension2 *_p = soap_instantiate_ns2__MetadataConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfigurationOptionsExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataConfigurationOptionsExtension2(struct soap *soap, ns2__MetadataConfigurationOptionsExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataConfigurationOptionsExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_ns2__MetadataConfigurationOptionsExtension (263)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataConfigurationOptionsExtension(struct soap*, const char*, int, const ns2__MetadataConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_in_ns2__MetadataConfigurationOptionsExtension(struct soap*, const char*, ns2__MetadataConfigurationOptionsExtension *, const char*);

#ifndef soap_write_ns2__MetadataConfigurationOptionsExtension
#define soap_write_ns2__MetadataConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_get_ns2__MetadataConfigurationOptionsExtension(struct soap*, ns2__MetadataConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__MetadataConfigurationOptionsExtension
#define soap_read_ns2__MetadataConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__MetadataConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataConfigurationOptionsExtension * soap_new_ns2__MetadataConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataConfigurationOptionsExtension * soap_new_req_ns2__MetadataConfigurationOptionsExtension(struct soap *soap) { ns2__MetadataConfigurationOptionsExtension *_p = soap_instantiate_ns2__MetadataConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataConfigurationOptionsExtension * soap_new_set_ns2__MetadataConfigurationOptionsExtension(struct soap *soap, const std::vector<std::string >& CompressionType, ns2__MetadataConfigurationOptionsExtension2 *Extension, char *__item1) { ns2__MetadataConfigurationOptionsExtension *_p = soap_instantiate_ns2__MetadataConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfigurationOptionsExtension::CompressionType = CompressionType; _p->ns2__MetadataConfigurationOptionsExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataConfigurationOptionsExtension(struct soap *soap, ns2__MetadataConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataConfigurationOptions
#define SOAP_TYPE_ns2__MetadataConfigurationOptions (262)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataConfigurationOptions(struct soap*, const char*, int, const ns2__MetadataConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__MetadataConfigurationOptions * SOAP_FMAC4 soap_in_ns2__MetadataConfigurationOptions(struct soap*, const char*, ns2__MetadataConfigurationOptions *, const char*);

#ifndef soap_write_ns2__MetadataConfigurationOptions
#define soap_write_ns2__MetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationOptions * SOAP_FMAC4 soap_get_ns2__MetadataConfigurationOptions(struct soap*, ns2__MetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__MetadataConfigurationOptions
#define soap_read_ns2__MetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__MetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataConfigurationOptions * soap_new_ns2__MetadataConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataConfigurationOptions * soap_new_req_ns2__MetadataConfigurationOptions(struct soap *soap, ns2__PTZStatusFilterOptions *PTZStatusFilterOptions) { ns2__MetadataConfigurationOptions *_p = soap_instantiate_ns2__MetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions; } return _p; }

inline ns2__MetadataConfigurationOptions * soap_new_set_ns2__MetadataConfigurationOptions(struct soap *soap, ns2__PTZStatusFilterOptions *PTZStatusFilterOptions, const std::vector<char * >& __any, ns2__MetadataConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__MetadataConfigurationOptions *_p = soap_instantiate_ns2__MetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions; _p->ns2__MetadataConfigurationOptions::__any = __any; _p->ns2__MetadataConfigurationOptions::Extension = Extension; _p->ns2__MetadataConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataConfigurationOptions(struct soap *soap, ns2__MetadataConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__EventSubscription
#define SOAP_TYPE_ns2__EventSubscription (261)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EventSubscription(struct soap*, const char*, int, const ns2__EventSubscription *, const char*);
SOAP_FMAC3 ns2__EventSubscription * SOAP_FMAC4 soap_in_ns2__EventSubscription(struct soap*, const char*, ns2__EventSubscription *, const char*);

#ifndef soap_write_ns2__EventSubscription
#define soap_write_ns2__EventSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:EventSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventSubscription * SOAP_FMAC4 soap_get_ns2__EventSubscription(struct soap*, ns2__EventSubscription *, const char*, const char*);

#ifndef soap_read_ns2__EventSubscription
#define soap_read_ns2__EventSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__EventSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__EventSubscription * SOAP_FMAC2 soap_instantiate_ns2__EventSubscription(struct soap*, int, const char*, const char*, size_t*);

inline ns2__EventSubscription * soap_new_ns2__EventSubscription(struct soap *soap, int n = -1) { return soap_instantiate_ns2__EventSubscription(soap, n, NULL, NULL, NULL); }

inline ns2__EventSubscription * soap_new_req_ns2__EventSubscription(struct soap *soap) { ns2__EventSubscription *_p = soap_instantiate_ns2__EventSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__EventSubscription * soap_new_set_ns2__EventSubscription(struct soap *soap, ns3__FilterType *Filter, _ns2__EventSubscription_SubscriptionPolicy *SubscriptionPolicy, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__EventSubscription *_p = soap_instantiate_ns2__EventSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__EventSubscription::Filter = Filter; _p->ns2__EventSubscription::SubscriptionPolicy = SubscriptionPolicy; _p->ns2__EventSubscription::__any = __any; _p->ns2__EventSubscription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__EventSubscription(struct soap *soap, ns2__EventSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EventSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__PTZFilter
#define SOAP_TYPE_ns2__PTZFilter (260)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PTZFilter(struct soap*, const char*, int, const ns2__PTZFilter *, const char*);
SOAP_FMAC3 ns2__PTZFilter * SOAP_FMAC4 soap_in_ns2__PTZFilter(struct soap*, const char*, ns2__PTZFilter *, const char*);

#ifndef soap_write_ns2__PTZFilter
#define soap_write_ns2__PTZFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:PTZFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZFilter * SOAP_FMAC4 soap_get_ns2__PTZFilter(struct soap*, ns2__PTZFilter *, const char*, const char*);

#ifndef soap_read_ns2__PTZFilter
#define soap_read_ns2__PTZFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__PTZFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__PTZFilter * SOAP_FMAC2 soap_instantiate_ns2__PTZFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PTZFilter * soap_new_ns2__PTZFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__PTZFilter(soap, n, NULL, NULL, NULL); }

inline ns2__PTZFilter * soap_new_req_ns2__PTZFilter(struct soap *soap, bool Status, bool Position) { ns2__PTZFilter *_p = soap_instantiate_ns2__PTZFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZFilter::Status = Status; _p->ns2__PTZFilter::Position = Position; } return _p; }

inline ns2__PTZFilter * soap_new_set_ns2__PTZFilter(struct soap *soap, bool Status, bool Position, char *__anyAttribute, char *__item1) { ns2__PTZFilter *_p = soap_instantiate_ns2__PTZFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__PTZFilter::Status = Status; _p->ns2__PTZFilter::Position = Position; _p->ns2__PTZFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__PTZFilter(struct soap *soap, ns2__PTZFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__PTZFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataConfigurationExtension
#define SOAP_TYPE_ns2__MetadataConfigurationExtension (259)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataConfigurationExtension(struct soap*, const char*, int, const ns2__MetadataConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__MetadataConfigurationExtension * SOAP_FMAC4 soap_in_ns2__MetadataConfigurationExtension(struct soap*, const char*, ns2__MetadataConfigurationExtension *, const char*);

#ifndef soap_write_ns2__MetadataConfigurationExtension
#define soap_write_ns2__MetadataConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationExtension * SOAP_FMAC4 soap_get_ns2__MetadataConfigurationExtension(struct soap*, ns2__MetadataConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__MetadataConfigurationExtension
#define soap_read_ns2__MetadataConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__MetadataConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataConfigurationExtension * soap_new_ns2__MetadataConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataConfigurationExtension * soap_new_req_ns2__MetadataConfigurationExtension(struct soap *soap) { ns2__MetadataConfigurationExtension *_p = soap_instantiate_ns2__MetadataConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__MetadataConfigurationExtension * soap_new_set_ns2__MetadataConfigurationExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__MetadataConfigurationExtension *_p = soap_instantiate_ns2__MetadataConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__MetadataConfigurationExtension(struct soap *soap, ns2__MetadataConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__MetadataConfiguration
#define SOAP_TYPE_ns2__MetadataConfiguration (258)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MetadataConfiguration(struct soap*, const char*, int, const ns2__MetadataConfiguration *, const char*);
SOAP_FMAC3 ns2__MetadataConfiguration * SOAP_FMAC4 soap_in_ns2__MetadataConfiguration(struct soap*, const char*, ns2__MetadataConfiguration *, const char*);

#ifndef soap_write_ns2__MetadataConfiguration
#define soap_write_ns2__MetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:MetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfiguration * SOAP_FMAC4 soap_get_ns2__MetadataConfiguration(struct soap*, ns2__MetadataConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__MetadataConfiguration
#define soap_read_ns2__MetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__MetadataConfiguration * SOAP_FMAC2 soap_instantiate_ns2__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__MetadataConfiguration * soap_new_ns2__MetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__MetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__MetadataConfiguration * soap_new_req_ns2__MetadataConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__MulticastConfiguration *Multicast, const std::string& SessionTimeout) { ns2__MetadataConfiguration *_p = soap_instantiate_ns2__MetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfiguration::Name = Name; _p->ns2__MetadataConfiguration::UseCount = UseCount; _p->ns2__MetadataConfiguration::token = token; _p->ns2__MetadataConfiguration::Multicast = Multicast; _p->ns2__MetadataConfiguration::SessionTimeout = SessionTimeout; } return _p; }

inline ns2__MetadataConfiguration * soap_new_set_ns2__MetadataConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__PTZFilter *PTZStatus, ns2__EventSubscription *Events, bool *Analytics, ns2__MulticastConfiguration *Multicast, const std::string& SessionTimeout, const std::vector<char * >& __any, ns2__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration, ns2__MetadataConfigurationExtension *Extension, std::string *CompressionType, char *__anyAttribute) { ns2__MetadataConfiguration *_p = soap_instantiate_ns2__MetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__MetadataConfiguration::Name = Name; _p->ns2__MetadataConfiguration::UseCount = UseCount; _p->ns2__MetadataConfiguration::token = token; _p->ns2__MetadataConfiguration::PTZStatus = PTZStatus; _p->ns2__MetadataConfiguration::Events = Events; _p->ns2__MetadataConfiguration::Analytics = Analytics; _p->ns2__MetadataConfiguration::Multicast = Multicast; _p->ns2__MetadataConfiguration::SessionTimeout = SessionTimeout; _p->ns2__MetadataConfiguration::__any = __any; _p->ns2__MetadataConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->ns2__MetadataConfiguration::Extension = Extension; _p->ns2__MetadataConfiguration::CompressionType = CompressionType; _p->ns2__MetadataConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__MetadataConfiguration(struct soap *soap, ns2__MetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__MetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoAnalyticsConfiguration
#define SOAP_TYPE_ns2__VideoAnalyticsConfiguration (257)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoAnalyticsConfiguration(struct soap*, const char*, int, const ns2__VideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 ns2__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_in_ns2__VideoAnalyticsConfiguration(struct soap*, const char*, ns2__VideoAnalyticsConfiguration *, const char*);

#ifndef soap_write_ns2__VideoAnalyticsConfiguration
#define soap_write_ns2__VideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_get_ns2__VideoAnalyticsConfiguration(struct soap*, ns2__VideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__VideoAnalyticsConfiguration
#define soap_read_ns2__VideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate_ns2__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoAnalyticsConfiguration * soap_new_ns2__VideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__VideoAnalyticsConfiguration * soap_new_req_ns2__VideoAnalyticsConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration, ns2__RuleEngineConfiguration *RuleEngineConfiguration) { ns2__VideoAnalyticsConfiguration *_p = soap_instantiate_ns2__VideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAnalyticsConfiguration::Name = Name; _p->ns2__VideoAnalyticsConfiguration::UseCount = UseCount; _p->ns2__VideoAnalyticsConfiguration::token = token; _p->ns2__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->ns2__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration; } return _p; }

inline ns2__VideoAnalyticsConfiguration * soap_new_set_ns2__VideoAnalyticsConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, ns2__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration, ns2__RuleEngineConfiguration *RuleEngineConfiguration, const std::vector<char * >& __any, char *__anyAttribute) { ns2__VideoAnalyticsConfiguration *_p = soap_instantiate_ns2__VideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoAnalyticsConfiguration::Name = Name; _p->ns2__VideoAnalyticsConfiguration::UseCount = UseCount; _p->ns2__VideoAnalyticsConfiguration::token = token; _p->ns2__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->ns2__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration; _p->ns2__VideoAnalyticsConfiguration::__any = __any; _p->ns2__VideoAnalyticsConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__VideoAnalyticsConfiguration(struct soap *soap, ns2__VideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioEncoderConfigurationOption
#define SOAP_TYPE_ns2__AudioEncoderConfigurationOption (256)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioEncoderConfigurationOption(struct soap*, const char*, int, const ns2__AudioEncoderConfigurationOption *, const char*);
SOAP_FMAC3 ns2__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_in_ns2__AudioEncoderConfigurationOption(struct soap*, const char*, ns2__AudioEncoderConfigurationOption *, const char*);

#ifndef soap_write_ns2__AudioEncoderConfigurationOption
#define soap_write_ns2__AudioEncoderConfigurationOption(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioEncoderConfigurationOption", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_get_ns2__AudioEncoderConfigurationOption(struct soap*, ns2__AudioEncoderConfigurationOption *, const char*, const char*);

#ifndef soap_read_ns2__AudioEncoderConfigurationOption
#define soap_read_ns2__AudioEncoderConfigurationOption(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioEncoderConfigurationOption(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioEncoderConfigurationOption * SOAP_FMAC2 soap_instantiate_ns2__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioEncoderConfigurationOption * soap_new_ns2__AudioEncoderConfigurationOption(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL); }

inline ns2__AudioEncoderConfigurationOption * soap_new_req_ns2__AudioEncoderConfigurationOption(struct soap *soap, enum ns2__AudioEncoding Encoding, ns2__IntList *BitrateList, ns2__IntList *SampleRateList) { ns2__AudioEncoderConfigurationOption *_p = soap_instantiate_ns2__AudioEncoderConfigurationOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoderConfigurationOption::Encoding = Encoding; _p->ns2__AudioEncoderConfigurationOption::BitrateList = BitrateList; _p->ns2__AudioEncoderConfigurationOption::SampleRateList = SampleRateList; } return _p; }

inline ns2__AudioEncoderConfigurationOption * soap_new_set_ns2__AudioEncoderConfigurationOption(struct soap *soap, enum ns2__AudioEncoding Encoding, ns2__IntList *BitrateList, ns2__IntList *SampleRateList, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AudioEncoderConfigurationOption *_p = soap_instantiate_ns2__AudioEncoderConfigurationOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoderConfigurationOption::Encoding = Encoding; _p->ns2__AudioEncoderConfigurationOption::BitrateList = BitrateList; _p->ns2__AudioEncoderConfigurationOption::SampleRateList = SampleRateList; _p->ns2__AudioEncoderConfigurationOption::__any = __any; _p->ns2__AudioEncoderConfigurationOption::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioEncoderConfigurationOption(struct soap *soap, ns2__AudioEncoderConfigurationOption *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioEncoderConfigurationOption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioEncoderConfigurationOptions
#define SOAP_TYPE_ns2__AudioEncoderConfigurationOptions (255)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioEncoderConfigurationOptions(struct soap*, const char*, int, const ns2__AudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in_ns2__AudioEncoderConfigurationOptions(struct soap*, const char*, ns2__AudioEncoderConfigurationOptions *, const char*);

#ifndef soap_write_ns2__AudioEncoderConfigurationOptions
#define soap_write_ns2__AudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get_ns2__AudioEncoderConfigurationOptions(struct soap*, ns2__AudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__AudioEncoderConfigurationOptions
#define soap_read_ns2__AudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__AudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioEncoderConfigurationOptions * soap_new_ns2__AudioEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__AudioEncoderConfigurationOptions * soap_new_req_ns2__AudioEncoderConfigurationOptions(struct soap *soap) { ns2__AudioEncoderConfigurationOptions *_p = soap_instantiate_ns2__AudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioEncoderConfigurationOptions * soap_new_set_ns2__AudioEncoderConfigurationOptions(struct soap *soap, const std::vector<ns2__AudioEncoderConfigurationOption * >& Options, char *__anyAttribute, char *__item1) { ns2__AudioEncoderConfigurationOptions *_p = soap_instantiate_ns2__AudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoderConfigurationOptions::Options = Options; _p->ns2__AudioEncoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioEncoderConfigurationOptions(struct soap *soap, ns2__AudioEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioEncoderConfiguration
#define SOAP_TYPE_ns2__AudioEncoderConfiguration (254)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioEncoderConfiguration(struct soap*, const char*, int, const ns2__AudioEncoderConfiguration *, const char*);
SOAP_FMAC3 ns2__AudioEncoderConfiguration * SOAP_FMAC4 soap_in_ns2__AudioEncoderConfiguration(struct soap*, const char*, ns2__AudioEncoderConfiguration *, const char*);

#ifndef soap_write_ns2__AudioEncoderConfiguration
#define soap_write_ns2__AudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoderConfiguration * SOAP_FMAC4 soap_get_ns2__AudioEncoderConfiguration(struct soap*, ns2__AudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__AudioEncoderConfiguration
#define soap_read_ns2__AudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate_ns2__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioEncoderConfiguration * soap_new_ns2__AudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__AudioEncoderConfiguration * soap_new_req_ns2__AudioEncoderConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, enum ns2__AudioEncoding Encoding, int Bitrate, int SampleRate, ns2__MulticastConfiguration *Multicast, const std::string& SessionTimeout) { ns2__AudioEncoderConfiguration *_p = soap_instantiate_ns2__AudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoderConfiguration::Name = Name; _p->ns2__AudioEncoderConfiguration::UseCount = UseCount; _p->ns2__AudioEncoderConfiguration::token = token; _p->ns2__AudioEncoderConfiguration::Encoding = Encoding; _p->ns2__AudioEncoderConfiguration::Bitrate = Bitrate; _p->ns2__AudioEncoderConfiguration::SampleRate = SampleRate; _p->ns2__AudioEncoderConfiguration::Multicast = Multicast; _p->ns2__AudioEncoderConfiguration::SessionTimeout = SessionTimeout; } return _p; }

inline ns2__AudioEncoderConfiguration * soap_new_set_ns2__AudioEncoderConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, enum ns2__AudioEncoding Encoding, int Bitrate, int SampleRate, ns2__MulticastConfiguration *Multicast, const std::string& SessionTimeout, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AudioEncoderConfiguration *_p = soap_instantiate_ns2__AudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioEncoderConfiguration::Name = Name; _p->ns2__AudioEncoderConfiguration::UseCount = UseCount; _p->ns2__AudioEncoderConfiguration::token = token; _p->ns2__AudioEncoderConfiguration::Encoding = Encoding; _p->ns2__AudioEncoderConfiguration::Bitrate = Bitrate; _p->ns2__AudioEncoderConfiguration::SampleRate = SampleRate; _p->ns2__AudioEncoderConfiguration::Multicast = Multicast; _p->ns2__AudioEncoderConfiguration::SessionTimeout = SessionTimeout; _p->ns2__AudioEncoderConfiguration::__any = __any; _p->ns2__AudioEncoderConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AudioEncoderConfiguration(struct soap *soap, ns2__AudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioSourceOptionsExtension
#define SOAP_TYPE_ns2__AudioSourceOptionsExtension (253)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioSourceOptionsExtension(struct soap*, const char*, int, const ns2__AudioSourceOptionsExtension *, const char*);
SOAP_FMAC3 ns2__AudioSourceOptionsExtension * SOAP_FMAC4 soap_in_ns2__AudioSourceOptionsExtension(struct soap*, const char*, ns2__AudioSourceOptionsExtension *, const char*);

#ifndef soap_write_ns2__AudioSourceOptionsExtension
#define soap_write_ns2__AudioSourceOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioSourceOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSourceOptionsExtension * SOAP_FMAC4 soap_get_ns2__AudioSourceOptionsExtension(struct soap*, ns2__AudioSourceOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__AudioSourceOptionsExtension
#define soap_read_ns2__AudioSourceOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioSourceOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioSourceOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__AudioSourceOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioSourceOptionsExtension * soap_new_ns2__AudioSourceOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioSourceOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__AudioSourceOptionsExtension * soap_new_req_ns2__AudioSourceOptionsExtension(struct soap *soap) { ns2__AudioSourceOptionsExtension *_p = soap_instantiate_ns2__AudioSourceOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AudioSourceOptionsExtension * soap_new_set_ns2__AudioSourceOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__AudioSourceOptionsExtension *_p = soap_instantiate_ns2__AudioSourceOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSourceOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioSourceOptionsExtension(struct soap *soap, ns2__AudioSourceOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioSourceOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioSourceConfigurationOptions
#define SOAP_TYPE_ns2__AudioSourceConfigurationOptions (252)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioSourceConfigurationOptions(struct soap*, const char*, int, const ns2__AudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_in_ns2__AudioSourceConfigurationOptions(struct soap*, const char*, ns2__AudioSourceConfigurationOptions *, const char*);

#ifndef soap_write_ns2__AudioSourceConfigurationOptions
#define soap_write_ns2__AudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_get_ns2__AudioSourceConfigurationOptions(struct soap*, ns2__AudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__AudioSourceConfigurationOptions
#define soap_read_ns2__AudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__AudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioSourceConfigurationOptions * soap_new_ns2__AudioSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__AudioSourceConfigurationOptions * soap_new_req_ns2__AudioSourceConfigurationOptions(struct soap *soap, const std::vector<std::string >& InputTokensAvailable) { ns2__AudioSourceConfigurationOptions *_p = soap_instantiate_ns2__AudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable; } return _p; }

inline ns2__AudioSourceConfigurationOptions * soap_new_set_ns2__AudioSourceConfigurationOptions(struct soap *soap, const std::vector<std::string >& InputTokensAvailable, ns2__AudioSourceOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__AudioSourceConfigurationOptions *_p = soap_instantiate_ns2__AudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable; _p->ns2__AudioSourceConfigurationOptions::Extension = Extension; _p->ns2__AudioSourceConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AudioSourceConfigurationOptions(struct soap *soap, ns2__AudioSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioSourceConfiguration
#define SOAP_TYPE_ns2__AudioSourceConfiguration (251)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioSourceConfiguration(struct soap*, const char*, int, const ns2__AudioSourceConfiguration *, const char*);
SOAP_FMAC3 ns2__AudioSourceConfiguration * SOAP_FMAC4 soap_in_ns2__AudioSourceConfiguration(struct soap*, const char*, ns2__AudioSourceConfiguration *, const char*);

#ifndef soap_write_ns2__AudioSourceConfiguration
#define soap_write_ns2__AudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSourceConfiguration * SOAP_FMAC4 soap_get_ns2__AudioSourceConfiguration(struct soap*, ns2__AudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__AudioSourceConfiguration
#define soap_read_ns2__AudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioSourceConfiguration * SOAP_FMAC2 soap_instantiate_ns2__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioSourceConfiguration * soap_new_ns2__AudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__AudioSourceConfiguration * soap_new_req_ns2__AudioSourceConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& SourceToken) { ns2__AudioSourceConfiguration *_p = soap_instantiate_ns2__AudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSourceConfiguration::Name = Name; _p->ns2__AudioSourceConfiguration::UseCount = UseCount; _p->ns2__AudioSourceConfiguration::token = token; _p->ns2__AudioSourceConfiguration::SourceToken = SourceToken; } return _p; }

inline ns2__AudioSourceConfiguration * soap_new_set_ns2__AudioSourceConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& SourceToken, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AudioSourceConfiguration *_p = soap_instantiate_ns2__AudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSourceConfiguration::Name = Name; _p->ns2__AudioSourceConfiguration::UseCount = UseCount; _p->ns2__AudioSourceConfiguration::token = token; _p->ns2__AudioSourceConfiguration::SourceToken = SourceToken; _p->ns2__AudioSourceConfiguration::__any = __any; _p->ns2__AudioSourceConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AudioSourceConfiguration(struct soap *soap, ns2__AudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__H264Options2
#define SOAP_TYPE_ns2__H264Options2 (250)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__H264Options2(struct soap*, const char*, int, const ns2__H264Options2 *, const char*);
SOAP_FMAC3 ns2__H264Options2 * SOAP_FMAC4 soap_in_ns2__H264Options2(struct soap*, const char*, ns2__H264Options2 *, const char*);

#ifndef soap_write_ns2__H264Options2
#define soap_write_ns2__H264Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:H264Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Options2 * SOAP_FMAC4 soap_get_ns2__H264Options2(struct soap*, ns2__H264Options2 *, const char*, const char*);

#ifndef soap_read_ns2__H264Options2
#define soap_read_ns2__H264Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__H264Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__H264Options2 * SOAP_FMAC2 soap_instantiate_ns2__H264Options2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__H264Options2 * soap_new_ns2__H264Options2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__H264Options2(soap, n, NULL, NULL, NULL); }

inline ns2__H264Options2 * soap_new_req_ns2__H264Options2(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__H264Profile >& H264ProfilesSupported, ns2__IntRange *BitrateRange) { ns2__H264Options2 *_p = soap_instantiate_ns2__H264Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Options2::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__H264Options2::GovLengthRange = GovLengthRange; _p->ns2__H264Options2::FrameRateRange = FrameRateRange; _p->ns2__H264Options2::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__H264Options2::H264ProfilesSupported = H264ProfilesSupported; _p->ns2__H264Options2::BitrateRange = BitrateRange; } return _p; }

inline ns2__H264Options2 * soap_new_set_ns2__H264Options2(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__H264Profile >& H264ProfilesSupported, ns2__IntRange *BitrateRange, const std::vector<char * >& __any, char *__anyAttribute) { ns2__H264Options2 *_p = soap_instantiate_ns2__H264Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Options2::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__H264Options2::GovLengthRange = GovLengthRange; _p->ns2__H264Options2::FrameRateRange = FrameRateRange; _p->ns2__H264Options2::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__H264Options2::H264ProfilesSupported = H264ProfilesSupported; _p->ns2__H264Options2::BitrateRange = BitrateRange; _p->ns2__H264Options2::__any = __any; _p->ns2__H264Options2::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__H264Options2(struct soap *soap, ns2__H264Options2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__H264Options2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__H264Options
#define SOAP_TYPE_ns2__H264Options (249)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__H264Options(struct soap*, const char*, int, const ns2__H264Options *, const char*);
SOAP_FMAC3 ns2__H264Options * SOAP_FMAC4 soap_in_ns2__H264Options(struct soap*, const char*, ns2__H264Options *, const char*);

#ifndef soap_write_ns2__H264Options
#define soap_write_ns2__H264Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:H264Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Options * SOAP_FMAC4 soap_get_ns2__H264Options(struct soap*, ns2__H264Options *, const char*, const char*);

#ifndef soap_read_ns2__H264Options
#define soap_read_ns2__H264Options(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__H264Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__H264Options * SOAP_FMAC2 soap_instantiate_ns2__H264Options(struct soap*, int, const char*, const char*, size_t*);

inline ns2__H264Options * soap_new_ns2__H264Options(struct soap *soap, int n = -1) { return soap_instantiate_ns2__H264Options(soap, n, NULL, NULL, NULL); }

inline ns2__H264Options * soap_new_req_ns2__H264Options(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__H264Profile >& H264ProfilesSupported) { ns2__H264Options *_p = soap_instantiate_ns2__H264Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Options::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__H264Options::GovLengthRange = GovLengthRange; _p->ns2__H264Options::FrameRateRange = FrameRateRange; _p->ns2__H264Options::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__H264Options::H264ProfilesSupported = H264ProfilesSupported; } return _p; }

inline ns2__H264Options * soap_new_set_ns2__H264Options(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__H264Profile >& H264ProfilesSupported, char *__item1) { ns2__H264Options *_p = soap_instantiate_ns2__H264Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Options::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__H264Options::GovLengthRange = GovLengthRange; _p->ns2__H264Options::FrameRateRange = FrameRateRange; _p->ns2__H264Options::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__H264Options::H264ProfilesSupported = H264ProfilesSupported; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__H264Options(struct soap *soap, ns2__H264Options *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__H264Options(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Mpeg4Options2
#define SOAP_TYPE_ns2__Mpeg4Options2 (248)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Mpeg4Options2(struct soap*, const char*, int, const ns2__Mpeg4Options2 *, const char*);
SOAP_FMAC3 ns2__Mpeg4Options2 * SOAP_FMAC4 soap_in_ns2__Mpeg4Options2(struct soap*, const char*, ns2__Mpeg4Options2 *, const char*);

#ifndef soap_write_ns2__Mpeg4Options2
#define soap_write_ns2__Mpeg4Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Mpeg4Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Options2 * SOAP_FMAC4 soap_get_ns2__Mpeg4Options2(struct soap*, ns2__Mpeg4Options2 *, const char*, const char*);

#ifndef soap_read_ns2__Mpeg4Options2
#define soap_read_ns2__Mpeg4Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Mpeg4Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Mpeg4Options2 * SOAP_FMAC2 soap_instantiate_ns2__Mpeg4Options2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Mpeg4Options2 * soap_new_ns2__Mpeg4Options2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Mpeg4Options2(soap, n, NULL, NULL, NULL); }

inline ns2__Mpeg4Options2 * soap_new_req_ns2__Mpeg4Options2(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__Mpeg4Profile >& Mpeg4ProfilesSupported, ns2__IntRange *BitrateRange) { ns2__Mpeg4Options2 *_p = soap_instantiate_ns2__Mpeg4Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Options2::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__Mpeg4Options2::GovLengthRange = GovLengthRange; _p->ns2__Mpeg4Options2::FrameRateRange = FrameRateRange; _p->ns2__Mpeg4Options2::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__Mpeg4Options2::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported; _p->ns2__Mpeg4Options2::BitrateRange = BitrateRange; } return _p; }

inline ns2__Mpeg4Options2 * soap_new_set_ns2__Mpeg4Options2(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__Mpeg4Profile >& Mpeg4ProfilesSupported, ns2__IntRange *BitrateRange, const std::vector<char * >& __any, char *__anyAttribute) { ns2__Mpeg4Options2 *_p = soap_instantiate_ns2__Mpeg4Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Options2::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__Mpeg4Options2::GovLengthRange = GovLengthRange; _p->ns2__Mpeg4Options2::FrameRateRange = FrameRateRange; _p->ns2__Mpeg4Options2::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__Mpeg4Options2::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported; _p->ns2__Mpeg4Options2::BitrateRange = BitrateRange; _p->ns2__Mpeg4Options2::__any = __any; _p->ns2__Mpeg4Options2::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__Mpeg4Options2(struct soap *soap, ns2__Mpeg4Options2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Mpeg4Options2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Mpeg4Options
#define SOAP_TYPE_ns2__Mpeg4Options (247)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Mpeg4Options(struct soap*, const char*, int, const ns2__Mpeg4Options *, const char*);
SOAP_FMAC3 ns2__Mpeg4Options * SOAP_FMAC4 soap_in_ns2__Mpeg4Options(struct soap*, const char*, ns2__Mpeg4Options *, const char*);

#ifndef soap_write_ns2__Mpeg4Options
#define soap_write_ns2__Mpeg4Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Mpeg4Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Options * SOAP_FMAC4 soap_get_ns2__Mpeg4Options(struct soap*, ns2__Mpeg4Options *, const char*, const char*);

#ifndef soap_read_ns2__Mpeg4Options
#define soap_read_ns2__Mpeg4Options(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Mpeg4Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Mpeg4Options * SOAP_FMAC2 soap_instantiate_ns2__Mpeg4Options(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Mpeg4Options * soap_new_ns2__Mpeg4Options(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Mpeg4Options(soap, n, NULL, NULL, NULL); }

inline ns2__Mpeg4Options * soap_new_req_ns2__Mpeg4Options(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__Mpeg4Profile >& Mpeg4ProfilesSupported) { ns2__Mpeg4Options *_p = soap_instantiate_ns2__Mpeg4Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__Mpeg4Options::GovLengthRange = GovLengthRange; _p->ns2__Mpeg4Options::FrameRateRange = FrameRateRange; _p->ns2__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported; } return _p; }

inline ns2__Mpeg4Options * soap_new_set_ns2__Mpeg4Options(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *GovLengthRange, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, const std::vector<enum ns2__Mpeg4Profile >& Mpeg4ProfilesSupported, char *__item1) { ns2__Mpeg4Options *_p = soap_instantiate_ns2__Mpeg4Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__Mpeg4Options::GovLengthRange = GovLengthRange; _p->ns2__Mpeg4Options::FrameRateRange = FrameRateRange; _p->ns2__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Mpeg4Options(struct soap *soap, ns2__Mpeg4Options *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Mpeg4Options(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__JpegOptions2
#define SOAP_TYPE_ns2__JpegOptions2 (246)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JpegOptions2(struct soap*, const char*, int, const ns2__JpegOptions2 *, const char*);
SOAP_FMAC3 ns2__JpegOptions2 * SOAP_FMAC4 soap_in_ns2__JpegOptions2(struct soap*, const char*, ns2__JpegOptions2 *, const char*);

#ifndef soap_write_ns2__JpegOptions2
#define soap_write_ns2__JpegOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:JpegOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JpegOptions2 * SOAP_FMAC4 soap_get_ns2__JpegOptions2(struct soap*, ns2__JpegOptions2 *, const char*, const char*);

#ifndef soap_read_ns2__JpegOptions2
#define soap_read_ns2__JpegOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__JpegOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__JpegOptions2 * SOAP_FMAC2 soap_instantiate_ns2__JpegOptions2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__JpegOptions2 * soap_new_ns2__JpegOptions2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__JpegOptions2(soap, n, NULL, NULL, NULL); }

inline ns2__JpegOptions2 * soap_new_req_ns2__JpegOptions2(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, ns2__IntRange *BitrateRange) { ns2__JpegOptions2 *_p = soap_instantiate_ns2__JpegOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JpegOptions2::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__JpegOptions2::FrameRateRange = FrameRateRange; _p->ns2__JpegOptions2::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__JpegOptions2::BitrateRange = BitrateRange; } return _p; }

inline ns2__JpegOptions2 * soap_new_set_ns2__JpegOptions2(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, ns2__IntRange *BitrateRange, const std::vector<char * >& __any, char *__anyAttribute) { ns2__JpegOptions2 *_p = soap_instantiate_ns2__JpegOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JpegOptions2::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__JpegOptions2::FrameRateRange = FrameRateRange; _p->ns2__JpegOptions2::EncodingIntervalRange = EncodingIntervalRange; _p->ns2__JpegOptions2::BitrateRange = BitrateRange; _p->ns2__JpegOptions2::__any = __any; _p->ns2__JpegOptions2::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__JpegOptions2(struct soap *soap, ns2__JpegOptions2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__JpegOptions2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__JpegOptions
#define SOAP_TYPE_ns2__JpegOptions (245)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JpegOptions(struct soap*, const char*, int, const ns2__JpegOptions *, const char*);
SOAP_FMAC3 ns2__JpegOptions * SOAP_FMAC4 soap_in_ns2__JpegOptions(struct soap*, const char*, ns2__JpegOptions *, const char*);

#ifndef soap_write_ns2__JpegOptions
#define soap_write_ns2__JpegOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:JpegOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JpegOptions * SOAP_FMAC4 soap_get_ns2__JpegOptions(struct soap*, ns2__JpegOptions *, const char*, const char*);

#ifndef soap_read_ns2__JpegOptions
#define soap_read_ns2__JpegOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__JpegOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__JpegOptions * SOAP_FMAC2 soap_instantiate_ns2__JpegOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__JpegOptions * soap_new_ns2__JpegOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__JpegOptions(soap, n, NULL, NULL, NULL); }

inline ns2__JpegOptions * soap_new_req_ns2__JpegOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange) { ns2__JpegOptions *_p = soap_instantiate_ns2__JpegOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JpegOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__JpegOptions::FrameRateRange = FrameRateRange; _p->ns2__JpegOptions::EncodingIntervalRange = EncodingIntervalRange; } return _p; }

inline ns2__JpegOptions * soap_new_set_ns2__JpegOptions(struct soap *soap, const std::vector<ns2__VideoResolution * >& ResolutionsAvailable, ns2__IntRange *FrameRateRange, ns2__IntRange *EncodingIntervalRange, char *__item1) { ns2__JpegOptions *_p = soap_instantiate_ns2__JpegOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__JpegOptions::ResolutionsAvailable = ResolutionsAvailable; _p->ns2__JpegOptions::FrameRateRange = FrameRateRange; _p->ns2__JpegOptions::EncodingIntervalRange = EncodingIntervalRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__JpegOptions(struct soap *soap, ns2__JpegOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__JpegOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoEncoderOptionsExtension2
#define SOAP_TYPE_ns2__VideoEncoderOptionsExtension2 (244)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoEncoderOptionsExtension2(struct soap*, const char*, int, const ns2__VideoEncoderOptionsExtension2 *, const char*);
SOAP_FMAC3 ns2__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_in_ns2__VideoEncoderOptionsExtension2(struct soap*, const char*, ns2__VideoEncoderOptionsExtension2 *, const char*);

#ifndef soap_write_ns2__VideoEncoderOptionsExtension2
#define soap_write_ns2__VideoEncoderOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoEncoderOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_get_ns2__VideoEncoderOptionsExtension2(struct soap*, ns2__VideoEncoderOptionsExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__VideoEncoderOptionsExtension2
#define soap_read_ns2__VideoEncoderOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoEncoderOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoEncoderOptionsExtension2 * SOAP_FMAC2 soap_instantiate_ns2__VideoEncoderOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoEncoderOptionsExtension2 * soap_new_ns2__VideoEncoderOptionsExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoEncoderOptionsExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__VideoEncoderOptionsExtension2 * soap_new_req_ns2__VideoEncoderOptionsExtension2(struct soap *soap) { ns2__VideoEncoderOptionsExtension2 *_p = soap_instantiate_ns2__VideoEncoderOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoEncoderOptionsExtension2 * soap_new_set_ns2__VideoEncoderOptionsExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoEncoderOptionsExtension2 *_p = soap_instantiate_ns2__VideoEncoderOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoderOptionsExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoEncoderOptionsExtension2(struct soap *soap, ns2__VideoEncoderOptionsExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoEncoderOptionsExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoEncoderOptionsExtension
#define SOAP_TYPE_ns2__VideoEncoderOptionsExtension (243)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoEncoderOptionsExtension(struct soap*, const char*, int, const ns2__VideoEncoderOptionsExtension *, const char*);
SOAP_FMAC3 ns2__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_in_ns2__VideoEncoderOptionsExtension(struct soap*, const char*, ns2__VideoEncoderOptionsExtension *, const char*);

#ifndef soap_write_ns2__VideoEncoderOptionsExtension
#define soap_write_ns2__VideoEncoderOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoEncoderOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_get_ns2__VideoEncoderOptionsExtension(struct soap*, ns2__VideoEncoderOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoEncoderOptionsExtension
#define soap_read_ns2__VideoEncoderOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoEncoderOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoEncoderOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoEncoderOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoEncoderOptionsExtension * soap_new_ns2__VideoEncoderOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoEncoderOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoEncoderOptionsExtension * soap_new_req_ns2__VideoEncoderOptionsExtension(struct soap *soap) { ns2__VideoEncoderOptionsExtension *_p = soap_instantiate_ns2__VideoEncoderOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoEncoderOptionsExtension * soap_new_set_ns2__VideoEncoderOptionsExtension(struct soap *soap, const std::vector<char * >& __any, ns2__JpegOptions2 *JPEG, ns2__Mpeg4Options2 *MPEG4, ns2__H264Options2 *H264, ns2__VideoEncoderOptionsExtension2 *Extension, char *__item1) { ns2__VideoEncoderOptionsExtension *_p = soap_instantiate_ns2__VideoEncoderOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoderOptionsExtension::__any = __any; _p->ns2__VideoEncoderOptionsExtension::JPEG = JPEG; _p->ns2__VideoEncoderOptionsExtension::MPEG4 = MPEG4; _p->ns2__VideoEncoderOptionsExtension::H264 = H264; _p->ns2__VideoEncoderOptionsExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoEncoderOptionsExtension(struct soap *soap, ns2__VideoEncoderOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoEncoderOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoEncoderConfigurationOptions
#define SOAP_TYPE_ns2__VideoEncoderConfigurationOptions (242)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoEncoderConfigurationOptions(struct soap*, const char*, int, const ns2__VideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in_ns2__VideoEncoderConfigurationOptions(struct soap*, const char*, ns2__VideoEncoderConfigurationOptions *, const char*);

#ifndef soap_write_ns2__VideoEncoderConfigurationOptions
#define soap_write_ns2__VideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get_ns2__VideoEncoderConfigurationOptions(struct soap*, ns2__VideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__VideoEncoderConfigurationOptions
#define soap_read_ns2__VideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__VideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoEncoderConfigurationOptions * soap_new_ns2__VideoEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__VideoEncoderConfigurationOptions * soap_new_req_ns2__VideoEncoderConfigurationOptions(struct soap *soap, ns2__IntRange *QualityRange) { ns2__VideoEncoderConfigurationOptions *_p = soap_instantiate_ns2__VideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoderConfigurationOptions::QualityRange = QualityRange; } return _p; }

inline ns2__VideoEncoderConfigurationOptions * soap_new_set_ns2__VideoEncoderConfigurationOptions(struct soap *soap, ns2__IntRange *QualityRange, ns2__JpegOptions *JPEG, ns2__Mpeg4Options *MPEG4, ns2__H264Options *H264, ns2__VideoEncoderOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__VideoEncoderConfigurationOptions *_p = soap_instantiate_ns2__VideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoderConfigurationOptions::QualityRange = QualityRange; _p->ns2__VideoEncoderConfigurationOptions::JPEG = JPEG; _p->ns2__VideoEncoderConfigurationOptions::MPEG4 = MPEG4; _p->ns2__VideoEncoderConfigurationOptions::H264 = H264; _p->ns2__VideoEncoderConfigurationOptions::Extension = Extension; _p->ns2__VideoEncoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoEncoderConfigurationOptions(struct soap *soap, ns2__VideoEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__H264Configuration
#define SOAP_TYPE_ns2__H264Configuration (241)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__H264Configuration(struct soap*, const char*, int, const ns2__H264Configuration *, const char*);
SOAP_FMAC3 ns2__H264Configuration * SOAP_FMAC4 soap_in_ns2__H264Configuration(struct soap*, const char*, ns2__H264Configuration *, const char*);

#ifndef soap_write_ns2__H264Configuration
#define soap_write_ns2__H264Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:H264Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Configuration * SOAP_FMAC4 soap_get_ns2__H264Configuration(struct soap*, ns2__H264Configuration *, const char*, const char*);

#ifndef soap_read_ns2__H264Configuration
#define soap_read_ns2__H264Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__H264Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__H264Configuration * SOAP_FMAC2 soap_instantiate_ns2__H264Configuration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__H264Configuration * soap_new_ns2__H264Configuration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__H264Configuration(soap, n, NULL, NULL, NULL); }

inline ns2__H264Configuration * soap_new_req_ns2__H264Configuration(struct soap *soap, int GovLength, enum ns2__H264Profile H264Profile) { ns2__H264Configuration *_p = soap_instantiate_ns2__H264Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Configuration::GovLength = GovLength; _p->ns2__H264Configuration::H264Profile = H264Profile; } return _p; }

inline ns2__H264Configuration * soap_new_set_ns2__H264Configuration(struct soap *soap, int GovLength, enum ns2__H264Profile H264Profile, char *__item1) { ns2__H264Configuration *_p = soap_instantiate_ns2__H264Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__H264Configuration::GovLength = GovLength; _p->ns2__H264Configuration::H264Profile = H264Profile; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__H264Configuration(struct soap *soap, ns2__H264Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__H264Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Mpeg4Configuration
#define SOAP_TYPE_ns2__Mpeg4Configuration (240)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Mpeg4Configuration(struct soap*, const char*, int, const ns2__Mpeg4Configuration *, const char*);
SOAP_FMAC3 ns2__Mpeg4Configuration * SOAP_FMAC4 soap_in_ns2__Mpeg4Configuration(struct soap*, const char*, ns2__Mpeg4Configuration *, const char*);

#ifndef soap_write_ns2__Mpeg4Configuration
#define soap_write_ns2__Mpeg4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Mpeg4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Configuration * SOAP_FMAC4 soap_get_ns2__Mpeg4Configuration(struct soap*, ns2__Mpeg4Configuration *, const char*, const char*);

#ifndef soap_read_ns2__Mpeg4Configuration
#define soap_read_ns2__Mpeg4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Mpeg4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Mpeg4Configuration * SOAP_FMAC2 soap_instantiate_ns2__Mpeg4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Mpeg4Configuration * soap_new_ns2__Mpeg4Configuration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Mpeg4Configuration(soap, n, NULL, NULL, NULL); }

inline ns2__Mpeg4Configuration * soap_new_req_ns2__Mpeg4Configuration(struct soap *soap, int GovLength, enum ns2__Mpeg4Profile Mpeg4Profile) { ns2__Mpeg4Configuration *_p = soap_instantiate_ns2__Mpeg4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Configuration::GovLength = GovLength; _p->ns2__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile; } return _p; }

inline ns2__Mpeg4Configuration * soap_new_set_ns2__Mpeg4Configuration(struct soap *soap, int GovLength, enum ns2__Mpeg4Profile Mpeg4Profile, char *__item1) { ns2__Mpeg4Configuration *_p = soap_instantiate_ns2__Mpeg4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Mpeg4Configuration::GovLength = GovLength; _p->ns2__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Mpeg4Configuration(struct soap *soap, ns2__Mpeg4Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Mpeg4Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoRateControl
#define SOAP_TYPE_ns2__VideoRateControl (239)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoRateControl(struct soap*, const char*, int, const ns2__VideoRateControl *, const char*);
SOAP_FMAC3 ns2__VideoRateControl * SOAP_FMAC4 soap_in_ns2__VideoRateControl(struct soap*, const char*, ns2__VideoRateControl *, const char*);

#ifndef soap_write_ns2__VideoRateControl
#define soap_write_ns2__VideoRateControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoRateControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoRateControl * SOAP_FMAC4 soap_get_ns2__VideoRateControl(struct soap*, ns2__VideoRateControl *, const char*, const char*);

#ifndef soap_read_ns2__VideoRateControl
#define soap_read_ns2__VideoRateControl(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoRateControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoRateControl * SOAP_FMAC2 soap_instantiate_ns2__VideoRateControl(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoRateControl * soap_new_ns2__VideoRateControl(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoRateControl(soap, n, NULL, NULL, NULL); }

inline ns2__VideoRateControl * soap_new_req_ns2__VideoRateControl(struct soap *soap, int FrameRateLimit, int EncodingInterval, int BitrateLimit) { ns2__VideoRateControl *_p = soap_instantiate_ns2__VideoRateControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoRateControl::FrameRateLimit = FrameRateLimit; _p->ns2__VideoRateControl::EncodingInterval = EncodingInterval; _p->ns2__VideoRateControl::BitrateLimit = BitrateLimit; } return _p; }

inline ns2__VideoRateControl * soap_new_set_ns2__VideoRateControl(struct soap *soap, int FrameRateLimit, int EncodingInterval, int BitrateLimit, char *__item1) { ns2__VideoRateControl *_p = soap_instantiate_ns2__VideoRateControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoRateControl::FrameRateLimit = FrameRateLimit; _p->ns2__VideoRateControl::EncodingInterval = EncodingInterval; _p->ns2__VideoRateControl::BitrateLimit = BitrateLimit; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoRateControl(struct soap *soap, ns2__VideoRateControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoRateControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoResolution
#define SOAP_TYPE_ns2__VideoResolution (238)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoResolution(struct soap*, const char*, int, const ns2__VideoResolution *, const char*);
SOAP_FMAC3 ns2__VideoResolution * SOAP_FMAC4 soap_in_ns2__VideoResolution(struct soap*, const char*, ns2__VideoResolution *, const char*);

#ifndef soap_write_ns2__VideoResolution
#define soap_write_ns2__VideoResolution(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoResolution", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoResolution * SOAP_FMAC4 soap_get_ns2__VideoResolution(struct soap*, ns2__VideoResolution *, const char*, const char*);

#ifndef soap_read_ns2__VideoResolution
#define soap_read_ns2__VideoResolution(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoResolution(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoResolution * SOAP_FMAC2 soap_instantiate_ns2__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoResolution * soap_new_ns2__VideoResolution(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoResolution(soap, n, NULL, NULL, NULL); }

inline ns2__VideoResolution * soap_new_req_ns2__VideoResolution(struct soap *soap, int Width, int Height) { ns2__VideoResolution *_p = soap_instantiate_ns2__VideoResolution(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoResolution::Width = Width; _p->ns2__VideoResolution::Height = Height; } return _p; }

inline ns2__VideoResolution * soap_new_set_ns2__VideoResolution(struct soap *soap, int Width, int Height, char *__item1) { ns2__VideoResolution *_p = soap_instantiate_ns2__VideoResolution(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoResolution::Width = Width; _p->ns2__VideoResolution::Height = Height; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoResolution(struct soap *soap, ns2__VideoResolution *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoResolution(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoEncoderConfiguration
#define SOAP_TYPE_ns2__VideoEncoderConfiguration (237)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoEncoderConfiguration(struct soap*, const char*, int, const ns2__VideoEncoderConfiguration *, const char*);
SOAP_FMAC3 ns2__VideoEncoderConfiguration * SOAP_FMAC4 soap_in_ns2__VideoEncoderConfiguration(struct soap*, const char*, ns2__VideoEncoderConfiguration *, const char*);

#ifndef soap_write_ns2__VideoEncoderConfiguration
#define soap_write_ns2__VideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderConfiguration * SOAP_FMAC4 soap_get_ns2__VideoEncoderConfiguration(struct soap*, ns2__VideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__VideoEncoderConfiguration
#define soap_read_ns2__VideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate_ns2__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoEncoderConfiguration * soap_new_ns2__VideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__VideoEncoderConfiguration * soap_new_req_ns2__VideoEncoderConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, enum ns2__VideoEncoding Encoding, ns2__VideoResolution *Resolution, float Quality, ns2__MulticastConfiguration *Multicast, const std::string& SessionTimeout) { ns2__VideoEncoderConfiguration *_p = soap_instantiate_ns2__VideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoderConfiguration::Name = Name; _p->ns2__VideoEncoderConfiguration::UseCount = UseCount; _p->ns2__VideoEncoderConfiguration::token = token; _p->ns2__VideoEncoderConfiguration::Encoding = Encoding; _p->ns2__VideoEncoderConfiguration::Resolution = Resolution; _p->ns2__VideoEncoderConfiguration::Quality = Quality; _p->ns2__VideoEncoderConfiguration::Multicast = Multicast; _p->ns2__VideoEncoderConfiguration::SessionTimeout = SessionTimeout; } return _p; }

inline ns2__VideoEncoderConfiguration * soap_new_set_ns2__VideoEncoderConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, enum ns2__VideoEncoding Encoding, ns2__VideoResolution *Resolution, float Quality, ns2__VideoRateControl *RateControl, ns2__Mpeg4Configuration *MPEG4, ns2__H264Configuration *H264, ns2__MulticastConfiguration *Multicast, const std::string& SessionTimeout, const std::vector<char * >& __any, char *__anyAttribute) { ns2__VideoEncoderConfiguration *_p = soap_instantiate_ns2__VideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoEncoderConfiguration::Name = Name; _p->ns2__VideoEncoderConfiguration::UseCount = UseCount; _p->ns2__VideoEncoderConfiguration::token = token; _p->ns2__VideoEncoderConfiguration::Encoding = Encoding; _p->ns2__VideoEncoderConfiguration::Resolution = Resolution; _p->ns2__VideoEncoderConfiguration::Quality = Quality; _p->ns2__VideoEncoderConfiguration::RateControl = RateControl; _p->ns2__VideoEncoderConfiguration::MPEG4 = MPEG4; _p->ns2__VideoEncoderConfiguration::H264 = H264; _p->ns2__VideoEncoderConfiguration::Multicast = Multicast; _p->ns2__VideoEncoderConfiguration::SessionTimeout = SessionTimeout; _p->ns2__VideoEncoderConfiguration::__any = __any; _p->ns2__VideoEncoderConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__VideoEncoderConfiguration(struct soap *soap, ns2__VideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RotateOptionsExtension
#define SOAP_TYPE_ns2__RotateOptionsExtension (236)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RotateOptionsExtension(struct soap*, const char*, int, const ns2__RotateOptionsExtension *, const char*);
SOAP_FMAC3 ns2__RotateOptionsExtension * SOAP_FMAC4 soap_in_ns2__RotateOptionsExtension(struct soap*, const char*, ns2__RotateOptionsExtension *, const char*);

#ifndef soap_write_ns2__RotateOptionsExtension
#define soap_write_ns2__RotateOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RotateOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateOptionsExtension * SOAP_FMAC4 soap_get_ns2__RotateOptionsExtension(struct soap*, ns2__RotateOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__RotateOptionsExtension
#define soap_read_ns2__RotateOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RotateOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RotateOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__RotateOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RotateOptionsExtension * soap_new_ns2__RotateOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RotateOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RotateOptionsExtension * soap_new_req_ns2__RotateOptionsExtension(struct soap *soap) { ns2__RotateOptionsExtension *_p = soap_instantiate_ns2__RotateOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RotateOptionsExtension * soap_new_set_ns2__RotateOptionsExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RotateOptionsExtension *_p = soap_instantiate_ns2__RotateOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RotateOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RotateOptionsExtension(struct soap *soap, ns2__RotateOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RotateOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RotateOptions
#define SOAP_TYPE_ns2__RotateOptions (235)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RotateOptions(struct soap*, const char*, int, const ns2__RotateOptions *, const char*);
SOAP_FMAC3 ns2__RotateOptions * SOAP_FMAC4 soap_in_ns2__RotateOptions(struct soap*, const char*, ns2__RotateOptions *, const char*);

#ifndef soap_write_ns2__RotateOptions
#define soap_write_ns2__RotateOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RotateOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateOptions * SOAP_FMAC4 soap_get_ns2__RotateOptions(struct soap*, ns2__RotateOptions *, const char*, const char*);

#ifndef soap_read_ns2__RotateOptions
#define soap_read_ns2__RotateOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RotateOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RotateOptions * SOAP_FMAC2 soap_instantiate_ns2__RotateOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RotateOptions * soap_new_ns2__RotateOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RotateOptions(soap, n, NULL, NULL, NULL); }

inline ns2__RotateOptions * soap_new_req_ns2__RotateOptions(struct soap *soap, const std::vector<enum ns2__RotateMode >& Mode) { ns2__RotateOptions *_p = soap_instantiate_ns2__RotateOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RotateOptions::Mode = Mode; } return _p; }

inline ns2__RotateOptions * soap_new_set_ns2__RotateOptions(struct soap *soap, const std::vector<enum ns2__RotateMode >& Mode, ns2__IntList *DegreeList, ns2__RotateOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__RotateOptions *_p = soap_instantiate_ns2__RotateOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RotateOptions::Mode = Mode; _p->ns2__RotateOptions::DegreeList = DegreeList; _p->ns2__RotateOptions::Extension = Extension; _p->ns2__RotateOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RotateOptions(struct soap *soap, ns2__RotateOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RotateOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_ns2__VideoSourceConfigurationOptionsExtension2 (234)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, int, const ns2__VideoSourceConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_ns2__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, ns2__VideoSourceConfigurationOptionsExtension2 *, const char*);

#ifndef soap_write_ns2__VideoSourceConfigurationOptionsExtension2
#define soap_write_ns2__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_ns2__VideoSourceConfigurationOptionsExtension2(struct soap*, ns2__VideoSourceConfigurationOptionsExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceConfigurationOptionsExtension2
#define soap_read_ns2__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceConfigurationOptionsExtension2 * soap_new_ns2__VideoSourceConfigurationOptionsExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceConfigurationOptionsExtension2 * soap_new_req_ns2__VideoSourceConfigurationOptionsExtension2(struct soap *soap) { ns2__VideoSourceConfigurationOptionsExtension2 *_p = soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoSourceConfigurationOptionsExtension2 * soap_new_set_ns2__VideoSourceConfigurationOptionsExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoSourceConfigurationOptionsExtension2 *_p = soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfigurationOptionsExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceConfigurationOptionsExtension2(struct soap *soap, ns2__VideoSourceConfigurationOptionsExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceConfigurationOptionsExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_ns2__VideoSourceConfigurationOptionsExtension (233)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, int, const ns2__VideoSourceConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_in_ns2__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, ns2__VideoSourceConfigurationOptionsExtension *, const char*);

#ifndef soap_write_ns2__VideoSourceConfigurationOptionsExtension
#define soap_write_ns2__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_get_ns2__VideoSourceConfigurationOptionsExtension(struct soap*, ns2__VideoSourceConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceConfigurationOptionsExtension
#define soap_read_ns2__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceConfigurationOptionsExtension * soap_new_ns2__VideoSourceConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceConfigurationOptionsExtension * soap_new_req_ns2__VideoSourceConfigurationOptionsExtension(struct soap *soap) { ns2__VideoSourceConfigurationOptionsExtension *_p = soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoSourceConfigurationOptionsExtension * soap_new_set_ns2__VideoSourceConfigurationOptionsExtension(struct soap *soap, const std::vector<char * >& __any, ns2__RotateOptions *Rotate, ns2__VideoSourceConfigurationOptionsExtension2 *Extension, char *__item1) { ns2__VideoSourceConfigurationOptionsExtension *_p = soap_instantiate_ns2__VideoSourceConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfigurationOptionsExtension::__any = __any; _p->ns2__VideoSourceConfigurationOptionsExtension::Rotate = Rotate; _p->ns2__VideoSourceConfigurationOptionsExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceConfigurationOptionsExtension(struct soap *soap, ns2__VideoSourceConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceConfigurationOptions
#define SOAP_TYPE_ns2__VideoSourceConfigurationOptions (232)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceConfigurationOptions(struct soap*, const char*, int, const ns2__VideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 ns2__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_in_ns2__VideoSourceConfigurationOptions(struct soap*, const char*, ns2__VideoSourceConfigurationOptions *, const char*);

#ifndef soap_write_ns2__VideoSourceConfigurationOptions
#define soap_write_ns2__VideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_get_ns2__VideoSourceConfigurationOptions(struct soap*, ns2__VideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceConfigurationOptions
#define soap_read_ns2__VideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceConfigurationOptions * soap_new_ns2__VideoSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceConfigurationOptions * soap_new_req_ns2__VideoSourceConfigurationOptions(struct soap *soap, ns2__IntRectangleRange *BoundsRange, const std::vector<std::string >& VideoSourceTokensAvailable) { ns2__VideoSourceConfigurationOptions *_p = soap_instantiate_ns2__VideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfigurationOptions::BoundsRange = BoundsRange; _p->ns2__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable; } return _p; }

inline ns2__VideoSourceConfigurationOptions * soap_new_set_ns2__VideoSourceConfigurationOptions(struct soap *soap, ns2__IntRectangleRange *BoundsRange, const std::vector<std::string >& VideoSourceTokensAvailable, ns2__VideoSourceConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { ns2__VideoSourceConfigurationOptions *_p = soap_instantiate_ns2__VideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfigurationOptions::BoundsRange = BoundsRange; _p->ns2__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable; _p->ns2__VideoSourceConfigurationOptions::Extension = Extension; _p->ns2__VideoSourceConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceConfigurationOptions(struct soap *soap, ns2__VideoSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__RotateExtension
#define SOAP_TYPE_ns2__RotateExtension (231)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RotateExtension(struct soap*, const char*, int, const ns2__RotateExtension *, const char*);
SOAP_FMAC3 ns2__RotateExtension * SOAP_FMAC4 soap_in_ns2__RotateExtension(struct soap*, const char*, ns2__RotateExtension *, const char*);

#ifndef soap_write_ns2__RotateExtension
#define soap_write_ns2__RotateExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:RotateExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateExtension * SOAP_FMAC4 soap_get_ns2__RotateExtension(struct soap*, ns2__RotateExtension *, const char*, const char*);

#ifndef soap_read_ns2__RotateExtension
#define soap_read_ns2__RotateExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__RotateExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__RotateExtension * SOAP_FMAC2 soap_instantiate_ns2__RotateExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__RotateExtension * soap_new_ns2__RotateExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__RotateExtension(soap, n, NULL, NULL, NULL); }

inline ns2__RotateExtension * soap_new_req_ns2__RotateExtension(struct soap *soap) { ns2__RotateExtension *_p = soap_instantiate_ns2__RotateExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__RotateExtension * soap_new_set_ns2__RotateExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__RotateExtension *_p = soap_instantiate_ns2__RotateExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__RotateExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__RotateExtension(struct soap *soap, ns2__RotateExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RotateExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Rotate
#define SOAP_TYPE_ns2__Rotate (230)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Rotate(struct soap*, const char*, int, const ns2__Rotate *, const char*);
SOAP_FMAC3 ns2__Rotate * SOAP_FMAC4 soap_in_ns2__Rotate(struct soap*, const char*, ns2__Rotate *, const char*);

#ifndef soap_write_ns2__Rotate
#define soap_write_ns2__Rotate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Rotate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Rotate * SOAP_FMAC4 soap_get_ns2__Rotate(struct soap*, ns2__Rotate *, const char*, const char*);

#ifndef soap_read_ns2__Rotate
#define soap_read_ns2__Rotate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Rotate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Rotate * SOAP_FMAC2 soap_instantiate_ns2__Rotate(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Rotate * soap_new_ns2__Rotate(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Rotate(soap, n, NULL, NULL, NULL); }

inline ns2__Rotate * soap_new_req_ns2__Rotate(struct soap *soap, enum ns2__RotateMode Mode) { ns2__Rotate *_p = soap_instantiate_ns2__Rotate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Rotate::Mode = Mode; } return _p; }

inline ns2__Rotate * soap_new_set_ns2__Rotate(struct soap *soap, enum ns2__RotateMode Mode, int *Degree, ns2__RotateExtension *Extension, char *__anyAttribute, char *__item1) { ns2__Rotate *_p = soap_instantiate_ns2__Rotate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Rotate::Mode = Mode; _p->ns2__Rotate::Degree = Degree; _p->ns2__Rotate::Extension = Extension; _p->ns2__Rotate::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Rotate(struct soap *soap, ns2__Rotate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Rotate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceConfigurationExtension2
#define SOAP_TYPE_ns2__VideoSourceConfigurationExtension2 (229)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceConfigurationExtension2(struct soap*, const char*, int, const ns2__VideoSourceConfigurationExtension2 *, const char*);
SOAP_FMAC3 ns2__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_in_ns2__VideoSourceConfigurationExtension2(struct soap*, const char*, ns2__VideoSourceConfigurationExtension2 *, const char*);

#ifndef soap_write_ns2__VideoSourceConfigurationExtension2
#define soap_write_ns2__VideoSourceConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_get_ns2__VideoSourceConfigurationExtension2(struct soap*, ns2__VideoSourceConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceConfigurationExtension2
#define soap_read_ns2__VideoSourceConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceConfigurationExtension2 * soap_new_ns2__VideoSourceConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceConfigurationExtension2 * soap_new_req_ns2__VideoSourceConfigurationExtension2(struct soap *soap) { ns2__VideoSourceConfigurationExtension2 *_p = soap_instantiate_ns2__VideoSourceConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoSourceConfigurationExtension2 * soap_new_set_ns2__VideoSourceConfigurationExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoSourceConfigurationExtension2 *_p = soap_instantiate_ns2__VideoSourceConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceConfigurationExtension2(struct soap *soap, ns2__VideoSourceConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceConfigurationExtension
#define SOAP_TYPE_ns2__VideoSourceConfigurationExtension (228)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceConfigurationExtension(struct soap*, const char*, int, const ns2__VideoSourceConfigurationExtension *, const char*);
SOAP_FMAC3 ns2__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_in_ns2__VideoSourceConfigurationExtension(struct soap*, const char*, ns2__VideoSourceConfigurationExtension *, const char*);

#ifndef soap_write_ns2__VideoSourceConfigurationExtension
#define soap_write_ns2__VideoSourceConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_get_ns2__VideoSourceConfigurationExtension(struct soap*, ns2__VideoSourceConfigurationExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceConfigurationExtension
#define soap_read_ns2__VideoSourceConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceConfigurationExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceConfigurationExtension * soap_new_ns2__VideoSourceConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceConfigurationExtension * soap_new_req_ns2__VideoSourceConfigurationExtension(struct soap *soap) { ns2__VideoSourceConfigurationExtension *_p = soap_instantiate_ns2__VideoSourceConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoSourceConfigurationExtension * soap_new_set_ns2__VideoSourceConfigurationExtension(struct soap *soap, ns2__Rotate *Rotate, ns2__VideoSourceConfigurationExtension2 *Extension, char *__item1) { ns2__VideoSourceConfigurationExtension *_p = soap_instantiate_ns2__VideoSourceConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfigurationExtension::Rotate = Rotate; _p->ns2__VideoSourceConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceConfigurationExtension(struct soap *soap, ns2__VideoSourceConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceConfiguration
#define SOAP_TYPE_ns2__VideoSourceConfiguration (227)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceConfiguration(struct soap*, const char*, int, const ns2__VideoSourceConfiguration *, const char*);
SOAP_FMAC3 ns2__VideoSourceConfiguration * SOAP_FMAC4 soap_in_ns2__VideoSourceConfiguration(struct soap*, const char*, ns2__VideoSourceConfiguration *, const char*);

#ifndef soap_write_ns2__VideoSourceConfiguration
#define soap_write_ns2__VideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfiguration * SOAP_FMAC4 soap_get_ns2__VideoSourceConfiguration(struct soap*, ns2__VideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceConfiguration
#define soap_read_ns2__VideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceConfiguration * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceConfiguration * soap_new_ns2__VideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceConfiguration * soap_new_req_ns2__VideoSourceConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& SourceToken, ns2__IntRectangle *Bounds) { ns2__VideoSourceConfiguration *_p = soap_instantiate_ns2__VideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfiguration::Name = Name; _p->ns2__VideoSourceConfiguration::UseCount = UseCount; _p->ns2__VideoSourceConfiguration::token = token; _p->ns2__VideoSourceConfiguration::SourceToken = SourceToken; _p->ns2__VideoSourceConfiguration::Bounds = Bounds; } return _p; }

inline ns2__VideoSourceConfiguration * soap_new_set_ns2__VideoSourceConfiguration(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, const std::string& SourceToken, ns2__IntRectangle *Bounds, const std::vector<char * >& __any, ns2__VideoSourceConfigurationExtension *Extension, char *__anyAttribute) { ns2__VideoSourceConfiguration *_p = soap_instantiate_ns2__VideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceConfiguration::Name = Name; _p->ns2__VideoSourceConfiguration::UseCount = UseCount; _p->ns2__VideoSourceConfiguration::token = token; _p->ns2__VideoSourceConfiguration::SourceToken = SourceToken; _p->ns2__VideoSourceConfiguration::Bounds = Bounds; _p->ns2__VideoSourceConfiguration::__any = __any; _p->ns2__VideoSourceConfiguration::Extension = Extension; _p->ns2__VideoSourceConfiguration::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__VideoSourceConfiguration(struct soap *soap, ns2__VideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ConfigurationEntity
#define SOAP_TYPE_ns2__ConfigurationEntity (226)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConfigurationEntity(struct soap*, const char*, int, const ns2__ConfigurationEntity *, const char*);
SOAP_FMAC3 ns2__ConfigurationEntity * SOAP_FMAC4 soap_in_ns2__ConfigurationEntity(struct soap*, const char*, ns2__ConfigurationEntity *, const char*);

#ifndef soap_write_ns2__ConfigurationEntity
#define soap_write_ns2__ConfigurationEntity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ConfigurationEntity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ConfigurationEntity * SOAP_FMAC4 soap_get_ns2__ConfigurationEntity(struct soap*, ns2__ConfigurationEntity *, const char*, const char*);

#ifndef soap_read_ns2__ConfigurationEntity
#define soap_read_ns2__ConfigurationEntity(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ConfigurationEntity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_ns2__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ConfigurationEntity * soap_new_ns2__ConfigurationEntity(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ConfigurationEntity(soap, n, NULL, NULL, NULL); }

inline ns2__ConfigurationEntity * soap_new_req_ns2__ConfigurationEntity(struct soap *soap, const std::string& Name, int UseCount, const std::string& token) { ns2__ConfigurationEntity *_p = soap_instantiate_ns2__ConfigurationEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ConfigurationEntity::Name = Name; _p->ns2__ConfigurationEntity::UseCount = UseCount; _p->ns2__ConfigurationEntity::token = token; } return _p; }

inline ns2__ConfigurationEntity * soap_new_set_ns2__ConfigurationEntity(struct soap *soap, const std::string& Name, int UseCount, const std::string& token, char *__item1) { ns2__ConfigurationEntity *_p = soap_instantiate_ns2__ConfigurationEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ConfigurationEntity::Name = Name; _p->ns2__ConfigurationEntity::UseCount = UseCount; _p->ns2__ConfigurationEntity::token = token; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ConfigurationEntity(struct soap *soap, ns2__ConfigurationEntity *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ConfigurationEntity(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ProfileExtension2
#define SOAP_TYPE_ns2__ProfileExtension2 (225)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileExtension2(struct soap*, const char*, int, const ns2__ProfileExtension2 *, const char*);
SOAP_FMAC3 ns2__ProfileExtension2 * SOAP_FMAC4 soap_in_ns2__ProfileExtension2(struct soap*, const char*, ns2__ProfileExtension2 *, const char*);

#ifndef soap_write_ns2__ProfileExtension2
#define soap_write_ns2__ProfileExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ProfileExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ProfileExtension2 * SOAP_FMAC4 soap_get_ns2__ProfileExtension2(struct soap*, ns2__ProfileExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__ProfileExtension2
#define soap_read_ns2__ProfileExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ProfileExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ProfileExtension2 * SOAP_FMAC2 soap_instantiate_ns2__ProfileExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProfileExtension2 * soap_new_ns2__ProfileExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ProfileExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__ProfileExtension2 * soap_new_req_ns2__ProfileExtension2(struct soap *soap) { ns2__ProfileExtension2 *_p = soap_instantiate_ns2__ProfileExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ProfileExtension2 * soap_new_set_ns2__ProfileExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__ProfileExtension2 *_p = soap_instantiate_ns2__ProfileExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ProfileExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ProfileExtension2(struct soap *soap, ns2__ProfileExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ProfileExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ProfileExtension
#define SOAP_TYPE_ns2__ProfileExtension (224)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ProfileExtension(struct soap*, const char*, int, const ns2__ProfileExtension *, const char*);
SOAP_FMAC3 ns2__ProfileExtension * SOAP_FMAC4 soap_in_ns2__ProfileExtension(struct soap*, const char*, ns2__ProfileExtension *, const char*);

#ifndef soap_write_ns2__ProfileExtension
#define soap_write_ns2__ProfileExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:ProfileExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ProfileExtension * SOAP_FMAC4 soap_get_ns2__ProfileExtension(struct soap*, ns2__ProfileExtension *, const char*, const char*);

#ifndef soap_read_ns2__ProfileExtension
#define soap_read_ns2__ProfileExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ProfileExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__ProfileExtension * SOAP_FMAC2 soap_instantiate_ns2__ProfileExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ProfileExtension * soap_new_ns2__ProfileExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ProfileExtension(soap, n, NULL, NULL, NULL); }

inline ns2__ProfileExtension * soap_new_req_ns2__ProfileExtension(struct soap *soap) { ns2__ProfileExtension *_p = soap_instantiate_ns2__ProfileExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__ProfileExtension * soap_new_set_ns2__ProfileExtension(struct soap *soap, const std::vector<char * >& __any, ns2__AudioOutputConfiguration *AudioOutputConfiguration, ns2__AudioDecoderConfiguration *AudioDecoderConfiguration, ns2__ProfileExtension2 *Extension, char *__anyAttribute, char *__item1) { ns2__ProfileExtension *_p = soap_instantiate_ns2__ProfileExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ProfileExtension::__any = __any; _p->ns2__ProfileExtension::AudioOutputConfiguration = AudioOutputConfiguration; _p->ns2__ProfileExtension::AudioDecoderConfiguration = AudioDecoderConfiguration; _p->ns2__ProfileExtension::Extension = Extension; _p->ns2__ProfileExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__ProfileExtension(struct soap *soap, ns2__ProfileExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ProfileExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Profile
#define SOAP_TYPE_ns2__Profile (223)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Profile(struct soap*, const char*, int, const ns2__Profile *, const char*);
SOAP_FMAC3 ns2__Profile * SOAP_FMAC4 soap_in_ns2__Profile(struct soap*, const char*, ns2__Profile *, const char*);

#ifndef soap_write_ns2__Profile
#define soap_write_ns2__Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Profile * SOAP_FMAC4 soap_get_ns2__Profile(struct soap*, ns2__Profile *, const char*, const char*);

#ifndef soap_read_ns2__Profile
#define soap_read_ns2__Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__Profile * SOAP_FMAC2 soap_instantiate_ns2__Profile(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Profile * soap_new_ns2__Profile(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Profile(soap, n, NULL, NULL, NULL); }

inline ns2__Profile * soap_new_req_ns2__Profile(struct soap *soap, const std::string& Name, const std::string& token) { ns2__Profile *_p = soap_instantiate_ns2__Profile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Profile::Name = Name; _p->ns2__Profile::token = token; } return _p; }

inline ns2__Profile * soap_new_set_ns2__Profile(struct soap *soap, const std::string& Name, ns2__VideoSourceConfiguration *VideoSourceConfiguration, ns2__AudioSourceConfiguration *AudioSourceConfiguration, ns2__VideoEncoderConfiguration *VideoEncoderConfiguration, ns2__AudioEncoderConfiguration *AudioEncoderConfiguration, ns2__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration, ns2__PTZConfiguration *PTZConfiguration, ns2__MetadataConfiguration *MetadataConfiguration, ns2__ProfileExtension *Extension, const std::string& token, bool *fixed, char *__anyAttribute, char *__item1) { ns2__Profile *_p = soap_instantiate_ns2__Profile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Profile::Name = Name; _p->ns2__Profile::VideoSourceConfiguration = VideoSourceConfiguration; _p->ns2__Profile::AudioSourceConfiguration = AudioSourceConfiguration; _p->ns2__Profile::VideoEncoderConfiguration = VideoEncoderConfiguration; _p->ns2__Profile::AudioEncoderConfiguration = AudioEncoderConfiguration; _p->ns2__Profile::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration; _p->ns2__Profile::PTZConfiguration = PTZConfiguration; _p->ns2__Profile::MetadataConfiguration = MetadataConfiguration; _p->ns2__Profile::Extension = Extension; _p->ns2__Profile::token = token; _p->ns2__Profile::fixed = fixed; _p->ns2__Profile::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__Profile(struct soap *soap, ns2__Profile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AudioSource
#define SOAP_TYPE_ns2__AudioSource (222)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AudioSource(struct soap*, const char*, int, const ns2__AudioSource *, const char*);
SOAP_FMAC3 ns2__AudioSource * SOAP_FMAC4 soap_in_ns2__AudioSource(struct soap*, const char*, ns2__AudioSource *, const char*);

#ifndef soap_write_ns2__AudioSource
#define soap_write_ns2__AudioSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AudioSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSource * SOAP_FMAC4 soap_get_ns2__AudioSource(struct soap*, ns2__AudioSource *, const char*, const char*);

#ifndef soap_read_ns2__AudioSource
#define soap_read_ns2__AudioSource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AudioSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AudioSource * SOAP_FMAC2 soap_instantiate_ns2__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AudioSource * soap_new_ns2__AudioSource(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AudioSource(soap, n, NULL, NULL, NULL); }

inline ns2__AudioSource * soap_new_req_ns2__AudioSource(struct soap *soap, const std::string& token, int Channels) { ns2__AudioSource *_p = soap_instantiate_ns2__AudioSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSource::token = token; _p->ns2__AudioSource::Channels = Channels; } return _p; }

inline ns2__AudioSource * soap_new_set_ns2__AudioSource(struct soap *soap, const std::string& token, int Channels, const std::vector<char * >& __any, char *__anyAttribute) { ns2__AudioSource *_p = soap_instantiate_ns2__AudioSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AudioSource::token = token; _p->ns2__AudioSource::Channels = Channels; _p->ns2__AudioSource::__any = __any; _p->ns2__AudioSource::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__AudioSource(struct soap *soap, ns2__AudioSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AudioSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceExtension2
#define SOAP_TYPE_ns2__VideoSourceExtension2 (221)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceExtension2(struct soap*, const char*, int, const ns2__VideoSourceExtension2 *, const char*);
SOAP_FMAC3 ns2__VideoSourceExtension2 * SOAP_FMAC4 soap_in_ns2__VideoSourceExtension2(struct soap*, const char*, ns2__VideoSourceExtension2 *, const char*);

#ifndef soap_write_ns2__VideoSourceExtension2
#define soap_write_ns2__VideoSourceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceExtension2 * SOAP_FMAC4 soap_get_ns2__VideoSourceExtension2(struct soap*, ns2__VideoSourceExtension2 *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceExtension2
#define soap_read_ns2__VideoSourceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceExtension2 * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceExtension2 * soap_new_ns2__VideoSourceExtension2(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceExtension2(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceExtension2 * soap_new_req_ns2__VideoSourceExtension2(struct soap *soap) { ns2__VideoSourceExtension2 *_p = soap_instantiate_ns2__VideoSourceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoSourceExtension2 * soap_new_set_ns2__VideoSourceExtension2(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns2__VideoSourceExtension2 *_p = soap_instantiate_ns2__VideoSourceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceExtension2(struct soap *soap, ns2__VideoSourceExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSourceExtension
#define SOAP_TYPE_ns2__VideoSourceExtension (220)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSourceExtension(struct soap*, const char*, int, const ns2__VideoSourceExtension *, const char*);
SOAP_FMAC3 ns2__VideoSourceExtension * SOAP_FMAC4 soap_in_ns2__VideoSourceExtension(struct soap*, const char*, ns2__VideoSourceExtension *, const char*);

#ifndef soap_write_ns2__VideoSourceExtension
#define soap_write_ns2__VideoSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceExtension * SOAP_FMAC4 soap_get_ns2__VideoSourceExtension(struct soap*, ns2__VideoSourceExtension *, const char*, const char*);

#ifndef soap_read_ns2__VideoSourceExtension
#define soap_read_ns2__VideoSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSourceExtension * SOAP_FMAC2 soap_instantiate_ns2__VideoSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSourceExtension * soap_new_ns2__VideoSourceExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSourceExtension(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSourceExtension * soap_new_req_ns2__VideoSourceExtension(struct soap *soap) { ns2__VideoSourceExtension *_p = soap_instantiate_ns2__VideoSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__VideoSourceExtension * soap_new_set_ns2__VideoSourceExtension(struct soap *soap, const std::vector<char * >& __any, ns2__ImagingSettings20 *Imaging, ns2__VideoSourceExtension2 *Extension, char *__item1) { ns2__VideoSourceExtension *_p = soap_instantiate_ns2__VideoSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSourceExtension::__any = __any; _p->ns2__VideoSourceExtension::Imaging = Imaging; _p->ns2__VideoSourceExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__VideoSourceExtension(struct soap *soap, ns2__VideoSourceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSourceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__VideoSource
#define SOAP_TYPE_ns2__VideoSource (219)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VideoSource(struct soap*, const char*, int, const ns2__VideoSource *, const char*);
SOAP_FMAC3 ns2__VideoSource * SOAP_FMAC4 soap_in_ns2__VideoSource(struct soap*, const char*, ns2__VideoSource *, const char*);

#ifndef soap_write_ns2__VideoSource
#define soap_write_ns2__VideoSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:VideoSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSource * SOAP_FMAC4 soap_get_ns2__VideoSource(struct soap*, ns2__VideoSource *, const char*, const char*);

#ifndef soap_read_ns2__VideoSource
#define soap_read_ns2__VideoSource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__VideoSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__VideoSource * SOAP_FMAC2 soap_instantiate_ns2__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VideoSource * soap_new_ns2__VideoSource(struct soap *soap, int n = -1) { return soap_instantiate_ns2__VideoSource(soap, n, NULL, NULL, NULL); }

inline ns2__VideoSource * soap_new_req_ns2__VideoSource(struct soap *soap, const std::string& token, float Framerate, ns2__VideoResolution *Resolution) { ns2__VideoSource *_p = soap_instantiate_ns2__VideoSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSource::token = token; _p->ns2__VideoSource::Framerate = Framerate; _p->ns2__VideoSource::Resolution = Resolution; } return _p; }

inline ns2__VideoSource * soap_new_set_ns2__VideoSource(struct soap *soap, const std::string& token, float Framerate, ns2__VideoResolution *Resolution, ns2__ImagingSettings *Imaging, ns2__VideoSourceExtension *Extension, char *__anyAttribute) { ns2__VideoSource *_p = soap_instantiate_ns2__VideoSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__VideoSource::token = token; _p->ns2__VideoSource::Framerate = Framerate; _p->ns2__VideoSource::Resolution = Resolution; _p->ns2__VideoSource::Imaging = Imaging; _p->ns2__VideoSource::Extension = Extension; _p->ns2__VideoSource::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns2__VideoSource(struct soap *soap, ns2__VideoSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__VideoSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AnyHolder
#define SOAP_TYPE_ns2__AnyHolder (218)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AnyHolder(struct soap*, const char*, int, const ns2__AnyHolder *, const char*);
SOAP_FMAC3 ns2__AnyHolder * SOAP_FMAC4 soap_in_ns2__AnyHolder(struct soap*, const char*, ns2__AnyHolder *, const char*);

#ifndef soap_write_ns2__AnyHolder
#define soap_write_ns2__AnyHolder(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AnyHolder", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnyHolder * SOAP_FMAC4 soap_get_ns2__AnyHolder(struct soap*, ns2__AnyHolder *, const char*, const char*);

#ifndef soap_read_ns2__AnyHolder
#define soap_read_ns2__AnyHolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AnyHolder(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__AnyHolder * SOAP_FMAC2 soap_instantiate_ns2__AnyHolder(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AnyHolder * soap_new_ns2__AnyHolder(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AnyHolder(soap, n, NULL, NULL, NULL); }

inline ns2__AnyHolder * soap_new_req_ns2__AnyHolder(struct soap *soap) { ns2__AnyHolder *_p = soap_instantiate_ns2__AnyHolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AnyHolder * soap_new_set_ns2__AnyHolder(struct soap *soap, const std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns2__AnyHolder *_p = soap_instantiate_ns2__AnyHolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AnyHolder::__any = __any; _p->ns2__AnyHolder::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__AnyHolder(struct soap *soap, ns2__AnyHolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AnyHolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FloatList
#define SOAP_TYPE_ns2__FloatList (217)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FloatList(struct soap*, const char*, int, const ns2__FloatList *, const char*);
SOAP_FMAC3 ns2__FloatList * SOAP_FMAC4 soap_in_ns2__FloatList(struct soap*, const char*, ns2__FloatList *, const char*);

#ifndef soap_write_ns2__FloatList
#define soap_write_ns2__FloatList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FloatList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FloatList * SOAP_FMAC4 soap_get_ns2__FloatList(struct soap*, ns2__FloatList *, const char*, const char*);

#ifndef soap_read_ns2__FloatList
#define soap_read_ns2__FloatList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FloatList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FloatList * SOAP_FMAC2 soap_instantiate_ns2__FloatList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FloatList * soap_new_ns2__FloatList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FloatList(soap, n, NULL, NULL, NULL); }

inline ns2__FloatList * soap_new_req_ns2__FloatList(struct soap *soap) { ns2__FloatList *_p = soap_instantiate_ns2__FloatList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__FloatList * soap_new_set_ns2__FloatList(struct soap *soap, const std::vector<float >& Items, char *__item1) { ns2__FloatList *_p = soap_instantiate_ns2__FloatList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FloatList::Items = Items; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FloatList(struct soap *soap, ns2__FloatList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FloatList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IntList
#define SOAP_TYPE_ns2__IntList (216)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IntList(struct soap*, const char*, int, const ns2__IntList *, const char*);
SOAP_FMAC3 ns2__IntList * SOAP_FMAC4 soap_in_ns2__IntList(struct soap*, const char*, ns2__IntList *, const char*);

#ifndef soap_write_ns2__IntList
#define soap_write_ns2__IntList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IntList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntList * SOAP_FMAC4 soap_get_ns2__IntList(struct soap*, ns2__IntList *, const char*, const char*);

#ifndef soap_read_ns2__IntList
#define soap_read_ns2__IntList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IntList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IntList * SOAP_FMAC2 soap_instantiate_ns2__IntList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IntList * soap_new_ns2__IntList(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IntList(soap, n, NULL, NULL, NULL); }

inline ns2__IntList * soap_new_req_ns2__IntList(struct soap *soap) { ns2__IntList *_p = soap_instantiate_ns2__IntList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__IntList * soap_new_set_ns2__IntList(struct soap *soap, const std::vector<int >& Items, char *__item1) { ns2__IntList *_p = soap_instantiate_ns2__IntList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntList::Items = Items; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IntList(struct soap *soap, ns2__IntList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IntList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DurationRange
#define SOAP_TYPE_ns2__DurationRange (215)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DurationRange(struct soap*, const char*, int, const ns2__DurationRange *, const char*);
SOAP_FMAC3 ns2__DurationRange * SOAP_FMAC4 soap_in_ns2__DurationRange(struct soap*, const char*, ns2__DurationRange *, const char*);

#ifndef soap_write_ns2__DurationRange
#define soap_write_ns2__DurationRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DurationRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DurationRange * SOAP_FMAC4 soap_get_ns2__DurationRange(struct soap*, ns2__DurationRange *, const char*, const char*);

#ifndef soap_read_ns2__DurationRange
#define soap_read_ns2__DurationRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DurationRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DurationRange * SOAP_FMAC2 soap_instantiate_ns2__DurationRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DurationRange * soap_new_ns2__DurationRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DurationRange(soap, n, NULL, NULL, NULL); }

inline ns2__DurationRange * soap_new_req_ns2__DurationRange(struct soap *soap, const std::string& Min, const std::string& Max) { ns2__DurationRange *_p = soap_instantiate_ns2__DurationRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DurationRange::Min = Min; _p->ns2__DurationRange::Max = Max; } return _p; }

inline ns2__DurationRange * soap_new_set_ns2__DurationRange(struct soap *soap, const std::string& Min, const std::string& Max, char *__item1) { ns2__DurationRange *_p = soap_instantiate_ns2__DurationRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DurationRange::Min = Min; _p->ns2__DurationRange::Max = Max; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DurationRange(struct soap *soap, ns2__DurationRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DurationRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__FloatRange
#define SOAP_TYPE_ns2__FloatRange (214)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FloatRange(struct soap*, const char*, int, const ns2__FloatRange *, const char*);
SOAP_FMAC3 ns2__FloatRange * SOAP_FMAC4 soap_in_ns2__FloatRange(struct soap*, const char*, ns2__FloatRange *, const char*);

#ifndef soap_write_ns2__FloatRange
#define soap_write_ns2__FloatRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:FloatRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FloatRange * SOAP_FMAC4 soap_get_ns2__FloatRange(struct soap*, ns2__FloatRange *, const char*, const char*);

#ifndef soap_read_ns2__FloatRange
#define soap_read_ns2__FloatRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__FloatRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__FloatRange * SOAP_FMAC2 soap_instantiate_ns2__FloatRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FloatRange * soap_new_ns2__FloatRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__FloatRange(soap, n, NULL, NULL, NULL); }

inline ns2__FloatRange * soap_new_req_ns2__FloatRange(struct soap *soap, float Min, float Max) { ns2__FloatRange *_p = soap_instantiate_ns2__FloatRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FloatRange::Min = Min; _p->ns2__FloatRange::Max = Max; } return _p; }

inline ns2__FloatRange * soap_new_set_ns2__FloatRange(struct soap *soap, float Min, float Max, char *__item1) { ns2__FloatRange *_p = soap_instantiate_ns2__FloatRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__FloatRange::Min = Min; _p->ns2__FloatRange::Max = Max; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__FloatRange(struct soap *soap, ns2__FloatRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__FloatRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IntRange
#define SOAP_TYPE_ns2__IntRange (213)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IntRange(struct soap*, const char*, int, const ns2__IntRange *, const char*);
SOAP_FMAC3 ns2__IntRange * SOAP_FMAC4 soap_in_ns2__IntRange(struct soap*, const char*, ns2__IntRange *, const char*);

#ifndef soap_write_ns2__IntRange
#define soap_write_ns2__IntRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IntRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntRange * SOAP_FMAC4 soap_get_ns2__IntRange(struct soap*, ns2__IntRange *, const char*, const char*);

#ifndef soap_read_ns2__IntRange
#define soap_read_ns2__IntRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IntRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IntRange * SOAP_FMAC2 soap_instantiate_ns2__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IntRange * soap_new_ns2__IntRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IntRange(soap, n, NULL, NULL, NULL); }

inline ns2__IntRange * soap_new_req_ns2__IntRange(struct soap *soap, int Min, int Max) { ns2__IntRange *_p = soap_instantiate_ns2__IntRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntRange::Min = Min; _p->ns2__IntRange::Max = Max; } return _p; }

inline ns2__IntRange * soap_new_set_ns2__IntRange(struct soap *soap, int Min, int Max, char *__item1) { ns2__IntRange *_p = soap_instantiate_ns2__IntRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntRange::Min = Min; _p->ns2__IntRange::Max = Max; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IntRange(struct soap *soap, ns2__IntRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IntRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IntRectangleRange
#define SOAP_TYPE_ns2__IntRectangleRange (212)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IntRectangleRange(struct soap*, const char*, int, const ns2__IntRectangleRange *, const char*);
SOAP_FMAC3 ns2__IntRectangleRange * SOAP_FMAC4 soap_in_ns2__IntRectangleRange(struct soap*, const char*, ns2__IntRectangleRange *, const char*);

#ifndef soap_write_ns2__IntRectangleRange
#define soap_write_ns2__IntRectangleRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IntRectangleRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntRectangleRange * SOAP_FMAC4 soap_get_ns2__IntRectangleRange(struct soap*, ns2__IntRectangleRange *, const char*, const char*);

#ifndef soap_read_ns2__IntRectangleRange
#define soap_read_ns2__IntRectangleRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IntRectangleRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IntRectangleRange * SOAP_FMAC2 soap_instantiate_ns2__IntRectangleRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IntRectangleRange * soap_new_ns2__IntRectangleRange(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IntRectangleRange(soap, n, NULL, NULL, NULL); }

inline ns2__IntRectangleRange * soap_new_req_ns2__IntRectangleRange(struct soap *soap, ns2__IntRange *XRange, ns2__IntRange *YRange, ns2__IntRange *WidthRange, ns2__IntRange *HeightRange) { ns2__IntRectangleRange *_p = soap_instantiate_ns2__IntRectangleRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntRectangleRange::XRange = XRange; _p->ns2__IntRectangleRange::YRange = YRange; _p->ns2__IntRectangleRange::WidthRange = WidthRange; _p->ns2__IntRectangleRange::HeightRange = HeightRange; } return _p; }

inline ns2__IntRectangleRange * soap_new_set_ns2__IntRectangleRange(struct soap *soap, ns2__IntRange *XRange, ns2__IntRange *YRange, ns2__IntRange *WidthRange, ns2__IntRange *HeightRange, char *__item1) { ns2__IntRectangleRange *_p = soap_instantiate_ns2__IntRectangleRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntRectangleRange::XRange = XRange; _p->ns2__IntRectangleRange::YRange = YRange; _p->ns2__IntRectangleRange::WidthRange = WidthRange; _p->ns2__IntRectangleRange::HeightRange = HeightRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IntRectangleRange(struct soap *soap, ns2__IntRectangleRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IntRectangleRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__IntRectangle
#define SOAP_TYPE_ns2__IntRectangle (211)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__IntRectangle(struct soap*, const char*, int, const ns2__IntRectangle *, const char*);
SOAP_FMAC3 ns2__IntRectangle * SOAP_FMAC4 soap_in_ns2__IntRectangle(struct soap*, const char*, ns2__IntRectangle *, const char*);

#ifndef soap_write_ns2__IntRectangle
#define soap_write_ns2__IntRectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:IntRectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntRectangle * SOAP_FMAC4 soap_get_ns2__IntRectangle(struct soap*, ns2__IntRectangle *, const char*, const char*);

#ifndef soap_read_ns2__IntRectangle
#define soap_read_ns2__IntRectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__IntRectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__IntRectangle * SOAP_FMAC2 soap_instantiate_ns2__IntRectangle(struct soap*, int, const char*, const char*, size_t*);

inline ns2__IntRectangle * soap_new_ns2__IntRectangle(struct soap *soap, int n = -1) { return soap_instantiate_ns2__IntRectangle(soap, n, NULL, NULL, NULL); }

inline ns2__IntRectangle * soap_new_req_ns2__IntRectangle(struct soap *soap, int x, int y, int width, int height) { ns2__IntRectangle *_p = soap_instantiate_ns2__IntRectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntRectangle::x = x; _p->ns2__IntRectangle::y = y; _p->ns2__IntRectangle::width = width; _p->ns2__IntRectangle::height = height; } return _p; }

inline ns2__IntRectangle * soap_new_set_ns2__IntRectangle(struct soap *soap, int x, int y, int width, int height, char *__item1) { ns2__IntRectangle *_p = soap_instantiate_ns2__IntRectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__IntRectangle::x = x; _p->ns2__IntRectangle::y = y; _p->ns2__IntRectangle::width = width; _p->ns2__IntRectangle::height = height; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__IntRectangle(struct soap *soap, ns2__IntRectangle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__IntRectangle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__DeviceEntity
#define SOAP_TYPE_ns2__DeviceEntity (210)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DeviceEntity(struct soap*, const char*, int, const ns2__DeviceEntity *, const char*);
SOAP_FMAC3 ns2__DeviceEntity * SOAP_FMAC4 soap_in_ns2__DeviceEntity(struct soap*, const char*, ns2__DeviceEntity *, const char*);

#ifndef soap_write_ns2__DeviceEntity
#define soap_write_ns2__DeviceEntity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:DeviceEntity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceEntity * SOAP_FMAC4 soap_get_ns2__DeviceEntity(struct soap*, ns2__DeviceEntity *, const char*, const char*);

#ifndef soap_read_ns2__DeviceEntity
#define soap_read_ns2__DeviceEntity(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__DeviceEntity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__DeviceEntity * SOAP_FMAC2 soap_instantiate_ns2__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DeviceEntity * soap_new_ns2__DeviceEntity(struct soap *soap, int n = -1) { return soap_instantiate_ns2__DeviceEntity(soap, n, NULL, NULL, NULL); }

inline ns2__DeviceEntity * soap_new_req_ns2__DeviceEntity(struct soap *soap, const std::string& token) { ns2__DeviceEntity *_p = soap_instantiate_ns2__DeviceEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceEntity::token = token; } return _p; }

inline ns2__DeviceEntity * soap_new_set_ns2__DeviceEntity(struct soap *soap, const std::string& token, char *__item1) { ns2__DeviceEntity *_p = soap_instantiate_ns2__DeviceEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__DeviceEntity::token = token; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns2__DeviceEntity(struct soap *soap, ns2__DeviceEntity *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__DeviceEntity(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteOSDResponse
#define SOAP_TYPE__ns1__DeleteOSDResponse (209)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteOSDResponse(struct soap*, const char*, int, const _ns1__DeleteOSDResponse *, const char*);
SOAP_FMAC3 _ns1__DeleteOSDResponse * SOAP_FMAC4 soap_in__ns1__DeleteOSDResponse(struct soap*, const char*, _ns1__DeleteOSDResponse *, const char*);

#ifndef soap_write__ns1__DeleteOSDResponse
#define soap_write__ns1__DeleteOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteOSDResponse * SOAP_FMAC4 soap_get__ns1__DeleteOSDResponse(struct soap*, _ns1__DeleteOSDResponse *, const char*, const char*);

#ifndef soap_read__ns1__DeleteOSDResponse
#define soap_read__ns1__DeleteOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate__ns1__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteOSDResponse * soap_new__ns1__DeleteOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteOSDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteOSDResponse * soap_new_req__ns1__DeleteOSDResponse(struct soap *soap) { _ns1__DeleteOSDResponse *_p = soap_instantiate__ns1__DeleteOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__DeleteOSDResponse * soap_new_set__ns1__DeleteOSDResponse(struct soap *soap, const std::vector<char * >& __any) { _ns1__DeleteOSDResponse *_p = soap_instantiate__ns1__DeleteOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteOSDResponse::__any = __any; } return _p; }

inline void soap_delete__ns1__DeleteOSDResponse(struct soap *soap, _ns1__DeleteOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteOSD
#define SOAP_TYPE__ns1__DeleteOSD (208)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteOSD(struct soap*, const char*, int, const _ns1__DeleteOSD *, const char*);
SOAP_FMAC3 _ns1__DeleteOSD * SOAP_FMAC4 soap_in__ns1__DeleteOSD(struct soap*, const char*, _ns1__DeleteOSD *, const char*);

#ifndef soap_write__ns1__DeleteOSD
#define soap_write__ns1__DeleteOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteOSD * SOAP_FMAC4 soap_get__ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD *, const char*, const char*);

#ifndef soap_read__ns1__DeleteOSD
#define soap_read__ns1__DeleteOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteOSD * SOAP_FMAC2 soap_instantiate__ns1__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteOSD * soap_new__ns1__DeleteOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteOSD * soap_new_req__ns1__DeleteOSD(struct soap *soap, const std::string& OSDToken) { _ns1__DeleteOSD *_p = soap_instantiate__ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteOSD::OSDToken = OSDToken; } return _p; }

inline _ns1__DeleteOSD * soap_new_set__ns1__DeleteOSD(struct soap *soap, const std::string& OSDToken, const std::vector<char * >& __any) { _ns1__DeleteOSD *_p = soap_instantiate__ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteOSD::OSDToken = OSDToken; _p->_ns1__DeleteOSD::__any = __any; } return _p; }

inline void soap_delete__ns1__DeleteOSD(struct soap *soap, _ns1__DeleteOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateOSDResponse
#define SOAP_TYPE__ns1__CreateOSDResponse (207)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateOSDResponse(struct soap*, const char*, int, const _ns1__CreateOSDResponse *, const char*);
SOAP_FMAC3 _ns1__CreateOSDResponse * SOAP_FMAC4 soap_in__ns1__CreateOSDResponse(struct soap*, const char*, _ns1__CreateOSDResponse *, const char*);

#ifndef soap_write__ns1__CreateOSDResponse
#define soap_write__ns1__CreateOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateOSDResponse * SOAP_FMAC4 soap_get__ns1__CreateOSDResponse(struct soap*, _ns1__CreateOSDResponse *, const char*, const char*);

#ifndef soap_read__ns1__CreateOSDResponse
#define soap_read__ns1__CreateOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateOSDResponse * soap_new__ns1__CreateOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateOSDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateOSDResponse * soap_new_req__ns1__CreateOSDResponse(struct soap *soap, const std::string& OSDToken) { _ns1__CreateOSDResponse *_p = soap_instantiate__ns1__CreateOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSDResponse::OSDToken = OSDToken; } return _p; }

inline _ns1__CreateOSDResponse * soap_new_set__ns1__CreateOSDResponse(struct soap *soap, const std::string& OSDToken, const std::vector<char * >& __any) { _ns1__CreateOSDResponse *_p = soap_instantiate__ns1__CreateOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSDResponse::OSDToken = OSDToken; _p->_ns1__CreateOSDResponse::__any = __any; } return _p; }

inline void soap_delete__ns1__CreateOSDResponse(struct soap *soap, _ns1__CreateOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateOSD
#define SOAP_TYPE__ns1__CreateOSD (206)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateOSD(struct soap*, const char*, int, const _ns1__CreateOSD *, const char*);
SOAP_FMAC3 _ns1__CreateOSD * SOAP_FMAC4 soap_in__ns1__CreateOSD(struct soap*, const char*, _ns1__CreateOSD *, const char*);

#ifndef soap_write__ns1__CreateOSD
#define soap_write__ns1__CreateOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateOSD * SOAP_FMAC4 soap_get__ns1__CreateOSD(struct soap*, _ns1__CreateOSD *, const char*, const char*);

#ifndef soap_read__ns1__CreateOSD
#define soap_read__ns1__CreateOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateOSD * SOAP_FMAC2 soap_instantiate__ns1__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateOSD * soap_new__ns1__CreateOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateOSD * soap_new_req__ns1__CreateOSD(struct soap *soap, ns2__OSDConfiguration *OSD) { _ns1__CreateOSD *_p = soap_instantiate__ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSD::OSD = OSD; } return _p; }

inline _ns1__CreateOSD * soap_new_set__ns1__CreateOSD(struct soap *soap, ns2__OSDConfiguration *OSD, const std::vector<char * >& __any) { _ns1__CreateOSD *_p = soap_instantiate__ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSD::OSD = OSD; _p->_ns1__CreateOSD::__any = __any; } return _p; }

inline void soap_delete__ns1__CreateOSD(struct soap *soap, _ns1__CreateOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDOptionsResponse
#define SOAP_TYPE__ns1__GetOSDOptionsResponse (205)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDOptionsResponse(struct soap*, const char*, int, const _ns1__GetOSDOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetOSDOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetOSDOptionsResponse(struct soap*, const char*, _ns1__GetOSDOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetOSDOptionsResponse
#define soap_write__ns1__GetOSDOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetOSDOptionsResponse(struct soap*, _ns1__GetOSDOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDOptionsResponse
#define soap_read__ns1__GetOSDOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDOptionsResponse * soap_new__ns1__GetOSDOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDOptionsResponse * soap_new_req__ns1__GetOSDOptionsResponse(struct soap *soap, ns2__OSDConfigurationOptions *OSDOptions) { _ns1__GetOSDOptionsResponse *_p = soap_instantiate__ns1__GetOSDOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptionsResponse::OSDOptions = OSDOptions; } return _p; }

inline _ns1__GetOSDOptionsResponse * soap_new_set__ns1__GetOSDOptionsResponse(struct soap *soap, ns2__OSDConfigurationOptions *OSDOptions, const std::vector<char * >& __any) { _ns1__GetOSDOptionsResponse *_p = soap_instantiate__ns1__GetOSDOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptionsResponse::OSDOptions = OSDOptions; _p->_ns1__GetOSDOptionsResponse::__any = __any; } return _p; }

inline void soap_delete__ns1__GetOSDOptionsResponse(struct soap *soap, _ns1__GetOSDOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDOptions
#define SOAP_TYPE__ns1__GetOSDOptions (204)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDOptions(struct soap*, const char*, int, const _ns1__GetOSDOptions *, const char*);
SOAP_FMAC3 _ns1__GetOSDOptions * SOAP_FMAC4 soap_in__ns1__GetOSDOptions(struct soap*, const char*, _ns1__GetOSDOptions *, const char*);

#ifndef soap_write__ns1__GetOSDOptions
#define soap_write__ns1__GetOSDOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDOptions * SOAP_FMAC4 soap_get__ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDOptions
#define soap_read__ns1__GetOSDOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDOptions * SOAP_FMAC2 soap_instantiate__ns1__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDOptions * soap_new__ns1__GetOSDOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDOptions * soap_new_req__ns1__GetOSDOptions(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetOSDOptions *_p = soap_instantiate__ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptions::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetOSDOptions * soap_new_set__ns1__GetOSDOptions(struct soap *soap, const std::string& ConfigurationToken, const std::vector<char * >& __any) { _ns1__GetOSDOptions *_p = soap_instantiate__ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetOSDOptions::__any = __any; } return _p; }

inline void soap_delete__ns1__GetOSDOptions(struct soap *soap, _ns1__GetOSDOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetOSDResponse
#define SOAP_TYPE__ns1__SetOSDResponse (203)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetOSDResponse(struct soap*, const char*, int, const _ns1__SetOSDResponse *, const char*);
SOAP_FMAC3 _ns1__SetOSDResponse * SOAP_FMAC4 soap_in__ns1__SetOSDResponse(struct soap*, const char*, _ns1__SetOSDResponse *, const char*);

#ifndef soap_write__ns1__SetOSDResponse
#define soap_write__ns1__SetOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetOSDResponse * SOAP_FMAC4 soap_get__ns1__SetOSDResponse(struct soap*, _ns1__SetOSDResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetOSDResponse
#define soap_read__ns1__SetOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetOSDResponse * SOAP_FMAC2 soap_instantiate__ns1__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetOSDResponse * soap_new__ns1__SetOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetOSDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetOSDResponse * soap_new_req__ns1__SetOSDResponse(struct soap *soap) { _ns1__SetOSDResponse *_p = soap_instantiate__ns1__SetOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetOSDResponse * soap_new_set__ns1__SetOSDResponse(struct soap *soap, const std::vector<char * >& __any) { _ns1__SetOSDResponse *_p = soap_instantiate__ns1__SetOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetOSDResponse::__any = __any; } return _p; }

inline void soap_delete__ns1__SetOSDResponse(struct soap *soap, _ns1__SetOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetOSD
#define SOAP_TYPE__ns1__SetOSD (202)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetOSD(struct soap*, const char*, int, const _ns1__SetOSD *, const char*);
SOAP_FMAC3 _ns1__SetOSD * SOAP_FMAC4 soap_in__ns1__SetOSD(struct soap*, const char*, _ns1__SetOSD *, const char*);

#ifndef soap_write__ns1__SetOSD
#define soap_write__ns1__SetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetOSD * SOAP_FMAC4 soap_get__ns1__SetOSD(struct soap*, _ns1__SetOSD *, const char*, const char*);

#ifndef soap_read__ns1__SetOSD
#define soap_read__ns1__SetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetOSD * SOAP_FMAC2 soap_instantiate__ns1__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetOSD * soap_new__ns1__SetOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__SetOSD * soap_new_req__ns1__SetOSD(struct soap *soap, ns2__OSDConfiguration *OSD) { _ns1__SetOSD *_p = soap_instantiate__ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetOSD::OSD = OSD; } return _p; }

inline _ns1__SetOSD * soap_new_set__ns1__SetOSD(struct soap *soap, ns2__OSDConfiguration *OSD, const std::vector<char * >& __any) { _ns1__SetOSD *_p = soap_instantiate__ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetOSD::OSD = OSD; _p->_ns1__SetOSD::__any = __any; } return _p; }

inline void soap_delete__ns1__SetOSD(struct soap *soap, _ns1__SetOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDResponse
#define SOAP_TYPE__ns1__GetOSDResponse (201)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDResponse(struct soap*, const char*, int, const _ns1__GetOSDResponse *, const char*);
SOAP_FMAC3 _ns1__GetOSDResponse * SOAP_FMAC4 soap_in__ns1__GetOSDResponse(struct soap*, const char*, _ns1__GetOSDResponse *, const char*);

#ifndef soap_write__ns1__GetOSDResponse
#define soap_write__ns1__GetOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDResponse * SOAP_FMAC4 soap_get__ns1__GetOSDResponse(struct soap*, _ns1__GetOSDResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDResponse
#define soap_read__ns1__GetOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDResponse * soap_new__ns1__GetOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDResponse * soap_new_req__ns1__GetOSDResponse(struct soap *soap, ns2__OSDConfiguration *OSD) { _ns1__GetOSDResponse *_p = soap_instantiate__ns1__GetOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDResponse::OSD = OSD; } return _p; }

inline _ns1__GetOSDResponse * soap_new_set__ns1__GetOSDResponse(struct soap *soap, ns2__OSDConfiguration *OSD, const std::vector<char * >& __any) { _ns1__GetOSDResponse *_p = soap_instantiate__ns1__GetOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDResponse::OSD = OSD; _p->_ns1__GetOSDResponse::__any = __any; } return _p; }

inline void soap_delete__ns1__GetOSDResponse(struct soap *soap, _ns1__GetOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSD
#define SOAP_TYPE__ns1__GetOSD (200)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSD(struct soap*, const char*, int, const _ns1__GetOSD *, const char*);
SOAP_FMAC3 _ns1__GetOSD * SOAP_FMAC4 soap_in__ns1__GetOSD(struct soap*, const char*, _ns1__GetOSD *, const char*);

#ifndef soap_write__ns1__GetOSD
#define soap_write__ns1__GetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSD * SOAP_FMAC4 soap_get__ns1__GetOSD(struct soap*, _ns1__GetOSD *, const char*, const char*);

#ifndef soap_read__ns1__GetOSD
#define soap_read__ns1__GetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSD * SOAP_FMAC2 soap_instantiate__ns1__GetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSD * soap_new__ns1__GetOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSD * soap_new_req__ns1__GetOSD(struct soap *soap, const std::string& OSDToken) { _ns1__GetOSD *_p = soap_instantiate__ns1__GetOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSD::OSDToken = OSDToken; } return _p; }

inline _ns1__GetOSD * soap_new_set__ns1__GetOSD(struct soap *soap, const std::string& OSDToken, const std::vector<char * >& __any) { _ns1__GetOSD *_p = soap_instantiate__ns1__GetOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSD::OSDToken = OSDToken; _p->_ns1__GetOSD::__any = __any; } return _p; }

inline void soap_delete__ns1__GetOSD(struct soap *soap, _ns1__GetOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDsResponse
#define SOAP_TYPE__ns1__GetOSDsResponse (199)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDsResponse(struct soap*, const char*, int, const _ns1__GetOSDsResponse *, const char*);
SOAP_FMAC3 _ns1__GetOSDsResponse * SOAP_FMAC4 soap_in__ns1__GetOSDsResponse(struct soap*, const char*, _ns1__GetOSDsResponse *, const char*);

#ifndef soap_write__ns1__GetOSDsResponse
#define soap_write__ns1__GetOSDsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDsResponse * SOAP_FMAC4 soap_get__ns1__GetOSDsResponse(struct soap*, _ns1__GetOSDsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDsResponse
#define soap_read__ns1__GetOSDsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDsResponse * soap_new__ns1__GetOSDsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDsResponse * soap_new_req__ns1__GetOSDsResponse(struct soap *soap) { _ns1__GetOSDsResponse *_p = soap_instantiate__ns1__GetOSDsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetOSDsResponse * soap_new_set__ns1__GetOSDsResponse(struct soap *soap, const std::vector<ns2__OSDConfiguration * >& OSDs) { _ns1__GetOSDsResponse *_p = soap_instantiate__ns1__GetOSDsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDsResponse::OSDs = OSDs; } return _p; }

inline void soap_delete__ns1__GetOSDsResponse(struct soap *soap, _ns1__GetOSDsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDs
#define SOAP_TYPE__ns1__GetOSDs (198)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDs(struct soap*, const char*, int, const _ns1__GetOSDs *, const char*);
SOAP_FMAC3 _ns1__GetOSDs * SOAP_FMAC4 soap_in__ns1__GetOSDs(struct soap*, const char*, _ns1__GetOSDs *, const char*);

#ifndef soap_write__ns1__GetOSDs
#define soap_write__ns1__GetOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDs * SOAP_FMAC4 soap_get__ns1__GetOSDs(struct soap*, _ns1__GetOSDs *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDs
#define soap_read__ns1__GetOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDs * SOAP_FMAC2 soap_instantiate__ns1__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDs * soap_new__ns1__GetOSDs(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDs(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDs * soap_new_req__ns1__GetOSDs(struct soap *soap) { _ns1__GetOSDs *_p = soap_instantiate__ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetOSDs * soap_new_set__ns1__GetOSDs(struct soap *soap, std::string *ConfigurationToken) { _ns1__GetOSDs *_p = soap_instantiate__ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDs::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetOSDs(struct soap *soap, _ns1__GetOSDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceModeResponse
#define SOAP_TYPE__ns1__SetVideoSourceModeResponse (197)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceModeResponse(struct soap*, const char*, int, const _ns1__SetVideoSourceModeResponse *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceModeResponse * SOAP_FMAC4 soap_in__ns1__SetVideoSourceModeResponse(struct soap*, const char*, _ns1__SetVideoSourceModeResponse *, const char*);

#ifndef soap_write__ns1__SetVideoSourceModeResponse
#define soap_write__ns1__SetVideoSourceModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceModeResponse * SOAP_FMAC4 soap_get__ns1__SetVideoSourceModeResponse(struct soap*, _ns1__SetVideoSourceModeResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceModeResponse
#define soap_read__ns1__SetVideoSourceModeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceModeResponse * soap_new__ns1__SetVideoSourceModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceModeResponse * soap_new_req__ns1__SetVideoSourceModeResponse(struct soap *soap, bool Reboot) { _ns1__SetVideoSourceModeResponse *_p = soap_instantiate__ns1__SetVideoSourceModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceModeResponse::Reboot = Reboot; } return _p; }

inline _ns1__SetVideoSourceModeResponse * soap_new_set__ns1__SetVideoSourceModeResponse(struct soap *soap, bool Reboot) { _ns1__SetVideoSourceModeResponse *_p = soap_instantiate__ns1__SetVideoSourceModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceModeResponse::Reboot = Reboot; } return _p; }

inline void soap_delete__ns1__SetVideoSourceModeResponse(struct soap *soap, _ns1__SetVideoSourceModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceMode
#define SOAP_TYPE__ns1__SetVideoSourceMode (196)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceMode(struct soap*, const char*, int, const _ns1__SetVideoSourceMode *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceMode * SOAP_FMAC4 soap_in__ns1__SetVideoSourceMode(struct soap*, const char*, _ns1__SetVideoSourceMode *, const char*);

#ifndef soap_write__ns1__SetVideoSourceMode
#define soap_write__ns1__SetVideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceMode * SOAP_FMAC4 soap_get__ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceMode
#define soap_read__ns1__SetVideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceMode * soap_new__ns1__SetVideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceMode(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceMode * soap_new_req__ns1__SetVideoSourceMode(struct soap *soap, const std::string& VideoSourceToken, const std::string& VideoSourceModeToken) { _ns1__SetVideoSourceMode *_p = soap_instantiate__ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceMode::VideoSourceToken = VideoSourceToken; _p->_ns1__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken; } return _p; }

inline _ns1__SetVideoSourceMode * soap_new_set__ns1__SetVideoSourceMode(struct soap *soap, const std::string& VideoSourceToken, const std::string& VideoSourceModeToken) { _ns1__SetVideoSourceMode *_p = soap_instantiate__ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceMode::VideoSourceToken = VideoSourceToken; _p->_ns1__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken; } return _p; }

inline void soap_delete__ns1__SetVideoSourceMode(struct soap *soap, _ns1__SetVideoSourceMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceModesResponse
#define SOAP_TYPE__ns1__GetVideoSourceModesResponse (195)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceModesResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceModesResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceModesResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceModesResponse(struct soap*, const char*, _ns1__GetVideoSourceModesResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceModesResponse
#define soap_write__ns1__GetVideoSourceModesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceModesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceModesResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceModesResponse(struct soap*, _ns1__GetVideoSourceModesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceModesResponse
#define soap_read__ns1__GetVideoSourceModesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceModesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceModesResponse * soap_new__ns1__GetVideoSourceModesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceModesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceModesResponse * soap_new_req__ns1__GetVideoSourceModesResponse(struct soap *soap, const std::vector<ns1__VideoSourceMode * >& VideoSourceModes) { _ns1__GetVideoSourceModesResponse *_p = soap_instantiate__ns1__GetVideoSourceModesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes; } return _p; }

inline _ns1__GetVideoSourceModesResponse * soap_new_set__ns1__GetVideoSourceModesResponse(struct soap *soap, const std::vector<ns1__VideoSourceMode * >& VideoSourceModes) { _ns1__GetVideoSourceModesResponse *_p = soap_instantiate__ns1__GetVideoSourceModesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes; } return _p; }

inline void soap_delete__ns1__GetVideoSourceModesResponse(struct soap *soap, _ns1__GetVideoSourceModesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceModesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceModes
#define SOAP_TYPE__ns1__GetVideoSourceModes (194)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceModes(struct soap*, const char*, int, const _ns1__GetVideoSourceModes *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceModes * SOAP_FMAC4 soap_in__ns1__GetVideoSourceModes(struct soap*, const char*, _ns1__GetVideoSourceModes *, const char*);

#ifndef soap_write__ns1__GetVideoSourceModes
#define soap_write__ns1__GetVideoSourceModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceModes * SOAP_FMAC4 soap_get__ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceModes
#define soap_read__ns1__GetVideoSourceModes(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceModes * soap_new__ns1__GetVideoSourceModes(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceModes(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceModes * soap_new_req__ns1__GetVideoSourceModes(struct soap *soap, const std::string& VideoSourceToken) { _ns1__GetVideoSourceModes *_p = soap_instantiate__ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModes::VideoSourceToken = VideoSourceToken; } return _p; }

inline _ns1__GetVideoSourceModes * soap_new_set__ns1__GetVideoSourceModes(struct soap *soap, const std::string& VideoSourceToken) { _ns1__GetVideoSourceModes *_p = soap_instantiate__ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModes::VideoSourceToken = VideoSourceToken; } return _p; }

inline void soap_delete__ns1__GetVideoSourceModes(struct soap *soap, _ns1__GetVideoSourceModes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceModes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetSnapshotUriResponse
#define SOAP_TYPE__ns1__GetSnapshotUriResponse (193)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSnapshotUriResponse(struct soap*, const char*, int, const _ns1__GetSnapshotUriResponse *, const char*);
SOAP_FMAC3 _ns1__GetSnapshotUriResponse * SOAP_FMAC4 soap_in__ns1__GetSnapshotUriResponse(struct soap*, const char*, _ns1__GetSnapshotUriResponse *, const char*);

#ifndef soap_write__ns1__GetSnapshotUriResponse
#define soap_write__ns1__GetSnapshotUriResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetSnapshotUriResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetSnapshotUriResponse * SOAP_FMAC4 soap_get__ns1__GetSnapshotUriResponse(struct soap*, _ns1__GetSnapshotUriResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetSnapshotUriResponse
#define soap_read__ns1__GetSnapshotUriResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetSnapshotUriResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSnapshotUriResponse * soap_new__ns1__GetSnapshotUriResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetSnapshotUriResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetSnapshotUriResponse * soap_new_req__ns1__GetSnapshotUriResponse(struct soap *soap, ns2__MediaUri *MediaUri) { _ns1__GetSnapshotUriResponse *_p = soap_instantiate__ns1__GetSnapshotUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUriResponse::MediaUri = MediaUri; } return _p; }

inline _ns1__GetSnapshotUriResponse * soap_new_set__ns1__GetSnapshotUriResponse(struct soap *soap, ns2__MediaUri *MediaUri) { _ns1__GetSnapshotUriResponse *_p = soap_instantiate__ns1__GetSnapshotUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUriResponse::MediaUri = MediaUri; } return _p; }

inline void soap_delete__ns1__GetSnapshotUriResponse(struct soap *soap, _ns1__GetSnapshotUriResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSnapshotUriResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetSnapshotUri
#define SOAP_TYPE__ns1__GetSnapshotUri (192)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSnapshotUri(struct soap*, const char*, int, const _ns1__GetSnapshotUri *, const char*);
SOAP_FMAC3 _ns1__GetSnapshotUri * SOAP_FMAC4 soap_in__ns1__GetSnapshotUri(struct soap*, const char*, _ns1__GetSnapshotUri *, const char*);

#ifndef soap_write__ns1__GetSnapshotUri
#define soap_write__ns1__GetSnapshotUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetSnapshotUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetSnapshotUri * SOAP_FMAC4 soap_get__ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri *, const char*, const char*);

#ifndef soap_read__ns1__GetSnapshotUri
#define soap_read__ns1__GetSnapshotUri(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetSnapshotUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__ns1__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSnapshotUri * soap_new__ns1__GetSnapshotUri(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetSnapshotUri(soap, n, NULL, NULL, NULL); }

inline _ns1__GetSnapshotUri * soap_new_req__ns1__GetSnapshotUri(struct soap *soap, const std::string& ProfileToken) { _ns1__GetSnapshotUri *_p = soap_instantiate__ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUri::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetSnapshotUri * soap_new_set__ns1__GetSnapshotUri(struct soap *soap, const std::string& ProfileToken) { _ns1__GetSnapshotUri *_p = soap_instantiate__ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUri::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetSnapshotUri(struct soap *soap, _ns1__GetSnapshotUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSnapshotUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetSynchronizationPointResponse
#define SOAP_TYPE__ns1__SetSynchronizationPointResponse (191)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSynchronizationPointResponse(struct soap*, const char*, int, const _ns1__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC3 _ns1__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__ns1__SetSynchronizationPointResponse(struct soap*, const char*, _ns1__SetSynchronizationPointResponse *, const char*);

#ifndef soap_write__ns1__SetSynchronizationPointResponse
#define soap_write__ns1__SetSynchronizationPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetSynchronizationPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__ns1__SetSynchronizationPointResponse(struct soap*, _ns1__SetSynchronizationPointResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetSynchronizationPointResponse
#define soap_read__ns1__SetSynchronizationPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetSynchronizationPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetSynchronizationPointResponse * soap_new__ns1__SetSynchronizationPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetSynchronizationPointResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetSynchronizationPointResponse * soap_new_req__ns1__SetSynchronizationPointResponse(struct soap *soap) { _ns1__SetSynchronizationPointResponse *_p = soap_instantiate__ns1__SetSynchronizationPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetSynchronizationPointResponse * soap_new_set__ns1__SetSynchronizationPointResponse(struct soap *soap) { _ns1__SetSynchronizationPointResponse *_p = soap_instantiate__ns1__SetSynchronizationPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetSynchronizationPointResponse(struct soap *soap, _ns1__SetSynchronizationPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSynchronizationPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetSynchronizationPoint
#define SOAP_TYPE__ns1__SetSynchronizationPoint (190)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSynchronizationPoint(struct soap*, const char*, int, const _ns1__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 _ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_in__ns1__SetSynchronizationPoint(struct soap*, const char*, _ns1__SetSynchronizationPoint *, const char*);

#ifndef soap_write__ns1__SetSynchronizationPoint
#define soap_write__ns1__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_get__ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_read__ns1__SetSynchronizationPoint
#define soap_read__ns1__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__ns1__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetSynchronizationPoint * soap_new__ns1__SetSynchronizationPoint(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetSynchronizationPoint(soap, n, NULL, NULL, NULL); }

inline _ns1__SetSynchronizationPoint * soap_new_req__ns1__SetSynchronizationPoint(struct soap *soap, const std::string& ProfileToken) { _ns1__SetSynchronizationPoint *_p = soap_instantiate__ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetSynchronizationPoint::ProfileToken = ProfileToken; } return _p; }

inline _ns1__SetSynchronizationPoint * soap_new_set__ns1__SetSynchronizationPoint(struct soap *soap, const std::string& ProfileToken) { _ns1__SetSynchronizationPoint *_p = soap_instantiate__ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetSynchronizationPoint::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__SetSynchronizationPoint(struct soap *soap, _ns1__SetSynchronizationPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSynchronizationPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StopMulticastStreamingResponse
#define SOAP_TYPE__ns1__StopMulticastStreamingResponse (189)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopMulticastStreamingResponse(struct soap*, const char*, int, const _ns1__StopMulticastStreamingResponse *, const char*);
SOAP_FMAC3 _ns1__StopMulticastStreamingResponse * SOAP_FMAC4 soap_in__ns1__StopMulticastStreamingResponse(struct soap*, const char*, _ns1__StopMulticastStreamingResponse *, const char*);

#ifndef soap_write__ns1__StopMulticastStreamingResponse
#define soap_write__ns1__StopMulticastStreamingResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StopMulticastStreamingResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StopMulticastStreamingResponse * SOAP_FMAC4 soap_get__ns1__StopMulticastStreamingResponse(struct soap*, _ns1__StopMulticastStreamingResponse *, const char*, const char*);

#ifndef soap_read__ns1__StopMulticastStreamingResponse
#define soap_read__ns1__StopMulticastStreamingResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StopMulticastStreamingResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__ns1__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopMulticastStreamingResponse * soap_new__ns1__StopMulticastStreamingResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StopMulticastStreamingResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__StopMulticastStreamingResponse * soap_new_req__ns1__StopMulticastStreamingResponse(struct soap *soap) { _ns1__StopMulticastStreamingResponse *_p = soap_instantiate__ns1__StopMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__StopMulticastStreamingResponse * soap_new_set__ns1__StopMulticastStreamingResponse(struct soap *soap) { _ns1__StopMulticastStreamingResponse *_p = soap_instantiate__ns1__StopMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__StopMulticastStreamingResponse(struct soap *soap, _ns1__StopMulticastStreamingResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StopMulticastStreamingResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StopMulticastStreaming
#define SOAP_TYPE__ns1__StopMulticastStreaming (188)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopMulticastStreaming(struct soap*, const char*, int, const _ns1__StopMulticastStreaming *, const char*);
SOAP_FMAC3 _ns1__StopMulticastStreaming * SOAP_FMAC4 soap_in__ns1__StopMulticastStreaming(struct soap*, const char*, _ns1__StopMulticastStreaming *, const char*);

#ifndef soap_write__ns1__StopMulticastStreaming
#define soap_write__ns1__StopMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StopMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StopMulticastStreaming * SOAP_FMAC4 soap_get__ns1__StopMulticastStreaming(struct soap*, _ns1__StopMulticastStreaming *, const char*, const char*);

#ifndef soap_read__ns1__StopMulticastStreaming
#define soap_read__ns1__StopMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StopMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate__ns1__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopMulticastStreaming * soap_new__ns1__StopMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StopMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline _ns1__StopMulticastStreaming * soap_new_req__ns1__StopMulticastStreaming(struct soap *soap, const std::string& ProfileToken) { _ns1__StopMulticastStreaming *_p = soap_instantiate__ns1__StopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StopMulticastStreaming::ProfileToken = ProfileToken; } return _p; }

inline _ns1__StopMulticastStreaming * soap_new_set__ns1__StopMulticastStreaming(struct soap *soap, const std::string& ProfileToken) { _ns1__StopMulticastStreaming *_p = soap_instantiate__ns1__StopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StopMulticastStreaming::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__StopMulticastStreaming(struct soap *soap, _ns1__StopMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StopMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StartMulticastStreamingResponse
#define SOAP_TYPE__ns1__StartMulticastStreamingResponse (187)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartMulticastStreamingResponse(struct soap*, const char*, int, const _ns1__StartMulticastStreamingResponse *, const char*);
SOAP_FMAC3 _ns1__StartMulticastStreamingResponse * SOAP_FMAC4 soap_in__ns1__StartMulticastStreamingResponse(struct soap*, const char*, _ns1__StartMulticastStreamingResponse *, const char*);

#ifndef soap_write__ns1__StartMulticastStreamingResponse
#define soap_write__ns1__StartMulticastStreamingResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StartMulticastStreamingResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StartMulticastStreamingResponse * SOAP_FMAC4 soap_get__ns1__StartMulticastStreamingResponse(struct soap*, _ns1__StartMulticastStreamingResponse *, const char*, const char*);

#ifndef soap_read__ns1__StartMulticastStreamingResponse
#define soap_read__ns1__StartMulticastStreamingResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StartMulticastStreamingResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__ns1__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartMulticastStreamingResponse * soap_new__ns1__StartMulticastStreamingResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StartMulticastStreamingResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__StartMulticastStreamingResponse * soap_new_req__ns1__StartMulticastStreamingResponse(struct soap *soap) { _ns1__StartMulticastStreamingResponse *_p = soap_instantiate__ns1__StartMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__StartMulticastStreamingResponse * soap_new_set__ns1__StartMulticastStreamingResponse(struct soap *soap) { _ns1__StartMulticastStreamingResponse *_p = soap_instantiate__ns1__StartMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__StartMulticastStreamingResponse(struct soap *soap, _ns1__StartMulticastStreamingResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StartMulticastStreamingResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StartMulticastStreaming
#define SOAP_TYPE__ns1__StartMulticastStreaming (186)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartMulticastStreaming(struct soap*, const char*, int, const _ns1__StartMulticastStreaming *, const char*);
SOAP_FMAC3 _ns1__StartMulticastStreaming * SOAP_FMAC4 soap_in__ns1__StartMulticastStreaming(struct soap*, const char*, _ns1__StartMulticastStreaming *, const char*);

#ifndef soap_write__ns1__StartMulticastStreaming
#define soap_write__ns1__StartMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StartMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StartMulticastStreaming * SOAP_FMAC4 soap_get__ns1__StartMulticastStreaming(struct soap*, _ns1__StartMulticastStreaming *, const char*, const char*);

#ifndef soap_read__ns1__StartMulticastStreaming
#define soap_read__ns1__StartMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StartMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate__ns1__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartMulticastStreaming * soap_new__ns1__StartMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StartMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline _ns1__StartMulticastStreaming * soap_new_req__ns1__StartMulticastStreaming(struct soap *soap, const std::string& ProfileToken) { _ns1__StartMulticastStreaming *_p = soap_instantiate__ns1__StartMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StartMulticastStreaming::ProfileToken = ProfileToken; } return _p; }

inline _ns1__StartMulticastStreaming * soap_new_set__ns1__StartMulticastStreaming(struct soap *soap, const std::string& ProfileToken) { _ns1__StartMulticastStreaming *_p = soap_instantiate__ns1__StartMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StartMulticastStreaming::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__StartMulticastStreaming(struct soap *soap, _ns1__StartMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StartMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetStreamUriResponse
#define SOAP_TYPE__ns1__GetStreamUriResponse (185)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStreamUriResponse(struct soap*, const char*, int, const _ns1__GetStreamUriResponse *, const char*);
SOAP_FMAC3 _ns1__GetStreamUriResponse * SOAP_FMAC4 soap_in__ns1__GetStreamUriResponse(struct soap*, const char*, _ns1__GetStreamUriResponse *, const char*);

#ifndef soap_write__ns1__GetStreamUriResponse
#define soap_write__ns1__GetStreamUriResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetStreamUriResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetStreamUriResponse * SOAP_FMAC4 soap_get__ns1__GetStreamUriResponse(struct soap*, _ns1__GetStreamUriResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetStreamUriResponse
#define soap_read__ns1__GetStreamUriResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetStreamUriResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStreamUriResponse * soap_new__ns1__GetStreamUriResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetStreamUriResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetStreamUriResponse * soap_new_req__ns1__GetStreamUriResponse(struct soap *soap, ns2__MediaUri *MediaUri) { _ns1__GetStreamUriResponse *_p = soap_instantiate__ns1__GetStreamUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUriResponse::MediaUri = MediaUri; } return _p; }

inline _ns1__GetStreamUriResponse * soap_new_set__ns1__GetStreamUriResponse(struct soap *soap, ns2__MediaUri *MediaUri) { _ns1__GetStreamUriResponse *_p = soap_instantiate__ns1__GetStreamUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUriResponse::MediaUri = MediaUri; } return _p; }

inline void soap_delete__ns1__GetStreamUriResponse(struct soap *soap, _ns1__GetStreamUriResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStreamUriResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetStreamUri
#define SOAP_TYPE__ns1__GetStreamUri (184)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStreamUri(struct soap*, const char*, int, const _ns1__GetStreamUri *, const char*);
SOAP_FMAC3 _ns1__GetStreamUri * SOAP_FMAC4 soap_in__ns1__GetStreamUri(struct soap*, const char*, _ns1__GetStreamUri *, const char*);

#ifndef soap_write__ns1__GetStreamUri
#define soap_write__ns1__GetStreamUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetStreamUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetStreamUri * SOAP_FMAC4 soap_get__ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri *, const char*, const char*);

#ifndef soap_read__ns1__GetStreamUri
#define soap_read__ns1__GetStreamUri(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetStreamUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetStreamUri * SOAP_FMAC2 soap_instantiate__ns1__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStreamUri * soap_new__ns1__GetStreamUri(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetStreamUri(soap, n, NULL, NULL, NULL); }

inline _ns1__GetStreamUri * soap_new_req__ns1__GetStreamUri(struct soap *soap, ns2__StreamSetup *StreamSetup, const std::string& ProfileToken) { _ns1__GetStreamUri *_p = soap_instantiate__ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUri::StreamSetup = StreamSetup; _p->_ns1__GetStreamUri::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetStreamUri * soap_new_set__ns1__GetStreamUri(struct soap *soap, ns2__StreamSetup *StreamSetup, const std::string& ProfileToken) { _ns1__GetStreamUri *_p = soap_instantiate__ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUri::StreamSetup = StreamSetup; _p->_ns1__GetStreamUri::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetStreamUri(struct soap *soap, _ns1__GetStreamUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStreamUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse (183)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, const char*, int, const _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*);
SOAP_FMAC3 _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC4 soap_in__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, const char*, _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*);

#ifndef soap_write__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define soap_write__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetGuaranteedNumberOfVideoEncoderInstancesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC4 soap_get__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define soap_read__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new_req__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, int TotalNumber) { _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse *_p = soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse::TotalNumber = TotalNumber; } return _p; }

inline _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new_set__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, int TotalNumber, int *JPEG, int *H264, int *MPEG4) { _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse *_p = soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse::TotalNumber = TotalNumber; _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse::JPEG = JPEG; _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse::H264 = H264; _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse::MPEG4 = MPEG4; } return _p; }

inline void soap_delete__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, _ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__ns1__GetGuaranteedNumberOfVideoEncoderInstances (182)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, int, const _ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC3 _ns1__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_in__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);

#ifndef soap_write__ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define soap_write__ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetGuaranteedNumberOfVideoEncoderInstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_get__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

#ifndef soap_read__ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define soap_read__ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetGuaranteedNumberOfVideoEncoderInstances * soap_new__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, n, NULL, NULL, NULL); }

inline _ns1__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_req__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstances::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_set__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_instantiate__ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetGuaranteedNumberOfVideoEncoderInstances::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurationOptionsResponse (181)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurationOptionsResponse
#define soap_write__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, _ns1__GetAudioDecoderConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurationOptionsResponse
#define soap_read__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurationOptionsResponse * soap_new__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurationOptionsResponse * soap_new_req__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, ns2__AudioDecoderConfigurationOptions *Options) { _ns1__GetAudioDecoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioDecoderConfigurationOptionsResponse * soap_new_set__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, ns2__AudioDecoderConfigurationOptions *Options) { _ns1__GetAudioDecoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioDecoderConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurationOptions (180)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurationOptions
#define soap_write__ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurationOptions(struct soap*, _ns1__GetAudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurationOptions
#define soap_read__ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurationOptions * soap_new__ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurationOptions * soap_new_req__ns1__GetAudioDecoderConfigurationOptions(struct soap *soap) { _ns1__GetAudioDecoderConfigurationOptions *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioDecoderConfigurationOptions * soap_new_set__ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetAudioDecoderConfigurationOptions *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetAudioDecoderConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, _ns1__GetAudioDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioOutputConfigurationOptionsResponse (179)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioOutputConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurationOptionsResponse
#define soap_write__ns1__GetAudioOutputConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, _ns1__GetAudioOutputConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurationOptionsResponse
#define soap_read__ns1__GetAudioOutputConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurationOptionsResponse * soap_new__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurationOptionsResponse * soap_new_req__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, ns2__AudioOutputConfigurationOptions *Options) { _ns1__GetAudioOutputConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioOutputConfigurationOptionsResponse * soap_new_set__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, ns2__AudioOutputConfigurationOptions *Options) { _ns1__GetAudioOutputConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioOutputConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__ns1__GetAudioOutputConfigurationOptions (178)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, _ns1__GetAudioOutputConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurationOptions
#define soap_write__ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurationOptions(struct soap*, _ns1__GetAudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurationOptions
#define soap_read__ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurationOptions * soap_new__ns1__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurationOptions * soap_new_req__ns1__GetAudioOutputConfigurationOptions(struct soap *soap) { _ns1__GetAudioOutputConfigurationOptions *_p = soap_instantiate__ns1__GetAudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioOutputConfigurationOptions * soap_new_set__ns1__GetAudioOutputConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetAudioOutputConfigurationOptions *_p = soap_instantiate__ns1__GetAudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetAudioOutputConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurationOptions(struct soap *soap, _ns1__GetAudioOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetMetadataConfigurationOptionsResponse (177)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetMetadataConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetMetadataConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurationOptionsResponse
#define soap_write__ns1__GetMetadataConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, _ns1__GetMetadataConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurationOptionsResponse
#define soap_read__ns1__GetMetadataConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurationOptionsResponse * soap_new__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurationOptionsResponse * soap_new_req__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, ns2__MetadataConfigurationOptions *Options) { _ns1__GetMetadataConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetMetadataConfigurationOptionsResponse * soap_new_set__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, ns2__MetadataConfigurationOptions *Options) { _ns1__GetMetadataConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, _ns1__GetMetadataConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurationOptions
#define SOAP_TYPE__ns1__GetMetadataConfigurationOptions (176)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurationOptions(struct soap*, const char*, int, const _ns1__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurationOptions(struct soap*, const char*, _ns1__GetMetadataConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurationOptions
#define soap_write__ns1__GetMetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurationOptions(struct soap*, _ns1__GetMetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurationOptions
#define soap_read__ns1__GetMetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurationOptions * soap_new__ns1__GetMetadataConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurationOptions * soap_new_req__ns1__GetMetadataConfigurationOptions(struct soap *soap) { _ns1__GetMetadataConfigurationOptions *_p = soap_instantiate__ns1__GetMetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetMetadataConfigurationOptions * soap_new_set__ns1__GetMetadataConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetMetadataConfigurationOptions *_p = soap_instantiate__ns1__GetMetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetMetadataConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurationOptions(struct soap *soap, _ns1__GetMetadataConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurationOptionsResponse (175)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurationOptionsResponse
#define soap_write__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, _ns1__GetAudioEncoderConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurationOptionsResponse
#define soap_read__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurationOptionsResponse * soap_new__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurationOptionsResponse * soap_new_req__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, ns2__AudioEncoderConfigurationOptions *Options) { _ns1__GetAudioEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioEncoderConfigurationOptionsResponse * soap_new_set__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, ns2__AudioEncoderConfigurationOptions *Options) { _ns1__GetAudioEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioEncoderConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurationOptions (174)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurationOptions
#define soap_write__ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurationOptions(struct soap*, _ns1__GetAudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurationOptions
#define soap_read__ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurationOptions * soap_new__ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurationOptions * soap_new_req__ns1__GetAudioEncoderConfigurationOptions(struct soap *soap) { _ns1__GetAudioEncoderConfigurationOptions *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioEncoderConfigurationOptions * soap_new_set__ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetAudioEncoderConfigurationOptions *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetAudioEncoderConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, _ns1__GetAudioEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioSourceConfigurationOptionsResponse (173)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioSourceConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurationOptionsResponse
#define soap_write__ns1__GetAudioSourceConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, _ns1__GetAudioSourceConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurationOptionsResponse
#define soap_read__ns1__GetAudioSourceConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurationOptionsResponse * soap_new__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurationOptionsResponse * soap_new_req__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, ns2__AudioSourceConfigurationOptions *Options) { _ns1__GetAudioSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioSourceConfigurationOptionsResponse * soap_new_set__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, ns2__AudioSourceConfigurationOptions *Options) { _ns1__GetAudioSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioSourceConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__ns1__GetAudioSourceConfigurationOptions (172)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, _ns1__GetAudioSourceConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurationOptions
#define soap_write__ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurationOptions(struct soap*, _ns1__GetAudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurationOptions
#define soap_read__ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurationOptions * soap_new__ns1__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurationOptions * soap_new_req__ns1__GetAudioSourceConfigurationOptions(struct soap *soap) { _ns1__GetAudioSourceConfigurationOptions *_p = soap_instantiate__ns1__GetAudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioSourceConfigurationOptions * soap_new_set__ns1__GetAudioSourceConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetAudioSourceConfigurationOptions *_p = soap_instantiate__ns1__GetAudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetAudioSourceConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurationOptions(struct soap *soap, _ns1__GetAudioSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurationOptionsResponse (171)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurationOptionsResponse
#define soap_write__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, _ns1__GetVideoEncoderConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurationOptionsResponse
#define soap_read__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurationOptionsResponse * soap_new__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurationOptionsResponse * soap_new_req__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, ns2__VideoEncoderConfigurationOptions *Options) { _ns1__GetVideoEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetVideoEncoderConfigurationOptionsResponse * soap_new_set__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, ns2__VideoEncoderConfigurationOptions *Options) { _ns1__GetVideoEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _ns1__GetVideoEncoderConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurationOptions (170)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurationOptions
#define soap_write__ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurationOptions(struct soap*, _ns1__GetVideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurationOptions
#define soap_read__ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurationOptions * soap_new__ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurationOptions * soap_new_req__ns1__GetVideoEncoderConfigurationOptions(struct soap *soap) { _ns1__GetVideoEncoderConfigurationOptions *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoEncoderConfigurationOptions * soap_new_set__ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetVideoEncoderConfigurationOptions *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetVideoEncoderConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, _ns1__GetVideoEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetVideoSourceConfigurationOptionsResponse (169)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetVideoSourceConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurationOptionsResponse
#define soap_write__ns1__GetVideoSourceConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, _ns1__GetVideoSourceConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurationOptionsResponse
#define soap_read__ns1__GetVideoSourceConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurationOptionsResponse * soap_new__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurationOptionsResponse * soap_new_req__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, ns2__VideoSourceConfigurationOptions *Options) { _ns1__GetVideoSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetVideoSourceConfigurationOptionsResponse * soap_new_set__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, ns2__VideoSourceConfigurationOptions *Options) { _ns1__GetVideoSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _ns1__GetVideoSourceConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__ns1__GetVideoSourceConfigurationOptions (168)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, _ns1__GetVideoSourceConfigurationOptions *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurationOptions
#define soap_write__ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurationOptions(struct soap*, _ns1__GetVideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurationOptions
#define soap_read__ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurationOptions * soap_new__ns1__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurationOptions * soap_new_req__ns1__GetVideoSourceConfigurationOptions(struct soap *soap) { _ns1__GetVideoSourceConfigurationOptions *_p = soap_instantiate__ns1__GetVideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoSourceConfigurationOptions * soap_new_set__ns1__GetVideoSourceConfigurationOptions(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken) { _ns1__GetVideoSourceConfigurationOptions *_p = soap_instantiate__ns1__GetVideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationOptions::ConfigurationToken = ConfigurationToken; _p->_ns1__GetVideoSourceConfigurationOptions::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurationOptions(struct soap *soap, _ns1__GetVideoSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__ns1__SetAudioDecoderConfigurationResponse (167)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _ns1__SetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetAudioDecoderConfigurationResponse(struct soap*, const char*, _ns1__SetAudioDecoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetAudioDecoderConfigurationResponse
#define soap_write__ns1__SetAudioDecoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioDecoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetAudioDecoderConfigurationResponse(struct soap*, _ns1__SetAudioDecoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioDecoderConfigurationResponse
#define soap_read__ns1__SetAudioDecoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioDecoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioDecoderConfigurationResponse * soap_new__ns1__SetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioDecoderConfigurationResponse * soap_new_req__ns1__SetAudioDecoderConfigurationResponse(struct soap *soap) { _ns1__SetAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__SetAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetAudioDecoderConfigurationResponse * soap_new_set__ns1__SetAudioDecoderConfigurationResponse(struct soap *soap) { _ns1__SetAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__SetAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetAudioDecoderConfigurationResponse(struct soap *soap, _ns1__SetAudioDecoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioDecoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioDecoderConfiguration
#define SOAP_TYPE__ns1__SetAudioDecoderConfiguration (166)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioDecoderConfiguration(struct soap*, const char*, int, const _ns1__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioDecoderConfiguration(struct soap*, const char*, _ns1__SetAudioDecoderConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioDecoderConfiguration
#define soap_write__ns1__SetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioDecoderConfiguration
#define soap_read__ns1__SetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioDecoderConfiguration * soap_new__ns1__SetAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioDecoderConfiguration * soap_new_req__ns1__SetAudioDecoderConfiguration(struct soap *soap, ns2__AudioDecoderConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioDecoderConfiguration *_p = soap_instantiate__ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioDecoderConfiguration::Configuration = Configuration; _p->_ns1__SetAudioDecoderConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetAudioDecoderConfiguration * soap_new_set__ns1__SetAudioDecoderConfiguration(struct soap *soap, ns2__AudioDecoderConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioDecoderConfiguration *_p = soap_instantiate__ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioDecoderConfiguration::Configuration = Configuration; _p->_ns1__SetAudioDecoderConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetAudioDecoderConfiguration(struct soap *soap, _ns1__SetAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__ns1__SetAudioOutputConfigurationResponse (165)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioOutputConfigurationResponse(struct soap*, const char*, int, const _ns1__SetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetAudioOutputConfigurationResponse(struct soap*, const char*, _ns1__SetAudioOutputConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetAudioOutputConfigurationResponse
#define soap_write__ns1__SetAudioOutputConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioOutputConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetAudioOutputConfigurationResponse(struct soap*, _ns1__SetAudioOutputConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioOutputConfigurationResponse
#define soap_read__ns1__SetAudioOutputConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioOutputConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioOutputConfigurationResponse * soap_new__ns1__SetAudioOutputConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioOutputConfigurationResponse * soap_new_req__ns1__SetAudioOutputConfigurationResponse(struct soap *soap) { _ns1__SetAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__SetAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetAudioOutputConfigurationResponse * soap_new_set__ns1__SetAudioOutputConfigurationResponse(struct soap *soap) { _ns1__SetAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__SetAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetAudioOutputConfigurationResponse(struct soap *soap, _ns1__SetAudioOutputConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioOutputConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioOutputConfiguration
#define SOAP_TYPE__ns1__SetAudioOutputConfiguration (164)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioOutputConfiguration(struct soap*, const char*, int, const _ns1__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioOutputConfiguration(struct soap*, const char*, _ns1__SetAudioOutputConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioOutputConfiguration
#define soap_write__ns1__SetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioOutputConfiguration
#define soap_read__ns1__SetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioOutputConfiguration * soap_new__ns1__SetAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioOutputConfiguration * soap_new_req__ns1__SetAudioOutputConfiguration(struct soap *soap, ns2__AudioOutputConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioOutputConfiguration *_p = soap_instantiate__ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioOutputConfiguration::Configuration = Configuration; _p->_ns1__SetAudioOutputConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetAudioOutputConfiguration * soap_new_set__ns1__SetAudioOutputConfiguration(struct soap *soap, ns2__AudioOutputConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioOutputConfiguration *_p = soap_instantiate__ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioOutputConfiguration::Configuration = Configuration; _p->_ns1__SetAudioOutputConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetAudioOutputConfiguration(struct soap *soap, _ns1__SetAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetMetadataConfigurationResponse
#define SOAP_TYPE__ns1__SetMetadataConfigurationResponse (163)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMetadataConfigurationResponse(struct soap*, const char*, int, const _ns1__SetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetMetadataConfigurationResponse(struct soap*, const char*, _ns1__SetMetadataConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetMetadataConfigurationResponse
#define soap_write__ns1__SetMetadataConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetMetadataConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetMetadataConfigurationResponse(struct soap*, _ns1__SetMetadataConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetMetadataConfigurationResponse
#define soap_read__ns1__SetMetadataConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetMetadataConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMetadataConfigurationResponse * soap_new__ns1__SetMetadataConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetMetadataConfigurationResponse * soap_new_req__ns1__SetMetadataConfigurationResponse(struct soap *soap) { _ns1__SetMetadataConfigurationResponse *_p = soap_instantiate__ns1__SetMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetMetadataConfigurationResponse * soap_new_set__ns1__SetMetadataConfigurationResponse(struct soap *soap) { _ns1__SetMetadataConfigurationResponse *_p = soap_instantiate__ns1__SetMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetMetadataConfigurationResponse(struct soap *soap, _ns1__SetMetadataConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMetadataConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetMetadataConfiguration
#define SOAP_TYPE__ns1__SetMetadataConfiguration (162)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMetadataConfiguration(struct soap*, const char*, int, const _ns1__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_in__ns1__SetMetadataConfiguration(struct soap*, const char*, _ns1__SetMetadataConfiguration *, const char*);

#ifndef soap_write__ns1__SetMetadataConfiguration
#define soap_write__ns1__SetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_get__ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetMetadataConfiguration
#define soap_read__ns1__SetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMetadataConfiguration * soap_new__ns1__SetMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetMetadataConfiguration * soap_new_req__ns1__SetMetadataConfiguration(struct soap *soap, ns2__MetadataConfiguration *Configuration, bool ForcePersistence) { _ns1__SetMetadataConfiguration *_p = soap_instantiate__ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetMetadataConfiguration::Configuration = Configuration; _p->_ns1__SetMetadataConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetMetadataConfiguration * soap_new_set__ns1__SetMetadataConfiguration(struct soap *soap, ns2__MetadataConfiguration *Configuration, bool ForcePersistence) { _ns1__SetMetadataConfiguration *_p = soap_instantiate__ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetMetadataConfiguration::Configuration = Configuration; _p->_ns1__SetMetadataConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetMetadataConfiguration(struct soap *soap, _ns1__SetMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__ns1__SetVideoAnalyticsConfigurationResponse (161)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _ns1__SetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetVideoAnalyticsConfigurationResponse(struct soap*, const char*, _ns1__SetVideoAnalyticsConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetVideoAnalyticsConfigurationResponse
#define soap_write__ns1__SetVideoAnalyticsConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoAnalyticsConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetVideoAnalyticsConfigurationResponse(struct soap*, _ns1__SetVideoAnalyticsConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoAnalyticsConfigurationResponse
#define soap_read__ns1__SetVideoAnalyticsConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoAnalyticsConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoAnalyticsConfigurationResponse * soap_new__ns1__SetVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoAnalyticsConfigurationResponse * soap_new_req__ns1__SetVideoAnalyticsConfigurationResponse(struct soap *soap) { _ns1__SetVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__SetVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetVideoAnalyticsConfigurationResponse * soap_new_set__ns1__SetVideoAnalyticsConfigurationResponse(struct soap *soap) { _ns1__SetVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__SetVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetVideoAnalyticsConfigurationResponse(struct soap *soap, _ns1__SetVideoAnalyticsConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoAnalyticsConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__ns1__SetVideoAnalyticsConfiguration (160)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoAnalyticsConfiguration(struct soap*, const char*, int, const _ns1__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__ns1__SetVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__SetVideoAnalyticsConfiguration *, const char*);

#ifndef soap_write__ns1__SetVideoAnalyticsConfiguration
#define soap_write__ns1__SetVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__ns1__SetVideoAnalyticsConfiguration(struct soap*, _ns1__SetVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoAnalyticsConfiguration
#define soap_read__ns1__SetVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoAnalyticsConfiguration * soap_new__ns1__SetVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoAnalyticsConfiguration * soap_new_req__ns1__SetVideoAnalyticsConfiguration(struct soap *soap, ns2__VideoAnalyticsConfiguration *Configuration, bool ForcePersistence) { _ns1__SetVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__SetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoAnalyticsConfiguration::Configuration = Configuration; _p->_ns1__SetVideoAnalyticsConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetVideoAnalyticsConfiguration * soap_new_set__ns1__SetVideoAnalyticsConfiguration(struct soap *soap, ns2__VideoAnalyticsConfiguration *Configuration, bool ForcePersistence) { _ns1__SetVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__SetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoAnalyticsConfiguration::Configuration = Configuration; _p->_ns1__SetVideoAnalyticsConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetVideoAnalyticsConfiguration(struct soap *soap, _ns1__SetVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__ns1__SetAudioSourceConfigurationResponse (159)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__SetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetAudioSourceConfigurationResponse(struct soap*, const char*, _ns1__SetAudioSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetAudioSourceConfigurationResponse
#define soap_write__ns1__SetAudioSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetAudioSourceConfigurationResponse(struct soap*, _ns1__SetAudioSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioSourceConfigurationResponse
#define soap_read__ns1__SetAudioSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioSourceConfigurationResponse * soap_new__ns1__SetAudioSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioSourceConfigurationResponse * soap_new_req__ns1__SetAudioSourceConfigurationResponse(struct soap *soap) { _ns1__SetAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__SetAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetAudioSourceConfigurationResponse * soap_new_set__ns1__SetAudioSourceConfigurationResponse(struct soap *soap) { _ns1__SetAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__SetAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetAudioSourceConfigurationResponse(struct soap *soap, _ns1__SetAudioSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioSourceConfiguration
#define SOAP_TYPE__ns1__SetAudioSourceConfiguration (158)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioSourceConfiguration(struct soap*, const char*, int, const _ns1__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioSourceConfiguration(struct soap*, const char*, _ns1__SetAudioSourceConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioSourceConfiguration
#define soap_write__ns1__SetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioSourceConfiguration
#define soap_read__ns1__SetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioSourceConfiguration * soap_new__ns1__SetAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioSourceConfiguration * soap_new_req__ns1__SetAudioSourceConfiguration(struct soap *soap, ns2__AudioSourceConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioSourceConfiguration *_p = soap_instantiate__ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioSourceConfiguration::Configuration = Configuration; _p->_ns1__SetAudioSourceConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetAudioSourceConfiguration * soap_new_set__ns1__SetAudioSourceConfiguration(struct soap *soap, ns2__AudioSourceConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioSourceConfiguration *_p = soap_instantiate__ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioSourceConfiguration::Configuration = Configuration; _p->_ns1__SetAudioSourceConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetAudioSourceConfiguration(struct soap *soap, _ns1__SetAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__ns1__SetAudioEncoderConfigurationResponse (157)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__SetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetAudioEncoderConfigurationResponse(struct soap*, const char*, _ns1__SetAudioEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetAudioEncoderConfigurationResponse
#define soap_write__ns1__SetAudioEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetAudioEncoderConfigurationResponse(struct soap*, _ns1__SetAudioEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioEncoderConfigurationResponse
#define soap_read__ns1__SetAudioEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioEncoderConfigurationResponse * soap_new__ns1__SetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioEncoderConfigurationResponse * soap_new_req__ns1__SetAudioEncoderConfigurationResponse(struct soap *soap) { _ns1__SetAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__SetAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetAudioEncoderConfigurationResponse * soap_new_set__ns1__SetAudioEncoderConfigurationResponse(struct soap *soap) { _ns1__SetAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__SetAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetAudioEncoderConfigurationResponse(struct soap *soap, _ns1__SetAudioEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioEncoderConfiguration
#define SOAP_TYPE__ns1__SetAudioEncoderConfiguration (156)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioEncoderConfiguration(struct soap*, const char*, int, const _ns1__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioEncoderConfiguration(struct soap*, const char*, _ns1__SetAudioEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioEncoderConfiguration
#define soap_write__ns1__SetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioEncoderConfiguration
#define soap_read__ns1__SetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioEncoderConfiguration * soap_new__ns1__SetAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioEncoderConfiguration * soap_new_req__ns1__SetAudioEncoderConfiguration(struct soap *soap, ns2__AudioEncoderConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioEncoderConfiguration *_p = soap_instantiate__ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioEncoderConfiguration::Configuration = Configuration; _p->_ns1__SetAudioEncoderConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetAudioEncoderConfiguration * soap_new_set__ns1__SetAudioEncoderConfiguration(struct soap *soap, ns2__AudioEncoderConfiguration *Configuration, bool ForcePersistence) { _ns1__SetAudioEncoderConfiguration *_p = soap_instantiate__ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioEncoderConfiguration::Configuration = Configuration; _p->_ns1__SetAudioEncoderConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetAudioEncoderConfiguration(struct soap *soap, _ns1__SetAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__ns1__SetVideoSourceConfigurationResponse (155)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__SetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetVideoSourceConfigurationResponse(struct soap*, const char*, _ns1__SetVideoSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetVideoSourceConfigurationResponse
#define soap_write__ns1__SetVideoSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetVideoSourceConfigurationResponse(struct soap*, _ns1__SetVideoSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceConfigurationResponse
#define soap_read__ns1__SetVideoSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceConfigurationResponse * soap_new__ns1__SetVideoSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceConfigurationResponse * soap_new_req__ns1__SetVideoSourceConfigurationResponse(struct soap *soap) { _ns1__SetVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__SetVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetVideoSourceConfigurationResponse * soap_new_set__ns1__SetVideoSourceConfigurationResponse(struct soap *soap) { _ns1__SetVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__SetVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetVideoSourceConfigurationResponse(struct soap *soap, _ns1__SetVideoSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceConfiguration
#define SOAP_TYPE__ns1__SetVideoSourceConfiguration (154)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceConfiguration(struct soap*, const char*, int, const _ns1__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in__ns1__SetVideoSourceConfiguration(struct soap*, const char*, _ns1__SetVideoSourceConfiguration *, const char*);

#ifndef soap_write__ns1__SetVideoSourceConfiguration
#define soap_write__ns1__SetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get__ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceConfiguration
#define soap_read__ns1__SetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceConfiguration * soap_new__ns1__SetVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceConfiguration * soap_new_req__ns1__SetVideoSourceConfiguration(struct soap *soap, ns2__VideoSourceConfiguration *Configuration, bool ForcePersistence) { _ns1__SetVideoSourceConfiguration *_p = soap_instantiate__ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceConfiguration::Configuration = Configuration; _p->_ns1__SetVideoSourceConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetVideoSourceConfiguration * soap_new_set__ns1__SetVideoSourceConfiguration(struct soap *soap, ns2__VideoSourceConfiguration *Configuration, bool ForcePersistence) { _ns1__SetVideoSourceConfiguration *_p = soap_instantiate__ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceConfiguration::Configuration = Configuration; _p->_ns1__SetVideoSourceConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetVideoSourceConfiguration(struct soap *soap, _ns1__SetVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__ns1__SetVideoEncoderConfigurationResponse (153)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__SetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__SetVideoEncoderConfigurationResponse(struct soap*, const char*, _ns1__SetVideoEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__SetVideoEncoderConfigurationResponse
#define soap_write__ns1__SetVideoEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__SetVideoEncoderConfigurationResponse(struct soap*, _ns1__SetVideoEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoEncoderConfigurationResponse
#define soap_read__ns1__SetVideoEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoEncoderConfigurationResponse * soap_new__ns1__SetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoEncoderConfigurationResponse * soap_new_req__ns1__SetVideoEncoderConfigurationResponse(struct soap *soap) { _ns1__SetVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__SetVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetVideoEncoderConfigurationResponse * soap_new_set__ns1__SetVideoEncoderConfigurationResponse(struct soap *soap) { _ns1__SetVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__SetVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetVideoEncoderConfigurationResponse(struct soap *soap, _ns1__SetVideoEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoEncoderConfiguration
#define SOAP_TYPE__ns1__SetVideoEncoderConfiguration (152)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoEncoderConfiguration(struct soap*, const char*, int, const _ns1__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__SetVideoEncoderConfiguration(struct soap*, const char*, _ns1__SetVideoEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__SetVideoEncoderConfiguration
#define soap_write__ns1__SetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoEncoderConfiguration
#define soap_read__ns1__SetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoEncoderConfiguration * soap_new__ns1__SetVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoEncoderConfiguration * soap_new_req__ns1__SetVideoEncoderConfiguration(struct soap *soap, ns2__VideoEncoderConfiguration *Configuration, bool ForcePersistence) { _ns1__SetVideoEncoderConfiguration *_p = soap_instantiate__ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoEncoderConfiguration::Configuration = Configuration; _p->_ns1__SetVideoEncoderConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline _ns1__SetVideoEncoderConfiguration * soap_new_set__ns1__SetVideoEncoderConfiguration(struct soap *soap, ns2__VideoEncoderConfiguration *Configuration, bool ForcePersistence) { _ns1__SetVideoEncoderConfiguration *_p = soap_instantiate__ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoEncoderConfiguration::Configuration = Configuration; _p->_ns1__SetVideoEncoderConfiguration::ForcePersistence = ForcePersistence; } return _p; }

inline void soap_delete__ns1__SetVideoEncoderConfiguration(struct soap *soap, _ns1__SetVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleAudioDecoderConfigurationsResponse (151)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleAudioDecoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioDecoderConfigurationsResponse
#define soap_write__ns1__GetCompatibleAudioDecoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioDecoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, _ns1__GetCompatibleAudioDecoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioDecoderConfigurationsResponse
#define soap_read__ns1__GetCompatibleAudioDecoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioDecoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioDecoderConfigurationsResponse * soap_new__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioDecoderConfigurationsResponse * soap_new_req__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleAudioDecoderConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleAudioDecoderConfigurationsResponse * soap_new_set__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioDecoderConfiguration * >& Configurations) { _ns1__GetCompatibleAudioDecoderConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioDecoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleAudioDecoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__ns1__GetCompatibleAudioDecoderConfigurations (150)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioDecoderConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioDecoderConfigurations
#define soap_write__ns1__GetCompatibleAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, _ns1__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioDecoderConfigurations
#define soap_read__ns1__GetCompatibleAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioDecoderConfigurations * soap_new__ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioDecoderConfigurations * soap_new_req__ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioDecoderConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioDecoderConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleAudioDecoderConfigurations * soap_new_set__ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioDecoderConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioDecoderConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _ns1__GetCompatibleAudioDecoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleAudioOutputConfigurationsResponse (149)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleAudioOutputConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioOutputConfigurationsResponse
#define soap_write__ns1__GetCompatibleAudioOutputConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioOutputConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, _ns1__GetCompatibleAudioOutputConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioOutputConfigurationsResponse
#define soap_read__ns1__GetCompatibleAudioOutputConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioOutputConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioOutputConfigurationsResponse * soap_new__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioOutputConfigurationsResponse * soap_new_req__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleAudioOutputConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioOutputConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleAudioOutputConfigurationsResponse * soap_new_set__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioOutputConfiguration * >& Configurations) { _ns1__GetCompatibleAudioOutputConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioOutputConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioOutputConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleAudioOutputConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__ns1__GetCompatibleAudioOutputConfigurations (148)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioOutputConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioOutputConfigurations
#define soap_write__ns1__GetCompatibleAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioOutputConfigurations(struct soap*, _ns1__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioOutputConfigurations
#define soap_read__ns1__GetCompatibleAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioOutputConfigurations * soap_new__ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioOutputConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioOutputConfigurations * soap_new_req__ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioOutputConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioOutputConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleAudioOutputConfigurations * soap_new_set__ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioOutputConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioOutputConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, _ns1__GetCompatibleAudioOutputConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioOutputConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleMetadataConfigurationsResponse (147)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleMetadataConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleMetadataConfigurationsResponse
#define soap_write__ns1__GetCompatibleMetadataConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleMetadataConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap*, _ns1__GetCompatibleMetadataConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleMetadataConfigurationsResponse
#define soap_read__ns1__GetCompatibleMetadataConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleMetadataConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleMetadataConfigurationsResponse * soap_new__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleMetadataConfigurationsResponse * soap_new_req__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleMetadataConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleMetadataConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleMetadataConfigurationsResponse * soap_new_set__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, const std::vector<ns2__MetadataConfiguration * >& Configurations) { _ns1__GetCompatibleMetadataConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleMetadataConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleMetadataConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleMetadataConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleMetadataConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__ns1__GetCompatibleMetadataConfigurations (146)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleMetadataConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleMetadataConfigurations(struct soap*, const char*, _ns1__GetCompatibleMetadataConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleMetadataConfigurations
#define soap_write__ns1__GetCompatibleMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleMetadataConfigurations(struct soap*, _ns1__GetCompatibleMetadataConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleMetadataConfigurations
#define soap_read__ns1__GetCompatibleMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleMetadataConfigurations * soap_new__ns1__GetCompatibleMetadataConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleMetadataConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleMetadataConfigurations * soap_new_req__ns1__GetCompatibleMetadataConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleMetadataConfigurations *_p = soap_instantiate__ns1__GetCompatibleMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleMetadataConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleMetadataConfigurations * soap_new_set__ns1__GetCompatibleMetadataConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleMetadataConfigurations *_p = soap_instantiate__ns1__GetCompatibleMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleMetadataConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleMetadataConfigurations(struct soap *soap, _ns1__GetCompatibleMetadataConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleMetadataConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse (145)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse
#define soap_write__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleVideoAnalyticsConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse
#define soap_read__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new_req__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new_set__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, const std::vector<ns2__VideoAnalyticsConfiguration * >& Configurations) { _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoAnalyticsConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleVideoAnalyticsConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__ns1__GetCompatibleVideoAnalyticsConfigurations (144)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, _ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleVideoAnalyticsConfigurations
#define soap_write__ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleVideoAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleVideoAnalyticsConfigurations
#define soap_read__ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleVideoAnalyticsConfigurations * soap_new__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleVideoAnalyticsConfigurations * soap_new_req__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleVideoAnalyticsConfigurations *_p = soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoAnalyticsConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleVideoAnalyticsConfigurations * soap_new_set__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleVideoAnalyticsConfigurations *_p = soap_instantiate__ns1__GetCompatibleVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoAnalyticsConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _ns1__GetCompatibleVideoAnalyticsConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleAudioSourceConfigurationsResponse (143)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleAudioSourceConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioSourceConfigurationsResponse
#define soap_write__ns1__GetCompatibleAudioSourceConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioSourceConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, _ns1__GetCompatibleAudioSourceConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioSourceConfigurationsResponse
#define soap_read__ns1__GetCompatibleAudioSourceConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioSourceConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioSourceConfigurationsResponse * soap_new__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioSourceConfigurationsResponse * soap_new_req__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleAudioSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleAudioSourceConfigurationsResponse * soap_new_set__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioSourceConfiguration * >& Configurations) { _ns1__GetCompatibleAudioSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioSourceConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleAudioSourceConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__ns1__GetCompatibleAudioSourceConfigurations (142)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioSourceConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioSourceConfigurations
#define soap_write__ns1__GetCompatibleAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioSourceConfigurations(struct soap*, _ns1__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioSourceConfigurations
#define soap_read__ns1__GetCompatibleAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioSourceConfigurations * soap_new__ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioSourceConfigurations * soap_new_req__ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioSourceConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioSourceConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleAudioSourceConfigurations * soap_new_set__ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioSourceConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioSourceConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, _ns1__GetCompatibleAudioSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleAudioEncoderConfigurationsResponse (141)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleAudioEncoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioEncoderConfigurationsResponse
#define soap_write__ns1__GetCompatibleAudioEncoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioEncoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, _ns1__GetCompatibleAudioEncoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioEncoderConfigurationsResponse
#define soap_read__ns1__GetCompatibleAudioEncoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioEncoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioEncoderConfigurationsResponse * soap_new__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioEncoderConfigurationsResponse * soap_new_req__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleAudioEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleAudioEncoderConfigurationsResponse * soap_new_set__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioEncoderConfiguration * >& Configurations) { _ns1__GetCompatibleAudioEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioEncoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleAudioEncoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__ns1__GetCompatibleAudioEncoderConfigurations (140)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioEncoderConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleAudioEncoderConfigurations
#define soap_write__ns1__GetCompatibleAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, _ns1__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleAudioEncoderConfigurations
#define soap_read__ns1__GetCompatibleAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleAudioEncoderConfigurations * soap_new__ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleAudioEncoderConfigurations * soap_new_req__ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioEncoderConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioEncoderConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleAudioEncoderConfigurations * soap_new_set__ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleAudioEncoderConfigurations *_p = soap_instantiate__ns1__GetCompatibleAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleAudioEncoderConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _ns1__GetCompatibleAudioEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleVideoSourceConfigurationsResponse (139)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleVideoSourceConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleVideoSourceConfigurationsResponse
#define soap_write__ns1__GetCompatibleVideoSourceConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleVideoSourceConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, _ns1__GetCompatibleVideoSourceConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleVideoSourceConfigurationsResponse
#define soap_read__ns1__GetCompatibleVideoSourceConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleVideoSourceConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleVideoSourceConfigurationsResponse * soap_new__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleVideoSourceConfigurationsResponse * soap_new_req__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleVideoSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleVideoSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleVideoSourceConfigurationsResponse * soap_new_set__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, const std::vector<ns2__VideoSourceConfiguration * >& Configurations) { _ns1__GetCompatibleVideoSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleVideoSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoSourceConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleVideoSourceConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__ns1__GetCompatibleVideoSourceConfigurations (138)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, _ns1__GetCompatibleVideoSourceConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleVideoSourceConfigurations
#define soap_write__ns1__GetCompatibleVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleVideoSourceConfigurations(struct soap*, _ns1__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleVideoSourceConfigurations
#define soap_read__ns1__GetCompatibleVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleVideoSourceConfigurations * soap_new__ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleVideoSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleVideoSourceConfigurations * soap_new_req__ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleVideoSourceConfigurations *_p = soap_instantiate__ns1__GetCompatibleVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoSourceConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleVideoSourceConfigurations * soap_new_set__ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleVideoSourceConfigurations *_p = soap_instantiate__ns1__GetCompatibleVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoSourceConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, _ns1__GetCompatibleVideoSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleVideoSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetCompatibleVideoEncoderConfigurationsResponse (137)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetCompatibleVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, const char*, _ns1__GetCompatibleVideoEncoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetCompatibleVideoEncoderConfigurationsResponse
#define soap_write__ns1__GetCompatibleVideoEncoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleVideoEncoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, _ns1__GetCompatibleVideoEncoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleVideoEncoderConfigurationsResponse
#define soap_read__ns1__GetCompatibleVideoEncoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleVideoEncoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleVideoEncoderConfigurationsResponse * soap_new__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleVideoEncoderConfigurationsResponse * soap_new_req__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap) { _ns1__GetCompatibleVideoEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetCompatibleVideoEncoderConfigurationsResponse * soap_new_set__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, const std::vector<ns2__VideoEncoderConfiguration * >& Configurations) { _ns1__GetCompatibleVideoEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoEncoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, _ns1__GetCompatibleVideoEncoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__ns1__GetCompatibleVideoEncoderConfigurations (136)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, int, const _ns1__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_in__ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, _ns1__GetCompatibleVideoEncoderConfigurations *, const char*);

#ifndef soap_write__ns1__GetCompatibleVideoEncoderConfigurations
#define soap_write__ns1__GetCompatibleVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetCompatibleVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_get__ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, _ns1__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetCompatibleVideoEncoderConfigurations
#define soap_read__ns1__GetCompatibleVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetCompatibleVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCompatibleVideoEncoderConfigurations * soap_new__ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetCompatibleVideoEncoderConfigurations * soap_new_req__ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleVideoEncoderConfigurations *_p = soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoEncoderConfigurations::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetCompatibleVideoEncoderConfigurations * soap_new_set__ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const std::string& ProfileToken) { _ns1__GetCompatibleVideoEncoderConfigurations *_p = soap_instantiate__ns1__GetCompatibleVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetCompatibleVideoEncoderConfigurations::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _ns1__GetCompatibleVideoEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurationResponse (135)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurationResponse(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurationResponse
#define soap_write__ns1__GetAudioDecoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurationResponse(struct soap*, _ns1__GetAudioDecoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurationResponse
#define soap_read__ns1__GetAudioDecoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurationResponse * soap_new__ns1__GetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurationResponse * soap_new_req__ns1__GetAudioDecoderConfigurationResponse(struct soap *soap, ns2__AudioDecoderConfiguration *Configuration) { _ns1__GetAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetAudioDecoderConfigurationResponse * soap_new_set__ns1__GetAudioDecoderConfigurationResponse(struct soap *soap, ns2__AudioDecoderConfiguration *Configuration) { _ns1__GetAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurationResponse(struct soap *soap, _ns1__GetAudioDecoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfiguration
#define SOAP_TYPE__ns1__GetAudioDecoderConfiguration (134)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfiguration(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfiguration(struct soap*, const char*, _ns1__GetAudioDecoderConfiguration *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfiguration
#define soap_write__ns1__GetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfiguration(struct soap*, _ns1__GetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfiguration
#define soap_read__ns1__GetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfiguration * soap_new__ns1__GetAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfiguration * soap_new_req__ns1__GetAudioDecoderConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioDecoderConfiguration *_p = soap_instantiate__ns1__GetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetAudioDecoderConfiguration * soap_new_set__ns1__GetAudioDecoderConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioDecoderConfiguration *_p = soap_instantiate__ns1__GetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfiguration(struct soap *soap, _ns1__GetAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__ns1__GetAudioOutputConfigurationResponse (133)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurationResponse(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurationResponse(struct soap*, const char*, _ns1__GetAudioOutputConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurationResponse
#define soap_write__ns1__GetAudioOutputConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurationResponse(struct soap*, _ns1__GetAudioOutputConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurationResponse
#define soap_read__ns1__GetAudioOutputConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurationResponse * soap_new__ns1__GetAudioOutputConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurationResponse * soap_new_req__ns1__GetAudioOutputConfigurationResponse(struct soap *soap, ns2__AudioOutputConfiguration *Configuration) { _ns1__GetAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetAudioOutputConfigurationResponse * soap_new_set__ns1__GetAudioOutputConfigurationResponse(struct soap *soap, ns2__AudioOutputConfiguration *Configuration) { _ns1__GetAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurationResponse(struct soap *soap, _ns1__GetAudioOutputConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfiguration
#define SOAP_TYPE__ns1__GetAudioOutputConfiguration (132)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfiguration(struct soap*, const char*, int, const _ns1__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfiguration * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfiguration(struct soap*, const char*, _ns1__GetAudioOutputConfiguration *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfiguration
#define soap_write__ns1__GetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfiguration * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfiguration(struct soap*, _ns1__GetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfiguration
#define soap_read__ns1__GetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfiguration * soap_new__ns1__GetAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfiguration * soap_new_req__ns1__GetAudioOutputConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioOutputConfiguration *_p = soap_instantiate__ns1__GetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetAudioOutputConfiguration * soap_new_set__ns1__GetAudioOutputConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioOutputConfiguration *_p = soap_instantiate__ns1__GetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfiguration(struct soap *soap, _ns1__GetAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurationResponse
#define SOAP_TYPE__ns1__GetMetadataConfigurationResponse (131)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurationResponse(struct soap*, const char*, int, const _ns1__GetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurationResponse(struct soap*, const char*, _ns1__GetMetadataConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurationResponse
#define soap_write__ns1__GetMetadataConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurationResponse(struct soap*, _ns1__GetMetadataConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurationResponse
#define soap_read__ns1__GetMetadataConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurationResponse * soap_new__ns1__GetMetadataConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurationResponse * soap_new_req__ns1__GetMetadataConfigurationResponse(struct soap *soap, ns2__MetadataConfiguration *Configuration) { _ns1__GetMetadataConfigurationResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetMetadataConfigurationResponse * soap_new_set__ns1__GetMetadataConfigurationResponse(struct soap *soap, ns2__MetadataConfiguration *Configuration) { _ns1__GetMetadataConfigurationResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurationResponse(struct soap *soap, _ns1__GetMetadataConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfiguration
#define SOAP_TYPE__ns1__GetMetadataConfiguration (130)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfiguration(struct soap*, const char*, int, const _ns1__GetMetadataConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfiguration * SOAP_FMAC4 soap_in__ns1__GetMetadataConfiguration(struct soap*, const char*, _ns1__GetMetadataConfiguration *, const char*);

#ifndef soap_write__ns1__GetMetadataConfiguration
#define soap_write__ns1__GetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfiguration * SOAP_FMAC4 soap_get__ns1__GetMetadataConfiguration(struct soap*, _ns1__GetMetadataConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfiguration
#define soap_read__ns1__GetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfiguration * soap_new__ns1__GetMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfiguration * soap_new_req__ns1__GetMetadataConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetMetadataConfiguration *_p = soap_instantiate__ns1__GetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetMetadataConfiguration * soap_new_set__ns1__GetMetadataConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetMetadataConfiguration *_p = soap_instantiate__ns1__GetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetMetadataConfiguration(struct soap *soap, _ns1__GetMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__ns1__GetVideoAnalyticsConfigurationResponse (129)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _ns1__GetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetVideoAnalyticsConfigurationResponse(struct soap*, const char*, _ns1__GetVideoAnalyticsConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetVideoAnalyticsConfigurationResponse
#define soap_write__ns1__GetVideoAnalyticsConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoAnalyticsConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetVideoAnalyticsConfigurationResponse(struct soap*, _ns1__GetVideoAnalyticsConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoAnalyticsConfigurationResponse
#define soap_read__ns1__GetVideoAnalyticsConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoAnalyticsConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoAnalyticsConfigurationResponse * soap_new__ns1__GetVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoAnalyticsConfigurationResponse * soap_new_req__ns1__GetVideoAnalyticsConfigurationResponse(struct soap *soap, ns2__VideoAnalyticsConfiguration *Configuration) { _ns1__GetVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__GetVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoAnalyticsConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetVideoAnalyticsConfigurationResponse * soap_new_set__ns1__GetVideoAnalyticsConfigurationResponse(struct soap *soap, ns2__VideoAnalyticsConfiguration *Configuration) { _ns1__GetVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__GetVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoAnalyticsConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetVideoAnalyticsConfigurationResponse(struct soap *soap, _ns1__GetVideoAnalyticsConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoAnalyticsConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__ns1__GetVideoAnalyticsConfiguration (128)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoAnalyticsConfiguration(struct soap*, const char*, int, const _ns1__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__ns1__GetVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__GetVideoAnalyticsConfiguration *, const char*);

#ifndef soap_write__ns1__GetVideoAnalyticsConfiguration
#define soap_write__ns1__GetVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__ns1__GetVideoAnalyticsConfiguration(struct soap*, _ns1__GetVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoAnalyticsConfiguration
#define soap_read__ns1__GetVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoAnalyticsConfiguration * soap_new__ns1__GetVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoAnalyticsConfiguration * soap_new_req__ns1__GetVideoAnalyticsConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__GetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetVideoAnalyticsConfiguration * soap_new_set__ns1__GetVideoAnalyticsConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__GetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetVideoAnalyticsConfiguration(struct soap *soap, _ns1__GetVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurationResponse (127)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurationResponse(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurationResponse
#define soap_write__ns1__GetAudioEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurationResponse(struct soap*, _ns1__GetAudioEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurationResponse
#define soap_read__ns1__GetAudioEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurationResponse * soap_new__ns1__GetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurationResponse * soap_new_req__ns1__GetAudioEncoderConfigurationResponse(struct soap *soap, ns2__AudioEncoderConfiguration *Configuration) { _ns1__GetAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetAudioEncoderConfigurationResponse * soap_new_set__ns1__GetAudioEncoderConfigurationResponse(struct soap *soap, ns2__AudioEncoderConfiguration *Configuration) { _ns1__GetAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurationResponse(struct soap *soap, _ns1__GetAudioEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfiguration
#define SOAP_TYPE__ns1__GetAudioEncoderConfiguration (126)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfiguration(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfiguration(struct soap*, const char*, _ns1__GetAudioEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfiguration
#define soap_write__ns1__GetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfiguration(struct soap*, _ns1__GetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfiguration
#define soap_read__ns1__GetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfiguration * soap_new__ns1__GetAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfiguration * soap_new_req__ns1__GetAudioEncoderConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioEncoderConfiguration *_p = soap_instantiate__ns1__GetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetAudioEncoderConfiguration * soap_new_set__ns1__GetAudioEncoderConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioEncoderConfiguration *_p = soap_instantiate__ns1__GetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfiguration(struct soap *soap, _ns1__GetAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__ns1__GetAudioSourceConfigurationResponse (125)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurationResponse(struct soap*, const char*, _ns1__GetAudioSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurationResponse
#define soap_write__ns1__GetAudioSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurationResponse(struct soap*, _ns1__GetAudioSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurationResponse
#define soap_read__ns1__GetAudioSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurationResponse * soap_new__ns1__GetAudioSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurationResponse * soap_new_req__ns1__GetAudioSourceConfigurationResponse(struct soap *soap, ns2__AudioSourceConfiguration *Configuration) { _ns1__GetAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetAudioSourceConfigurationResponse * soap_new_set__ns1__GetAudioSourceConfigurationResponse(struct soap *soap, ns2__AudioSourceConfiguration *Configuration) { _ns1__GetAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurationResponse(struct soap *soap, _ns1__GetAudioSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfiguration
#define SOAP_TYPE__ns1__GetAudioSourceConfiguration (124)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfiguration(struct soap*, const char*, int, const _ns1__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfiguration * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfiguration(struct soap*, const char*, _ns1__GetAudioSourceConfiguration *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfiguration
#define soap_write__ns1__GetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfiguration * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfiguration(struct soap*, _ns1__GetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfiguration
#define soap_read__ns1__GetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfiguration * soap_new__ns1__GetAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfiguration * soap_new_req__ns1__GetAudioSourceConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioSourceConfiguration *_p = soap_instantiate__ns1__GetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetAudioSourceConfiguration * soap_new_set__ns1__GetAudioSourceConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetAudioSourceConfiguration *_p = soap_instantiate__ns1__GetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfiguration(struct soap *soap, _ns1__GetAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurationResponse (123)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurationResponse(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurationResponse
#define soap_write__ns1__GetVideoEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurationResponse(struct soap*, _ns1__GetVideoEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurationResponse
#define soap_read__ns1__GetVideoEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurationResponse * soap_new__ns1__GetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurationResponse * soap_new_req__ns1__GetVideoEncoderConfigurationResponse(struct soap *soap, ns2__VideoEncoderConfiguration *Configuration) { _ns1__GetVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetVideoEncoderConfigurationResponse * soap_new_set__ns1__GetVideoEncoderConfigurationResponse(struct soap *soap, ns2__VideoEncoderConfiguration *Configuration) { _ns1__GetVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurationResponse(struct soap *soap, _ns1__GetVideoEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfiguration
#define SOAP_TYPE__ns1__GetVideoEncoderConfiguration (122)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfiguration(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfiguration(struct soap*, const char*, _ns1__GetVideoEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfiguration
#define soap_write__ns1__GetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfiguration(struct soap*, _ns1__GetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfiguration
#define soap_read__ns1__GetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfiguration * soap_new__ns1__GetVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfiguration * soap_new_req__ns1__GetVideoEncoderConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetVideoEncoderConfiguration *_p = soap_instantiate__ns1__GetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetVideoEncoderConfiguration * soap_new_set__ns1__GetVideoEncoderConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetVideoEncoderConfiguration *_p = soap_instantiate__ns1__GetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfiguration(struct soap *soap, _ns1__GetVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__ns1__GetVideoSourceConfigurationResponse (121)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurationResponse(struct soap*, const char*, _ns1__GetVideoSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurationResponse
#define soap_write__ns1__GetVideoSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurationResponse(struct soap*, _ns1__GetVideoSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurationResponse
#define soap_read__ns1__GetVideoSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurationResponse * soap_new__ns1__GetVideoSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurationResponse * soap_new_req__ns1__GetVideoSourceConfigurationResponse(struct soap *soap, ns2__VideoSourceConfiguration *Configuration) { _ns1__GetVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationResponse::Configuration = Configuration; } return _p; }

inline _ns1__GetVideoSourceConfigurationResponse * soap_new_set__ns1__GetVideoSourceConfigurationResponse(struct soap *soap, ns2__VideoSourceConfiguration *Configuration) { _ns1__GetVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationResponse::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurationResponse(struct soap *soap, _ns1__GetVideoSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfiguration
#define SOAP_TYPE__ns1__GetVideoSourceConfiguration (120)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfiguration(struct soap*, const char*, int, const _ns1__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfiguration * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfiguration(struct soap*, const char*, _ns1__GetVideoSourceConfiguration *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfiguration
#define soap_write__ns1__GetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfiguration * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfiguration(struct soap*, _ns1__GetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfiguration
#define soap_read__ns1__GetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfiguration * soap_new__ns1__GetVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfiguration * soap_new_req__ns1__GetVideoSourceConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetVideoSourceConfiguration *_p = soap_instantiate__ns1__GetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetVideoSourceConfiguration * soap_new_set__ns1__GetVideoSourceConfiguration(struct soap *soap, const std::string& ConfigurationToken) { _ns1__GetVideoSourceConfiguration *_p = soap_instantiate__ns1__GetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfiguration(struct soap *soap, _ns1__GetVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurationsResponse (119)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurationsResponse
#define soap_write__ns1__GetAudioDecoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, _ns1__GetAudioDecoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurationsResponse
#define soap_read__ns1__GetAudioDecoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurationsResponse * soap_new__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurationsResponse * soap_new_req__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap) { _ns1__GetAudioDecoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioDecoderConfigurationsResponse * soap_new_set__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioDecoderConfiguration * >& Configurations) { _ns1__GetAudioDecoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap, _ns1__GetAudioDecoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurations
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurations (118)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurations(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurations(struct soap*, const char*, _ns1__GetAudioDecoderConfigurations *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurations
#define soap_write__ns1__GetAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurations(struct soap*, _ns1__GetAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurations
#define soap_read__ns1__GetAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurations * soap_new__ns1__GetAudioDecoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurations * soap_new_req__ns1__GetAudioDecoderConfigurations(struct soap *soap) { _ns1__GetAudioDecoderConfigurations *_p = soap_instantiate__ns1__GetAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioDecoderConfigurations * soap_new_set__ns1__GetAudioDecoderConfigurations(struct soap *soap) { _ns1__GetAudioDecoderConfigurations *_p = soap_instantiate__ns1__GetAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurations(struct soap *soap, _ns1__GetAudioDecoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioOutputConfigurationsResponse (117)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioOutputConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurationsResponse
#define soap_write__ns1__GetAudioOutputConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurationsResponse(struct soap*, _ns1__GetAudioOutputConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurationsResponse
#define soap_read__ns1__GetAudioOutputConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurationsResponse * soap_new__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurationsResponse * soap_new_req__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap) { _ns1__GetAudioOutputConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioOutputConfigurationsResponse * soap_new_set__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioOutputConfiguration * >& Configurations) { _ns1__GetAudioOutputConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap, _ns1__GetAudioOutputConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurations
#define SOAP_TYPE__ns1__GetAudioOutputConfigurations (116)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurations(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurations(struct soap*, const char*, _ns1__GetAudioOutputConfigurations *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurations
#define soap_write__ns1__GetAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurations(struct soap*, _ns1__GetAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurations
#define soap_read__ns1__GetAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurations * soap_new__ns1__GetAudioOutputConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurations * soap_new_req__ns1__GetAudioOutputConfigurations(struct soap *soap) { _ns1__GetAudioOutputConfigurations *_p = soap_instantiate__ns1__GetAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioOutputConfigurations * soap_new_set__ns1__GetAudioOutputConfigurations(struct soap *soap) { _ns1__GetAudioOutputConfigurations *_p = soap_instantiate__ns1__GetAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurations(struct soap *soap, _ns1__GetAudioOutputConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurationsResponse
#define SOAP_TYPE__ns1__GetMetadataConfigurationsResponse (115)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurationsResponse(struct soap*, const char*, _ns1__GetMetadataConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurationsResponse
#define soap_write__ns1__GetMetadataConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurationsResponse(struct soap*, _ns1__GetMetadataConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurationsResponse
#define soap_read__ns1__GetMetadataConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurationsResponse * soap_new__ns1__GetMetadataConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurationsResponse * soap_new_req__ns1__GetMetadataConfigurationsResponse(struct soap *soap) { _ns1__GetMetadataConfigurationsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetMetadataConfigurationsResponse * soap_new_set__ns1__GetMetadataConfigurationsResponse(struct soap *soap, const std::vector<ns2__MetadataConfiguration * >& Configurations) { _ns1__GetMetadataConfigurationsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurationsResponse(struct soap *soap, _ns1__GetMetadataConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurations
#define SOAP_TYPE__ns1__GetMetadataConfigurations (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurations(struct soap*, const char*, int, const _ns1__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurations * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurations(struct soap*, const char*, _ns1__GetMetadataConfigurations *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurations
#define soap_write__ns1__GetMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurations * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurations(struct soap*, _ns1__GetMetadataConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurations
#define soap_read__ns1__GetMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurations * soap_new__ns1__GetMetadataConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurations * soap_new_req__ns1__GetMetadataConfigurations(struct soap *soap) { _ns1__GetMetadataConfigurations *_p = soap_instantiate__ns1__GetMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetMetadataConfigurations * soap_new_set__ns1__GetMetadataConfigurations(struct soap *soap) { _ns1__GetMetadataConfigurations *_p = soap_instantiate__ns1__GetMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurations(struct soap *soap, _ns1__GetMetadataConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__ns1__GetVideoAnalyticsConfigurationsResponse (113)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap*, const char*, _ns1__GetVideoAnalyticsConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoAnalyticsConfigurationsResponse
#define soap_write__ns1__GetVideoAnalyticsConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoAnalyticsConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap*, _ns1__GetVideoAnalyticsConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoAnalyticsConfigurationsResponse
#define soap_read__ns1__GetVideoAnalyticsConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoAnalyticsConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoAnalyticsConfigurationsResponse * soap_new__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoAnalyticsConfigurationsResponse * soap_new_req__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap *soap) { _ns1__GetVideoAnalyticsConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoAnalyticsConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoAnalyticsConfigurationsResponse * soap_new_set__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, const std::vector<ns2__VideoAnalyticsConfiguration * >& Configurations) { _ns1__GetVideoAnalyticsConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoAnalyticsConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoAnalyticsConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, _ns1__GetVideoAnalyticsConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoAnalyticsConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__ns1__GetVideoAnalyticsConfigurations (112)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoAnalyticsConfigurations(struct soap*, const char*, int, const _ns1__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in__ns1__GetVideoAnalyticsConfigurations(struct soap*, const char*, _ns1__GetVideoAnalyticsConfigurations *, const char*);

#ifndef soap_write__ns1__GetVideoAnalyticsConfigurations
#define soap_write__ns1__GetVideoAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get__ns1__GetVideoAnalyticsConfigurations(struct soap*, _ns1__GetVideoAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoAnalyticsConfigurations
#define soap_read__ns1__GetVideoAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoAnalyticsConfigurations * soap_new__ns1__GetVideoAnalyticsConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoAnalyticsConfigurations * soap_new_req__ns1__GetVideoAnalyticsConfigurations(struct soap *soap) { _ns1__GetVideoAnalyticsConfigurations *_p = soap_instantiate__ns1__GetVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoAnalyticsConfigurations * soap_new_set__ns1__GetVideoAnalyticsConfigurations(struct soap *soap) { _ns1__GetVideoAnalyticsConfigurations *_p = soap_instantiate__ns1__GetVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetVideoAnalyticsConfigurations(struct soap *soap, _ns1__GetVideoAnalyticsConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoAnalyticsConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioSourceConfigurationsResponse (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioSourceConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurationsResponse
#define soap_write__ns1__GetAudioSourceConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurationsResponse(struct soap*, _ns1__GetAudioSourceConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurationsResponse
#define soap_read__ns1__GetAudioSourceConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurationsResponse * soap_new__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurationsResponse * soap_new_req__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap) { _ns1__GetAudioSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioSourceConfigurationsResponse * soap_new_set__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioSourceConfiguration * >& Configurations) { _ns1__GetAudioSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap, _ns1__GetAudioSourceConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurations
#define SOAP_TYPE__ns1__GetAudioSourceConfigurations (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurations(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurations(struct soap*, const char*, _ns1__GetAudioSourceConfigurations *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurations
#define soap_write__ns1__GetAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurations(struct soap*, _ns1__GetAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurations
#define soap_read__ns1__GetAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurations * soap_new__ns1__GetAudioSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurations * soap_new_req__ns1__GetAudioSourceConfigurations(struct soap *soap) { _ns1__GetAudioSourceConfigurations *_p = soap_instantiate__ns1__GetAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioSourceConfigurations * soap_new_set__ns1__GetAudioSourceConfigurations(struct soap *soap) { _ns1__GetAudioSourceConfigurations *_p = soap_instantiate__ns1__GetAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurations(struct soap *soap, _ns1__GetAudioSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurationsResponse (109)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurationsResponse
#define soap_write__ns1__GetAudioEncoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, _ns1__GetAudioEncoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurationsResponse
#define soap_read__ns1__GetAudioEncoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurationsResponse * soap_new__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurationsResponse * soap_new_req__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap) { _ns1__GetAudioEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioEncoderConfigurationsResponse * soap_new_set__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap, const std::vector<ns2__AudioEncoderConfiguration * >& Configurations) { _ns1__GetAudioEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap, _ns1__GetAudioEncoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurations
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurations (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurations(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurations(struct soap*, const char*, _ns1__GetAudioEncoderConfigurations *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurations
#define soap_write__ns1__GetAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurations(struct soap*, _ns1__GetAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurations
#define soap_read__ns1__GetAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurations * soap_new__ns1__GetAudioEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurations * soap_new_req__ns1__GetAudioEncoderConfigurations(struct soap *soap) { _ns1__GetAudioEncoderConfigurations *_p = soap_instantiate__ns1__GetAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioEncoderConfigurations * soap_new_set__ns1__GetAudioEncoderConfigurations(struct soap *soap) { _ns1__GetAudioEncoderConfigurations *_p = soap_instantiate__ns1__GetAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurations(struct soap *soap, _ns1__GetAudioEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__ns1__GetVideoSourceConfigurationsResponse (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurationsResponse(struct soap*, const char*, _ns1__GetVideoSourceConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurationsResponse
#define soap_write__ns1__GetVideoSourceConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurationsResponse(struct soap*, _ns1__GetVideoSourceConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurationsResponse
#define soap_read__ns1__GetVideoSourceConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurationsResponse * soap_new__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurationsResponse * soap_new_req__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap) { _ns1__GetVideoSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoSourceConfigurationsResponse * soap_new_set__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap, const std::vector<ns2__VideoSourceConfiguration * >& Configurations) { _ns1__GetVideoSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap, _ns1__GetVideoSourceConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurations
#define SOAP_TYPE__ns1__GetVideoSourceConfigurations (106)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurations(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurations(struct soap*, const char*, _ns1__GetVideoSourceConfigurations *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurations
#define soap_write__ns1__GetVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurations(struct soap*, _ns1__GetVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurations
#define soap_read__ns1__GetVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurations * soap_new__ns1__GetVideoSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurations * soap_new_req__ns1__GetVideoSourceConfigurations(struct soap *soap) { _ns1__GetVideoSourceConfigurations *_p = soap_instantiate__ns1__GetVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoSourceConfigurations * soap_new_set__ns1__GetVideoSourceConfigurations(struct soap *soap) { _ns1__GetVideoSourceConfigurations *_p = soap_instantiate__ns1__GetVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurations(struct soap *soap, _ns1__GetVideoSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurationsResponse (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurationsResponse
#define soap_write__ns1__GetVideoEncoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, _ns1__GetVideoEncoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurationsResponse
#define soap_read__ns1__GetVideoEncoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurationsResponse * soap_new__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurationsResponse * soap_new_req__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap) { _ns1__GetVideoEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoEncoderConfigurationsResponse * soap_new_set__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap, const std::vector<ns2__VideoEncoderConfiguration * >& Configurations) { _ns1__GetVideoEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap, _ns1__GetVideoEncoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurations
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurations (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurations(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurations(struct soap*, const char*, _ns1__GetVideoEncoderConfigurations *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurations
#define soap_write__ns1__GetVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurations(struct soap*, _ns1__GetVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurations
#define soap_read__ns1__GetVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurations * soap_new__ns1__GetVideoEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurations * soap_new_req__ns1__GetVideoEncoderConfigurations(struct soap *soap) { _ns1__GetVideoEncoderConfigurations *_p = soap_instantiate__ns1__GetVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoEncoderConfigurations * soap_new_set__ns1__GetVideoEncoderConfigurations(struct soap *soap) { _ns1__GetVideoEncoderConfigurations *_p = soap_instantiate__ns1__GetVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurations(struct soap *soap, _ns1__GetVideoEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteProfileResponse
#define SOAP_TYPE__ns1__DeleteProfileResponse (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteProfileResponse(struct soap*, const char*, int, const _ns1__DeleteProfileResponse *, const char*);
SOAP_FMAC3 _ns1__DeleteProfileResponse * SOAP_FMAC4 soap_in__ns1__DeleteProfileResponse(struct soap*, const char*, _ns1__DeleteProfileResponse *, const char*);

#ifndef soap_write__ns1__DeleteProfileResponse
#define soap_write__ns1__DeleteProfileResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteProfileResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteProfileResponse * SOAP_FMAC4 soap_get__ns1__DeleteProfileResponse(struct soap*, _ns1__DeleteProfileResponse *, const char*, const char*);

#ifndef soap_read__ns1__DeleteProfileResponse
#define soap_read__ns1__DeleteProfileResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteProfileResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteProfileResponse * soap_new__ns1__DeleteProfileResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteProfileResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteProfileResponse * soap_new_req__ns1__DeleteProfileResponse(struct soap *soap) { _ns1__DeleteProfileResponse *_p = soap_instantiate__ns1__DeleteProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__DeleteProfileResponse * soap_new_set__ns1__DeleteProfileResponse(struct soap *soap) { _ns1__DeleteProfileResponse *_p = soap_instantiate__ns1__DeleteProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__DeleteProfileResponse(struct soap *soap, _ns1__DeleteProfileResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteProfileResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteProfile
#define SOAP_TYPE__ns1__DeleteProfile (102)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteProfile(struct soap*, const char*, int, const _ns1__DeleteProfile *, const char*);
SOAP_FMAC3 _ns1__DeleteProfile * SOAP_FMAC4 soap_in__ns1__DeleteProfile(struct soap*, const char*, _ns1__DeleteProfile *, const char*);

#ifndef soap_write__ns1__DeleteProfile
#define soap_write__ns1__DeleteProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteProfile * SOAP_FMAC4 soap_get__ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile *, const char*, const char*);

#ifndef soap_read__ns1__DeleteProfile
#define soap_read__ns1__DeleteProfile(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteProfile * SOAP_FMAC2 soap_instantiate__ns1__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteProfile * soap_new__ns1__DeleteProfile(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteProfile(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteProfile * soap_new_req__ns1__DeleteProfile(struct soap *soap, const std::string& ProfileToken) { _ns1__DeleteProfile *_p = soap_instantiate__ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteProfile::ProfileToken = ProfileToken; } return _p; }

inline _ns1__DeleteProfile * soap_new_set__ns1__DeleteProfile(struct soap *soap, const std::string& ProfileToken) { _ns1__DeleteProfile *_p = soap_instantiate__ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteProfile::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__DeleteProfile(struct soap *soap, _ns1__DeleteProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__ns1__RemoveAudioDecoderConfigurationResponse (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveAudioDecoderConfigurationResponse(struct soap*, const char*, _ns1__RemoveAudioDecoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveAudioDecoderConfigurationResponse
#define soap_write__ns1__RemoveAudioDecoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioDecoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveAudioDecoderConfigurationResponse(struct soap*, _ns1__RemoveAudioDecoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioDecoderConfigurationResponse
#define soap_read__ns1__RemoveAudioDecoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioDecoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioDecoderConfigurationResponse * soap_new__ns1__RemoveAudioDecoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioDecoderConfigurationResponse * soap_new_req__ns1__RemoveAudioDecoderConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveAudioDecoderConfigurationResponse * soap_new_set__ns1__RemoveAudioDecoderConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveAudioDecoderConfigurationResponse(struct soap *soap, _ns1__RemoveAudioDecoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioDecoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__ns1__RemoveAudioDecoderConfiguration (100)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioDecoderConfiguration(struct soap*, const char*, int, const _ns1__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveAudioDecoderConfiguration(struct soap*, const char*, _ns1__RemoveAudioDecoderConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveAudioDecoderConfiguration
#define soap_write__ns1__RemoveAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveAudioDecoderConfiguration(struct soap*, _ns1__RemoveAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioDecoderConfiguration
#define soap_read__ns1__RemoveAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioDecoderConfiguration * soap_new__ns1__RemoveAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioDecoderConfiguration * soap_new_req__ns1__RemoveAudioDecoderConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioDecoderConfiguration *_p = soap_instantiate__ns1__RemoveAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioDecoderConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveAudioDecoderConfiguration * soap_new_set__ns1__RemoveAudioDecoderConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioDecoderConfiguration *_p = soap_instantiate__ns1__RemoveAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioDecoderConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveAudioDecoderConfiguration(struct soap *soap, _ns1__RemoveAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__ns1__AddAudioDecoderConfigurationResponse (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _ns1__AddAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddAudioDecoderConfigurationResponse(struct soap*, const char*, _ns1__AddAudioDecoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddAudioDecoderConfigurationResponse
#define soap_write__ns1__AddAudioDecoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioDecoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddAudioDecoderConfigurationResponse(struct soap*, _ns1__AddAudioDecoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioDecoderConfigurationResponse
#define soap_read__ns1__AddAudioDecoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioDecoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioDecoderConfigurationResponse * soap_new__ns1__AddAudioDecoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioDecoderConfigurationResponse * soap_new_req__ns1__AddAudioDecoderConfigurationResponse(struct soap *soap) { _ns1__AddAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__AddAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddAudioDecoderConfigurationResponse * soap_new_set__ns1__AddAudioDecoderConfigurationResponse(struct soap *soap) { _ns1__AddAudioDecoderConfigurationResponse *_p = soap_instantiate__ns1__AddAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddAudioDecoderConfigurationResponse(struct soap *soap, _ns1__AddAudioDecoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioDecoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioDecoderConfiguration
#define SOAP_TYPE__ns1__AddAudioDecoderConfiguration (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioDecoderConfiguration(struct soap*, const char*, int, const _ns1__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_in__ns1__AddAudioDecoderConfiguration(struct soap*, const char*, _ns1__AddAudioDecoderConfiguration *, const char*);

#ifndef soap_write__ns1__AddAudioDecoderConfiguration
#define soap_write__ns1__AddAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_get__ns1__AddAudioDecoderConfiguration(struct soap*, _ns1__AddAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioDecoderConfiguration
#define soap_read__ns1__AddAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioDecoderConfiguration * soap_new__ns1__AddAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioDecoderConfiguration * soap_new_req__ns1__AddAudioDecoderConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioDecoderConfiguration *_p = soap_instantiate__ns1__AddAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioDecoderConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddAudioDecoderConfiguration * soap_new_set__ns1__AddAudioDecoderConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioDecoderConfiguration *_p = soap_instantiate__ns1__AddAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioDecoderConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddAudioDecoderConfiguration(struct soap *soap, _ns1__AddAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__ns1__RemoveAudioOutputConfigurationResponse (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioOutputConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveAudioOutputConfigurationResponse(struct soap*, const char*, _ns1__RemoveAudioOutputConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveAudioOutputConfigurationResponse
#define soap_write__ns1__RemoveAudioOutputConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioOutputConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveAudioOutputConfigurationResponse(struct soap*, _ns1__RemoveAudioOutputConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioOutputConfigurationResponse
#define soap_read__ns1__RemoveAudioOutputConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioOutputConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioOutputConfigurationResponse * soap_new__ns1__RemoveAudioOutputConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioOutputConfigurationResponse * soap_new_req__ns1__RemoveAudioOutputConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveAudioOutputConfigurationResponse * soap_new_set__ns1__RemoveAudioOutputConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveAudioOutputConfigurationResponse(struct soap *soap, _ns1__RemoveAudioOutputConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioOutputConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioOutputConfiguration
#define SOAP_TYPE__ns1__RemoveAudioOutputConfiguration (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioOutputConfiguration(struct soap*, const char*, int, const _ns1__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveAudioOutputConfiguration(struct soap*, const char*, _ns1__RemoveAudioOutputConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveAudioOutputConfiguration
#define soap_write__ns1__RemoveAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveAudioOutputConfiguration(struct soap*, _ns1__RemoveAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioOutputConfiguration
#define soap_read__ns1__RemoveAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioOutputConfiguration * soap_new__ns1__RemoveAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioOutputConfiguration * soap_new_req__ns1__RemoveAudioOutputConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioOutputConfiguration *_p = soap_instantiate__ns1__RemoveAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioOutputConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveAudioOutputConfiguration * soap_new_set__ns1__RemoveAudioOutputConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioOutputConfiguration *_p = soap_instantiate__ns1__RemoveAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioOutputConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveAudioOutputConfiguration(struct soap *soap, _ns1__RemoveAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__ns1__AddAudioOutputConfigurationResponse (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioOutputConfigurationResponse(struct soap*, const char*, int, const _ns1__AddAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddAudioOutputConfigurationResponse(struct soap*, const char*, _ns1__AddAudioOutputConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddAudioOutputConfigurationResponse
#define soap_write__ns1__AddAudioOutputConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioOutputConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddAudioOutputConfigurationResponse(struct soap*, _ns1__AddAudioOutputConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioOutputConfigurationResponse
#define soap_read__ns1__AddAudioOutputConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioOutputConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioOutputConfigurationResponse * soap_new__ns1__AddAudioOutputConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioOutputConfigurationResponse * soap_new_req__ns1__AddAudioOutputConfigurationResponse(struct soap *soap) { _ns1__AddAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__AddAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddAudioOutputConfigurationResponse * soap_new_set__ns1__AddAudioOutputConfigurationResponse(struct soap *soap) { _ns1__AddAudioOutputConfigurationResponse *_p = soap_instantiate__ns1__AddAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddAudioOutputConfigurationResponse(struct soap *soap, _ns1__AddAudioOutputConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioOutputConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioOutputConfiguration
#define SOAP_TYPE__ns1__AddAudioOutputConfiguration (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioOutputConfiguration(struct soap*, const char*, int, const _ns1__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddAudioOutputConfiguration * SOAP_FMAC4 soap_in__ns1__AddAudioOutputConfiguration(struct soap*, const char*, _ns1__AddAudioOutputConfiguration *, const char*);

#ifndef soap_write__ns1__AddAudioOutputConfiguration
#define soap_write__ns1__AddAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioOutputConfiguration * SOAP_FMAC4 soap_get__ns1__AddAudioOutputConfiguration(struct soap*, _ns1__AddAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioOutputConfiguration
#define soap_read__ns1__AddAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioOutputConfiguration * soap_new__ns1__AddAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioOutputConfiguration * soap_new_req__ns1__AddAudioOutputConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioOutputConfiguration *_p = soap_instantiate__ns1__AddAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioOutputConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioOutputConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddAudioOutputConfiguration * soap_new_set__ns1__AddAudioOutputConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioOutputConfiguration *_p = soap_instantiate__ns1__AddAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioOutputConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioOutputConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddAudioOutputConfiguration(struct soap *soap, _ns1__AddAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__ns1__RemoveMetadataConfigurationResponse (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveMetadataConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveMetadataConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveMetadataConfigurationResponse(struct soap*, const char*, _ns1__RemoveMetadataConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveMetadataConfigurationResponse
#define soap_write__ns1__RemoveMetadataConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveMetadataConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveMetadataConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveMetadataConfigurationResponse(struct soap*, _ns1__RemoveMetadataConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveMetadataConfigurationResponse
#define soap_read__ns1__RemoveMetadataConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveMetadataConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveMetadataConfigurationResponse * soap_new__ns1__RemoveMetadataConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveMetadataConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveMetadataConfigurationResponse * soap_new_req__ns1__RemoveMetadataConfigurationResponse(struct soap *soap) { _ns1__RemoveMetadataConfigurationResponse *_p = soap_instantiate__ns1__RemoveMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveMetadataConfigurationResponse * soap_new_set__ns1__RemoveMetadataConfigurationResponse(struct soap *soap) { _ns1__RemoveMetadataConfigurationResponse *_p = soap_instantiate__ns1__RemoveMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveMetadataConfigurationResponse(struct soap *soap, _ns1__RemoveMetadataConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveMetadataConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveMetadataConfiguration
#define SOAP_TYPE__ns1__RemoveMetadataConfiguration (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveMetadataConfiguration(struct soap*, const char*, int, const _ns1__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveMetadataConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveMetadataConfiguration(struct soap*, const char*, _ns1__RemoveMetadataConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveMetadataConfiguration
#define soap_write__ns1__RemoveMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveMetadataConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveMetadataConfiguration(struct soap*, _ns1__RemoveMetadataConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveMetadataConfiguration
#define soap_read__ns1__RemoveMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveMetadataConfiguration * soap_new__ns1__RemoveMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveMetadataConfiguration * soap_new_req__ns1__RemoveMetadataConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveMetadataConfiguration *_p = soap_instantiate__ns1__RemoveMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveMetadataConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveMetadataConfiguration * soap_new_set__ns1__RemoveMetadataConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveMetadataConfiguration *_p = soap_instantiate__ns1__RemoveMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveMetadataConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveMetadataConfiguration(struct soap *soap, _ns1__RemoveMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddMetadataConfigurationResponse
#define SOAP_TYPE__ns1__AddMetadataConfigurationResponse (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddMetadataConfigurationResponse(struct soap*, const char*, int, const _ns1__AddMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddMetadataConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddMetadataConfigurationResponse(struct soap*, const char*, _ns1__AddMetadataConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddMetadataConfigurationResponse
#define soap_write__ns1__AddMetadataConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddMetadataConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddMetadataConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddMetadataConfigurationResponse(struct soap*, _ns1__AddMetadataConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddMetadataConfigurationResponse
#define soap_read__ns1__AddMetadataConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddMetadataConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddMetadataConfigurationResponse * soap_new__ns1__AddMetadataConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddMetadataConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddMetadataConfigurationResponse * soap_new_req__ns1__AddMetadataConfigurationResponse(struct soap *soap) { _ns1__AddMetadataConfigurationResponse *_p = soap_instantiate__ns1__AddMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddMetadataConfigurationResponse * soap_new_set__ns1__AddMetadataConfigurationResponse(struct soap *soap) { _ns1__AddMetadataConfigurationResponse *_p = soap_instantiate__ns1__AddMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddMetadataConfigurationResponse(struct soap *soap, _ns1__AddMetadataConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddMetadataConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddMetadataConfiguration
#define SOAP_TYPE__ns1__AddMetadataConfiguration (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddMetadataConfiguration(struct soap*, const char*, int, const _ns1__AddMetadataConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddMetadataConfiguration * SOAP_FMAC4 soap_in__ns1__AddMetadataConfiguration(struct soap*, const char*, _ns1__AddMetadataConfiguration *, const char*);

#ifndef soap_write__ns1__AddMetadataConfiguration
#define soap_write__ns1__AddMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddMetadataConfiguration * SOAP_FMAC4 soap_get__ns1__AddMetadataConfiguration(struct soap*, _ns1__AddMetadataConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddMetadataConfiguration
#define soap_read__ns1__AddMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddMetadataConfiguration * soap_new__ns1__AddMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddMetadataConfiguration * soap_new_req__ns1__AddMetadataConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddMetadataConfiguration *_p = soap_instantiate__ns1__AddMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddMetadataConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddMetadataConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddMetadataConfiguration * soap_new_set__ns1__AddMetadataConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddMetadataConfiguration *_p = soap_instantiate__ns1__AddMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddMetadataConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddMetadataConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddMetadataConfiguration(struct soap *soap, _ns1__AddMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__ns1__RemoveVideoAnalyticsConfigurationResponse (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap*, const char*, _ns1__RemoveVideoAnalyticsConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveVideoAnalyticsConfigurationResponse
#define soap_write__ns1__RemoveVideoAnalyticsConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveVideoAnalyticsConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap*, _ns1__RemoveVideoAnalyticsConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveVideoAnalyticsConfigurationResponse
#define soap_read__ns1__RemoveVideoAnalyticsConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveVideoAnalyticsConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveVideoAnalyticsConfigurationResponse * soap_new__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveVideoAnalyticsConfigurationResponse * soap_new_req__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap) { _ns1__RemoveVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__RemoveVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveVideoAnalyticsConfigurationResponse * soap_new_set__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap) { _ns1__RemoveVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__RemoveVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, _ns1__RemoveVideoAnalyticsConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__ns1__RemoveVideoAnalyticsConfiguration (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, int, const _ns1__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__RemoveVideoAnalyticsConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveVideoAnalyticsConfiguration
#define soap_write__ns1__RemoveVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveVideoAnalyticsConfiguration(struct soap*, _ns1__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveVideoAnalyticsConfiguration
#define soap_read__ns1__RemoveVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveVideoAnalyticsConfiguration * soap_new__ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveVideoAnalyticsConfiguration * soap_new_req__ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__RemoveVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveVideoAnalyticsConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveVideoAnalyticsConfiguration * soap_new_set__ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__RemoveVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveVideoAnalyticsConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, _ns1__RemoveVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__ns1__AddVideoAnalyticsConfigurationResponse (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _ns1__AddVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddVideoAnalyticsConfigurationResponse(struct soap*, const char*, _ns1__AddVideoAnalyticsConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddVideoAnalyticsConfigurationResponse
#define soap_write__ns1__AddVideoAnalyticsConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddVideoAnalyticsConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddVideoAnalyticsConfigurationResponse(struct soap*, _ns1__AddVideoAnalyticsConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddVideoAnalyticsConfigurationResponse
#define soap_read__ns1__AddVideoAnalyticsConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddVideoAnalyticsConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddVideoAnalyticsConfigurationResponse * soap_new__ns1__AddVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddVideoAnalyticsConfigurationResponse * soap_new_req__ns1__AddVideoAnalyticsConfigurationResponse(struct soap *soap) { _ns1__AddVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__AddVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddVideoAnalyticsConfigurationResponse * soap_new_set__ns1__AddVideoAnalyticsConfigurationResponse(struct soap *soap) { _ns1__AddVideoAnalyticsConfigurationResponse *_p = soap_instantiate__ns1__AddVideoAnalyticsConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddVideoAnalyticsConfigurationResponse(struct soap *soap, _ns1__AddVideoAnalyticsConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVideoAnalyticsConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__ns1__AddVideoAnalyticsConfiguration (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVideoAnalyticsConfiguration(struct soap*, const char*, int, const _ns1__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__ns1__AddVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__AddVideoAnalyticsConfiguration *, const char*);

#ifndef soap_write__ns1__AddVideoAnalyticsConfiguration
#define soap_write__ns1__AddVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__ns1__AddVideoAnalyticsConfiguration(struct soap*, _ns1__AddVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddVideoAnalyticsConfiguration
#define soap_read__ns1__AddVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddVideoAnalyticsConfiguration * soap_new__ns1__AddVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddVideoAnalyticsConfiguration * soap_new_req__ns1__AddVideoAnalyticsConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__AddVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddVideoAnalyticsConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddVideoAnalyticsConfiguration * soap_new_set__ns1__AddVideoAnalyticsConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddVideoAnalyticsConfiguration *_p = soap_instantiate__ns1__AddVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddVideoAnalyticsConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddVideoAnalyticsConfiguration(struct soap *soap, _ns1__AddVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemovePTZConfigurationResponse
#define SOAP_TYPE__ns1__RemovePTZConfigurationResponse (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemovePTZConfigurationResponse(struct soap*, const char*, int, const _ns1__RemovePTZConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemovePTZConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemovePTZConfigurationResponse(struct soap*, const char*, _ns1__RemovePTZConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemovePTZConfigurationResponse
#define soap_write__ns1__RemovePTZConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemovePTZConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemovePTZConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemovePTZConfigurationResponse(struct soap*, _ns1__RemovePTZConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemovePTZConfigurationResponse
#define soap_read__ns1__RemovePTZConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemovePTZConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemovePTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemovePTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemovePTZConfigurationResponse * soap_new__ns1__RemovePTZConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemovePTZConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemovePTZConfigurationResponse * soap_new_req__ns1__RemovePTZConfigurationResponse(struct soap *soap) { _ns1__RemovePTZConfigurationResponse *_p = soap_instantiate__ns1__RemovePTZConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemovePTZConfigurationResponse * soap_new_set__ns1__RemovePTZConfigurationResponse(struct soap *soap) { _ns1__RemovePTZConfigurationResponse *_p = soap_instantiate__ns1__RemovePTZConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemovePTZConfigurationResponse(struct soap *soap, _ns1__RemovePTZConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemovePTZConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemovePTZConfiguration
#define SOAP_TYPE__ns1__RemovePTZConfiguration (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemovePTZConfiguration(struct soap*, const char*, int, const _ns1__RemovePTZConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemovePTZConfiguration * SOAP_FMAC4 soap_in__ns1__RemovePTZConfiguration(struct soap*, const char*, _ns1__RemovePTZConfiguration *, const char*);

#ifndef soap_write__ns1__RemovePTZConfiguration
#define soap_write__ns1__RemovePTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemovePTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemovePTZConfiguration * SOAP_FMAC4 soap_get__ns1__RemovePTZConfiguration(struct soap*, _ns1__RemovePTZConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemovePTZConfiguration
#define soap_read__ns1__RemovePTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemovePTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemovePTZConfiguration * soap_new__ns1__RemovePTZConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemovePTZConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemovePTZConfiguration * soap_new_req__ns1__RemovePTZConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemovePTZConfiguration *_p = soap_instantiate__ns1__RemovePTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemovePTZConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemovePTZConfiguration * soap_new_set__ns1__RemovePTZConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemovePTZConfiguration *_p = soap_instantiate__ns1__RemovePTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemovePTZConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemovePTZConfiguration(struct soap *soap, _ns1__RemovePTZConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemovePTZConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddPTZConfigurationResponse
#define SOAP_TYPE__ns1__AddPTZConfigurationResponse (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddPTZConfigurationResponse(struct soap*, const char*, int, const _ns1__AddPTZConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddPTZConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddPTZConfigurationResponse(struct soap*, const char*, _ns1__AddPTZConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddPTZConfigurationResponse
#define soap_write__ns1__AddPTZConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddPTZConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddPTZConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddPTZConfigurationResponse(struct soap*, _ns1__AddPTZConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddPTZConfigurationResponse
#define soap_read__ns1__AddPTZConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddPTZConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddPTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddPTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddPTZConfigurationResponse * soap_new__ns1__AddPTZConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddPTZConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddPTZConfigurationResponse * soap_new_req__ns1__AddPTZConfigurationResponse(struct soap *soap) { _ns1__AddPTZConfigurationResponse *_p = soap_instantiate__ns1__AddPTZConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddPTZConfigurationResponse * soap_new_set__ns1__AddPTZConfigurationResponse(struct soap *soap) { _ns1__AddPTZConfigurationResponse *_p = soap_instantiate__ns1__AddPTZConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddPTZConfigurationResponse(struct soap *soap, _ns1__AddPTZConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddPTZConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddPTZConfiguration
#define SOAP_TYPE__ns1__AddPTZConfiguration (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddPTZConfiguration(struct soap*, const char*, int, const _ns1__AddPTZConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddPTZConfiguration * SOAP_FMAC4 soap_in__ns1__AddPTZConfiguration(struct soap*, const char*, _ns1__AddPTZConfiguration *, const char*);

#ifndef soap_write__ns1__AddPTZConfiguration
#define soap_write__ns1__AddPTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddPTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddPTZConfiguration * SOAP_FMAC4 soap_get__ns1__AddPTZConfiguration(struct soap*, _ns1__AddPTZConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddPTZConfiguration
#define soap_read__ns1__AddPTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddPTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddPTZConfiguration * soap_new__ns1__AddPTZConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddPTZConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddPTZConfiguration * soap_new_req__ns1__AddPTZConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddPTZConfiguration *_p = soap_instantiate__ns1__AddPTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddPTZConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddPTZConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddPTZConfiguration * soap_new_set__ns1__AddPTZConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddPTZConfiguration *_p = soap_instantiate__ns1__AddPTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddPTZConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddPTZConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddPTZConfiguration(struct soap *soap, _ns1__AddPTZConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddPTZConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__ns1__RemoveAudioSourceConfigurationResponse (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveAudioSourceConfigurationResponse(struct soap*, const char*, _ns1__RemoveAudioSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveAudioSourceConfigurationResponse
#define soap_write__ns1__RemoveAudioSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveAudioSourceConfigurationResponse(struct soap*, _ns1__RemoveAudioSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioSourceConfigurationResponse
#define soap_read__ns1__RemoveAudioSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioSourceConfigurationResponse * soap_new__ns1__RemoveAudioSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioSourceConfigurationResponse * soap_new_req__ns1__RemoveAudioSourceConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveAudioSourceConfigurationResponse * soap_new_set__ns1__RemoveAudioSourceConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveAudioSourceConfigurationResponse(struct soap *soap, _ns1__RemoveAudioSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioSourceConfiguration
#define SOAP_TYPE__ns1__RemoveAudioSourceConfiguration (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioSourceConfiguration(struct soap*, const char*, int, const _ns1__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveAudioSourceConfiguration(struct soap*, const char*, _ns1__RemoveAudioSourceConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveAudioSourceConfiguration
#define soap_write__ns1__RemoveAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveAudioSourceConfiguration(struct soap*, _ns1__RemoveAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioSourceConfiguration
#define soap_read__ns1__RemoveAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioSourceConfiguration * soap_new__ns1__RemoveAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioSourceConfiguration * soap_new_req__ns1__RemoveAudioSourceConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioSourceConfiguration *_p = soap_instantiate__ns1__RemoveAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioSourceConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveAudioSourceConfiguration * soap_new_set__ns1__RemoveAudioSourceConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioSourceConfiguration *_p = soap_instantiate__ns1__RemoveAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioSourceConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveAudioSourceConfiguration(struct soap *soap, _ns1__RemoveAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__ns1__AddAudioSourceConfigurationResponse (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__AddAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddAudioSourceConfigurationResponse(struct soap*, const char*, _ns1__AddAudioSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddAudioSourceConfigurationResponse
#define soap_write__ns1__AddAudioSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddAudioSourceConfigurationResponse(struct soap*, _ns1__AddAudioSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioSourceConfigurationResponse
#define soap_read__ns1__AddAudioSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioSourceConfigurationResponse * soap_new__ns1__AddAudioSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioSourceConfigurationResponse * soap_new_req__ns1__AddAudioSourceConfigurationResponse(struct soap *soap) { _ns1__AddAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__AddAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddAudioSourceConfigurationResponse * soap_new_set__ns1__AddAudioSourceConfigurationResponse(struct soap *soap) { _ns1__AddAudioSourceConfigurationResponse *_p = soap_instantiate__ns1__AddAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddAudioSourceConfigurationResponse(struct soap *soap, _ns1__AddAudioSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioSourceConfiguration
#define SOAP_TYPE__ns1__AddAudioSourceConfiguration (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioSourceConfiguration(struct soap*, const char*, int, const _ns1__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddAudioSourceConfiguration * SOAP_FMAC4 soap_in__ns1__AddAudioSourceConfiguration(struct soap*, const char*, _ns1__AddAudioSourceConfiguration *, const char*);

#ifndef soap_write__ns1__AddAudioSourceConfiguration
#define soap_write__ns1__AddAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioSourceConfiguration * SOAP_FMAC4 soap_get__ns1__AddAudioSourceConfiguration(struct soap*, _ns1__AddAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioSourceConfiguration
#define soap_read__ns1__AddAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioSourceConfiguration * soap_new__ns1__AddAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioSourceConfiguration * soap_new_req__ns1__AddAudioSourceConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioSourceConfiguration *_p = soap_instantiate__ns1__AddAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioSourceConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddAudioSourceConfiguration * soap_new_set__ns1__AddAudioSourceConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioSourceConfiguration *_p = soap_instantiate__ns1__AddAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioSourceConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddAudioSourceConfiguration(struct soap *soap, _ns1__AddAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__ns1__RemoveAudioEncoderConfigurationResponse (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveAudioEncoderConfigurationResponse(struct soap*, const char*, _ns1__RemoveAudioEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveAudioEncoderConfigurationResponse
#define soap_write__ns1__RemoveAudioEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveAudioEncoderConfigurationResponse(struct soap*, _ns1__RemoveAudioEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioEncoderConfigurationResponse
#define soap_read__ns1__RemoveAudioEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioEncoderConfigurationResponse * soap_new__ns1__RemoveAudioEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioEncoderConfigurationResponse * soap_new_req__ns1__RemoveAudioEncoderConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveAudioEncoderConfigurationResponse * soap_new_set__ns1__RemoveAudioEncoderConfigurationResponse(struct soap *soap) { _ns1__RemoveAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__RemoveAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveAudioEncoderConfigurationResponse(struct soap *soap, _ns1__RemoveAudioEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__ns1__RemoveAudioEncoderConfiguration (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveAudioEncoderConfiguration(struct soap*, const char*, int, const _ns1__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveAudioEncoderConfiguration(struct soap*, const char*, _ns1__RemoveAudioEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveAudioEncoderConfiguration
#define soap_write__ns1__RemoveAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveAudioEncoderConfiguration(struct soap*, _ns1__RemoveAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveAudioEncoderConfiguration
#define soap_read__ns1__RemoveAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveAudioEncoderConfiguration * soap_new__ns1__RemoveAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveAudioEncoderConfiguration * soap_new_req__ns1__RemoveAudioEncoderConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioEncoderConfiguration *_p = soap_instantiate__ns1__RemoveAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioEncoderConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveAudioEncoderConfiguration * soap_new_set__ns1__RemoveAudioEncoderConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveAudioEncoderConfiguration *_p = soap_instantiate__ns1__RemoveAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveAudioEncoderConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveAudioEncoderConfiguration(struct soap *soap, _ns1__RemoveAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__ns1__AddAudioEncoderConfigurationResponse (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__AddAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddAudioEncoderConfigurationResponse(struct soap*, const char*, _ns1__AddAudioEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddAudioEncoderConfigurationResponse
#define soap_write__ns1__AddAudioEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddAudioEncoderConfigurationResponse(struct soap*, _ns1__AddAudioEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioEncoderConfigurationResponse
#define soap_read__ns1__AddAudioEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioEncoderConfigurationResponse * soap_new__ns1__AddAudioEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioEncoderConfigurationResponse * soap_new_req__ns1__AddAudioEncoderConfigurationResponse(struct soap *soap) { _ns1__AddAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__AddAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddAudioEncoderConfigurationResponse * soap_new_set__ns1__AddAudioEncoderConfigurationResponse(struct soap *soap) { _ns1__AddAudioEncoderConfigurationResponse *_p = soap_instantiate__ns1__AddAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddAudioEncoderConfigurationResponse(struct soap *soap, _ns1__AddAudioEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddAudioEncoderConfiguration
#define SOAP_TYPE__ns1__AddAudioEncoderConfiguration (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddAudioEncoderConfiguration(struct soap*, const char*, int, const _ns1__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__AddAudioEncoderConfiguration(struct soap*, const char*, _ns1__AddAudioEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__AddAudioEncoderConfiguration
#define soap_write__ns1__AddAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__AddAudioEncoderConfiguration(struct soap*, _ns1__AddAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddAudioEncoderConfiguration
#define soap_read__ns1__AddAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddAudioEncoderConfiguration * soap_new__ns1__AddAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddAudioEncoderConfiguration * soap_new_req__ns1__AddAudioEncoderConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioEncoderConfiguration *_p = soap_instantiate__ns1__AddAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioEncoderConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddAudioEncoderConfiguration * soap_new_set__ns1__AddAudioEncoderConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddAudioEncoderConfiguration *_p = soap_instantiate__ns1__AddAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddAudioEncoderConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddAudioEncoderConfiguration(struct soap *soap, _ns1__AddAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__ns1__RemoveVideoSourceConfigurationResponse (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveVideoSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveVideoSourceConfigurationResponse(struct soap*, const char*, _ns1__RemoveVideoSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveVideoSourceConfigurationResponse
#define soap_write__ns1__RemoveVideoSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveVideoSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveVideoSourceConfigurationResponse(struct soap*, _ns1__RemoveVideoSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveVideoSourceConfigurationResponse
#define soap_read__ns1__RemoveVideoSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveVideoSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveVideoSourceConfigurationResponse * soap_new__ns1__RemoveVideoSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveVideoSourceConfigurationResponse * soap_new_req__ns1__RemoveVideoSourceConfigurationResponse(struct soap *soap) { _ns1__RemoveVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__RemoveVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveVideoSourceConfigurationResponse * soap_new_set__ns1__RemoveVideoSourceConfigurationResponse(struct soap *soap) { _ns1__RemoveVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__RemoveVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveVideoSourceConfigurationResponse(struct soap *soap, _ns1__RemoveVideoSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveVideoSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveVideoSourceConfiguration
#define SOAP_TYPE__ns1__RemoveVideoSourceConfiguration (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveVideoSourceConfiguration(struct soap*, const char*, int, const _ns1__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveVideoSourceConfiguration(struct soap*, const char*, _ns1__RemoveVideoSourceConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveVideoSourceConfiguration
#define soap_write__ns1__RemoveVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveVideoSourceConfiguration(struct soap*, _ns1__RemoveVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveVideoSourceConfiguration
#define soap_read__ns1__RemoveVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveVideoSourceConfiguration * soap_new__ns1__RemoveVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveVideoSourceConfiguration * soap_new_req__ns1__RemoveVideoSourceConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveVideoSourceConfiguration *_p = soap_instantiate__ns1__RemoveVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveVideoSourceConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveVideoSourceConfiguration * soap_new_set__ns1__RemoveVideoSourceConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveVideoSourceConfiguration *_p = soap_instantiate__ns1__RemoveVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveVideoSourceConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveVideoSourceConfiguration(struct soap *soap, _ns1__RemoveVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__ns1__AddVideoSourceConfigurationResponse (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVideoSourceConfigurationResponse(struct soap*, const char*, int, const _ns1__AddVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddVideoSourceConfigurationResponse(struct soap*, const char*, _ns1__AddVideoSourceConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddVideoSourceConfigurationResponse
#define soap_write__ns1__AddVideoSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddVideoSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddVideoSourceConfigurationResponse(struct soap*, _ns1__AddVideoSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddVideoSourceConfigurationResponse
#define soap_read__ns1__AddVideoSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddVideoSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddVideoSourceConfigurationResponse * soap_new__ns1__AddVideoSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddVideoSourceConfigurationResponse * soap_new_req__ns1__AddVideoSourceConfigurationResponse(struct soap *soap) { _ns1__AddVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__AddVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddVideoSourceConfigurationResponse * soap_new_set__ns1__AddVideoSourceConfigurationResponse(struct soap *soap) { _ns1__AddVideoSourceConfigurationResponse *_p = soap_instantiate__ns1__AddVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddVideoSourceConfigurationResponse(struct soap *soap, _ns1__AddVideoSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVideoSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddVideoSourceConfiguration
#define SOAP_TYPE__ns1__AddVideoSourceConfiguration (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVideoSourceConfiguration(struct soap*, const char*, int, const _ns1__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddVideoSourceConfiguration * SOAP_FMAC4 soap_in__ns1__AddVideoSourceConfiguration(struct soap*, const char*, _ns1__AddVideoSourceConfiguration *, const char*);

#ifndef soap_write__ns1__AddVideoSourceConfiguration
#define soap_write__ns1__AddVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoSourceConfiguration * SOAP_FMAC4 soap_get__ns1__AddVideoSourceConfiguration(struct soap*, _ns1__AddVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddVideoSourceConfiguration
#define soap_read__ns1__AddVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddVideoSourceConfiguration * soap_new__ns1__AddVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddVideoSourceConfiguration * soap_new_req__ns1__AddVideoSourceConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddVideoSourceConfiguration *_p = soap_instantiate__ns1__AddVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddVideoSourceConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddVideoSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddVideoSourceConfiguration * soap_new_set__ns1__AddVideoSourceConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddVideoSourceConfiguration *_p = soap_instantiate__ns1__AddVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddVideoSourceConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddVideoSourceConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddVideoSourceConfiguration(struct soap *soap, _ns1__AddVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__ns1__RemoveVideoEncoderConfigurationResponse (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveVideoEncoderConfigurationResponse(struct soap*, const char*, _ns1__RemoveVideoEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveVideoEncoderConfigurationResponse
#define soap_write__ns1__RemoveVideoEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveVideoEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveVideoEncoderConfigurationResponse(struct soap*, _ns1__RemoveVideoEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveVideoEncoderConfigurationResponse
#define soap_read__ns1__RemoveVideoEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveVideoEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveVideoEncoderConfigurationResponse * soap_new__ns1__RemoveVideoEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveVideoEncoderConfigurationResponse * soap_new_req__ns1__RemoveVideoEncoderConfigurationResponse(struct soap *soap) { _ns1__RemoveVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__RemoveVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveVideoEncoderConfigurationResponse * soap_new_set__ns1__RemoveVideoEncoderConfigurationResponse(struct soap *soap) { _ns1__RemoveVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__RemoveVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveVideoEncoderConfigurationResponse(struct soap *soap, _ns1__RemoveVideoEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveVideoEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__ns1__RemoveVideoEncoderConfiguration (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveVideoEncoderConfiguration(struct soap*, const char*, int, const _ns1__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveVideoEncoderConfiguration(struct soap*, const char*, _ns1__RemoveVideoEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveVideoEncoderConfiguration
#define soap_write__ns1__RemoveVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveVideoEncoderConfiguration(struct soap*, _ns1__RemoveVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveVideoEncoderConfiguration
#define soap_read__ns1__RemoveVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveVideoEncoderConfiguration * soap_new__ns1__RemoveVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveVideoEncoderConfiguration * soap_new_req__ns1__RemoveVideoEncoderConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveVideoEncoderConfiguration *_p = soap_instantiate__ns1__RemoveVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveVideoEncoderConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__RemoveVideoEncoderConfiguration * soap_new_set__ns1__RemoveVideoEncoderConfiguration(struct soap *soap, const std::string& ProfileToken) { _ns1__RemoveVideoEncoderConfiguration *_p = soap_instantiate__ns1__RemoveVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveVideoEncoderConfiguration::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__RemoveVideoEncoderConfiguration(struct soap *soap, _ns1__RemoveVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__ns1__AddVideoEncoderConfigurationResponse (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _ns1__AddVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddVideoEncoderConfigurationResponse(struct soap*, const char*, _ns1__AddVideoEncoderConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddVideoEncoderConfigurationResponse
#define soap_write__ns1__AddVideoEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddVideoEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddVideoEncoderConfigurationResponse(struct soap*, _ns1__AddVideoEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddVideoEncoderConfigurationResponse
#define soap_read__ns1__AddVideoEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddVideoEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddVideoEncoderConfigurationResponse * soap_new__ns1__AddVideoEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddVideoEncoderConfigurationResponse * soap_new_req__ns1__AddVideoEncoderConfigurationResponse(struct soap *soap) { _ns1__AddVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__AddVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddVideoEncoderConfigurationResponse * soap_new_set__ns1__AddVideoEncoderConfigurationResponse(struct soap *soap) { _ns1__AddVideoEncoderConfigurationResponse *_p = soap_instantiate__ns1__AddVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddVideoEncoderConfigurationResponse(struct soap *soap, _ns1__AddVideoEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVideoEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddVideoEncoderConfiguration
#define SOAP_TYPE__ns1__AddVideoEncoderConfiguration (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVideoEncoderConfiguration(struct soap*, const char*, int, const _ns1__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__AddVideoEncoderConfiguration(struct soap*, const char*, _ns1__AddVideoEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__AddVideoEncoderConfiguration
#define soap_write__ns1__AddVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__AddVideoEncoderConfiguration(struct soap*, _ns1__AddVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddVideoEncoderConfiguration
#define soap_read__ns1__AddVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddVideoEncoderConfiguration * soap_new__ns1__AddVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddVideoEncoderConfiguration * soap_new_req__ns1__AddVideoEncoderConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddVideoEncoderConfiguration *_p = soap_instantiate__ns1__AddVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddVideoEncoderConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__AddVideoEncoderConfiguration * soap_new_set__ns1__AddVideoEncoderConfiguration(struct soap *soap, const std::string& ProfileToken, const std::string& ConfigurationToken) { _ns1__AddVideoEncoderConfiguration *_p = soap_instantiate__ns1__AddVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddVideoEncoderConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__AddVideoEncoderConfiguration(struct soap *soap, _ns1__AddVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetProfilesResponse
#define SOAP_TYPE__ns1__GetProfilesResponse (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProfilesResponse(struct soap*, const char*, int, const _ns1__GetProfilesResponse *, const char*);
SOAP_FMAC3 _ns1__GetProfilesResponse * SOAP_FMAC4 soap_in__ns1__GetProfilesResponse(struct soap*, const char*, _ns1__GetProfilesResponse *, const char*);

#ifndef soap_write__ns1__GetProfilesResponse
#define soap_write__ns1__GetProfilesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetProfilesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfilesResponse * SOAP_FMAC4 soap_get__ns1__GetProfilesResponse(struct soap*, _ns1__GetProfilesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetProfilesResponse
#define soap_read__ns1__GetProfilesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetProfilesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProfilesResponse * soap_new__ns1__GetProfilesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProfilesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProfilesResponse * soap_new_req__ns1__GetProfilesResponse(struct soap *soap) { _ns1__GetProfilesResponse *_p = soap_instantiate__ns1__GetProfilesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetProfilesResponse * soap_new_set__ns1__GetProfilesResponse(struct soap *soap, const std::vector<ns2__Profile * >& Profiles) { _ns1__GetProfilesResponse *_p = soap_instantiate__ns1__GetProfilesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfilesResponse::Profiles = Profiles; } return _p; }

inline void soap_delete__ns1__GetProfilesResponse(struct soap *soap, _ns1__GetProfilesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProfilesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetProfiles
#define SOAP_TYPE__ns1__GetProfiles (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProfiles(struct soap*, const char*, int, const _ns1__GetProfiles *, const char*);
SOAP_FMAC3 _ns1__GetProfiles * SOAP_FMAC4 soap_in__ns1__GetProfiles(struct soap*, const char*, _ns1__GetProfiles *, const char*);

#ifndef soap_write__ns1__GetProfiles
#define soap_write__ns1__GetProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfiles * SOAP_FMAC4 soap_get__ns1__GetProfiles(struct soap*, _ns1__GetProfiles *, const char*, const char*);

#ifndef soap_read__ns1__GetProfiles
#define soap_read__ns1__GetProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProfiles * SOAP_FMAC2 soap_instantiate__ns1__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProfiles * soap_new__ns1__GetProfiles(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProfiles(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProfiles * soap_new_req__ns1__GetProfiles(struct soap *soap) { _ns1__GetProfiles *_p = soap_instantiate__ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetProfiles * soap_new_set__ns1__GetProfiles(struct soap *soap) { _ns1__GetProfiles *_p = soap_instantiate__ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetProfiles(struct soap *soap, _ns1__GetProfiles *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProfiles(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetProfileResponse
#define SOAP_TYPE__ns1__GetProfileResponse (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProfileResponse(struct soap*, const char*, int, const _ns1__GetProfileResponse *, const char*);
SOAP_FMAC3 _ns1__GetProfileResponse * SOAP_FMAC4 soap_in__ns1__GetProfileResponse(struct soap*, const char*, _ns1__GetProfileResponse *, const char*);

#ifndef soap_write__ns1__GetProfileResponse
#define soap_write__ns1__GetProfileResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetProfileResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfileResponse * SOAP_FMAC4 soap_get__ns1__GetProfileResponse(struct soap*, _ns1__GetProfileResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetProfileResponse
#define soap_read__ns1__GetProfileResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetProfileResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__GetProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProfileResponse * soap_new__ns1__GetProfileResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProfileResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProfileResponse * soap_new_req__ns1__GetProfileResponse(struct soap *soap, ns2__Profile *Profile) { _ns1__GetProfileResponse *_p = soap_instantiate__ns1__GetProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfileResponse::Profile = Profile; } return _p; }

inline _ns1__GetProfileResponse * soap_new_set__ns1__GetProfileResponse(struct soap *soap, ns2__Profile *Profile) { _ns1__GetProfileResponse *_p = soap_instantiate__ns1__GetProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfileResponse::Profile = Profile; } return _p; }

inline void soap_delete__ns1__GetProfileResponse(struct soap *soap, _ns1__GetProfileResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProfileResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetProfile
#define SOAP_TYPE__ns1__GetProfile (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProfile(struct soap*, const char*, int, const _ns1__GetProfile *, const char*);
SOAP_FMAC3 _ns1__GetProfile * SOAP_FMAC4 soap_in__ns1__GetProfile(struct soap*, const char*, _ns1__GetProfile *, const char*);

#ifndef soap_write__ns1__GetProfile
#define soap_write__ns1__GetProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfile * SOAP_FMAC4 soap_get__ns1__GetProfile(struct soap*, _ns1__GetProfile *, const char*, const char*);

#ifndef soap_read__ns1__GetProfile
#define soap_read__ns1__GetProfile(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProfile * SOAP_FMAC2 soap_instantiate__ns1__GetProfile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProfile * soap_new__ns1__GetProfile(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProfile(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProfile * soap_new_req__ns1__GetProfile(struct soap *soap, const std::string& ProfileToken) { _ns1__GetProfile *_p = soap_instantiate__ns1__GetProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfile::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetProfile * soap_new_set__ns1__GetProfile(struct soap *soap, const std::string& ProfileToken) { _ns1__GetProfile *_p = soap_instantiate__ns1__GetProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfile::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetProfile(struct soap *soap, _ns1__GetProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateProfileResponse
#define SOAP_TYPE__ns1__CreateProfileResponse (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateProfileResponse(struct soap*, const char*, int, const _ns1__CreateProfileResponse *, const char*);
SOAP_FMAC3 _ns1__CreateProfileResponse * SOAP_FMAC4 soap_in__ns1__CreateProfileResponse(struct soap*, const char*, _ns1__CreateProfileResponse *, const char*);

#ifndef soap_write__ns1__CreateProfileResponse
#define soap_write__ns1__CreateProfileResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateProfileResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateProfileResponse * SOAP_FMAC4 soap_get__ns1__CreateProfileResponse(struct soap*, _ns1__CreateProfileResponse *, const char*, const char*);

#ifndef soap_read__ns1__CreateProfileResponse
#define soap_read__ns1__CreateProfileResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateProfileResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateProfileResponse * soap_new__ns1__CreateProfileResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateProfileResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateProfileResponse * soap_new_req__ns1__CreateProfileResponse(struct soap *soap, ns2__Profile *Profile) { _ns1__CreateProfileResponse *_p = soap_instantiate__ns1__CreateProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfileResponse::Profile = Profile; } return _p; }

inline _ns1__CreateProfileResponse * soap_new_set__ns1__CreateProfileResponse(struct soap *soap, ns2__Profile *Profile) { _ns1__CreateProfileResponse *_p = soap_instantiate__ns1__CreateProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfileResponse::Profile = Profile; } return _p; }

inline void soap_delete__ns1__CreateProfileResponse(struct soap *soap, _ns1__CreateProfileResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateProfileResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateProfile
#define SOAP_TYPE__ns1__CreateProfile (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateProfile(struct soap*, const char*, int, const _ns1__CreateProfile *, const char*);
SOAP_FMAC3 _ns1__CreateProfile * SOAP_FMAC4 soap_in__ns1__CreateProfile(struct soap*, const char*, _ns1__CreateProfile *, const char*);

#ifndef soap_write__ns1__CreateProfile
#define soap_write__ns1__CreateProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateProfile * SOAP_FMAC4 soap_get__ns1__CreateProfile(struct soap*, _ns1__CreateProfile *, const char*, const char*);

#ifndef soap_read__ns1__CreateProfile
#define soap_read__ns1__CreateProfile(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateProfile * SOAP_FMAC2 soap_instantiate__ns1__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateProfile * soap_new__ns1__CreateProfile(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateProfile(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateProfile * soap_new_req__ns1__CreateProfile(struct soap *soap, const std::string& Name) { _ns1__CreateProfile *_p = soap_instantiate__ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfile::Name = Name; } return _p; }

inline _ns1__CreateProfile * soap_new_set__ns1__CreateProfile(struct soap *soap, const std::string& Name, std::string *Token) { _ns1__CreateProfile *_p = soap_instantiate__ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfile::Name = Name; _p->_ns1__CreateProfile::Token = Token; } return _p; }

inline void soap_delete__ns1__CreateProfile(struct soap *soap, _ns1__CreateProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputsResponse
#define SOAP_TYPE__ns1__GetAudioOutputsResponse (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputsResponse(struct soap*, const char*, int, const _ns1__GetAudioOutputsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioOutputsResponse(struct soap*, const char*, _ns1__GetAudioOutputsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioOutputsResponse
#define soap_write__ns1__GetAudioOutputsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioOutputsResponse(struct soap*, _ns1__GetAudioOutputsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputsResponse
#define soap_read__ns1__GetAudioOutputsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputsResponse * soap_new__ns1__GetAudioOutputsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputsResponse * soap_new_req__ns1__GetAudioOutputsResponse(struct soap *soap) { _ns1__GetAudioOutputsResponse *_p = soap_instantiate__ns1__GetAudioOutputsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioOutputsResponse * soap_new_set__ns1__GetAudioOutputsResponse(struct soap *soap, const std::vector<ns2__AudioOutput * >& AudioOutputs) { _ns1__GetAudioOutputsResponse *_p = soap_instantiate__ns1__GetAudioOutputsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputsResponse::AudioOutputs = AudioOutputs; } return _p; }

inline void soap_delete__ns1__GetAudioOutputsResponse(struct soap *soap, _ns1__GetAudioOutputsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputs
#define SOAP_TYPE__ns1__GetAudioOutputs (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputs(struct soap*, const char*, int, const _ns1__GetAudioOutputs *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputs * SOAP_FMAC4 soap_in__ns1__GetAudioOutputs(struct soap*, const char*, _ns1__GetAudioOutputs *, const char*);

#ifndef soap_write__ns1__GetAudioOutputs
#define soap_write__ns1__GetAudioOutputs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputs * SOAP_FMAC4 soap_get__ns1__GetAudioOutputs(struct soap*, _ns1__GetAudioOutputs *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputs
#define soap_read__ns1__GetAudioOutputs(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputs * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputs * soap_new__ns1__GetAudioOutputs(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputs(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputs * soap_new_req__ns1__GetAudioOutputs(struct soap *soap) { _ns1__GetAudioOutputs *_p = soap_instantiate__ns1__GetAudioOutputs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioOutputs * soap_new_set__ns1__GetAudioOutputs(struct soap *soap) { _ns1__GetAudioOutputs *_p = soap_instantiate__ns1__GetAudioOutputs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetAudioOutputs(struct soap *soap, _ns1__GetAudioOutputs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourcesResponse
#define SOAP_TYPE__ns1__GetAudioSourcesResponse (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourcesResponse(struct soap*, const char*, int, const _ns1__GetAudioSourcesResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourcesResponse * SOAP_FMAC4 soap_in__ns1__GetAudioSourcesResponse(struct soap*, const char*, _ns1__GetAudioSourcesResponse *, const char*);

#ifndef soap_write__ns1__GetAudioSourcesResponse
#define soap_write__ns1__GetAudioSourcesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourcesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourcesResponse * SOAP_FMAC4 soap_get__ns1__GetAudioSourcesResponse(struct soap*, _ns1__GetAudioSourcesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourcesResponse
#define soap_read__ns1__GetAudioSourcesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourcesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourcesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourcesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourcesResponse * soap_new__ns1__GetAudioSourcesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourcesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourcesResponse * soap_new_req__ns1__GetAudioSourcesResponse(struct soap *soap) { _ns1__GetAudioSourcesResponse *_p = soap_instantiate__ns1__GetAudioSourcesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioSourcesResponse * soap_new_set__ns1__GetAudioSourcesResponse(struct soap *soap, const std::vector<ns2__AudioSource * >& AudioSources) { _ns1__GetAudioSourcesResponse *_p = soap_instantiate__ns1__GetAudioSourcesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourcesResponse::AudioSources = AudioSources; } return _p; }

inline void soap_delete__ns1__GetAudioSourcesResponse(struct soap *soap, _ns1__GetAudioSourcesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourcesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSources
#define SOAP_TYPE__ns1__GetAudioSources (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSources(struct soap*, const char*, int, const _ns1__GetAudioSources *, const char*);
SOAP_FMAC3 _ns1__GetAudioSources * SOAP_FMAC4 soap_in__ns1__GetAudioSources(struct soap*, const char*, _ns1__GetAudioSources *, const char*);

#ifndef soap_write__ns1__GetAudioSources
#define soap_write__ns1__GetAudioSources(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSources", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSources * SOAP_FMAC4 soap_get__ns1__GetAudioSources(struct soap*, _ns1__GetAudioSources *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSources
#define soap_read__ns1__GetAudioSources(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSources(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSources * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSources * soap_new__ns1__GetAudioSources(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSources(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSources * soap_new_req__ns1__GetAudioSources(struct soap *soap) { _ns1__GetAudioSources *_p = soap_instantiate__ns1__GetAudioSources(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioSources * soap_new_set__ns1__GetAudioSources(struct soap *soap) { _ns1__GetAudioSources *_p = soap_instantiate__ns1__GetAudioSources(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetAudioSources(struct soap *soap, _ns1__GetAudioSources *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSources(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourcesResponse
#define SOAP_TYPE__ns1__GetVideoSourcesResponse (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourcesResponse(struct soap*, const char*, int, const _ns1__GetVideoSourcesResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourcesResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourcesResponse(struct soap*, const char*, _ns1__GetVideoSourcesResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourcesResponse
#define soap_write__ns1__GetVideoSourcesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourcesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourcesResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourcesResponse(struct soap*, _ns1__GetVideoSourcesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourcesResponse
#define soap_read__ns1__GetVideoSourcesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourcesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourcesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourcesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourcesResponse * soap_new__ns1__GetVideoSourcesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourcesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourcesResponse * soap_new_req__ns1__GetVideoSourcesResponse(struct soap *soap) { _ns1__GetVideoSourcesResponse *_p = soap_instantiate__ns1__GetVideoSourcesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoSourcesResponse * soap_new_set__ns1__GetVideoSourcesResponse(struct soap *soap, const std::vector<ns2__VideoSource * >& VideoSources) { _ns1__GetVideoSourcesResponse *_p = soap_instantiate__ns1__GetVideoSourcesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourcesResponse::VideoSources = VideoSources; } return _p; }

inline void soap_delete__ns1__GetVideoSourcesResponse(struct soap *soap, _ns1__GetVideoSourcesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourcesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSources
#define SOAP_TYPE__ns1__GetVideoSources (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSources(struct soap*, const char*, int, const _ns1__GetVideoSources *, const char*);
SOAP_FMAC3 _ns1__GetVideoSources * SOAP_FMAC4 soap_in__ns1__GetVideoSources(struct soap*, const char*, _ns1__GetVideoSources *, const char*);

#ifndef soap_write__ns1__GetVideoSources
#define soap_write__ns1__GetVideoSources(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSources", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSources * SOAP_FMAC4 soap_get__ns1__GetVideoSources(struct soap*, _ns1__GetVideoSources *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSources
#define soap_read__ns1__GetVideoSources(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSources(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSources * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSources * soap_new__ns1__GetVideoSources(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSources(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSources * soap_new_req__ns1__GetVideoSources(struct soap *soap) { _ns1__GetVideoSources *_p = soap_instantiate__ns1__GetVideoSources(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoSources * soap_new_set__ns1__GetVideoSources(struct soap *soap) { _ns1__GetVideoSources *_p = soap_instantiate__ns1__GetVideoSources(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetVideoSources(struct soap *soap, _ns1__GetVideoSources *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSources(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns1__GetServiceCapabilitiesResponse (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _ns1__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _ns1__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__ns1__GetServiceCapabilitiesResponse(struct soap*, const char*, _ns1__GetServiceCapabilitiesResponse *, const char*);

#ifndef soap_write__ns1__GetServiceCapabilitiesResponse
#define soap_write__ns1__GetServiceCapabilitiesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetServiceCapabilitiesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__ns1__GetServiceCapabilitiesResponse(struct soap*, _ns1__GetServiceCapabilitiesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetServiceCapabilitiesResponse
#define soap_read__ns1__GetServiceCapabilitiesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetServiceCapabilitiesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetServiceCapabilitiesResponse * soap_new__ns1__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetServiceCapabilitiesResponse * soap_new_req__ns1__GetServiceCapabilitiesResponse(struct soap *soap, ns1__Capabilities *Capabilities) { _ns1__GetServiceCapabilitiesResponse *_p = soap_instantiate__ns1__GetServiceCapabilitiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetServiceCapabilitiesResponse::Capabilities = Capabilities; } return _p; }

inline _ns1__GetServiceCapabilitiesResponse * soap_new_set__ns1__GetServiceCapabilitiesResponse(struct soap *soap, ns1__Capabilities *Capabilities) { _ns1__GetServiceCapabilitiesResponse *_p = soap_instantiate__ns1__GetServiceCapabilitiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetServiceCapabilitiesResponse::Capabilities = Capabilities; } return _p; }

inline void soap_delete__ns1__GetServiceCapabilitiesResponse(struct soap *soap, _ns1__GetServiceCapabilitiesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetServiceCapabilitiesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetServiceCapabilities
#define SOAP_TYPE__ns1__GetServiceCapabilities (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetServiceCapabilities(struct soap*, const char*, int, const _ns1__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _ns1__GetServiceCapabilities * SOAP_FMAC4 soap_in__ns1__GetServiceCapabilities(struct soap*, const char*, _ns1__GetServiceCapabilities *, const char*);

#ifndef soap_write__ns1__GetServiceCapabilities
#define soap_write__ns1__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetServiceCapabilities * SOAP_FMAC4 soap_get__ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_read__ns1__GetServiceCapabilities
#define soap_read__ns1__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__ns1__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetServiceCapabilities * soap_new__ns1__GetServiceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetServiceCapabilities(soap, n, NULL, NULL, NULL); }

inline _ns1__GetServiceCapabilities * soap_new_req__ns1__GetServiceCapabilities(struct soap *soap) { _ns1__GetServiceCapabilities *_p = soap_instantiate__ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetServiceCapabilities * soap_new_set__ns1__GetServiceCapabilities(struct soap *soap) { _ns1__GetServiceCapabilities *_p = soap_instantiate__ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetServiceCapabilities(struct soap *soap, _ns1__GetServiceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetServiceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__VideoSourceModeExtension
#define SOAP_TYPE_ns1__VideoSourceModeExtension (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VideoSourceModeExtension(struct soap*, const char*, int, const ns1__VideoSourceModeExtension *, const char*);
SOAP_FMAC3 ns1__VideoSourceModeExtension * SOAP_FMAC4 soap_in_ns1__VideoSourceModeExtension(struct soap*, const char*, ns1__VideoSourceModeExtension *, const char*);

#ifndef soap_write_ns1__VideoSourceModeExtension
#define soap_write_ns1__VideoSourceModeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:VideoSourceModeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__VideoSourceModeExtension * SOAP_FMAC4 soap_get_ns1__VideoSourceModeExtension(struct soap*, ns1__VideoSourceModeExtension *, const char*, const char*);

#ifndef soap_read_ns1__VideoSourceModeExtension
#define soap_read_ns1__VideoSourceModeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__VideoSourceModeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__VideoSourceModeExtension * SOAP_FMAC2 soap_instantiate_ns1__VideoSourceModeExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VideoSourceModeExtension * soap_new_ns1__VideoSourceModeExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns1__VideoSourceModeExtension(soap, n, NULL, NULL, NULL); }

inline ns1__VideoSourceModeExtension * soap_new_req_ns1__VideoSourceModeExtension(struct soap *soap) { ns1__VideoSourceModeExtension *_p = soap_instantiate_ns1__VideoSourceModeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__VideoSourceModeExtension * soap_new_set_ns1__VideoSourceModeExtension(struct soap *soap, const std::vector<char * >& __any, char *__item1) { ns1__VideoSourceModeExtension *_p = soap_instantiate_ns1__VideoSourceModeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__VideoSourceModeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__VideoSourceModeExtension(struct soap *soap, ns1__VideoSourceModeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__VideoSourceModeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__VideoSourceMode
#define SOAP_TYPE_ns1__VideoSourceMode (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VideoSourceMode(struct soap*, const char*, int, const ns1__VideoSourceMode *, const char*);
SOAP_FMAC3 ns1__VideoSourceMode * SOAP_FMAC4 soap_in_ns1__VideoSourceMode(struct soap*, const char*, ns1__VideoSourceMode *, const char*);

#ifndef soap_write_ns1__VideoSourceMode
#define soap_write_ns1__VideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:VideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__VideoSourceMode * SOAP_FMAC4 soap_get_ns1__VideoSourceMode(struct soap*, ns1__VideoSourceMode *, const char*, const char*);

#ifndef soap_read_ns1__VideoSourceMode
#define soap_read_ns1__VideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__VideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__VideoSourceMode * SOAP_FMAC2 soap_instantiate_ns1__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VideoSourceMode * soap_new_ns1__VideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate_ns1__VideoSourceMode(soap, n, NULL, NULL, NULL); }

inline ns1__VideoSourceMode * soap_new_req_ns1__VideoSourceMode(struct soap *soap, float MaxFramerate, ns2__VideoResolution *MaxResolution, const std::string& Encodings, bool Reboot, const std::string& token) { ns1__VideoSourceMode *_p = soap_instantiate_ns1__VideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__VideoSourceMode::MaxFramerate = MaxFramerate; _p->ns1__VideoSourceMode::MaxResolution = MaxResolution; _p->ns1__VideoSourceMode::Encodings = Encodings; _p->ns1__VideoSourceMode::Reboot = Reboot; _p->ns1__VideoSourceMode::token = token; } return _p; }

inline ns1__VideoSourceMode * soap_new_set_ns1__VideoSourceMode(struct soap *soap, float MaxFramerate, ns2__VideoResolution *MaxResolution, const std::string& Encodings, bool Reboot, std::string *Description, ns1__VideoSourceModeExtension *Extension, const std::string& token, bool *Enabled, char *__anyAttribute, char *__item1) { ns1__VideoSourceMode *_p = soap_instantiate_ns1__VideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__VideoSourceMode::MaxFramerate = MaxFramerate; _p->ns1__VideoSourceMode::MaxResolution = MaxResolution; _p->ns1__VideoSourceMode::Encodings = Encodings; _p->ns1__VideoSourceMode::Reboot = Reboot; _p->ns1__VideoSourceMode::Description = Description; _p->ns1__VideoSourceMode::Extension = Extension; _p->ns1__VideoSourceMode::token = token; _p->ns1__VideoSourceMode::Enabled = Enabled; _p->ns1__VideoSourceMode::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__VideoSourceMode(struct soap *soap, ns1__VideoSourceMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__VideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__StreamingCapabilities
#define SOAP_TYPE_ns1__StreamingCapabilities (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StreamingCapabilities(struct soap*, const char*, int, const ns1__StreamingCapabilities *, const char*);
SOAP_FMAC3 ns1__StreamingCapabilities * SOAP_FMAC4 soap_in_ns1__StreamingCapabilities(struct soap*, const char*, ns1__StreamingCapabilities *, const char*);

#ifndef soap_write_ns1__StreamingCapabilities
#define soap_write_ns1__StreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StreamingCapabilities * SOAP_FMAC4 soap_get_ns1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities *, const char*, const char*);

#ifndef soap_read_ns1__StreamingCapabilities
#define soap_read_ns1__StreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__StreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_ns1__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StreamingCapabilities * soap_new_ns1__StreamingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns1__StreamingCapabilities(soap, n, NULL, NULL, NULL); }

inline ns1__StreamingCapabilities * soap_new_req_ns1__StreamingCapabilities(struct soap *soap) { ns1__StreamingCapabilities *_p = soap_instantiate_ns1__StreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__StreamingCapabilities * soap_new_set_ns1__StreamingCapabilities(struct soap *soap, const std::vector<char * >& __any, bool *RTPMulticast, bool *RTP_USCORETCP, bool *RTP_USCORERTSP_USCORETCP, bool *NonAggregateControl, bool *NoRTSPStreaming, char *__anyAttribute, char *__item1) { ns1__StreamingCapabilities *_p = soap_instantiate_ns1__StreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__StreamingCapabilities::__any = __any; _p->ns1__StreamingCapabilities::RTPMulticast = RTPMulticast; _p->ns1__StreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->ns1__StreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->ns1__StreamingCapabilities::NonAggregateControl = NonAggregateControl; _p->ns1__StreamingCapabilities::NoRTSPStreaming = NoRTSPStreaming; _p->ns1__StreamingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__StreamingCapabilities(struct soap *soap, ns1__StreamingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__StreamingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ProfileCapabilities
#define SOAP_TYPE_ns1__ProfileCapabilities (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProfileCapabilities(struct soap*, const char*, int, const ns1__ProfileCapabilities *, const char*);
SOAP_FMAC3 ns1__ProfileCapabilities * SOAP_FMAC4 soap_in_ns1__ProfileCapabilities(struct soap*, const char*, ns1__ProfileCapabilities *, const char*);

#ifndef soap_write_ns1__ProfileCapabilities
#define soap_write_ns1__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ProfileCapabilities * SOAP_FMAC4 soap_get_ns1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities *, const char*, const char*);

#ifndef soap_read_ns1__ProfileCapabilities
#define soap_read_ns1__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_ns1__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ProfileCapabilities * soap_new_ns1__ProfileCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ProfileCapabilities(soap, n, NULL, NULL, NULL); }

inline ns1__ProfileCapabilities * soap_new_req_ns1__ProfileCapabilities(struct soap *soap) { ns1__ProfileCapabilities *_p = soap_instantiate_ns1__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ProfileCapabilities * soap_new_set_ns1__ProfileCapabilities(struct soap *soap, const std::vector<char * >& __any, int *MaximumNumberOfProfiles, char *__anyAttribute, char *__item1) { ns1__ProfileCapabilities *_p = soap_instantiate_ns1__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ProfileCapabilities::__any = __any; _p->ns1__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles; _p->ns1__ProfileCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ProfileCapabilities(struct soap *soap, ns1__ProfileCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ProfileCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Capabilities
#define SOAP_TYPE_ns1__Capabilities (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Capabilities(struct soap*, const char*, int, const ns1__Capabilities *, const char*);
SOAP_FMAC3 ns1__Capabilities * SOAP_FMAC4 soap_in_ns1__Capabilities(struct soap*, const char*, ns1__Capabilities *, const char*);

#ifndef soap_write_ns1__Capabilities
#define soap_write_ns1__Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Capabilities * SOAP_FMAC4 soap_get_ns1__Capabilities(struct soap*, ns1__Capabilities *, const char*, const char*);

#ifndef soap_read_ns1__Capabilities
#define soap_read_ns1__Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Capabilities * SOAP_FMAC2 soap_instantiate_ns1__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Capabilities * soap_new_ns1__Capabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Capabilities(soap, n, NULL, NULL, NULL); }

inline ns1__Capabilities * soap_new_req_ns1__Capabilities(struct soap *soap, ns1__ProfileCapabilities *ProfileCapabilities, ns1__StreamingCapabilities *StreamingCapabilities) { ns1__Capabilities *_p = soap_instantiate_ns1__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Capabilities::ProfileCapabilities = ProfileCapabilities; _p->ns1__Capabilities::StreamingCapabilities = StreamingCapabilities; } return _p; }

inline ns1__Capabilities * soap_new_set_ns1__Capabilities(struct soap *soap, ns1__ProfileCapabilities *ProfileCapabilities, ns1__StreamingCapabilities *StreamingCapabilities, const std::vector<char * >& __any, bool *SnapshotUri, bool *Rotation, bool *VideoSourceMode, bool *OSD, bool *EXICompression, char *__anyAttribute, char *__item1) { ns1__Capabilities *_p = soap_instantiate_ns1__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Capabilities::ProfileCapabilities = ProfileCapabilities; _p->ns1__Capabilities::StreamingCapabilities = StreamingCapabilities; _p->ns1__Capabilities::__any = __any; _p->ns1__Capabilities::SnapshotUri = SnapshotUri; _p->ns1__Capabilities::Rotation = Rotation; _p->ns1__Capabilities::VideoSourceMode = VideoSourceMode; _p->ns1__Capabilities::OSD = OSD; _p->ns1__Capabilities::EXICompression = EXICompression; _p->ns1__Capabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__Capabilities(struct soap *soap, ns1__Capabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Capabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _xml__lang is a typedef element/attribute synonym for std__string */

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (46)
#endif

#define soap_default__xml__lang(soap, a) soap_default_std__string(soap, a)


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap_out__xml__lang soap_out_std__string


#define soap_in__xml__lang soap_in_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_copy__xml__lang soap_copy_std__string

/* _xmime__contentType is a typedef element/attribute synonym for std__string */

#ifndef SOAP_TYPE__xmime__contentType
#define SOAP_TYPE__xmime__contentType (45)
#endif

#define soap_default__xmime__contentType(soap, a) soap_default_std__string(soap, a)


#define soap_serialize__xmime__contentType soap_serialize_std__string


#define soap_out__xmime__contentType soap_out_std__string


#define soap_in__xmime__contentType soap_in_std__string


#define soap_put__xmime__contentType soap_put_std__string


#define soap_get__xmime__contentType soap_get_std__string


#define soap_instantiate__xmime__contentType soap_instantiate_std__string


#define soap_copy__xmime__contentType soap_copy_std__string

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);

#ifndef soap_write_xsd__unsignedLong
#define soap_write_xsd__unsignedLong(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

#ifndef soap_read_xsd__unsignedLong
#define soap_read_xsd__unsignedLong(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedLong(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(struct soap *soap, ULONG64 __item) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; } return _p; }

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(struct soap *soap, ULONG64 __item, char *__item1) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__token_
#define SOAP_TYPE_xsd__token_ (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token_(struct soap*, const char*, int, const xsd__token_ *, const char*);
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_in_xsd__token_(struct soap*, const char*, xsd__token_ *, const char*);

#ifndef soap_write_xsd__token_
#define soap_write_xsd__token_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_get_xsd__token_(struct soap*, xsd__token_ *, const char*, const char*);

#ifndef soap_read_xsd__token_
#define soap_read_xsd__token_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__token_ * SOAP_FMAC2 soap_instantiate_xsd__token_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__token_ * soap_new_xsd__token_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__token_(soap, n, NULL, NULL, NULL); }

inline xsd__token_ * soap_new_req_xsd__token_(struct soap *soap, const std::string& __item) { xsd__token_ *_p = soap_instantiate_xsd__token_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__token_::__item = __item; } return _p; }

inline xsd__token_ * soap_new_set_xsd__token_(struct soap *soap, const std::string& __item, char *__item1) { xsd__token_ *_p = soap_instantiate_xsd__token_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__token_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__token_(struct soap *soap, xsd__token_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__token_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (41)
#endif

#define soap_default_xsd__token(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__token
#define soap_write_xsd__token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__token(soap, data), 0) || soap_put_xsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__token
#define soap_read_xsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_copy_xsd__token soap_copy_std__string

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap, const std::string& __item) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, const std::string& __item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_
#define SOAP_TYPE_xsd__nonNegativeInteger_ (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger_(struct soap*, const char*, int, const xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger_(struct soap*, const char*, xsd__nonNegativeInteger_ *, const char*);

#ifndef soap_write_xsd__nonNegativeInteger_
#define soap_write_xsd__nonNegativeInteger_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger_(struct soap*, xsd__nonNegativeInteger_ *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger_
#define soap_read_xsd__nonNegativeInteger_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__nonNegativeInteger_ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__nonNegativeInteger_ * soap_new_xsd__nonNegativeInteger_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__nonNegativeInteger_(soap, n, NULL, NULL, NULL); }

inline xsd__nonNegativeInteger_ * soap_new_req_xsd__nonNegativeInteger_(struct soap *soap, const std::string& __item) { xsd__nonNegativeInteger_ *_p = soap_instantiate_xsd__nonNegativeInteger_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__nonNegativeInteger_::__item = __item; } return _p; }

inline xsd__nonNegativeInteger_ * soap_new_set_xsd__nonNegativeInteger_(struct soap *soap, const std::string& __item, char *__item1) { xsd__nonNegativeInteger_ *_p = soap_instantiate_xsd__nonNegativeInteger_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__nonNegativeInteger_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__nonNegativeInteger_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (38)
#endif

#define soap_default_xsd__nonNegativeInteger(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__nonNegativeInteger
#define soap_write_xsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__nonNegativeInteger(soap, data), 0) || soap_put_xsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger
#define soap_read_xsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_copy_xsd__nonNegativeInteger soap_copy_std__string

#ifndef SOAP_TYPE_xsd__integer_
#define SOAP_TYPE_xsd__integer_ (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer_(struct soap*, const char*, int, const xsd__integer_ *, const char*);
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_in_xsd__integer_(struct soap*, const char*, xsd__integer_ *, const char*);

#ifndef soap_write_xsd__integer_
#define soap_write_xsd__integer_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_get_xsd__integer_(struct soap*, xsd__integer_ *, const char*, const char*);

#ifndef soap_read_xsd__integer_
#define soap_read_xsd__integer_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__integer_ * SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__integer_ * soap_new_xsd__integer_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__integer_(soap, n, NULL, NULL, NULL); }

inline xsd__integer_ * soap_new_req_xsd__integer_(struct soap *soap, const std::string& __item) { xsd__integer_ *_p = soap_instantiate_xsd__integer_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__integer_::__item = __item; } return _p; }

inline xsd__integer_ * soap_new_set_xsd__integer_(struct soap *soap, const std::string& __item, char *__item1) { xsd__integer_ *_p = soap_instantiate_xsd__integer_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__integer_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__integer_(struct soap *soap, xsd__integer_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__integer_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (36)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data), 0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_copy_xsd__integer soap_copy_std__string

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__hexBinary_
#define SOAP_TYPE_xsd__hexBinary_ (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary_(struct soap*, const char*, int, const xsd__hexBinary_ *, const char*);
SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_in_xsd__hexBinary_(struct soap*, const char*, xsd__hexBinary_ *, const char*);

#ifndef soap_write_xsd__hexBinary_
#define soap_write_xsd__hexBinary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:hexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_get_xsd__hexBinary_(struct soap*, xsd__hexBinary_ *, const char*, const char*);

#ifndef soap_read_xsd__hexBinary_
#define soap_read_xsd__hexBinary_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__hexBinary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__hexBinary_ * SOAP_FMAC2 soap_instantiate_xsd__hexBinary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary_ * soap_new_xsd__hexBinary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__hexBinary_(soap, n, NULL, NULL, NULL); }

inline xsd__hexBinary_ * soap_new_req_xsd__hexBinary_(struct soap *soap, const xsd__hexBinary& __item) { xsd__hexBinary_ *_p = soap_instantiate_xsd__hexBinary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary_::__item = __item; } return _p; }

inline xsd__hexBinary_ * soap_new_set_xsd__hexBinary_(struct soap *soap, const xsd__hexBinary& __item, char *__item1) { xsd__hexBinary_ *_p = soap_instantiate_xsd__hexBinary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);

#ifndef soap_write_xsd__float
#define soap_write_xsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

#ifndef soap_read_xsd__float
#define soap_read_xsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1) { return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL); }

inline xsd__float * soap_new_req_xsd__float(struct soap *soap, float __item) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; } return _p; }

inline xsd__float * soap_new_set_xsd__float(struct soap *soap, float __item, char *__item1) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__float(struct soap *soap, xsd__float *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);

#ifndef soap_write_xsd__duration_
#define soap_write_xsd__duration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

#ifndef soap_read_xsd__duration_
#define soap_read_xsd__duration_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL); }

inline xsd__duration_ * soap_new_req_xsd__duration_(struct soap *soap, const std::string& __item) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; } return _p; }

inline xsd__duration_ * soap_new_set_xsd__duration_(struct soap *soap, const std::string& __item, char *__item1) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__duration_(struct soap *soap, xsd__duration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (30)
#endif

#define soap_default_xsd__duration(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, data), 0) || soap_put_xsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_copy_xsd__duration soap_copy_std__string

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);

#ifndef soap_write_xsd__base64Binary_
#define soap_write_xsd__base64Binary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary_
#define soap_read_xsd__base64Binary_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(struct soap *soap, const xsd__base64Binary& __item) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; } return _p; }

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(struct soap *soap, const xsd__base64Binary& __item, char *__item1) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);

#ifndef soap_write_xsd__anyURI_
#define soap_write_xsd__anyURI_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

#ifndef soap_read_xsd__anyURI_
#define soap_read_xsd__anyURI_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL); }

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(struct soap *soap, const std::string& __item) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; } return _p; }

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(struct soap *soap, const std::string& __item, char *__item1) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (23)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data), 0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_xsd__anySimpleType_
#define SOAP_TYPE_xsd__anySimpleType_ (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType_(struct soap*, const char*, int, const xsd__anySimpleType_ *, const char*);
SOAP_FMAC3 xsd__anySimpleType_ * SOAP_FMAC4 soap_in_xsd__anySimpleType_(struct soap*, const char*, xsd__anySimpleType_ *, const char*);

#ifndef soap_write_xsd__anySimpleType_
#define soap_write_xsd__anySimpleType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anySimpleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anySimpleType_ * SOAP_FMAC4 soap_get_xsd__anySimpleType_(struct soap*, xsd__anySimpleType_ *, const char*, const char*);

#ifndef soap_read_xsd__anySimpleType_
#define soap_read_xsd__anySimpleType_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anySimpleType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anySimpleType_ * SOAP_FMAC2 soap_instantiate_xsd__anySimpleType_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anySimpleType_ * soap_new_xsd__anySimpleType_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anySimpleType_(soap, n, NULL, NULL, NULL); }

inline xsd__anySimpleType_ * soap_new_req_xsd__anySimpleType_(struct soap *soap, const std::string& __item) { xsd__anySimpleType_ *_p = soap_instantiate_xsd__anySimpleType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anySimpleType_::__item = __item; } return _p; }

inline xsd__anySimpleType_ * soap_new_set_xsd__anySimpleType_(struct soap *soap, const std::string& __item, char *__item1) { xsd__anySimpleType_ *_p = soap_instantiate_xsd__anySimpleType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anySimpleType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anySimpleType_(struct soap *soap, xsd__anySimpleType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anySimpleType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (21)
#endif

#define soap_default_xsd__anySimpleType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anySimpleType
#define soap_write_xsd__anySimpleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anySimpleType(soap, data), 0) || soap_put_xsd__anySimpleType(soap, data, "xsd:anySimpleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anySimpleType
#define soap_read_xsd__anySimpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anySimpleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_copy_xsd__anySimpleType soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);

#ifndef soap_write_xsd__QName_
#define soap_write_xsd__QName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

#ifndef soap_read_xsd__QName_
#define soap_read_xsd__QName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL); }

inline xsd__QName_ * soap_new_req_xsd__QName_(struct soap *soap, const std::string& __item) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; } return _p; }

inline xsd__QName_ * soap_new_set_xsd__QName_(struct soap *soap, const std::string& __item, char *__item1) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__QName_(struct soap *soap, xsd__QName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__NCName_
#define SOAP_TYPE_xsd__NCName_ (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName_(struct soap*, const char*, int, const xsd__NCName_ *, const char*);
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_in_xsd__NCName_(struct soap*, const char*, xsd__NCName_ *, const char*);

#ifndef soap_write_xsd__NCName_
#define soap_write_xsd__NCName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_get_xsd__NCName_(struct soap*, xsd__NCName_ *, const char*, const char*);

#ifndef soap_read_xsd__NCName_
#define soap_read_xsd__NCName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__NCName_ * SOAP_FMAC2 soap_instantiate_xsd__NCName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__NCName_ * soap_new_xsd__NCName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__NCName_(soap, n, NULL, NULL, NULL); }

inline xsd__NCName_ * soap_new_req_xsd__NCName_(struct soap *soap, const std::string& __item) { xsd__NCName_ *_p = soap_instantiate_xsd__NCName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__NCName_::__item = __item; } return _p; }

inline xsd__NCName_ * soap_new_set_xsd__NCName_(struct soap *soap, const std::string& __item, char *__item1) { xsd__NCName_ *_p = soap_instantiate_xsd__NCName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__NCName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__NCName_(struct soap *soap, xsd__NCName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__NCName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (18)
#endif

#define soap_default_xsd__NCName(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__NCName
#define soap_write_xsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NCName(soap, data), 0) || soap_put_xsd__NCName(soap, data, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__NCName
#define soap_read_xsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_copy_xsd__NCName soap_copy_std__string

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (17)
#endif

#define soap_default_SOAP_ENV__Envelope(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Envelope
#define soap_write_SOAP_ENV__Envelope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Envelope(soap, data), 0) || soap_put_SOAP_ENV__Envelope(soap, data, "SOAP-ENV:Envelope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Envelope
#define soap_read_SOAP_ENV__Envelope(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Envelope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_SOAP_ENV__Envelope soap_instantiate_std__string


#define soap_copy_SOAP_ENV__Envelope soap_copy_std__string

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (16)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);

#ifndef soap_write_xsd__hexBinary
#define soap_write_xsd__hexBinary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:hexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_xsd__hexBinary
#define soap_read_xsd__hexBinary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__hexBinary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL); }

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(struct soap *soap) { xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(struct soap *soap, unsigned char *__ptr, int __size) { xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary::__ptr = __ptr; _p->xsd__hexBinary::__size = __size; } return _p; }

inline void soap_delete_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (12)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data), 0) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (2000)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (1997)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (1995)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (1994)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__DeleteOSD
#define SOAP_TYPE___ns1__DeleteOSD (1993)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteOSD(struct soap*, struct __ns1__DeleteOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteOSD(struct soap*, const struct __ns1__DeleteOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteOSD(struct soap*, const char*, int, const struct __ns1__DeleteOSD *, const char*);
SOAP_FMAC3 struct __ns1__DeleteOSD * SOAP_FMAC4 soap_in___ns1__DeleteOSD(struct soap*, const char*, struct __ns1__DeleteOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteOSD(struct soap*, const struct __ns1__DeleteOSD *, const char*, const char*);

#ifndef soap_write___ns1__DeleteOSD
#define soap_write___ns1__DeleteOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteOSD(soap, data), 0) || soap_put___ns1__DeleteOSD(soap, data, "-ns1:DeleteOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteOSD * SOAP_FMAC4 soap_get___ns1__DeleteOSD(struct soap*, struct __ns1__DeleteOSD *, const char*, const char*);

#ifndef soap_read___ns1__DeleteOSD
#define soap_read___ns1__DeleteOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteOSD * SOAP_FMAC2 soap_instantiate___ns1__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteOSD * soap_new___ns1__DeleteOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteOSD * soap_new_req___ns1__DeleteOSD(struct soap *soap) { struct __ns1__DeleteOSD *_p = soap_instantiate___ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteOSD(soap, _p); } return _p; }

inline struct __ns1__DeleteOSD * soap_new_set___ns1__DeleteOSD(struct soap *soap, _ns1__DeleteOSD *ns1__DeleteOSD) { struct __ns1__DeleteOSD *_p = soap_instantiate___ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteOSD(soap, _p); _p->ns1__DeleteOSD = ns1__DeleteOSD; } return _p; }

inline void soap_delete___ns1__DeleteOSD(struct soap *soap, struct __ns1__DeleteOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__CreateOSD
#define SOAP_TYPE___ns1__CreateOSD (1989)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateOSD(struct soap*, struct __ns1__CreateOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateOSD(struct soap*, const struct __ns1__CreateOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateOSD(struct soap*, const char*, int, const struct __ns1__CreateOSD *, const char*);
SOAP_FMAC3 struct __ns1__CreateOSD * SOAP_FMAC4 soap_in___ns1__CreateOSD(struct soap*, const char*, struct __ns1__CreateOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateOSD(struct soap*, const struct __ns1__CreateOSD *, const char*, const char*);

#ifndef soap_write___ns1__CreateOSD
#define soap_write___ns1__CreateOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__CreateOSD(soap, data), 0) || soap_put___ns1__CreateOSD(soap, data, "-ns1:CreateOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CreateOSD * SOAP_FMAC4 soap_get___ns1__CreateOSD(struct soap*, struct __ns1__CreateOSD *, const char*, const char*);

#ifndef soap_read___ns1__CreateOSD
#define soap_read___ns1__CreateOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__CreateOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__CreateOSD * SOAP_FMAC2 soap_instantiate___ns1__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateOSD * soap_new___ns1__CreateOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CreateOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CreateOSD * soap_new_req___ns1__CreateOSD(struct soap *soap) { struct __ns1__CreateOSD *_p = soap_instantiate___ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateOSD(soap, _p); } return _p; }

inline struct __ns1__CreateOSD * soap_new_set___ns1__CreateOSD(struct soap *soap, _ns1__CreateOSD *ns1__CreateOSD) { struct __ns1__CreateOSD *_p = soap_instantiate___ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateOSD(soap, _p); _p->ns1__CreateOSD = ns1__CreateOSD; } return _p; }

inline void soap_delete___ns1__CreateOSD(struct soap *soap, struct __ns1__CreateOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetOSD
#define SOAP_TYPE___ns1__SetOSD (1985)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetOSD(struct soap*, struct __ns1__SetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetOSD(struct soap*, const struct __ns1__SetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetOSD(struct soap*, const char*, int, const struct __ns1__SetOSD *, const char*);
SOAP_FMAC3 struct __ns1__SetOSD * SOAP_FMAC4 soap_in___ns1__SetOSD(struct soap*, const char*, struct __ns1__SetOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetOSD(struct soap*, const struct __ns1__SetOSD *, const char*, const char*);

#ifndef soap_write___ns1__SetOSD
#define soap_write___ns1__SetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetOSD(soap, data), 0) || soap_put___ns1__SetOSD(soap, data, "-ns1:SetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetOSD * SOAP_FMAC4 soap_get___ns1__SetOSD(struct soap*, struct __ns1__SetOSD *, const char*, const char*);

#ifndef soap_read___ns1__SetOSD
#define soap_read___ns1__SetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetOSD * SOAP_FMAC2 soap_instantiate___ns1__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetOSD * soap_new___ns1__SetOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetOSD * soap_new_req___ns1__SetOSD(struct soap *soap) { struct __ns1__SetOSD *_p = soap_instantiate___ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetOSD(soap, _p); } return _p; }

inline struct __ns1__SetOSD * soap_new_set___ns1__SetOSD(struct soap *soap, _ns1__SetOSD *ns1__SetOSD) { struct __ns1__SetOSD *_p = soap_instantiate___ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetOSD(soap, _p); _p->ns1__SetOSD = ns1__SetOSD; } return _p; }

inline void soap_delete___ns1__SetOSD(struct soap *soap, struct __ns1__SetOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOSDOptions
#define SOAP_TYPE___ns1__GetOSDOptions (1981)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOSDOptions(struct soap*, struct __ns1__GetOSDOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOSDOptions(struct soap*, const struct __ns1__GetOSDOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOSDOptions(struct soap*, const char*, int, const struct __ns1__GetOSDOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetOSDOptions * SOAP_FMAC4 soap_in___ns1__GetOSDOptions(struct soap*, const char*, struct __ns1__GetOSDOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOSDOptions(struct soap*, const struct __ns1__GetOSDOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetOSDOptions
#define soap_write___ns1__GetOSDOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOSDOptions(soap, data), 0) || soap_put___ns1__GetOSDOptions(soap, data, "-ns1:GetOSDOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOSDOptions * SOAP_FMAC4 soap_get___ns1__GetOSDOptions(struct soap*, struct __ns1__GetOSDOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetOSDOptions
#define soap_read___ns1__GetOSDOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOSDOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOSDOptions * SOAP_FMAC2 soap_instantiate___ns1__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOSDOptions * soap_new___ns1__GetOSDOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOSDOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOSDOptions * soap_new_req___ns1__GetOSDOptions(struct soap *soap) { struct __ns1__GetOSDOptions *_p = soap_instantiate___ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDOptions(soap, _p); } return _p; }

inline struct __ns1__GetOSDOptions * soap_new_set___ns1__GetOSDOptions(struct soap *soap, _ns1__GetOSDOptions *ns1__GetOSDOptions) { struct __ns1__GetOSDOptions *_p = soap_instantiate___ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDOptions(soap, _p); _p->ns1__GetOSDOptions = ns1__GetOSDOptions; } return _p; }

inline void soap_delete___ns1__GetOSDOptions(struct soap *soap, struct __ns1__GetOSDOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOSDOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOSD
#define SOAP_TYPE___ns1__GetOSD (1977)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOSD(struct soap*, struct __ns1__GetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOSD(struct soap*, const struct __ns1__GetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOSD(struct soap*, const char*, int, const struct __ns1__GetOSD *, const char*);
SOAP_FMAC3 struct __ns1__GetOSD * SOAP_FMAC4 soap_in___ns1__GetOSD(struct soap*, const char*, struct __ns1__GetOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOSD(struct soap*, const struct __ns1__GetOSD *, const char*, const char*);

#ifndef soap_write___ns1__GetOSD
#define soap_write___ns1__GetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOSD(soap, data), 0) || soap_put___ns1__GetOSD(soap, data, "-ns1:GetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOSD * SOAP_FMAC4 soap_get___ns1__GetOSD(struct soap*, struct __ns1__GetOSD *, const char*, const char*);

#ifndef soap_read___ns1__GetOSD
#define soap_read___ns1__GetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOSD * SOAP_FMAC2 soap_instantiate___ns1__GetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOSD * soap_new___ns1__GetOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOSD * soap_new_req___ns1__GetOSD(struct soap *soap) { struct __ns1__GetOSD *_p = soap_instantiate___ns1__GetOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSD(soap, _p); } return _p; }

inline struct __ns1__GetOSD * soap_new_set___ns1__GetOSD(struct soap *soap, _ns1__GetOSD *ns1__GetOSD) { struct __ns1__GetOSD *_p = soap_instantiate___ns1__GetOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSD(soap, _p); _p->ns1__GetOSD = ns1__GetOSD; } return _p; }

inline void soap_delete___ns1__GetOSD(struct soap *soap, struct __ns1__GetOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOSDs
#define SOAP_TYPE___ns1__GetOSDs (1973)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOSDs(struct soap*, struct __ns1__GetOSDs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOSDs(struct soap*, const struct __ns1__GetOSDs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOSDs(struct soap*, const char*, int, const struct __ns1__GetOSDs *, const char*);
SOAP_FMAC3 struct __ns1__GetOSDs * SOAP_FMAC4 soap_in___ns1__GetOSDs(struct soap*, const char*, struct __ns1__GetOSDs *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOSDs(struct soap*, const struct __ns1__GetOSDs *, const char*, const char*);

#ifndef soap_write___ns1__GetOSDs
#define soap_write___ns1__GetOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOSDs(soap, data), 0) || soap_put___ns1__GetOSDs(soap, data, "-ns1:GetOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOSDs * SOAP_FMAC4 soap_get___ns1__GetOSDs(struct soap*, struct __ns1__GetOSDs *, const char*, const char*);

#ifndef soap_read___ns1__GetOSDs
#define soap_read___ns1__GetOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOSDs * SOAP_FMAC2 soap_instantiate___ns1__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOSDs * soap_new___ns1__GetOSDs(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOSDs(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOSDs * soap_new_req___ns1__GetOSDs(struct soap *soap) { struct __ns1__GetOSDs *_p = soap_instantiate___ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDs(soap, _p); } return _p; }

inline struct __ns1__GetOSDs * soap_new_set___ns1__GetOSDs(struct soap *soap, _ns1__GetOSDs *ns1__GetOSDs) { struct __ns1__GetOSDs *_p = soap_instantiate___ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDs(soap, _p); _p->ns1__GetOSDs = ns1__GetOSDs; } return _p; }

inline void soap_delete___ns1__GetOSDs(struct soap *soap, struct __ns1__GetOSDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOSDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoSourceMode
#define SOAP_TYPE___ns1__SetVideoSourceMode (1969)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoSourceMode(struct soap*, struct __ns1__SetVideoSourceMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoSourceMode(struct soap*, const struct __ns1__SetVideoSourceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoSourceMode(struct soap*, const char*, int, const struct __ns1__SetVideoSourceMode *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoSourceMode * SOAP_FMAC4 soap_in___ns1__SetVideoSourceMode(struct soap*, const char*, struct __ns1__SetVideoSourceMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoSourceMode(struct soap*, const struct __ns1__SetVideoSourceMode *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoSourceMode
#define soap_write___ns1__SetVideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoSourceMode(soap, data), 0) || soap_put___ns1__SetVideoSourceMode(soap, data, "-ns1:SetVideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoSourceMode * SOAP_FMAC4 soap_get___ns1__SetVideoSourceMode(struct soap*, struct __ns1__SetVideoSourceMode *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoSourceMode
#define soap_read___ns1__SetVideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___ns1__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoSourceMode * soap_new___ns1__SetVideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoSourceMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoSourceMode * soap_new_req___ns1__SetVideoSourceMode(struct soap *soap) { struct __ns1__SetVideoSourceMode *_p = soap_instantiate___ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceMode(soap, _p); } return _p; }

inline struct __ns1__SetVideoSourceMode * soap_new_set___ns1__SetVideoSourceMode(struct soap *soap, _ns1__SetVideoSourceMode *ns1__SetVideoSourceMode) { struct __ns1__SetVideoSourceMode *_p = soap_instantiate___ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceMode(soap, _p); _p->ns1__SetVideoSourceMode = ns1__SetVideoSourceMode; } return _p; }

inline void soap_delete___ns1__SetVideoSourceMode(struct soap *soap, struct __ns1__SetVideoSourceMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceModes
#define SOAP_TYPE___ns1__GetVideoSourceModes (1965)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceModes(struct soap*, struct __ns1__GetVideoSourceModes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceModes(struct soap*, const struct __ns1__GetVideoSourceModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceModes(struct soap*, const char*, int, const struct __ns1__GetVideoSourceModes *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceModes * SOAP_FMAC4 soap_in___ns1__GetVideoSourceModes(struct soap*, const char*, struct __ns1__GetVideoSourceModes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceModes(struct soap*, const struct __ns1__GetVideoSourceModes *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceModes
#define soap_write___ns1__GetVideoSourceModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceModes(soap, data), 0) || soap_put___ns1__GetVideoSourceModes(soap, data, "-ns1:GetVideoSourceModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceModes * SOAP_FMAC4 soap_get___ns1__GetVideoSourceModes(struct soap*, struct __ns1__GetVideoSourceModes *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceModes
#define soap_read___ns1__GetVideoSourceModes(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceModes * soap_new___ns1__GetVideoSourceModes(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceModes(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceModes * soap_new_req___ns1__GetVideoSourceModes(struct soap *soap) { struct __ns1__GetVideoSourceModes *_p = soap_instantiate___ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceModes(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceModes * soap_new_set___ns1__GetVideoSourceModes(struct soap *soap, _ns1__GetVideoSourceModes *ns1__GetVideoSourceModes) { struct __ns1__GetVideoSourceModes *_p = soap_instantiate___ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceModes(soap, _p); _p->ns1__GetVideoSourceModes = ns1__GetVideoSourceModes; } return _p; }

inline void soap_delete___ns1__GetVideoSourceModes(struct soap *soap, struct __ns1__GetVideoSourceModes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceModes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetSnapshotUri
#define SOAP_TYPE___ns1__GetSnapshotUri (1961)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSnapshotUri(struct soap*, struct __ns1__GetSnapshotUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSnapshotUri(struct soap*, const struct __ns1__GetSnapshotUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSnapshotUri(struct soap*, const char*, int, const struct __ns1__GetSnapshotUri *, const char*);
SOAP_FMAC3 struct __ns1__GetSnapshotUri * SOAP_FMAC4 soap_in___ns1__GetSnapshotUri(struct soap*, const char*, struct __ns1__GetSnapshotUri *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSnapshotUri(struct soap*, const struct __ns1__GetSnapshotUri *, const char*, const char*);

#ifndef soap_write___ns1__GetSnapshotUri
#define soap_write___ns1__GetSnapshotUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetSnapshotUri(soap, data), 0) || soap_put___ns1__GetSnapshotUri(soap, data, "-ns1:GetSnapshotUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetSnapshotUri * SOAP_FMAC4 soap_get___ns1__GetSnapshotUri(struct soap*, struct __ns1__GetSnapshotUri *, const char*, const char*);

#ifndef soap_read___ns1__GetSnapshotUri
#define soap_read___ns1__GetSnapshotUri(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetSnapshotUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___ns1__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSnapshotUri * soap_new___ns1__GetSnapshotUri(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetSnapshotUri(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetSnapshotUri * soap_new_req___ns1__GetSnapshotUri(struct soap *soap) { struct __ns1__GetSnapshotUri *_p = soap_instantiate___ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSnapshotUri(soap, _p); } return _p; }

inline struct __ns1__GetSnapshotUri * soap_new_set___ns1__GetSnapshotUri(struct soap *soap, _ns1__GetSnapshotUri *ns1__GetSnapshotUri) { struct __ns1__GetSnapshotUri *_p = soap_instantiate___ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSnapshotUri(soap, _p); _p->ns1__GetSnapshotUri = ns1__GetSnapshotUri; } return _p; }

inline void soap_delete___ns1__GetSnapshotUri(struct soap *soap, struct __ns1__GetSnapshotUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSnapshotUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetSynchronizationPoint
#define SOAP_TYPE___ns1__SetSynchronizationPoint (1957)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSynchronizationPoint(struct soap*, struct __ns1__SetSynchronizationPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSynchronizationPoint(struct soap*, const struct __ns1__SetSynchronizationPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSynchronizationPoint(struct soap*, const char*, int, const struct __ns1__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 struct __ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_in___ns1__SetSynchronizationPoint(struct soap*, const char*, struct __ns1__SetSynchronizationPoint *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSynchronizationPoint(struct soap*, const struct __ns1__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_write___ns1__SetSynchronizationPoint
#define soap_write___ns1__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetSynchronizationPoint(soap, data), 0) || soap_put___ns1__SetSynchronizationPoint(soap, data, "-ns1:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_get___ns1__SetSynchronizationPoint(struct soap*, struct __ns1__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_read___ns1__SetSynchronizationPoint
#define soap_read___ns1__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___ns1__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetSynchronizationPoint * soap_new___ns1__SetSynchronizationPoint(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetSynchronizationPoint(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetSynchronizationPoint * soap_new_req___ns1__SetSynchronizationPoint(struct soap *soap) { struct __ns1__SetSynchronizationPoint *_p = soap_instantiate___ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetSynchronizationPoint(soap, _p); } return _p; }

inline struct __ns1__SetSynchronizationPoint * soap_new_set___ns1__SetSynchronizationPoint(struct soap *soap, _ns1__SetSynchronizationPoint *ns1__SetSynchronizationPoint) { struct __ns1__SetSynchronizationPoint *_p = soap_instantiate___ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetSynchronizationPoint(soap, _p); _p->ns1__SetSynchronizationPoint = ns1__SetSynchronizationPoint; } return _p; }

inline void soap_delete___ns1__SetSynchronizationPoint(struct soap *soap, struct __ns1__SetSynchronizationPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSynchronizationPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StopMulticastStreaming
#define SOAP_TYPE___ns1__StopMulticastStreaming (1953)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StopMulticastStreaming(struct soap*, struct __ns1__StopMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StopMulticastStreaming(struct soap*, const struct __ns1__StopMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StopMulticastStreaming(struct soap*, const char*, int, const struct __ns1__StopMulticastStreaming *, const char*);
SOAP_FMAC3 struct __ns1__StopMulticastStreaming * SOAP_FMAC4 soap_in___ns1__StopMulticastStreaming(struct soap*, const char*, struct __ns1__StopMulticastStreaming *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StopMulticastStreaming(struct soap*, const struct __ns1__StopMulticastStreaming *, const char*, const char*);

#ifndef soap_write___ns1__StopMulticastStreaming
#define soap_write___ns1__StopMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StopMulticastStreaming(soap, data), 0) || soap_put___ns1__StopMulticastStreaming(soap, data, "-ns1:StopMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StopMulticastStreaming * SOAP_FMAC4 soap_get___ns1__StopMulticastStreaming(struct soap*, struct __ns1__StopMulticastStreaming *, const char*, const char*);

#ifndef soap_read___ns1__StopMulticastStreaming
#define soap_read___ns1__StopMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StopMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___ns1__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StopMulticastStreaming * soap_new___ns1__StopMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StopMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StopMulticastStreaming * soap_new_req___ns1__StopMulticastStreaming(struct soap *soap) { struct __ns1__StopMulticastStreaming *_p = soap_instantiate___ns1__StopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopMulticastStreaming(soap, _p); } return _p; }

inline struct __ns1__StopMulticastStreaming * soap_new_set___ns1__StopMulticastStreaming(struct soap *soap, _ns1__StopMulticastStreaming *ns1__StopMulticastStreaming) { struct __ns1__StopMulticastStreaming *_p = soap_instantiate___ns1__StopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopMulticastStreaming(soap, _p); _p->ns1__StopMulticastStreaming = ns1__StopMulticastStreaming; } return _p; }

inline void soap_delete___ns1__StopMulticastStreaming(struct soap *soap, struct __ns1__StopMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StopMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StartMulticastStreaming
#define SOAP_TYPE___ns1__StartMulticastStreaming (1949)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StartMulticastStreaming(struct soap*, struct __ns1__StartMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StartMulticastStreaming(struct soap*, const struct __ns1__StartMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StartMulticastStreaming(struct soap*, const char*, int, const struct __ns1__StartMulticastStreaming *, const char*);
SOAP_FMAC3 struct __ns1__StartMulticastStreaming * SOAP_FMAC4 soap_in___ns1__StartMulticastStreaming(struct soap*, const char*, struct __ns1__StartMulticastStreaming *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StartMulticastStreaming(struct soap*, const struct __ns1__StartMulticastStreaming *, const char*, const char*);

#ifndef soap_write___ns1__StartMulticastStreaming
#define soap_write___ns1__StartMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StartMulticastStreaming(soap, data), 0) || soap_put___ns1__StartMulticastStreaming(soap, data, "-ns1:StartMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StartMulticastStreaming * SOAP_FMAC4 soap_get___ns1__StartMulticastStreaming(struct soap*, struct __ns1__StartMulticastStreaming *, const char*, const char*);

#ifndef soap_read___ns1__StartMulticastStreaming
#define soap_read___ns1__StartMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StartMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___ns1__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StartMulticastStreaming * soap_new___ns1__StartMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StartMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StartMulticastStreaming * soap_new_req___ns1__StartMulticastStreaming(struct soap *soap) { struct __ns1__StartMulticastStreaming *_p = soap_instantiate___ns1__StartMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartMulticastStreaming(soap, _p); } return _p; }

inline struct __ns1__StartMulticastStreaming * soap_new_set___ns1__StartMulticastStreaming(struct soap *soap, _ns1__StartMulticastStreaming *ns1__StartMulticastStreaming) { struct __ns1__StartMulticastStreaming *_p = soap_instantiate___ns1__StartMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartMulticastStreaming(soap, _p); _p->ns1__StartMulticastStreaming = ns1__StartMulticastStreaming; } return _p; }

inline void soap_delete___ns1__StartMulticastStreaming(struct soap *soap, struct __ns1__StartMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StartMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetStreamUri
#define SOAP_TYPE___ns1__GetStreamUri (1945)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStreamUri(struct soap*, struct __ns1__GetStreamUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStreamUri(struct soap*, const struct __ns1__GetStreamUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStreamUri(struct soap*, const char*, int, const struct __ns1__GetStreamUri *, const char*);
SOAP_FMAC3 struct __ns1__GetStreamUri * SOAP_FMAC4 soap_in___ns1__GetStreamUri(struct soap*, const char*, struct __ns1__GetStreamUri *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStreamUri(struct soap*, const struct __ns1__GetStreamUri *, const char*, const char*);

#ifndef soap_write___ns1__GetStreamUri
#define soap_write___ns1__GetStreamUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetStreamUri(soap, data), 0) || soap_put___ns1__GetStreamUri(soap, data, "-ns1:GetStreamUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetStreamUri * SOAP_FMAC4 soap_get___ns1__GetStreamUri(struct soap*, struct __ns1__GetStreamUri *, const char*, const char*);

#ifndef soap_read___ns1__GetStreamUri
#define soap_read___ns1__GetStreamUri(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetStreamUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetStreamUri * SOAP_FMAC2 soap_instantiate___ns1__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetStreamUri * soap_new___ns1__GetStreamUri(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetStreamUri(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetStreamUri * soap_new_req___ns1__GetStreamUri(struct soap *soap) { struct __ns1__GetStreamUri *_p = soap_instantiate___ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetStreamUri(soap, _p); } return _p; }

inline struct __ns1__GetStreamUri * soap_new_set___ns1__GetStreamUri(struct soap *soap, _ns1__GetStreamUri *ns1__GetStreamUri) { struct __ns1__GetStreamUri *_p = soap_instantiate___ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetStreamUri(soap, _p); _p->ns1__GetStreamUri = ns1__GetStreamUri; } return _p; }

inline void soap_delete___ns1__GetStreamUri(struct soap *soap, struct __ns1__GetStreamUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetStreamUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___ns1__GetGuaranteedNumberOfVideoEncoderInstances (1941)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, int, const struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC3 struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_in___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

#ifndef soap_write___ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define soap_write___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data), 0) || soap_put___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data, "-ns1:GetGuaranteedNumberOfVideoEncoderInstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_get___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

#ifndef soap_read___ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define soap_read___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances * soap_new___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_req___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap) { struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_instantiate___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, _p); } return _p; }

inline struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_set___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *ns1__GetGuaranteedNumberOfVideoEncoderInstances) { struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *_p = soap_instantiate___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, _p); _p->ns1__GetGuaranteedNumberOfVideoEncoderInstances = ns1__GetGuaranteedNumberOfVideoEncoderInstances; } return _p; }

inline void soap_delete___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, struct __ns1__GetGuaranteedNumberOfVideoEncoderInstances *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioDecoderConfigurationOptions (1937)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioDecoderConfigurationOptions(struct soap*, struct __ns1__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioDecoderConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioDecoderConfigurationOptions
#define soap_write___ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioDecoderConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioDecoderConfigurationOptions(soap, data, "-ns1:GetAudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioDecoderConfigurationOptions(struct soap*, struct __ns1__GetAudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioDecoderConfigurationOptions
#define soap_read___ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioDecoderConfigurationOptions * soap_new___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioDecoderConfigurationOptions * soap_new_req___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioDecoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioDecoderConfigurationOptions * soap_new_set___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, _ns1__GetAudioDecoderConfigurationOptions *ns1__GetAudioDecoderConfigurationOptions) { struct __ns1__GetAudioDecoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurationOptions(soap, _p); _p->ns1__GetAudioDecoderConfigurationOptions = ns1__GetAudioDecoderConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __ns1__GetAudioDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioOutputConfigurationOptions (1933)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioOutputConfigurationOptions(struct soap*, struct __ns1__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioOutputConfigurationOptions(struct soap*, const struct __ns1__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioOutputConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioOutputConfigurationOptions(struct soap*, const struct __ns1__GetAudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioOutputConfigurationOptions
#define soap_write___ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioOutputConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioOutputConfigurationOptions(soap, data, "-ns1:GetAudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioOutputConfigurationOptions(struct soap*, struct __ns1__GetAudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioOutputConfigurationOptions
#define soap_read___ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioOutputConfigurationOptions * soap_new___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioOutputConfigurationOptions * soap_new_req___ns1__GetAudioOutputConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioOutputConfigurationOptions *_p = soap_instantiate___ns1__GetAudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioOutputConfigurationOptions * soap_new_set___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, _ns1__GetAudioOutputConfigurationOptions *ns1__GetAudioOutputConfigurationOptions) { struct __ns1__GetAudioOutputConfigurationOptions *_p = soap_instantiate___ns1__GetAudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurationOptions(soap, _p); _p->ns1__GetAudioOutputConfigurationOptions = ns1__GetAudioOutputConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, struct __ns1__GetAudioOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMetadataConfigurationOptions
#define SOAP_TYPE___ns1__GetMetadataConfigurationOptions (1929)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMetadataConfigurationOptions(struct soap*, struct __ns1__GetMetadataConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMetadataConfigurationOptions(struct soap*, const struct __ns1__GetMetadataConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMetadataConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetMetadataConfigurationOptions(struct soap*, const char*, struct __ns1__GetMetadataConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMetadataConfigurationOptions(struct soap*, const struct __ns1__GetMetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetMetadataConfigurationOptions
#define soap_write___ns1__GetMetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMetadataConfigurationOptions(soap, data), 0) || soap_put___ns1__GetMetadataConfigurationOptions(soap, data, "-ns1:GetMetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetMetadataConfigurationOptions(struct soap*, struct __ns1__GetMetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetMetadataConfigurationOptions
#define soap_read___ns1__GetMetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMetadataConfigurationOptions * soap_new___ns1__GetMetadataConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMetadataConfigurationOptions * soap_new_req___ns1__GetMetadataConfigurationOptions(struct soap *soap) { struct __ns1__GetMetadataConfigurationOptions *_p = soap_instantiate___ns1__GetMetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetMetadataConfigurationOptions * soap_new_set___ns1__GetMetadataConfigurationOptions(struct soap *soap, _ns1__GetMetadataConfigurationOptions *ns1__GetMetadataConfigurationOptions) { struct __ns1__GetMetadataConfigurationOptions *_p = soap_instantiate___ns1__GetMetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurationOptions(soap, _p); _p->ns1__GetMetadataConfigurationOptions = ns1__GetMetadataConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetMetadataConfigurationOptions(struct soap *soap, struct __ns1__GetMetadataConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMetadataConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioEncoderConfigurationOptions (1925)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioEncoderConfigurationOptions(struct soap*, struct __ns1__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioEncoderConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioEncoderConfigurationOptions
#define soap_write___ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioEncoderConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioEncoderConfigurationOptions(soap, data, "-ns1:GetAudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioEncoderConfigurationOptions(struct soap*, struct __ns1__GetAudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioEncoderConfigurationOptions
#define soap_read___ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioEncoderConfigurationOptions * soap_new___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioEncoderConfigurationOptions * soap_new_req___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioEncoderConfigurationOptions * soap_new_set___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, _ns1__GetAudioEncoderConfigurationOptions *ns1__GetAudioEncoderConfigurationOptions) { struct __ns1__GetAudioEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurationOptions(soap, _p); _p->ns1__GetAudioEncoderConfigurationOptions = ns1__GetAudioEncoderConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __ns1__GetAudioEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioSourceConfigurationOptions (1921)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioSourceConfigurationOptions(struct soap*, struct __ns1__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioSourceConfigurationOptions(struct soap*, const struct __ns1__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioSourceConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioSourceConfigurationOptions(struct soap*, const struct __ns1__GetAudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioSourceConfigurationOptions
#define soap_write___ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioSourceConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioSourceConfigurationOptions(soap, data, "-ns1:GetAudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioSourceConfigurationOptions(struct soap*, struct __ns1__GetAudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioSourceConfigurationOptions
#define soap_read___ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioSourceConfigurationOptions * soap_new___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioSourceConfigurationOptions * soap_new_req___ns1__GetAudioSourceConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioSourceConfigurationOptions *_p = soap_instantiate___ns1__GetAudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioSourceConfigurationOptions * soap_new_set___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, _ns1__GetAudioSourceConfigurationOptions *ns1__GetAudioSourceConfigurationOptions) { struct __ns1__GetAudioSourceConfigurationOptions *_p = soap_instantiate___ns1__GetAudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurationOptions(soap, _p); _p->ns1__GetAudioSourceConfigurationOptions = ns1__GetAudioSourceConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, struct __ns1__GetAudioSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___ns1__GetVideoEncoderConfigurationOptions (1917)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoEncoderConfigurationOptions(struct soap*, struct __ns1__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const struct __ns1__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, struct __ns1__GetVideoEncoderConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const struct __ns1__GetVideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoEncoderConfigurationOptions
#define soap_write___ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoEncoderConfigurationOptions(soap, data), 0) || soap_put___ns1__GetVideoEncoderConfigurationOptions(soap, data, "-ns1:GetVideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetVideoEncoderConfigurationOptions(struct soap*, struct __ns1__GetVideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoEncoderConfigurationOptions
#define soap_read___ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoEncoderConfigurationOptions * soap_new___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoEncoderConfigurationOptions * soap_new_req___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap) { struct __ns1__GetVideoEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetVideoEncoderConfigurationOptions * soap_new_set___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, _ns1__GetVideoEncoderConfigurationOptions *ns1__GetVideoEncoderConfigurationOptions) { struct __ns1__GetVideoEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurationOptions(soap, _p); _p->ns1__GetVideoEncoderConfigurationOptions = ns1__GetVideoEncoderConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __ns1__GetVideoEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___ns1__GetVideoSourceConfigurationOptions (1913)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceConfigurationOptions(struct soap*, struct __ns1__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceConfigurationOptions(struct soap*, const struct __ns1__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, struct __ns1__GetVideoSourceConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceConfigurationOptions(struct soap*, const struct __ns1__GetVideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceConfigurationOptions
#define soap_write___ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceConfigurationOptions(soap, data), 0) || soap_put___ns1__GetVideoSourceConfigurationOptions(soap, data, "-ns1:GetVideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetVideoSourceConfigurationOptions(struct soap*, struct __ns1__GetVideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceConfigurationOptions
#define soap_read___ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceConfigurationOptions * soap_new___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceConfigurationOptions * soap_new_req___ns1__GetVideoSourceConfigurationOptions(struct soap *soap) { struct __ns1__GetVideoSourceConfigurationOptions *_p = soap_instantiate___ns1__GetVideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceConfigurationOptions * soap_new_set___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, _ns1__GetVideoSourceConfigurationOptions *ns1__GetVideoSourceConfigurationOptions) { struct __ns1__GetVideoSourceConfigurationOptions *_p = soap_instantiate___ns1__GetVideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurationOptions(soap, _p); _p->ns1__GetVideoSourceConfigurationOptions = ns1__GetVideoSourceConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, struct __ns1__GetVideoSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioDecoderConfiguration
#define SOAP_TYPE___ns1__SetAudioDecoderConfiguration (1909)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioDecoderConfiguration(struct soap*, struct __ns1__SetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioDecoderConfiguration(struct soap*, const struct __ns1__SetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioDecoderConfiguration(struct soap*, const char*, struct __ns1__SetAudioDecoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioDecoderConfiguration(struct soap*, const struct __ns1__SetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioDecoderConfiguration
#define soap_write___ns1__SetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioDecoderConfiguration(soap, data), 0) || soap_put___ns1__SetAudioDecoderConfiguration(soap, data, "-ns1:SetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioDecoderConfiguration(struct soap*, struct __ns1__SetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioDecoderConfiguration
#define soap_read___ns1__SetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioDecoderConfiguration * soap_new___ns1__SetAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioDecoderConfiguration * soap_new_req___ns1__SetAudioDecoderConfiguration(struct soap *soap) { struct __ns1__SetAudioDecoderConfiguration *_p = soap_instantiate___ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioDecoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioDecoderConfiguration * soap_new_set___ns1__SetAudioDecoderConfiguration(struct soap *soap, _ns1__SetAudioDecoderConfiguration *ns1__SetAudioDecoderConfiguration) { struct __ns1__SetAudioDecoderConfiguration *_p = soap_instantiate___ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioDecoderConfiguration(soap, _p); _p->ns1__SetAudioDecoderConfiguration = ns1__SetAudioDecoderConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioDecoderConfiguration(struct soap *soap, struct __ns1__SetAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioOutputConfiguration
#define SOAP_TYPE___ns1__SetAudioOutputConfiguration (1905)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioOutputConfiguration(struct soap*, struct __ns1__SetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioOutputConfiguration(struct soap*, const struct __ns1__SetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioOutputConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioOutputConfiguration(struct soap*, const char*, struct __ns1__SetAudioOutputConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioOutputConfiguration(struct soap*, const struct __ns1__SetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioOutputConfiguration
#define soap_write___ns1__SetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioOutputConfiguration(soap, data), 0) || soap_put___ns1__SetAudioOutputConfiguration(soap, data, "-ns1:SetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioOutputConfiguration(struct soap*, struct __ns1__SetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioOutputConfiguration
#define soap_read___ns1__SetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioOutputConfiguration * soap_new___ns1__SetAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioOutputConfiguration * soap_new_req___ns1__SetAudioOutputConfiguration(struct soap *soap) { struct __ns1__SetAudioOutputConfiguration *_p = soap_instantiate___ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioOutputConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioOutputConfiguration * soap_new_set___ns1__SetAudioOutputConfiguration(struct soap *soap, _ns1__SetAudioOutputConfiguration *ns1__SetAudioOutputConfiguration) { struct __ns1__SetAudioOutputConfiguration *_p = soap_instantiate___ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioOutputConfiguration(soap, _p); _p->ns1__SetAudioOutputConfiguration = ns1__SetAudioOutputConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioOutputConfiguration(struct soap *soap, struct __ns1__SetAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetMetadataConfiguration
#define SOAP_TYPE___ns1__SetMetadataConfiguration (1901)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMetadataConfiguration(struct soap*, struct __ns1__SetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMetadataConfiguration(struct soap*, const struct __ns1__SetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMetadataConfiguration(struct soap*, const char*, int, const struct __ns1__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_in___ns1__SetMetadataConfiguration(struct soap*, const char*, struct __ns1__SetMetadataConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMetadataConfiguration(struct soap*, const struct __ns1__SetMetadataConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetMetadataConfiguration
#define soap_write___ns1__SetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetMetadataConfiguration(soap, data), 0) || soap_put___ns1__SetMetadataConfiguration(soap, data, "-ns1:SetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_get___ns1__SetMetadataConfiguration(struct soap*, struct __ns1__SetMetadataConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetMetadataConfiguration
#define soap_read___ns1__SetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMetadataConfiguration * soap_new___ns1__SetMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetMetadataConfiguration * soap_new_req___ns1__SetMetadataConfiguration(struct soap *soap) { struct __ns1__SetMetadataConfiguration *_p = soap_instantiate___ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMetadataConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetMetadataConfiguration * soap_new_set___ns1__SetMetadataConfiguration(struct soap *soap, _ns1__SetMetadataConfiguration *ns1__SetMetadataConfiguration) { struct __ns1__SetMetadataConfiguration *_p = soap_instantiate___ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMetadataConfiguration(soap, _p); _p->ns1__SetMetadataConfiguration = ns1__SetMetadataConfiguration; } return _p; }

inline void soap_delete___ns1__SetMetadataConfiguration(struct soap *soap, struct __ns1__SetMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___ns1__SetVideoAnalyticsConfiguration (1897)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoAnalyticsConfiguration(struct soap*, struct __ns1__SetVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoAnalyticsConfiguration(struct soap*, const struct __ns1__SetVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __ns1__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___ns1__SetVideoAnalyticsConfiguration(struct soap*, const char*, struct __ns1__SetVideoAnalyticsConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoAnalyticsConfiguration(struct soap*, const struct __ns1__SetVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoAnalyticsConfiguration
#define soap_write___ns1__SetVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoAnalyticsConfiguration(soap, data), 0) || soap_put___ns1__SetVideoAnalyticsConfiguration(soap, data, "-ns1:SetVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___ns1__SetVideoAnalyticsConfiguration(struct soap*, struct __ns1__SetVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoAnalyticsConfiguration
#define soap_read___ns1__SetVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoAnalyticsConfiguration * soap_new___ns1__SetVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoAnalyticsConfiguration * soap_new_req___ns1__SetVideoAnalyticsConfiguration(struct soap *soap) { struct __ns1__SetVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__SetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoAnalyticsConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetVideoAnalyticsConfiguration * soap_new_set___ns1__SetVideoAnalyticsConfiguration(struct soap *soap, _ns1__SetVideoAnalyticsConfiguration *ns1__SetVideoAnalyticsConfiguration) { struct __ns1__SetVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__SetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoAnalyticsConfiguration(soap, _p); _p->ns1__SetVideoAnalyticsConfiguration = ns1__SetVideoAnalyticsConfiguration; } return _p; }

inline void soap_delete___ns1__SetVideoAnalyticsConfiguration(struct soap *soap, struct __ns1__SetVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioEncoderConfiguration
#define SOAP_TYPE___ns1__SetAudioEncoderConfiguration (1893)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioEncoderConfiguration(struct soap*, struct __ns1__SetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioEncoderConfiguration(struct soap*, const struct __ns1__SetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioEncoderConfiguration(struct soap*, const char*, struct __ns1__SetAudioEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioEncoderConfiguration(struct soap*, const struct __ns1__SetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioEncoderConfiguration
#define soap_write___ns1__SetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioEncoderConfiguration(soap, data), 0) || soap_put___ns1__SetAudioEncoderConfiguration(soap, data, "-ns1:SetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioEncoderConfiguration(struct soap*, struct __ns1__SetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioEncoderConfiguration
#define soap_read___ns1__SetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioEncoderConfiguration * soap_new___ns1__SetAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioEncoderConfiguration * soap_new_req___ns1__SetAudioEncoderConfiguration(struct soap *soap) { struct __ns1__SetAudioEncoderConfiguration *_p = soap_instantiate___ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioEncoderConfiguration * soap_new_set___ns1__SetAudioEncoderConfiguration(struct soap *soap, _ns1__SetAudioEncoderConfiguration *ns1__SetAudioEncoderConfiguration) { struct __ns1__SetAudioEncoderConfiguration *_p = soap_instantiate___ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioEncoderConfiguration(soap, _p); _p->ns1__SetAudioEncoderConfiguration = ns1__SetAudioEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioEncoderConfiguration(struct soap *soap, struct __ns1__SetAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioSourceConfiguration
#define SOAP_TYPE___ns1__SetAudioSourceConfiguration (1889)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioSourceConfiguration(struct soap*, struct __ns1__SetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioSourceConfiguration(struct soap*, const struct __ns1__SetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioSourceConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioSourceConfiguration(struct soap*, const char*, struct __ns1__SetAudioSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioSourceConfiguration(struct soap*, const struct __ns1__SetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioSourceConfiguration
#define soap_write___ns1__SetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioSourceConfiguration(soap, data), 0) || soap_put___ns1__SetAudioSourceConfiguration(soap, data, "-ns1:SetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioSourceConfiguration(struct soap*, struct __ns1__SetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioSourceConfiguration
#define soap_read___ns1__SetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioSourceConfiguration * soap_new___ns1__SetAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioSourceConfiguration * soap_new_req___ns1__SetAudioSourceConfiguration(struct soap *soap) { struct __ns1__SetAudioSourceConfiguration *_p = soap_instantiate___ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioSourceConfiguration * soap_new_set___ns1__SetAudioSourceConfiguration(struct soap *soap, _ns1__SetAudioSourceConfiguration *ns1__SetAudioSourceConfiguration) { struct __ns1__SetAudioSourceConfiguration *_p = soap_instantiate___ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioSourceConfiguration(soap, _p); _p->ns1__SetAudioSourceConfiguration = ns1__SetAudioSourceConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioSourceConfiguration(struct soap *soap, struct __ns1__SetAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoEncoderConfiguration
#define SOAP_TYPE___ns1__SetVideoEncoderConfiguration (1885)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoEncoderConfiguration(struct soap*, struct __ns1__SetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoEncoderConfiguration(struct soap*, const struct __ns1__SetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__SetVideoEncoderConfiguration(struct soap*, const char*, struct __ns1__SetVideoEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoEncoderConfiguration(struct soap*, const struct __ns1__SetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoEncoderConfiguration
#define soap_write___ns1__SetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoEncoderConfiguration(soap, data), 0) || soap_put___ns1__SetVideoEncoderConfiguration(soap, data, "-ns1:SetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__SetVideoEncoderConfiguration(struct soap*, struct __ns1__SetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoEncoderConfiguration
#define soap_read___ns1__SetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoEncoderConfiguration * soap_new___ns1__SetVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoEncoderConfiguration * soap_new_req___ns1__SetVideoEncoderConfiguration(struct soap *soap) { struct __ns1__SetVideoEncoderConfiguration *_p = soap_instantiate___ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetVideoEncoderConfiguration * soap_new_set___ns1__SetVideoEncoderConfiguration(struct soap *soap, _ns1__SetVideoEncoderConfiguration *ns1__SetVideoEncoderConfiguration) { struct __ns1__SetVideoEncoderConfiguration *_p = soap_instantiate___ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoEncoderConfiguration(soap, _p); _p->ns1__SetVideoEncoderConfiguration = ns1__SetVideoEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__SetVideoEncoderConfiguration(struct soap *soap, struct __ns1__SetVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoSourceConfiguration
#define SOAP_TYPE___ns1__SetVideoSourceConfiguration (1881)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoSourceConfiguration(struct soap*, struct __ns1__SetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoSourceConfiguration(struct soap*, const struct __ns1__SetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoSourceConfiguration(struct soap*, const char*, int, const struct __ns1__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in___ns1__SetVideoSourceConfiguration(struct soap*, const char*, struct __ns1__SetVideoSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoSourceConfiguration(struct soap*, const struct __ns1__SetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoSourceConfiguration
#define soap_write___ns1__SetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoSourceConfiguration(soap, data), 0) || soap_put___ns1__SetVideoSourceConfiguration(soap, data, "-ns1:SetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get___ns1__SetVideoSourceConfiguration(struct soap*, struct __ns1__SetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoSourceConfiguration
#define soap_read___ns1__SetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoSourceConfiguration * soap_new___ns1__SetVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoSourceConfiguration * soap_new_req___ns1__SetVideoSourceConfiguration(struct soap *soap) { struct __ns1__SetVideoSourceConfiguration *_p = soap_instantiate___ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetVideoSourceConfiguration * soap_new_set___ns1__SetVideoSourceConfiguration(struct soap *soap, _ns1__SetVideoSourceConfiguration *ns1__SetVideoSourceConfiguration) { struct __ns1__SetVideoSourceConfiguration *_p = soap_instantiate___ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceConfiguration(soap, _p); _p->ns1__SetVideoSourceConfiguration = ns1__SetVideoSourceConfiguration; } return _p; }

inline void soap_delete___ns1__SetVideoSourceConfiguration(struct soap *soap, struct __ns1__SetVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___ns1__GetCompatibleAudioDecoderConfigurations (1877)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, struct __ns1__GetCompatibleAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleAudioDecoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleAudioDecoderConfigurations
#define soap_write___ns1__GetCompatibleAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleAudioDecoderConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleAudioDecoderConfigurations(soap, data, "-ns1:GetCompatibleAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, struct __ns1__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleAudioDecoderConfigurations
#define soap_read___ns1__GetCompatibleAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleAudioDecoderConfigurations * soap_new___ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleAudioDecoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleAudioDecoderConfigurations * soap_new_req___ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap) { struct __ns1__GetCompatibleAudioDecoderConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioDecoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleAudioDecoderConfigurations * soap_new_set___ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _ns1__GetCompatibleAudioDecoderConfigurations *ns1__GetCompatibleAudioDecoderConfigurations) { struct __ns1__GetCompatibleAudioDecoderConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioDecoderConfigurations(soap, _p); _p->ns1__GetCompatibleAudioDecoderConfigurations = ns1__GetCompatibleAudioDecoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleAudioDecoderConfigurations(struct soap *soap, struct __ns1__GetCompatibleAudioDecoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___ns1__GetCompatibleAudioOutputConfigurations (1873)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, struct __ns1__GetCompatibleAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleAudioOutputConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleAudioOutputConfigurations
#define soap_write___ns1__GetCompatibleAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleAudioOutputConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleAudioOutputConfigurations(soap, data, "-ns1:GetCompatibleAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, struct __ns1__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleAudioOutputConfigurations
#define soap_read___ns1__GetCompatibleAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleAudioOutputConfigurations * soap_new___ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleAudioOutputConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleAudioOutputConfigurations * soap_new_req___ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap) { struct __ns1__GetCompatibleAudioOutputConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioOutputConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleAudioOutputConfigurations * soap_new_set___ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, _ns1__GetCompatibleAudioOutputConfigurations *ns1__GetCompatibleAudioOutputConfigurations) { struct __ns1__GetCompatibleAudioOutputConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioOutputConfigurations(soap, _p); _p->ns1__GetCompatibleAudioOutputConfigurations = ns1__GetCompatibleAudioOutputConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleAudioOutputConfigurations(struct soap *soap, struct __ns1__GetCompatibleAudioOutputConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleAudioOutputConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___ns1__GetCompatibleMetadataConfigurations (1869)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleMetadataConfigurations(struct soap*, struct __ns1__GetCompatibleMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleMetadataConfigurations(struct soap*, const struct __ns1__GetCompatibleMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleMetadataConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleMetadataConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleMetadataConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleMetadataConfigurations(struct soap*, const struct __ns1__GetCompatibleMetadataConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleMetadataConfigurations
#define soap_write___ns1__GetCompatibleMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleMetadataConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleMetadataConfigurations(soap, data, "-ns1:GetCompatibleMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleMetadataConfigurations(struct soap*, struct __ns1__GetCompatibleMetadataConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleMetadataConfigurations
#define soap_read___ns1__GetCompatibleMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleMetadataConfigurations * soap_new___ns1__GetCompatibleMetadataConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleMetadataConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleMetadataConfigurations * soap_new_req___ns1__GetCompatibleMetadataConfigurations(struct soap *soap) { struct __ns1__GetCompatibleMetadataConfigurations *_p = soap_instantiate___ns1__GetCompatibleMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleMetadataConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleMetadataConfigurations * soap_new_set___ns1__GetCompatibleMetadataConfigurations(struct soap *soap, _ns1__GetCompatibleMetadataConfigurations *ns1__GetCompatibleMetadataConfigurations) { struct __ns1__GetCompatibleMetadataConfigurations *_p = soap_instantiate___ns1__GetCompatibleMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleMetadataConfigurations(soap, _p); _p->ns1__GetCompatibleMetadataConfigurations = ns1__GetCompatibleMetadataConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleMetadataConfigurations(struct soap *soap, struct __ns1__GetCompatibleMetadataConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleMetadataConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___ns1__GetCompatibleVideoAnalyticsConfigurations (1865)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct __ns1__GetCompatibleVideoAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const struct __ns1__GetCompatibleVideoAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const struct __ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleVideoAnalyticsConfigurations
#define soap_write___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data, "-ns1:GetCompatibleVideoAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct __ns1__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleVideoAnalyticsConfigurations
#define soap_read___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleVideoAnalyticsConfigurations * soap_new___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleVideoAnalyticsConfigurations * soap_new_req___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap) { struct __ns1__GetCompatibleVideoAnalyticsConfigurations *_p = soap_instantiate___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleVideoAnalyticsConfigurations * soap_new_set___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _ns1__GetCompatibleVideoAnalyticsConfigurations *ns1__GetCompatibleVideoAnalyticsConfigurations) { struct __ns1__GetCompatibleVideoAnalyticsConfigurations *_p = soap_instantiate___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleVideoAnalyticsConfigurations(soap, _p); _p->ns1__GetCompatibleVideoAnalyticsConfigurations = ns1__GetCompatibleVideoAnalyticsConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, struct __ns1__GetCompatibleVideoAnalyticsConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___ns1__GetCompatibleAudioSourceConfigurations (1861)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, struct __ns1__GetCompatibleAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleAudioSourceConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleAudioSourceConfigurations
#define soap_write___ns1__GetCompatibleAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleAudioSourceConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleAudioSourceConfigurations(soap, data, "-ns1:GetCompatibleAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, struct __ns1__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleAudioSourceConfigurations
#define soap_read___ns1__GetCompatibleAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleAudioSourceConfigurations * soap_new___ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleAudioSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleAudioSourceConfigurations * soap_new_req___ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap) { struct __ns1__GetCompatibleAudioSourceConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioSourceConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleAudioSourceConfigurations * soap_new_set___ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, _ns1__GetCompatibleAudioSourceConfigurations *ns1__GetCompatibleAudioSourceConfigurations) { struct __ns1__GetCompatibleAudioSourceConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioSourceConfigurations(soap, _p); _p->ns1__GetCompatibleAudioSourceConfigurations = ns1__GetCompatibleAudioSourceConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleAudioSourceConfigurations(struct soap *soap, struct __ns1__GetCompatibleAudioSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleAudioSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___ns1__GetCompatibleAudioEncoderConfigurations (1857)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, struct __ns1__GetCompatibleAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleAudioEncoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const struct __ns1__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleAudioEncoderConfigurations
#define soap_write___ns1__GetCompatibleAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleAudioEncoderConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleAudioEncoderConfigurations(soap, data, "-ns1:GetCompatibleAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, struct __ns1__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleAudioEncoderConfigurations
#define soap_read___ns1__GetCompatibleAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleAudioEncoderConfigurations * soap_new___ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleAudioEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleAudioEncoderConfigurations * soap_new_req___ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap) { struct __ns1__GetCompatibleAudioEncoderConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioEncoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleAudioEncoderConfigurations * soap_new_set___ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _ns1__GetCompatibleAudioEncoderConfigurations *ns1__GetCompatibleAudioEncoderConfigurations) { struct __ns1__GetCompatibleAudioEncoderConfigurations *_p = soap_instantiate___ns1__GetCompatibleAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleAudioEncoderConfigurations(soap, _p); _p->ns1__GetCompatibleAudioEncoderConfigurations = ns1__GetCompatibleAudioEncoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleAudioEncoderConfigurations(struct soap *soap, struct __ns1__GetCompatibleAudioEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___ns1__GetCompatibleVideoSourceConfigurations (1853)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, struct __ns1__GetCompatibleVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const struct __ns1__GetCompatibleVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleVideoSourceConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const struct __ns1__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleVideoSourceConfigurations
#define soap_write___ns1__GetCompatibleVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleVideoSourceConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleVideoSourceConfigurations(soap, data, "-ns1:GetCompatibleVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, struct __ns1__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleVideoSourceConfigurations
#define soap_read___ns1__GetCompatibleVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleVideoSourceConfigurations * soap_new___ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleVideoSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleVideoSourceConfigurations * soap_new_req___ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap) { struct __ns1__GetCompatibleVideoSourceConfigurations *_p = soap_instantiate___ns1__GetCompatibleVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleVideoSourceConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleVideoSourceConfigurations * soap_new_set___ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, _ns1__GetCompatibleVideoSourceConfigurations *ns1__GetCompatibleVideoSourceConfigurations) { struct __ns1__GetCompatibleVideoSourceConfigurations *_p = soap_instantiate___ns1__GetCompatibleVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleVideoSourceConfigurations(soap, _p); _p->ns1__GetCompatibleVideoSourceConfigurations = ns1__GetCompatibleVideoSourceConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleVideoSourceConfigurations(struct soap *soap, struct __ns1__GetCompatibleVideoSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleVideoSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___ns1__GetCompatibleVideoEncoderConfigurations (1849)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, struct __ns1__GetCompatibleVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const struct __ns1__GetCompatibleVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, struct __ns1__GetCompatibleVideoEncoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const struct __ns1__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetCompatibleVideoEncoderConfigurations
#define soap_write___ns1__GetCompatibleVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetCompatibleVideoEncoderConfigurations(soap, data), 0) || soap_put___ns1__GetCompatibleVideoEncoderConfigurations(soap, data, "-ns1:GetCompatibleVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, struct __ns1__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetCompatibleVideoEncoderConfigurations
#define soap_read___ns1__GetCompatibleVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetCompatibleVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCompatibleVideoEncoderConfigurations * soap_new___ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetCompatibleVideoEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetCompatibleVideoEncoderConfigurations * soap_new_req___ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap) { struct __ns1__GetCompatibleVideoEncoderConfigurations *_p = soap_instantiate___ns1__GetCompatibleVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleVideoEncoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetCompatibleVideoEncoderConfigurations * soap_new_set___ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _ns1__GetCompatibleVideoEncoderConfigurations *ns1__GetCompatibleVideoEncoderConfigurations) { struct __ns1__GetCompatibleVideoEncoderConfigurations *_p = soap_instantiate___ns1__GetCompatibleVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetCompatibleVideoEncoderConfigurations(soap, _p); _p->ns1__GetCompatibleVideoEncoderConfigurations = ns1__GetCompatibleVideoEncoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetCompatibleVideoEncoderConfigurations(struct soap *soap, struct __ns1__GetCompatibleVideoEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioDecoderConfiguration
#define SOAP_TYPE___ns1__GetAudioDecoderConfiguration (1845)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioDecoderConfiguration(struct soap*, struct __ns1__GetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioDecoderConfiguration(struct soap*, const struct __ns1__GetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __ns1__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___ns1__GetAudioDecoderConfiguration(struct soap*, const char*, struct __ns1__GetAudioDecoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioDecoderConfiguration(struct soap*, const struct __ns1__GetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioDecoderConfiguration
#define soap_write___ns1__GetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioDecoderConfiguration(soap, data), 0) || soap_put___ns1__GetAudioDecoderConfiguration(soap, data, "-ns1:GetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___ns1__GetAudioDecoderConfiguration(struct soap*, struct __ns1__GetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioDecoderConfiguration
#define soap_read___ns1__GetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioDecoderConfiguration * soap_new___ns1__GetAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioDecoderConfiguration * soap_new_req___ns1__GetAudioDecoderConfiguration(struct soap *soap) { struct __ns1__GetAudioDecoderConfiguration *_p = soap_instantiate___ns1__GetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetAudioDecoderConfiguration * soap_new_set___ns1__GetAudioDecoderConfiguration(struct soap *soap, _ns1__GetAudioDecoderConfiguration *ns1__GetAudioDecoderConfiguration) { struct __ns1__GetAudioDecoderConfiguration *_p = soap_instantiate___ns1__GetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfiguration(soap, _p); _p->ns1__GetAudioDecoderConfiguration = ns1__GetAudioDecoderConfiguration; } return _p; }

inline void soap_delete___ns1__GetAudioDecoderConfiguration(struct soap *soap, struct __ns1__GetAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioOutputConfiguration
#define SOAP_TYPE___ns1__GetAudioOutputConfiguration (1841)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioOutputConfiguration(struct soap*, struct __ns1__GetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioOutputConfiguration(struct soap*, const struct __ns1__GetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioOutputConfiguration(struct soap*, const char*, int, const struct __ns1__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioOutputConfiguration * SOAP_FMAC4 soap_in___ns1__GetAudioOutputConfiguration(struct soap*, const char*, struct __ns1__GetAudioOutputConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioOutputConfiguration(struct soap*, const struct __ns1__GetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioOutputConfiguration
#define soap_write___ns1__GetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioOutputConfiguration(soap, data), 0) || soap_put___ns1__GetAudioOutputConfiguration(soap, data, "-ns1:GetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioOutputConfiguration * SOAP_FMAC4 soap_get___ns1__GetAudioOutputConfiguration(struct soap*, struct __ns1__GetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioOutputConfiguration
#define soap_read___ns1__GetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioOutputConfiguration * soap_new___ns1__GetAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioOutputConfiguration * soap_new_req___ns1__GetAudioOutputConfiguration(struct soap *soap) { struct __ns1__GetAudioOutputConfiguration *_p = soap_instantiate___ns1__GetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetAudioOutputConfiguration * soap_new_set___ns1__GetAudioOutputConfiguration(struct soap *soap, _ns1__GetAudioOutputConfiguration *ns1__GetAudioOutputConfiguration) { struct __ns1__GetAudioOutputConfiguration *_p = soap_instantiate___ns1__GetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfiguration(soap, _p); _p->ns1__GetAudioOutputConfiguration = ns1__GetAudioOutputConfiguration; } return _p; }

inline void soap_delete___ns1__GetAudioOutputConfiguration(struct soap *soap, struct __ns1__GetAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMetadataConfiguration
#define SOAP_TYPE___ns1__GetMetadataConfiguration (1837)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMetadataConfiguration(struct soap*, struct __ns1__GetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMetadataConfiguration(struct soap*, const struct __ns1__GetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMetadataConfiguration(struct soap*, const char*, int, const struct __ns1__GetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetMetadataConfiguration * SOAP_FMAC4 soap_in___ns1__GetMetadataConfiguration(struct soap*, const char*, struct __ns1__GetMetadataConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMetadataConfiguration(struct soap*, const struct __ns1__GetMetadataConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetMetadataConfiguration
#define soap_write___ns1__GetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMetadataConfiguration(soap, data), 0) || soap_put___ns1__GetMetadataConfiguration(soap, data, "-ns1:GetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMetadataConfiguration * SOAP_FMAC4 soap_get___ns1__GetMetadataConfiguration(struct soap*, struct __ns1__GetMetadataConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetMetadataConfiguration
#define soap_read___ns1__GetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMetadataConfiguration * soap_new___ns1__GetMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMetadataConfiguration * soap_new_req___ns1__GetMetadataConfiguration(struct soap *soap) { struct __ns1__GetMetadataConfiguration *_p = soap_instantiate___ns1__GetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetMetadataConfiguration * soap_new_set___ns1__GetMetadataConfiguration(struct soap *soap, _ns1__GetMetadataConfiguration *ns1__GetMetadataConfiguration) { struct __ns1__GetMetadataConfiguration *_p = soap_instantiate___ns1__GetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfiguration(soap, _p); _p->ns1__GetMetadataConfiguration = ns1__GetMetadataConfiguration; } return _p; }

inline void soap_delete___ns1__GetMetadataConfiguration(struct soap *soap, struct __ns1__GetMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___ns1__GetVideoAnalyticsConfiguration (1833)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoAnalyticsConfiguration(struct soap*, struct __ns1__GetVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoAnalyticsConfiguration(struct soap*, const struct __ns1__GetVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __ns1__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___ns1__GetVideoAnalyticsConfiguration(struct soap*, const char*, struct __ns1__GetVideoAnalyticsConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoAnalyticsConfiguration(struct soap*, const struct __ns1__GetVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoAnalyticsConfiguration
#define soap_write___ns1__GetVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoAnalyticsConfiguration(soap, data), 0) || soap_put___ns1__GetVideoAnalyticsConfiguration(soap, data, "-ns1:GetVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___ns1__GetVideoAnalyticsConfiguration(struct soap*, struct __ns1__GetVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoAnalyticsConfiguration
#define soap_read___ns1__GetVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoAnalyticsConfiguration * soap_new___ns1__GetVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoAnalyticsConfiguration * soap_new_req___ns1__GetVideoAnalyticsConfiguration(struct soap *soap) { struct __ns1__GetVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__GetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoAnalyticsConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetVideoAnalyticsConfiguration * soap_new_set___ns1__GetVideoAnalyticsConfiguration(struct soap *soap, _ns1__GetVideoAnalyticsConfiguration *ns1__GetVideoAnalyticsConfiguration) { struct __ns1__GetVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__GetVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoAnalyticsConfiguration(soap, _p); _p->ns1__GetVideoAnalyticsConfiguration = ns1__GetVideoAnalyticsConfiguration; } return _p; }

inline void soap_delete___ns1__GetVideoAnalyticsConfiguration(struct soap *soap, struct __ns1__GetVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioEncoderConfiguration
#define SOAP_TYPE___ns1__GetAudioEncoderConfiguration (1829)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioEncoderConfiguration(struct soap*, struct __ns1__GetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioEncoderConfiguration(struct soap*, const struct __ns1__GetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__GetAudioEncoderConfiguration(struct soap*, const char*, struct __ns1__GetAudioEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioEncoderConfiguration(struct soap*, const struct __ns1__GetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioEncoderConfiguration
#define soap_write___ns1__GetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioEncoderConfiguration(soap, data), 0) || soap_put___ns1__GetAudioEncoderConfiguration(soap, data, "-ns1:GetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__GetAudioEncoderConfiguration(struct soap*, struct __ns1__GetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioEncoderConfiguration
#define soap_read___ns1__GetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioEncoderConfiguration * soap_new___ns1__GetAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioEncoderConfiguration * soap_new_req___ns1__GetAudioEncoderConfiguration(struct soap *soap) { struct __ns1__GetAudioEncoderConfiguration *_p = soap_instantiate___ns1__GetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetAudioEncoderConfiguration * soap_new_set___ns1__GetAudioEncoderConfiguration(struct soap *soap, _ns1__GetAudioEncoderConfiguration *ns1__GetAudioEncoderConfiguration) { struct __ns1__GetAudioEncoderConfiguration *_p = soap_instantiate___ns1__GetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfiguration(soap, _p); _p->ns1__GetAudioEncoderConfiguration = ns1__GetAudioEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__GetAudioEncoderConfiguration(struct soap *soap, struct __ns1__GetAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioSourceConfiguration
#define SOAP_TYPE___ns1__GetAudioSourceConfiguration (1825)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioSourceConfiguration(struct soap*, struct __ns1__GetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioSourceConfiguration(struct soap*, const struct __ns1__GetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioSourceConfiguration(struct soap*, const char*, int, const struct __ns1__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioSourceConfiguration * SOAP_FMAC4 soap_in___ns1__GetAudioSourceConfiguration(struct soap*, const char*, struct __ns1__GetAudioSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioSourceConfiguration(struct soap*, const struct __ns1__GetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioSourceConfiguration
#define soap_write___ns1__GetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioSourceConfiguration(soap, data), 0) || soap_put___ns1__GetAudioSourceConfiguration(soap, data, "-ns1:GetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioSourceConfiguration * SOAP_FMAC4 soap_get___ns1__GetAudioSourceConfiguration(struct soap*, struct __ns1__GetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioSourceConfiguration
#define soap_read___ns1__GetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioSourceConfiguration * soap_new___ns1__GetAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioSourceConfiguration * soap_new_req___ns1__GetAudioSourceConfiguration(struct soap *soap) { struct __ns1__GetAudioSourceConfiguration *_p = soap_instantiate___ns1__GetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetAudioSourceConfiguration * soap_new_set___ns1__GetAudioSourceConfiguration(struct soap *soap, _ns1__GetAudioSourceConfiguration *ns1__GetAudioSourceConfiguration) { struct __ns1__GetAudioSourceConfiguration *_p = soap_instantiate___ns1__GetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfiguration(soap, _p); _p->ns1__GetAudioSourceConfiguration = ns1__GetAudioSourceConfiguration; } return _p; }

inline void soap_delete___ns1__GetAudioSourceConfiguration(struct soap *soap, struct __ns1__GetAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoEncoderConfiguration
#define SOAP_TYPE___ns1__GetVideoEncoderConfiguration (1821)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoEncoderConfiguration(struct soap*, struct __ns1__GetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoEncoderConfiguration(struct soap*, const struct __ns1__GetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__GetVideoEncoderConfiguration(struct soap*, const char*, struct __ns1__GetVideoEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoEncoderConfiguration(struct soap*, const struct __ns1__GetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoEncoderConfiguration
#define soap_write___ns1__GetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoEncoderConfiguration(soap, data), 0) || soap_put___ns1__GetVideoEncoderConfiguration(soap, data, "-ns1:GetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__GetVideoEncoderConfiguration(struct soap*, struct __ns1__GetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoEncoderConfiguration
#define soap_read___ns1__GetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoEncoderConfiguration * soap_new___ns1__GetVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoEncoderConfiguration * soap_new_req___ns1__GetVideoEncoderConfiguration(struct soap *soap) { struct __ns1__GetVideoEncoderConfiguration *_p = soap_instantiate___ns1__GetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetVideoEncoderConfiguration * soap_new_set___ns1__GetVideoEncoderConfiguration(struct soap *soap, _ns1__GetVideoEncoderConfiguration *ns1__GetVideoEncoderConfiguration) { struct __ns1__GetVideoEncoderConfiguration *_p = soap_instantiate___ns1__GetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfiguration(soap, _p); _p->ns1__GetVideoEncoderConfiguration = ns1__GetVideoEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__GetVideoEncoderConfiguration(struct soap *soap, struct __ns1__GetVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceConfiguration
#define SOAP_TYPE___ns1__GetVideoSourceConfiguration (1817)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceConfiguration(struct soap*, struct __ns1__GetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceConfiguration(struct soap*, const struct __ns1__GetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceConfiguration(struct soap*, const char*, int, const struct __ns1__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceConfiguration * SOAP_FMAC4 soap_in___ns1__GetVideoSourceConfiguration(struct soap*, const char*, struct __ns1__GetVideoSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceConfiguration(struct soap*, const struct __ns1__GetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceConfiguration
#define soap_write___ns1__GetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceConfiguration(soap, data), 0) || soap_put___ns1__GetVideoSourceConfiguration(soap, data, "-ns1:GetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceConfiguration * SOAP_FMAC4 soap_get___ns1__GetVideoSourceConfiguration(struct soap*, struct __ns1__GetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceConfiguration
#define soap_read___ns1__GetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceConfiguration * soap_new___ns1__GetVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceConfiguration * soap_new_req___ns1__GetVideoSourceConfiguration(struct soap *soap) { struct __ns1__GetVideoSourceConfiguration *_p = soap_instantiate___ns1__GetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceConfiguration * soap_new_set___ns1__GetVideoSourceConfiguration(struct soap *soap, _ns1__GetVideoSourceConfiguration *ns1__GetVideoSourceConfiguration) { struct __ns1__GetVideoSourceConfiguration *_p = soap_instantiate___ns1__GetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfiguration(soap, _p); _p->ns1__GetVideoSourceConfiguration = ns1__GetVideoSourceConfiguration; } return _p; }

inline void soap_delete___ns1__GetVideoSourceConfiguration(struct soap *soap, struct __ns1__GetVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioDecoderConfigurations
#define SOAP_TYPE___ns1__GetAudioDecoderConfigurations (1813)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioDecoderConfigurations(struct soap*, struct __ns1__GetAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioDecoderConfigurations(struct soap*, const struct __ns1__GetAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioDecoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioDecoderConfigurations(struct soap*, const char*, struct __ns1__GetAudioDecoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioDecoderConfigurations(struct soap*, const struct __ns1__GetAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioDecoderConfigurations
#define soap_write___ns1__GetAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioDecoderConfigurations(soap, data), 0) || soap_put___ns1__GetAudioDecoderConfigurations(soap, data, "-ns1:GetAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioDecoderConfigurations(struct soap*, struct __ns1__GetAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioDecoderConfigurations
#define soap_read___ns1__GetAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioDecoderConfigurations * soap_new___ns1__GetAudioDecoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioDecoderConfigurations * soap_new_req___ns1__GetAudioDecoderConfigurations(struct soap *soap) { struct __ns1__GetAudioDecoderConfigurations *_p = soap_instantiate___ns1__GetAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioDecoderConfigurations * soap_new_set___ns1__GetAudioDecoderConfigurations(struct soap *soap, _ns1__GetAudioDecoderConfigurations *ns1__GetAudioDecoderConfigurations) { struct __ns1__GetAudioDecoderConfigurations *_p = soap_instantiate___ns1__GetAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurations(soap, _p); _p->ns1__GetAudioDecoderConfigurations = ns1__GetAudioDecoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioDecoderConfigurations(struct soap *soap, struct __ns1__GetAudioDecoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioDecoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioOutputConfigurations
#define SOAP_TYPE___ns1__GetAudioOutputConfigurations (1809)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioOutputConfigurations(struct soap*, struct __ns1__GetAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioOutputConfigurations(struct soap*, const struct __ns1__GetAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioOutputConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioOutputConfigurations(struct soap*, const char*, struct __ns1__GetAudioOutputConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioOutputConfigurations(struct soap*, const struct __ns1__GetAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioOutputConfigurations
#define soap_write___ns1__GetAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioOutputConfigurations(soap, data), 0) || soap_put___ns1__GetAudioOutputConfigurations(soap, data, "-ns1:GetAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioOutputConfigurations(struct soap*, struct __ns1__GetAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioOutputConfigurations
#define soap_read___ns1__GetAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioOutputConfigurations * soap_new___ns1__GetAudioOutputConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioOutputConfigurations * soap_new_req___ns1__GetAudioOutputConfigurations(struct soap *soap) { struct __ns1__GetAudioOutputConfigurations *_p = soap_instantiate___ns1__GetAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioOutputConfigurations * soap_new_set___ns1__GetAudioOutputConfigurations(struct soap *soap, _ns1__GetAudioOutputConfigurations *ns1__GetAudioOutputConfigurations) { struct __ns1__GetAudioOutputConfigurations *_p = soap_instantiate___ns1__GetAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurations(soap, _p); _p->ns1__GetAudioOutputConfigurations = ns1__GetAudioOutputConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioOutputConfigurations(struct soap *soap, struct __ns1__GetAudioOutputConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioOutputConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMetadataConfigurations
#define SOAP_TYPE___ns1__GetMetadataConfigurations (1805)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMetadataConfigurations(struct soap*, struct __ns1__GetMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMetadataConfigurations(struct soap*, const struct __ns1__GetMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMetadataConfigurations(struct soap*, const char*, int, const struct __ns1__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetMetadataConfigurations * SOAP_FMAC4 soap_in___ns1__GetMetadataConfigurations(struct soap*, const char*, struct __ns1__GetMetadataConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMetadataConfigurations(struct soap*, const struct __ns1__GetMetadataConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetMetadataConfigurations
#define soap_write___ns1__GetMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMetadataConfigurations(soap, data), 0) || soap_put___ns1__GetMetadataConfigurations(soap, data, "-ns1:GetMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMetadataConfigurations * SOAP_FMAC4 soap_get___ns1__GetMetadataConfigurations(struct soap*, struct __ns1__GetMetadataConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetMetadataConfigurations
#define soap_read___ns1__GetMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMetadataConfigurations * soap_new___ns1__GetMetadataConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMetadataConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMetadataConfigurations * soap_new_req___ns1__GetMetadataConfigurations(struct soap *soap) { struct __ns1__GetMetadataConfigurations *_p = soap_instantiate___ns1__GetMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetMetadataConfigurations * soap_new_set___ns1__GetMetadataConfigurations(struct soap *soap, _ns1__GetMetadataConfigurations *ns1__GetMetadataConfigurations) { struct __ns1__GetMetadataConfigurations *_p = soap_instantiate___ns1__GetMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurations(soap, _p); _p->ns1__GetMetadataConfigurations = ns1__GetMetadataConfigurations; } return _p; }

inline void soap_delete___ns1__GetMetadataConfigurations(struct soap *soap, struct __ns1__GetMetadataConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMetadataConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___ns1__GetVideoAnalyticsConfigurations (1801)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoAnalyticsConfigurations(struct soap*, struct __ns1__GetVideoAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoAnalyticsConfigurations(struct soap*, const struct __ns1__GetVideoAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoAnalyticsConfigurations(struct soap*, const char*, int, const struct __ns1__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in___ns1__GetVideoAnalyticsConfigurations(struct soap*, const char*, struct __ns1__GetVideoAnalyticsConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoAnalyticsConfigurations(struct soap*, const struct __ns1__GetVideoAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoAnalyticsConfigurations
#define soap_write___ns1__GetVideoAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoAnalyticsConfigurations(soap, data), 0) || soap_put___ns1__GetVideoAnalyticsConfigurations(soap, data, "-ns1:GetVideoAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get___ns1__GetVideoAnalyticsConfigurations(struct soap*, struct __ns1__GetVideoAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoAnalyticsConfigurations
#define soap_read___ns1__GetVideoAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoAnalyticsConfigurations * soap_new___ns1__GetVideoAnalyticsConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoAnalyticsConfigurations * soap_new_req___ns1__GetVideoAnalyticsConfigurations(struct soap *soap) { struct __ns1__GetVideoAnalyticsConfigurations *_p = soap_instantiate___ns1__GetVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoAnalyticsConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetVideoAnalyticsConfigurations * soap_new_set___ns1__GetVideoAnalyticsConfigurations(struct soap *soap, _ns1__GetVideoAnalyticsConfigurations *ns1__GetVideoAnalyticsConfigurations) { struct __ns1__GetVideoAnalyticsConfigurations *_p = soap_instantiate___ns1__GetVideoAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoAnalyticsConfigurations(soap, _p); _p->ns1__GetVideoAnalyticsConfigurations = ns1__GetVideoAnalyticsConfigurations; } return _p; }

inline void soap_delete___ns1__GetVideoAnalyticsConfigurations(struct soap *soap, struct __ns1__GetVideoAnalyticsConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoAnalyticsConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioEncoderConfigurations
#define SOAP_TYPE___ns1__GetAudioEncoderConfigurations (1797)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioEncoderConfigurations(struct soap*, struct __ns1__GetAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioEncoderConfigurations(struct soap*, const struct __ns1__GetAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioEncoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioEncoderConfigurations(struct soap*, const char*, struct __ns1__GetAudioEncoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioEncoderConfigurations(struct soap*, const struct __ns1__GetAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioEncoderConfigurations
#define soap_write___ns1__GetAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioEncoderConfigurations(soap, data), 0) || soap_put___ns1__GetAudioEncoderConfigurations(soap, data, "-ns1:GetAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioEncoderConfigurations(struct soap*, struct __ns1__GetAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioEncoderConfigurations
#define soap_read___ns1__GetAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioEncoderConfigurations * soap_new___ns1__GetAudioEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioEncoderConfigurations * soap_new_req___ns1__GetAudioEncoderConfigurations(struct soap *soap) { struct __ns1__GetAudioEncoderConfigurations *_p = soap_instantiate___ns1__GetAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioEncoderConfigurations * soap_new_set___ns1__GetAudioEncoderConfigurations(struct soap *soap, _ns1__GetAudioEncoderConfigurations *ns1__GetAudioEncoderConfigurations) { struct __ns1__GetAudioEncoderConfigurations *_p = soap_instantiate___ns1__GetAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurations(soap, _p); _p->ns1__GetAudioEncoderConfigurations = ns1__GetAudioEncoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioEncoderConfigurations(struct soap *soap, struct __ns1__GetAudioEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioSourceConfigurations
#define SOAP_TYPE___ns1__GetAudioSourceConfigurations (1793)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioSourceConfigurations(struct soap*, struct __ns1__GetAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioSourceConfigurations(struct soap*, const struct __ns1__GetAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioSourceConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioSourceConfigurations(struct soap*, const char*, struct __ns1__GetAudioSourceConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioSourceConfigurations(struct soap*, const struct __ns1__GetAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioSourceConfigurations
#define soap_write___ns1__GetAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioSourceConfigurations(soap, data), 0) || soap_put___ns1__GetAudioSourceConfigurations(soap, data, "-ns1:GetAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioSourceConfigurations(struct soap*, struct __ns1__GetAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioSourceConfigurations
#define soap_read___ns1__GetAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioSourceConfigurations * soap_new___ns1__GetAudioSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioSourceConfigurations * soap_new_req___ns1__GetAudioSourceConfigurations(struct soap *soap) { struct __ns1__GetAudioSourceConfigurations *_p = soap_instantiate___ns1__GetAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioSourceConfigurations * soap_new_set___ns1__GetAudioSourceConfigurations(struct soap *soap, _ns1__GetAudioSourceConfigurations *ns1__GetAudioSourceConfigurations) { struct __ns1__GetAudioSourceConfigurations *_p = soap_instantiate___ns1__GetAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurations(soap, _p); _p->ns1__GetAudioSourceConfigurations = ns1__GetAudioSourceConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioSourceConfigurations(struct soap *soap, struct __ns1__GetAudioSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoEncoderConfigurations
#define SOAP_TYPE___ns1__GetVideoEncoderConfigurations (1789)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoEncoderConfigurations(struct soap*, struct __ns1__GetVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoEncoderConfigurations(struct soap*, const struct __ns1__GetVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoEncoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetVideoEncoderConfigurations(struct soap*, const char*, struct __ns1__GetVideoEncoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoEncoderConfigurations(struct soap*, const struct __ns1__GetVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoEncoderConfigurations
#define soap_write___ns1__GetVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoEncoderConfigurations(soap, data), 0) || soap_put___ns1__GetVideoEncoderConfigurations(soap, data, "-ns1:GetVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetVideoEncoderConfigurations(struct soap*, struct __ns1__GetVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoEncoderConfigurations
#define soap_read___ns1__GetVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoEncoderConfigurations * soap_new___ns1__GetVideoEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoEncoderConfigurations * soap_new_req___ns1__GetVideoEncoderConfigurations(struct soap *soap) { struct __ns1__GetVideoEncoderConfigurations *_p = soap_instantiate___ns1__GetVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetVideoEncoderConfigurations * soap_new_set___ns1__GetVideoEncoderConfigurations(struct soap *soap, _ns1__GetVideoEncoderConfigurations *ns1__GetVideoEncoderConfigurations) { struct __ns1__GetVideoEncoderConfigurations *_p = soap_instantiate___ns1__GetVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurations(soap, _p); _p->ns1__GetVideoEncoderConfigurations = ns1__GetVideoEncoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetVideoEncoderConfigurations(struct soap *soap, struct __ns1__GetVideoEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceConfigurations
#define SOAP_TYPE___ns1__GetVideoSourceConfigurations (1785)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceConfigurations(struct soap*, struct __ns1__GetVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceConfigurations(struct soap*, const struct __ns1__GetVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceConfigurations(struct soap*, const char*, int, const struct __ns1__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in___ns1__GetVideoSourceConfigurations(struct soap*, const char*, struct __ns1__GetVideoSourceConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceConfigurations(struct soap*, const struct __ns1__GetVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceConfigurations
#define soap_write___ns1__GetVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceConfigurations(soap, data), 0) || soap_put___ns1__GetVideoSourceConfigurations(soap, data, "-ns1:GetVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get___ns1__GetVideoSourceConfigurations(struct soap*, struct __ns1__GetVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceConfigurations
#define soap_read___ns1__GetVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceConfigurations * soap_new___ns1__GetVideoSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceConfigurations * soap_new_req___ns1__GetVideoSourceConfigurations(struct soap *soap) { struct __ns1__GetVideoSourceConfigurations *_p = soap_instantiate___ns1__GetVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceConfigurations * soap_new_set___ns1__GetVideoSourceConfigurations(struct soap *soap, _ns1__GetVideoSourceConfigurations *ns1__GetVideoSourceConfigurations) { struct __ns1__GetVideoSourceConfigurations *_p = soap_instantiate___ns1__GetVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurations(soap, _p); _p->ns1__GetVideoSourceConfigurations = ns1__GetVideoSourceConfigurations; } return _p; }

inline void soap_delete___ns1__GetVideoSourceConfigurations(struct soap *soap, struct __ns1__GetVideoSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__DeleteProfile
#define SOAP_TYPE___ns1__DeleteProfile (1781)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteProfile(struct soap*, struct __ns1__DeleteProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteProfile(struct soap*, const struct __ns1__DeleteProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteProfile(struct soap*, const char*, int, const struct __ns1__DeleteProfile *, const char*);
SOAP_FMAC3 struct __ns1__DeleteProfile * SOAP_FMAC4 soap_in___ns1__DeleteProfile(struct soap*, const char*, struct __ns1__DeleteProfile *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteProfile(struct soap*, const struct __ns1__DeleteProfile *, const char*, const char*);

#ifndef soap_write___ns1__DeleteProfile
#define soap_write___ns1__DeleteProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteProfile(soap, data), 0) || soap_put___ns1__DeleteProfile(soap, data, "-ns1:DeleteProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteProfile * SOAP_FMAC4 soap_get___ns1__DeleteProfile(struct soap*, struct __ns1__DeleteProfile *, const char*, const char*);

#ifndef soap_read___ns1__DeleteProfile
#define soap_read___ns1__DeleteProfile(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteProfile * SOAP_FMAC2 soap_instantiate___ns1__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteProfile * soap_new___ns1__DeleteProfile(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteProfile(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteProfile * soap_new_req___ns1__DeleteProfile(struct soap *soap) { struct __ns1__DeleteProfile *_p = soap_instantiate___ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteProfile(soap, _p); } return _p; }

inline struct __ns1__DeleteProfile * soap_new_set___ns1__DeleteProfile(struct soap *soap, _ns1__DeleteProfile *ns1__DeleteProfile) { struct __ns1__DeleteProfile *_p = soap_instantiate___ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteProfile(soap, _p); _p->ns1__DeleteProfile = ns1__DeleteProfile; } return _p; }

inline void soap_delete___ns1__DeleteProfile(struct soap *soap, struct __ns1__DeleteProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___ns1__RemoveAudioDecoderConfiguration (1777)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveAudioDecoderConfiguration(struct soap*, struct __ns1__RemoveAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveAudioDecoderConfiguration(struct soap*, const struct __ns1__RemoveAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveAudioDecoderConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveAudioDecoderConfiguration(struct soap*, const char*, struct __ns1__RemoveAudioDecoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveAudioDecoderConfiguration(struct soap*, const struct __ns1__RemoveAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveAudioDecoderConfiguration
#define soap_write___ns1__RemoveAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveAudioDecoderConfiguration(soap, data), 0) || soap_put___ns1__RemoveAudioDecoderConfiguration(soap, data, "-ns1:RemoveAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveAudioDecoderConfiguration(struct soap*, struct __ns1__RemoveAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveAudioDecoderConfiguration
#define soap_read___ns1__RemoveAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveAudioDecoderConfiguration * soap_new___ns1__RemoveAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveAudioDecoderConfiguration * soap_new_req___ns1__RemoveAudioDecoderConfiguration(struct soap *soap) { struct __ns1__RemoveAudioDecoderConfiguration *_p = soap_instantiate___ns1__RemoveAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioDecoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveAudioDecoderConfiguration * soap_new_set___ns1__RemoveAudioDecoderConfiguration(struct soap *soap, _ns1__RemoveAudioDecoderConfiguration *ns1__RemoveAudioDecoderConfiguration) { struct __ns1__RemoveAudioDecoderConfiguration *_p = soap_instantiate___ns1__RemoveAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioDecoderConfiguration(soap, _p); _p->ns1__RemoveAudioDecoderConfiguration = ns1__RemoveAudioDecoderConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveAudioDecoderConfiguration(struct soap *soap, struct __ns1__RemoveAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveAudioOutputConfiguration
#define SOAP_TYPE___ns1__RemoveAudioOutputConfiguration (1773)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveAudioOutputConfiguration(struct soap*, struct __ns1__RemoveAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveAudioOutputConfiguration(struct soap*, const struct __ns1__RemoveAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveAudioOutputConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveAudioOutputConfiguration(struct soap*, const char*, struct __ns1__RemoveAudioOutputConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveAudioOutputConfiguration(struct soap*, const struct __ns1__RemoveAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveAudioOutputConfiguration
#define soap_write___ns1__RemoveAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveAudioOutputConfiguration(soap, data), 0) || soap_put___ns1__RemoveAudioOutputConfiguration(soap, data, "-ns1:RemoveAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveAudioOutputConfiguration(struct soap*, struct __ns1__RemoveAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveAudioOutputConfiguration
#define soap_read___ns1__RemoveAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveAudioOutputConfiguration * soap_new___ns1__RemoveAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveAudioOutputConfiguration * soap_new_req___ns1__RemoveAudioOutputConfiguration(struct soap *soap) { struct __ns1__RemoveAudioOutputConfiguration *_p = soap_instantiate___ns1__RemoveAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioOutputConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveAudioOutputConfiguration * soap_new_set___ns1__RemoveAudioOutputConfiguration(struct soap *soap, _ns1__RemoveAudioOutputConfiguration *ns1__RemoveAudioOutputConfiguration) { struct __ns1__RemoveAudioOutputConfiguration *_p = soap_instantiate___ns1__RemoveAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioOutputConfiguration(soap, _p); _p->ns1__RemoveAudioOutputConfiguration = ns1__RemoveAudioOutputConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveAudioOutputConfiguration(struct soap *soap, struct __ns1__RemoveAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveMetadataConfiguration
#define SOAP_TYPE___ns1__RemoveMetadataConfiguration (1769)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveMetadataConfiguration(struct soap*, struct __ns1__RemoveMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveMetadataConfiguration(struct soap*, const struct __ns1__RemoveMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveMetadataConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveMetadataConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveMetadataConfiguration(struct soap*, const char*, struct __ns1__RemoveMetadataConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveMetadataConfiguration(struct soap*, const struct __ns1__RemoveMetadataConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveMetadataConfiguration
#define soap_write___ns1__RemoveMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveMetadataConfiguration(soap, data), 0) || soap_put___ns1__RemoveMetadataConfiguration(soap, data, "-ns1:RemoveMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveMetadataConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveMetadataConfiguration(struct soap*, struct __ns1__RemoveMetadataConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveMetadataConfiguration
#define soap_read___ns1__RemoveMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveMetadataConfiguration * soap_new___ns1__RemoveMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveMetadataConfiguration * soap_new_req___ns1__RemoveMetadataConfiguration(struct soap *soap) { struct __ns1__RemoveMetadataConfiguration *_p = soap_instantiate___ns1__RemoveMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveMetadataConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveMetadataConfiguration * soap_new_set___ns1__RemoveMetadataConfiguration(struct soap *soap, _ns1__RemoveMetadataConfiguration *ns1__RemoveMetadataConfiguration) { struct __ns1__RemoveMetadataConfiguration *_p = soap_instantiate___ns1__RemoveMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveMetadataConfiguration(soap, _p); _p->ns1__RemoveMetadataConfiguration = ns1__RemoveMetadataConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveMetadataConfiguration(struct soap *soap, struct __ns1__RemoveMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___ns1__RemoveVideoAnalyticsConfiguration (1765)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, struct __ns1__RemoveVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const struct __ns1__RemoveVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, struct __ns1__RemoveVideoAnalyticsConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const struct __ns1__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveVideoAnalyticsConfiguration
#define soap_write___ns1__RemoveVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveVideoAnalyticsConfiguration(soap, data), 0) || soap_put___ns1__RemoveVideoAnalyticsConfiguration(soap, data, "-ns1:RemoveVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, struct __ns1__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveVideoAnalyticsConfiguration
#define soap_read___ns1__RemoveVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveVideoAnalyticsConfiguration * soap_new___ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveVideoAnalyticsConfiguration * soap_new_req___ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap) { struct __ns1__RemoveVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__RemoveVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveVideoAnalyticsConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveVideoAnalyticsConfiguration * soap_new_set___ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, _ns1__RemoveVideoAnalyticsConfiguration *ns1__RemoveVideoAnalyticsConfiguration) { struct __ns1__RemoveVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__RemoveVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveVideoAnalyticsConfiguration(soap, _p); _p->ns1__RemoveVideoAnalyticsConfiguration = ns1__RemoveVideoAnalyticsConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveVideoAnalyticsConfiguration(struct soap *soap, struct __ns1__RemoveVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemovePTZConfiguration
#define SOAP_TYPE___ns1__RemovePTZConfiguration (1761)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemovePTZConfiguration(struct soap*, struct __ns1__RemovePTZConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemovePTZConfiguration(struct soap*, const struct __ns1__RemovePTZConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemovePTZConfiguration(struct soap*, const char*, int, const struct __ns1__RemovePTZConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemovePTZConfiguration * SOAP_FMAC4 soap_in___ns1__RemovePTZConfiguration(struct soap*, const char*, struct __ns1__RemovePTZConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemovePTZConfiguration(struct soap*, const struct __ns1__RemovePTZConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemovePTZConfiguration
#define soap_write___ns1__RemovePTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemovePTZConfiguration(soap, data), 0) || soap_put___ns1__RemovePTZConfiguration(soap, data, "-ns1:RemovePTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemovePTZConfiguration * SOAP_FMAC4 soap_get___ns1__RemovePTZConfiguration(struct soap*, struct __ns1__RemovePTZConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemovePTZConfiguration
#define soap_read___ns1__RemovePTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemovePTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemovePTZConfiguration * soap_new___ns1__RemovePTZConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemovePTZConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemovePTZConfiguration * soap_new_req___ns1__RemovePTZConfiguration(struct soap *soap) { struct __ns1__RemovePTZConfiguration *_p = soap_instantiate___ns1__RemovePTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemovePTZConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemovePTZConfiguration * soap_new_set___ns1__RemovePTZConfiguration(struct soap *soap, _ns1__RemovePTZConfiguration *ns1__RemovePTZConfiguration) { struct __ns1__RemovePTZConfiguration *_p = soap_instantiate___ns1__RemovePTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemovePTZConfiguration(soap, _p); _p->ns1__RemovePTZConfiguration = ns1__RemovePTZConfiguration; } return _p; }

inline void soap_delete___ns1__RemovePTZConfiguration(struct soap *soap, struct __ns1__RemovePTZConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemovePTZConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveAudioSourceConfiguration
#define SOAP_TYPE___ns1__RemoveAudioSourceConfiguration (1757)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveAudioSourceConfiguration(struct soap*, struct __ns1__RemoveAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveAudioSourceConfiguration(struct soap*, const struct __ns1__RemoveAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveAudioSourceConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveAudioSourceConfiguration(struct soap*, const char*, struct __ns1__RemoveAudioSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveAudioSourceConfiguration(struct soap*, const struct __ns1__RemoveAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveAudioSourceConfiguration
#define soap_write___ns1__RemoveAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveAudioSourceConfiguration(soap, data), 0) || soap_put___ns1__RemoveAudioSourceConfiguration(soap, data, "-ns1:RemoveAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveAudioSourceConfiguration(struct soap*, struct __ns1__RemoveAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveAudioSourceConfiguration
#define soap_read___ns1__RemoveAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveAudioSourceConfiguration * soap_new___ns1__RemoveAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveAudioSourceConfiguration * soap_new_req___ns1__RemoveAudioSourceConfiguration(struct soap *soap) { struct __ns1__RemoveAudioSourceConfiguration *_p = soap_instantiate___ns1__RemoveAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveAudioSourceConfiguration * soap_new_set___ns1__RemoveAudioSourceConfiguration(struct soap *soap, _ns1__RemoveAudioSourceConfiguration *ns1__RemoveAudioSourceConfiguration) { struct __ns1__RemoveAudioSourceConfiguration *_p = soap_instantiate___ns1__RemoveAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioSourceConfiguration(soap, _p); _p->ns1__RemoveAudioSourceConfiguration = ns1__RemoveAudioSourceConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveAudioSourceConfiguration(struct soap *soap, struct __ns1__RemoveAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___ns1__RemoveAudioEncoderConfiguration (1753)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveAudioEncoderConfiguration(struct soap*, struct __ns1__RemoveAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveAudioEncoderConfiguration(struct soap*, const struct __ns1__RemoveAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveAudioEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveAudioEncoderConfiguration(struct soap*, const char*, struct __ns1__RemoveAudioEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveAudioEncoderConfiguration(struct soap*, const struct __ns1__RemoveAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveAudioEncoderConfiguration
#define soap_write___ns1__RemoveAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveAudioEncoderConfiguration(soap, data), 0) || soap_put___ns1__RemoveAudioEncoderConfiguration(soap, data, "-ns1:RemoveAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveAudioEncoderConfiguration(struct soap*, struct __ns1__RemoveAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveAudioEncoderConfiguration
#define soap_read___ns1__RemoveAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveAudioEncoderConfiguration * soap_new___ns1__RemoveAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveAudioEncoderConfiguration * soap_new_req___ns1__RemoveAudioEncoderConfiguration(struct soap *soap) { struct __ns1__RemoveAudioEncoderConfiguration *_p = soap_instantiate___ns1__RemoveAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveAudioEncoderConfiguration * soap_new_set___ns1__RemoveAudioEncoderConfiguration(struct soap *soap, _ns1__RemoveAudioEncoderConfiguration *ns1__RemoveAudioEncoderConfiguration) { struct __ns1__RemoveAudioEncoderConfiguration *_p = soap_instantiate___ns1__RemoveAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveAudioEncoderConfiguration(soap, _p); _p->ns1__RemoveAudioEncoderConfiguration = ns1__RemoveAudioEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveAudioEncoderConfiguration(struct soap *soap, struct __ns1__RemoveAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveVideoSourceConfiguration
#define SOAP_TYPE___ns1__RemoveVideoSourceConfiguration (1749)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveVideoSourceConfiguration(struct soap*, struct __ns1__RemoveVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveVideoSourceConfiguration(struct soap*, const struct __ns1__RemoveVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveVideoSourceConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveVideoSourceConfiguration(struct soap*, const char*, struct __ns1__RemoveVideoSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveVideoSourceConfiguration(struct soap*, const struct __ns1__RemoveVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveVideoSourceConfiguration
#define soap_write___ns1__RemoveVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveVideoSourceConfiguration(soap, data), 0) || soap_put___ns1__RemoveVideoSourceConfiguration(soap, data, "-ns1:RemoveVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveVideoSourceConfiguration(struct soap*, struct __ns1__RemoveVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveVideoSourceConfiguration
#define soap_read___ns1__RemoveVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveVideoSourceConfiguration * soap_new___ns1__RemoveVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveVideoSourceConfiguration * soap_new_req___ns1__RemoveVideoSourceConfiguration(struct soap *soap) { struct __ns1__RemoveVideoSourceConfiguration *_p = soap_instantiate___ns1__RemoveVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveVideoSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveVideoSourceConfiguration * soap_new_set___ns1__RemoveVideoSourceConfiguration(struct soap *soap, _ns1__RemoveVideoSourceConfiguration *ns1__RemoveVideoSourceConfiguration) { struct __ns1__RemoveVideoSourceConfiguration *_p = soap_instantiate___ns1__RemoveVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveVideoSourceConfiguration(soap, _p); _p->ns1__RemoveVideoSourceConfiguration = ns1__RemoveVideoSourceConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveVideoSourceConfiguration(struct soap *soap, struct __ns1__RemoveVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___ns1__RemoveVideoEncoderConfiguration (1745)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveVideoEncoderConfiguration(struct soap*, struct __ns1__RemoveVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveVideoEncoderConfiguration(struct soap*, const struct __ns1__RemoveVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveVideoEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveVideoEncoderConfiguration(struct soap*, const char*, struct __ns1__RemoveVideoEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveVideoEncoderConfiguration(struct soap*, const struct __ns1__RemoveVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveVideoEncoderConfiguration
#define soap_write___ns1__RemoveVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveVideoEncoderConfiguration(soap, data), 0) || soap_put___ns1__RemoveVideoEncoderConfiguration(soap, data, "-ns1:RemoveVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveVideoEncoderConfiguration(struct soap*, struct __ns1__RemoveVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveVideoEncoderConfiguration
#define soap_read___ns1__RemoveVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveVideoEncoderConfiguration * soap_new___ns1__RemoveVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveVideoEncoderConfiguration * soap_new_req___ns1__RemoveVideoEncoderConfiguration(struct soap *soap) { struct __ns1__RemoveVideoEncoderConfiguration *_p = soap_instantiate___ns1__RemoveVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveVideoEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveVideoEncoderConfiguration * soap_new_set___ns1__RemoveVideoEncoderConfiguration(struct soap *soap, _ns1__RemoveVideoEncoderConfiguration *ns1__RemoveVideoEncoderConfiguration) { struct __ns1__RemoveVideoEncoderConfiguration *_p = soap_instantiate___ns1__RemoveVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveVideoEncoderConfiguration(soap, _p); _p->ns1__RemoveVideoEncoderConfiguration = ns1__RemoveVideoEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveVideoEncoderConfiguration(struct soap *soap, struct __ns1__RemoveVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddAudioDecoderConfiguration
#define SOAP_TYPE___ns1__AddAudioDecoderConfiguration (1741)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddAudioDecoderConfiguration(struct soap*, struct __ns1__AddAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddAudioDecoderConfiguration(struct soap*, const struct __ns1__AddAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddAudioDecoderConfiguration(struct soap*, const char*, int, const struct __ns1__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_in___ns1__AddAudioDecoderConfiguration(struct soap*, const char*, struct __ns1__AddAudioDecoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddAudioDecoderConfiguration(struct soap*, const struct __ns1__AddAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddAudioDecoderConfiguration
#define soap_write___ns1__AddAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddAudioDecoderConfiguration(soap, data), 0) || soap_put___ns1__AddAudioDecoderConfiguration(soap, data, "-ns1:AddAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_get___ns1__AddAudioDecoderConfiguration(struct soap*, struct __ns1__AddAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddAudioDecoderConfiguration
#define soap_read___ns1__AddAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddAudioDecoderConfiguration * soap_new___ns1__AddAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddAudioDecoderConfiguration * soap_new_req___ns1__AddAudioDecoderConfiguration(struct soap *soap) { struct __ns1__AddAudioDecoderConfiguration *_p = soap_instantiate___ns1__AddAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioDecoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddAudioDecoderConfiguration * soap_new_set___ns1__AddAudioDecoderConfiguration(struct soap *soap, _ns1__AddAudioDecoderConfiguration *ns1__AddAudioDecoderConfiguration) { struct __ns1__AddAudioDecoderConfiguration *_p = soap_instantiate___ns1__AddAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioDecoderConfiguration(soap, _p); _p->ns1__AddAudioDecoderConfiguration = ns1__AddAudioDecoderConfiguration; } return _p; }

inline void soap_delete___ns1__AddAudioDecoderConfiguration(struct soap *soap, struct __ns1__AddAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddAudioOutputConfiguration
#define SOAP_TYPE___ns1__AddAudioOutputConfiguration (1737)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddAudioOutputConfiguration(struct soap*, struct __ns1__AddAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddAudioOutputConfiguration(struct soap*, const struct __ns1__AddAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddAudioOutputConfiguration(struct soap*, const char*, int, const struct __ns1__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddAudioOutputConfiguration * SOAP_FMAC4 soap_in___ns1__AddAudioOutputConfiguration(struct soap*, const char*, struct __ns1__AddAudioOutputConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddAudioOutputConfiguration(struct soap*, const struct __ns1__AddAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddAudioOutputConfiguration
#define soap_write___ns1__AddAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddAudioOutputConfiguration(soap, data), 0) || soap_put___ns1__AddAudioOutputConfiguration(soap, data, "-ns1:AddAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddAudioOutputConfiguration * SOAP_FMAC4 soap_get___ns1__AddAudioOutputConfiguration(struct soap*, struct __ns1__AddAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddAudioOutputConfiguration
#define soap_read___ns1__AddAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddAudioOutputConfiguration * soap_new___ns1__AddAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddAudioOutputConfiguration * soap_new_req___ns1__AddAudioOutputConfiguration(struct soap *soap) { struct __ns1__AddAudioOutputConfiguration *_p = soap_instantiate___ns1__AddAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioOutputConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddAudioOutputConfiguration * soap_new_set___ns1__AddAudioOutputConfiguration(struct soap *soap, _ns1__AddAudioOutputConfiguration *ns1__AddAudioOutputConfiguration) { struct __ns1__AddAudioOutputConfiguration *_p = soap_instantiate___ns1__AddAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioOutputConfiguration(soap, _p); _p->ns1__AddAudioOutputConfiguration = ns1__AddAudioOutputConfiguration; } return _p; }

inline void soap_delete___ns1__AddAudioOutputConfiguration(struct soap *soap, struct __ns1__AddAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddMetadataConfiguration
#define SOAP_TYPE___ns1__AddMetadataConfiguration (1733)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddMetadataConfiguration(struct soap*, struct __ns1__AddMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddMetadataConfiguration(struct soap*, const struct __ns1__AddMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddMetadataConfiguration(struct soap*, const char*, int, const struct __ns1__AddMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddMetadataConfiguration * SOAP_FMAC4 soap_in___ns1__AddMetadataConfiguration(struct soap*, const char*, struct __ns1__AddMetadataConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddMetadataConfiguration(struct soap*, const struct __ns1__AddMetadataConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddMetadataConfiguration
#define soap_write___ns1__AddMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddMetadataConfiguration(soap, data), 0) || soap_put___ns1__AddMetadataConfiguration(soap, data, "-ns1:AddMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddMetadataConfiguration * SOAP_FMAC4 soap_get___ns1__AddMetadataConfiguration(struct soap*, struct __ns1__AddMetadataConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddMetadataConfiguration
#define soap_read___ns1__AddMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddMetadataConfiguration * soap_new___ns1__AddMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddMetadataConfiguration * soap_new_req___ns1__AddMetadataConfiguration(struct soap *soap) { struct __ns1__AddMetadataConfiguration *_p = soap_instantiate___ns1__AddMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddMetadataConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddMetadataConfiguration * soap_new_set___ns1__AddMetadataConfiguration(struct soap *soap, _ns1__AddMetadataConfiguration *ns1__AddMetadataConfiguration) { struct __ns1__AddMetadataConfiguration *_p = soap_instantiate___ns1__AddMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddMetadataConfiguration(soap, _p); _p->ns1__AddMetadataConfiguration = ns1__AddMetadataConfiguration; } return _p; }

inline void soap_delete___ns1__AddMetadataConfiguration(struct soap *soap, struct __ns1__AddMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___ns1__AddVideoAnalyticsConfiguration (1729)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddVideoAnalyticsConfiguration(struct soap*, struct __ns1__AddVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddVideoAnalyticsConfiguration(struct soap*, const struct __ns1__AddVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __ns1__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___ns1__AddVideoAnalyticsConfiguration(struct soap*, const char*, struct __ns1__AddVideoAnalyticsConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddVideoAnalyticsConfiguration(struct soap*, const struct __ns1__AddVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddVideoAnalyticsConfiguration
#define soap_write___ns1__AddVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddVideoAnalyticsConfiguration(soap, data), 0) || soap_put___ns1__AddVideoAnalyticsConfiguration(soap, data, "-ns1:AddVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___ns1__AddVideoAnalyticsConfiguration(struct soap*, struct __ns1__AddVideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddVideoAnalyticsConfiguration
#define soap_read___ns1__AddVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddVideoAnalyticsConfiguration * soap_new___ns1__AddVideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddVideoAnalyticsConfiguration * soap_new_req___ns1__AddVideoAnalyticsConfiguration(struct soap *soap) { struct __ns1__AddVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__AddVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddVideoAnalyticsConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddVideoAnalyticsConfiguration * soap_new_set___ns1__AddVideoAnalyticsConfiguration(struct soap *soap, _ns1__AddVideoAnalyticsConfiguration *ns1__AddVideoAnalyticsConfiguration) { struct __ns1__AddVideoAnalyticsConfiguration *_p = soap_instantiate___ns1__AddVideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddVideoAnalyticsConfiguration(soap, _p); _p->ns1__AddVideoAnalyticsConfiguration = ns1__AddVideoAnalyticsConfiguration; } return _p; }

inline void soap_delete___ns1__AddVideoAnalyticsConfiguration(struct soap *soap, struct __ns1__AddVideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddVideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddPTZConfiguration
#define SOAP_TYPE___ns1__AddPTZConfiguration (1725)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddPTZConfiguration(struct soap*, struct __ns1__AddPTZConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddPTZConfiguration(struct soap*, const struct __ns1__AddPTZConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddPTZConfiguration(struct soap*, const char*, int, const struct __ns1__AddPTZConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddPTZConfiguration * SOAP_FMAC4 soap_in___ns1__AddPTZConfiguration(struct soap*, const char*, struct __ns1__AddPTZConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddPTZConfiguration(struct soap*, const struct __ns1__AddPTZConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddPTZConfiguration
#define soap_write___ns1__AddPTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddPTZConfiguration(soap, data), 0) || soap_put___ns1__AddPTZConfiguration(soap, data, "-ns1:AddPTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddPTZConfiguration * SOAP_FMAC4 soap_get___ns1__AddPTZConfiguration(struct soap*, struct __ns1__AddPTZConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddPTZConfiguration
#define soap_read___ns1__AddPTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddPTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddPTZConfiguration * soap_new___ns1__AddPTZConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddPTZConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddPTZConfiguration * soap_new_req___ns1__AddPTZConfiguration(struct soap *soap) { struct __ns1__AddPTZConfiguration *_p = soap_instantiate___ns1__AddPTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddPTZConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddPTZConfiguration * soap_new_set___ns1__AddPTZConfiguration(struct soap *soap, _ns1__AddPTZConfiguration *ns1__AddPTZConfiguration) { struct __ns1__AddPTZConfiguration *_p = soap_instantiate___ns1__AddPTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddPTZConfiguration(soap, _p); _p->ns1__AddPTZConfiguration = ns1__AddPTZConfiguration; } return _p; }

inline void soap_delete___ns1__AddPTZConfiguration(struct soap *soap, struct __ns1__AddPTZConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddPTZConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddAudioSourceConfiguration
#define SOAP_TYPE___ns1__AddAudioSourceConfiguration (1721)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddAudioSourceConfiguration(struct soap*, struct __ns1__AddAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddAudioSourceConfiguration(struct soap*, const struct __ns1__AddAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddAudioSourceConfiguration(struct soap*, const char*, int, const struct __ns1__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddAudioSourceConfiguration * SOAP_FMAC4 soap_in___ns1__AddAudioSourceConfiguration(struct soap*, const char*, struct __ns1__AddAudioSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddAudioSourceConfiguration(struct soap*, const struct __ns1__AddAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddAudioSourceConfiguration
#define soap_write___ns1__AddAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddAudioSourceConfiguration(soap, data), 0) || soap_put___ns1__AddAudioSourceConfiguration(soap, data, "-ns1:AddAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddAudioSourceConfiguration * SOAP_FMAC4 soap_get___ns1__AddAudioSourceConfiguration(struct soap*, struct __ns1__AddAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddAudioSourceConfiguration
#define soap_read___ns1__AddAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddAudioSourceConfiguration * soap_new___ns1__AddAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddAudioSourceConfiguration * soap_new_req___ns1__AddAudioSourceConfiguration(struct soap *soap) { struct __ns1__AddAudioSourceConfiguration *_p = soap_instantiate___ns1__AddAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddAudioSourceConfiguration * soap_new_set___ns1__AddAudioSourceConfiguration(struct soap *soap, _ns1__AddAudioSourceConfiguration *ns1__AddAudioSourceConfiguration) { struct __ns1__AddAudioSourceConfiguration *_p = soap_instantiate___ns1__AddAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioSourceConfiguration(soap, _p); _p->ns1__AddAudioSourceConfiguration = ns1__AddAudioSourceConfiguration; } return _p; }

inline void soap_delete___ns1__AddAudioSourceConfiguration(struct soap *soap, struct __ns1__AddAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddAudioEncoderConfiguration
#define SOAP_TYPE___ns1__AddAudioEncoderConfiguration (1717)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddAudioEncoderConfiguration(struct soap*, struct __ns1__AddAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddAudioEncoderConfiguration(struct soap*, const struct __ns1__AddAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddAudioEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__AddAudioEncoderConfiguration(struct soap*, const char*, struct __ns1__AddAudioEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddAudioEncoderConfiguration(struct soap*, const struct __ns1__AddAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddAudioEncoderConfiguration
#define soap_write___ns1__AddAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddAudioEncoderConfiguration(soap, data), 0) || soap_put___ns1__AddAudioEncoderConfiguration(soap, data, "-ns1:AddAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__AddAudioEncoderConfiguration(struct soap*, struct __ns1__AddAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddAudioEncoderConfiguration
#define soap_read___ns1__AddAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddAudioEncoderConfiguration * soap_new___ns1__AddAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddAudioEncoderConfiguration * soap_new_req___ns1__AddAudioEncoderConfiguration(struct soap *soap) { struct __ns1__AddAudioEncoderConfiguration *_p = soap_instantiate___ns1__AddAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddAudioEncoderConfiguration * soap_new_set___ns1__AddAudioEncoderConfiguration(struct soap *soap, _ns1__AddAudioEncoderConfiguration *ns1__AddAudioEncoderConfiguration) { struct __ns1__AddAudioEncoderConfiguration *_p = soap_instantiate___ns1__AddAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddAudioEncoderConfiguration(soap, _p); _p->ns1__AddAudioEncoderConfiguration = ns1__AddAudioEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__AddAudioEncoderConfiguration(struct soap *soap, struct __ns1__AddAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddVideoSourceConfiguration
#define SOAP_TYPE___ns1__AddVideoSourceConfiguration (1713)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddVideoSourceConfiguration(struct soap*, struct __ns1__AddVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddVideoSourceConfiguration(struct soap*, const struct __ns1__AddVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddVideoSourceConfiguration(struct soap*, const char*, int, const struct __ns1__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddVideoSourceConfiguration * SOAP_FMAC4 soap_in___ns1__AddVideoSourceConfiguration(struct soap*, const char*, struct __ns1__AddVideoSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddVideoSourceConfiguration(struct soap*, const struct __ns1__AddVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddVideoSourceConfiguration
#define soap_write___ns1__AddVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddVideoSourceConfiguration(soap, data), 0) || soap_put___ns1__AddVideoSourceConfiguration(soap, data, "-ns1:AddVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddVideoSourceConfiguration * SOAP_FMAC4 soap_get___ns1__AddVideoSourceConfiguration(struct soap*, struct __ns1__AddVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddVideoSourceConfiguration
#define soap_read___ns1__AddVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddVideoSourceConfiguration * soap_new___ns1__AddVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddVideoSourceConfiguration * soap_new_req___ns1__AddVideoSourceConfiguration(struct soap *soap) { struct __ns1__AddVideoSourceConfiguration *_p = soap_instantiate___ns1__AddVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddVideoSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddVideoSourceConfiguration * soap_new_set___ns1__AddVideoSourceConfiguration(struct soap *soap, _ns1__AddVideoSourceConfiguration *ns1__AddVideoSourceConfiguration) { struct __ns1__AddVideoSourceConfiguration *_p = soap_instantiate___ns1__AddVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddVideoSourceConfiguration(soap, _p); _p->ns1__AddVideoSourceConfiguration = ns1__AddVideoSourceConfiguration; } return _p; }

inline void soap_delete___ns1__AddVideoSourceConfiguration(struct soap *soap, struct __ns1__AddVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddVideoEncoderConfiguration
#define SOAP_TYPE___ns1__AddVideoEncoderConfiguration (1709)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddVideoEncoderConfiguration(struct soap*, struct __ns1__AddVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddVideoEncoderConfiguration(struct soap*, const struct __ns1__AddVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddVideoEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__AddVideoEncoderConfiguration(struct soap*, const char*, struct __ns1__AddVideoEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddVideoEncoderConfiguration(struct soap*, const struct __ns1__AddVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddVideoEncoderConfiguration
#define soap_write___ns1__AddVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddVideoEncoderConfiguration(soap, data), 0) || soap_put___ns1__AddVideoEncoderConfiguration(soap, data, "-ns1:AddVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__AddVideoEncoderConfiguration(struct soap*, struct __ns1__AddVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddVideoEncoderConfiguration
#define soap_read___ns1__AddVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddVideoEncoderConfiguration * soap_new___ns1__AddVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddVideoEncoderConfiguration * soap_new_req___ns1__AddVideoEncoderConfiguration(struct soap *soap) { struct __ns1__AddVideoEncoderConfiguration *_p = soap_instantiate___ns1__AddVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddVideoEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddVideoEncoderConfiguration * soap_new_set___ns1__AddVideoEncoderConfiguration(struct soap *soap, _ns1__AddVideoEncoderConfiguration *ns1__AddVideoEncoderConfiguration) { struct __ns1__AddVideoEncoderConfiguration *_p = soap_instantiate___ns1__AddVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddVideoEncoderConfiguration(soap, _p); _p->ns1__AddVideoEncoderConfiguration = ns1__AddVideoEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__AddVideoEncoderConfiguration(struct soap *soap, struct __ns1__AddVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetProfiles
#define SOAP_TYPE___ns1__GetProfiles (1705)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetProfiles(struct soap*, struct __ns1__GetProfiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetProfiles(struct soap*, const struct __ns1__GetProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetProfiles(struct soap*, const char*, int, const struct __ns1__GetProfiles *, const char*);
SOAP_FMAC3 struct __ns1__GetProfiles * SOAP_FMAC4 soap_in___ns1__GetProfiles(struct soap*, const char*, struct __ns1__GetProfiles *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetProfiles(struct soap*, const struct __ns1__GetProfiles *, const char*, const char*);

#ifndef soap_write___ns1__GetProfiles
#define soap_write___ns1__GetProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetProfiles(soap, data), 0) || soap_put___ns1__GetProfiles(soap, data, "-ns1:GetProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetProfiles * SOAP_FMAC4 soap_get___ns1__GetProfiles(struct soap*, struct __ns1__GetProfiles *, const char*, const char*);

#ifndef soap_read___ns1__GetProfiles
#define soap_read___ns1__GetProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetProfiles * SOAP_FMAC2 soap_instantiate___ns1__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetProfiles * soap_new___ns1__GetProfiles(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetProfiles(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetProfiles * soap_new_req___ns1__GetProfiles(struct soap *soap) { struct __ns1__GetProfiles *_p = soap_instantiate___ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProfiles(soap, _p); } return _p; }

inline struct __ns1__GetProfiles * soap_new_set___ns1__GetProfiles(struct soap *soap, _ns1__GetProfiles *ns1__GetProfiles) { struct __ns1__GetProfiles *_p = soap_instantiate___ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProfiles(soap, _p); _p->ns1__GetProfiles = ns1__GetProfiles; } return _p; }

inline void soap_delete___ns1__GetProfiles(struct soap *soap, struct __ns1__GetProfiles *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetProfiles(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetProfile
#define SOAP_TYPE___ns1__GetProfile (1701)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetProfile(struct soap*, struct __ns1__GetProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetProfile(struct soap*, const struct __ns1__GetProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetProfile(struct soap*, const char*, int, const struct __ns1__GetProfile *, const char*);
SOAP_FMAC3 struct __ns1__GetProfile * SOAP_FMAC4 soap_in___ns1__GetProfile(struct soap*, const char*, struct __ns1__GetProfile *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetProfile(struct soap*, const struct __ns1__GetProfile *, const char*, const char*);

#ifndef soap_write___ns1__GetProfile
#define soap_write___ns1__GetProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetProfile(soap, data), 0) || soap_put___ns1__GetProfile(soap, data, "-ns1:GetProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetProfile * SOAP_FMAC4 soap_get___ns1__GetProfile(struct soap*, struct __ns1__GetProfile *, const char*, const char*);

#ifndef soap_read___ns1__GetProfile
#define soap_read___ns1__GetProfile(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetProfile * SOAP_FMAC2 soap_instantiate___ns1__GetProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetProfile * soap_new___ns1__GetProfile(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetProfile(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetProfile * soap_new_req___ns1__GetProfile(struct soap *soap) { struct __ns1__GetProfile *_p = soap_instantiate___ns1__GetProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProfile(soap, _p); } return _p; }

inline struct __ns1__GetProfile * soap_new_set___ns1__GetProfile(struct soap *soap, _ns1__GetProfile *ns1__GetProfile) { struct __ns1__GetProfile *_p = soap_instantiate___ns1__GetProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProfile(soap, _p); _p->ns1__GetProfile = ns1__GetProfile; } return _p; }

inline void soap_delete___ns1__GetProfile(struct soap *soap, struct __ns1__GetProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__CreateProfile
#define SOAP_TYPE___ns1__CreateProfile (1697)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateProfile(struct soap*, struct __ns1__CreateProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateProfile(struct soap*, const struct __ns1__CreateProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateProfile(struct soap*, const char*, int, const struct __ns1__CreateProfile *, const char*);
SOAP_FMAC3 struct __ns1__CreateProfile * SOAP_FMAC4 soap_in___ns1__CreateProfile(struct soap*, const char*, struct __ns1__CreateProfile *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateProfile(struct soap*, const struct __ns1__CreateProfile *, const char*, const char*);

#ifndef soap_write___ns1__CreateProfile
#define soap_write___ns1__CreateProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__CreateProfile(soap, data), 0) || soap_put___ns1__CreateProfile(soap, data, "-ns1:CreateProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CreateProfile * SOAP_FMAC4 soap_get___ns1__CreateProfile(struct soap*, struct __ns1__CreateProfile *, const char*, const char*);

#ifndef soap_read___ns1__CreateProfile
#define soap_read___ns1__CreateProfile(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__CreateProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__CreateProfile * SOAP_FMAC2 soap_instantiate___ns1__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateProfile * soap_new___ns1__CreateProfile(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CreateProfile(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CreateProfile * soap_new_req___ns1__CreateProfile(struct soap *soap) { struct __ns1__CreateProfile *_p = soap_instantiate___ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateProfile(soap, _p); } return _p; }

inline struct __ns1__CreateProfile * soap_new_set___ns1__CreateProfile(struct soap *soap, _ns1__CreateProfile *ns1__CreateProfile) { struct __ns1__CreateProfile *_p = soap_instantiate___ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateProfile(soap, _p); _p->ns1__CreateProfile = ns1__CreateProfile; } return _p; }

inline void soap_delete___ns1__CreateProfile(struct soap *soap, struct __ns1__CreateProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioOutputs
#define SOAP_TYPE___ns1__GetAudioOutputs (1693)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioOutputs(struct soap*, struct __ns1__GetAudioOutputs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioOutputs(struct soap*, const struct __ns1__GetAudioOutputs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioOutputs(struct soap*, const char*, int, const struct __ns1__GetAudioOutputs *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioOutputs * SOAP_FMAC4 soap_in___ns1__GetAudioOutputs(struct soap*, const char*, struct __ns1__GetAudioOutputs *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioOutputs(struct soap*, const struct __ns1__GetAudioOutputs *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioOutputs
#define soap_write___ns1__GetAudioOutputs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioOutputs(soap, data), 0) || soap_put___ns1__GetAudioOutputs(soap, data, "-ns1:GetAudioOutputs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioOutputs * SOAP_FMAC4 soap_get___ns1__GetAudioOutputs(struct soap*, struct __ns1__GetAudioOutputs *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioOutputs
#define soap_read___ns1__GetAudioOutputs(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioOutputs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioOutputs * SOAP_FMAC2 soap_instantiate___ns1__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioOutputs * soap_new___ns1__GetAudioOutputs(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioOutputs(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioOutputs * soap_new_req___ns1__GetAudioOutputs(struct soap *soap) { struct __ns1__GetAudioOutputs *_p = soap_instantiate___ns1__GetAudioOutputs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputs(soap, _p); } return _p; }

inline struct __ns1__GetAudioOutputs * soap_new_set___ns1__GetAudioOutputs(struct soap *soap, _ns1__GetAudioOutputs *ns1__GetAudioOutputs) { struct __ns1__GetAudioOutputs *_p = soap_instantiate___ns1__GetAudioOutputs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputs(soap, _p); _p->ns1__GetAudioOutputs = ns1__GetAudioOutputs; } return _p; }

inline void soap_delete___ns1__GetAudioOutputs(struct soap *soap, struct __ns1__GetAudioOutputs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioOutputs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioSources
#define SOAP_TYPE___ns1__GetAudioSources (1689)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioSources(struct soap*, struct __ns1__GetAudioSources *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioSources(struct soap*, const struct __ns1__GetAudioSources *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioSources(struct soap*, const char*, int, const struct __ns1__GetAudioSources *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioSources * SOAP_FMAC4 soap_in___ns1__GetAudioSources(struct soap*, const char*, struct __ns1__GetAudioSources *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioSources(struct soap*, const struct __ns1__GetAudioSources *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioSources
#define soap_write___ns1__GetAudioSources(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioSources(soap, data), 0) || soap_put___ns1__GetAudioSources(soap, data, "-ns1:GetAudioSources", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioSources * SOAP_FMAC4 soap_get___ns1__GetAudioSources(struct soap*, struct __ns1__GetAudioSources *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioSources
#define soap_read___ns1__GetAudioSources(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioSources(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioSources * SOAP_FMAC2 soap_instantiate___ns1__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioSources * soap_new___ns1__GetAudioSources(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioSources(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioSources * soap_new_req___ns1__GetAudioSources(struct soap *soap) { struct __ns1__GetAudioSources *_p = soap_instantiate___ns1__GetAudioSources(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSources(soap, _p); } return _p; }

inline struct __ns1__GetAudioSources * soap_new_set___ns1__GetAudioSources(struct soap *soap, _ns1__GetAudioSources *ns1__GetAudioSources) { struct __ns1__GetAudioSources *_p = soap_instantiate___ns1__GetAudioSources(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSources(soap, _p); _p->ns1__GetAudioSources = ns1__GetAudioSources; } return _p; }

inline void soap_delete___ns1__GetAudioSources(struct soap *soap, struct __ns1__GetAudioSources *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioSources(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSources
#define SOAP_TYPE___ns1__GetVideoSources (1685)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSources(struct soap*, struct __ns1__GetVideoSources *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSources(struct soap*, const struct __ns1__GetVideoSources *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSources(struct soap*, const char*, int, const struct __ns1__GetVideoSources *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSources * SOAP_FMAC4 soap_in___ns1__GetVideoSources(struct soap*, const char*, struct __ns1__GetVideoSources *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSources(struct soap*, const struct __ns1__GetVideoSources *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSources
#define soap_write___ns1__GetVideoSources(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSources(soap, data), 0) || soap_put___ns1__GetVideoSources(soap, data, "-ns1:GetVideoSources", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSources * SOAP_FMAC4 soap_get___ns1__GetVideoSources(struct soap*, struct __ns1__GetVideoSources *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSources
#define soap_read___ns1__GetVideoSources(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSources(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSources * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSources * soap_new___ns1__GetVideoSources(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSources(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSources * soap_new_req___ns1__GetVideoSources(struct soap *soap) { struct __ns1__GetVideoSources *_p = soap_instantiate___ns1__GetVideoSources(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSources(soap, _p); } return _p; }

inline struct __ns1__GetVideoSources * soap_new_set___ns1__GetVideoSources(struct soap *soap, _ns1__GetVideoSources *ns1__GetVideoSources) { struct __ns1__GetVideoSources *_p = soap_instantiate___ns1__GetVideoSources(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSources(soap, _p); _p->ns1__GetVideoSources = ns1__GetVideoSources; } return _p; }

inline void soap_delete___ns1__GetVideoSources(struct soap *soap, struct __ns1__GetVideoSources *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSources(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetServiceCapabilities
#define SOAP_TYPE___ns1__GetServiceCapabilities (1681)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetServiceCapabilities(struct soap*, struct __ns1__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetServiceCapabilities(struct soap*, const struct __ns1__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetServiceCapabilities(struct soap*, const char*, int, const struct __ns1__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __ns1__GetServiceCapabilities * SOAP_FMAC4 soap_in___ns1__GetServiceCapabilities(struct soap*, const char*, struct __ns1__GetServiceCapabilities *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetServiceCapabilities(struct soap*, const struct __ns1__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_write___ns1__GetServiceCapabilities
#define soap_write___ns1__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetServiceCapabilities(soap, data), 0) || soap_put___ns1__GetServiceCapabilities(soap, data, "-ns1:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetServiceCapabilities * SOAP_FMAC4 soap_get___ns1__GetServiceCapabilities(struct soap*, struct __ns1__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_read___ns1__GetServiceCapabilities
#define soap_read___ns1__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___ns1__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetServiceCapabilities * soap_new___ns1__GetServiceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetServiceCapabilities(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetServiceCapabilities * soap_new_req___ns1__GetServiceCapabilities(struct soap *soap) { struct __ns1__GetServiceCapabilities *_p = soap_instantiate___ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetServiceCapabilities(soap, _p); } return _p; }

inline struct __ns1__GetServiceCapabilities * soap_new_set___ns1__GetServiceCapabilities(struct soap *soap, _ns1__GetServiceCapabilities *ns1__GetServiceCapabilities) { struct __ns1__GetServiceCapabilities *_p = soap_instantiate___ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetServiceCapabilities(soap, _p); _p->ns1__GetServiceCapabilities = ns1__GetServiceCapabilities; } return _p; }

inline void soap_delete___ns1__GetServiceCapabilities(struct soap *soap, struct __ns1__GetServiceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetServiceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (1437)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE__ns2__union_ColorOptions
#define SOAP_TYPE__ns2__union_ColorOptions (1452)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_ColorOptions(struct soap*, int, const union _ns2__union_ColorOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_ColorOptions(struct soap*, int, const union _ns2__union_ColorOptions *);
SOAP_FMAC3 union _ns2__union_ColorOptions * SOAP_FMAC4 soap_in__ns2__union_ColorOptions(struct soap*, int*, union _ns2__union_ColorOptions *);

#ifndef SOAP_TYPE__ns2__union_EventStream
#define SOAP_TYPE__ns2__union_EventStream (1374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_EventStream(struct soap*, int, const union _ns2__union_EventStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_EventStream(struct soap*, int, const union _ns2__union_EventStream *);
SOAP_FMAC3 union _ns2__union_EventStream * SOAP_FMAC4 soap_in__ns2__union_EventStream(struct soap*, int*, union _ns2__union_EventStream *);

#ifndef SOAP_TYPE__ns2__union_PTZStream
#define SOAP_TYPE__ns2__union_PTZStream (1369)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_PTZStream(struct soap*, int, const union _ns2__union_PTZStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_PTZStream(struct soap*, int, const union _ns2__union_PTZStream *);
SOAP_FMAC3 union _ns2__union_PTZStream * SOAP_FMAC4 soap_in__ns2__union_PTZStream(struct soap*, int*, union _ns2__union_PTZStream *);

#ifndef SOAP_TYPE__ns2__union_VideoAnalyticsStream
#define SOAP_TYPE__ns2__union_VideoAnalyticsStream (1365)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_VideoAnalyticsStream(struct soap*, int, const union _ns2__union_VideoAnalyticsStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_VideoAnalyticsStream(struct soap*, int, const union _ns2__union_VideoAnalyticsStream *);
SOAP_FMAC3 union _ns2__union_VideoAnalyticsStream * SOAP_FMAC4 soap_in__ns2__union_VideoAnalyticsStream(struct soap*, int*, union _ns2__union_VideoAnalyticsStream *);

#ifndef SOAP_TYPE__ns2__union_MetadataStream
#define SOAP_TYPE__ns2__union_MetadataStream (1355)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_MetadataStream(struct soap*, int, const union _ns2__union_MetadataStream *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_MetadataStream(struct soap*, int, const union _ns2__union_MetadataStream *);
SOAP_FMAC3 union _ns2__union_MetadataStream * SOAP_FMAC4 soap_in__ns2__union_MetadataStream(struct soap*, int*, union _ns2__union_MetadataStream *);

#ifndef SOAP_TYPE__ns2__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__ns2__union_PTZPresetTourPresetDetail (1187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns2__union_PTZPresetTourPresetDetail(struct soap*, int, const union _ns2__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__union_PTZPresetTourPresetDetail(struct soap*, int, const union _ns2__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 union _ns2__union_PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in__ns2__union_PTZPresetTourPresetDetail(struct soap*, int*, union _ns2__union_PTZPresetTourPresetDetail *);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (2002)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (2001)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (1996)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DeleteOSD
#define SOAP_TYPE_PointerTo_ns1__DeleteOSD (1990)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteOSD(struct soap*, const char *, int, _ns1__DeleteOSD *const*, const char *);
SOAP_FMAC3 _ns1__DeleteOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteOSD(struct soap*, const char*, _ns1__DeleteOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DeleteOSD
#define soap_write_PointerTo_ns1__DeleteOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__DeleteOSD(soap, data), 0) || soap_put_PointerTo_ns1__DeleteOSD(soap, data, "ns1:DeleteOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DeleteOSD
#define soap_read_PointerTo_ns1__DeleteOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__DeleteOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__CreateOSD
#define SOAP_TYPE_PointerTo_ns1__CreateOSD (1986)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateOSD(struct soap*, _ns1__CreateOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateOSD(struct soap*, const char *, int, _ns1__CreateOSD *const*, const char *);
SOAP_FMAC3 _ns1__CreateOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateOSD(struct soap*, const char*, _ns1__CreateOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateOSD(struct soap*, _ns1__CreateOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__CreateOSD
#define soap_write_PointerTo_ns1__CreateOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__CreateOSD(soap, data), 0) || soap_put_PointerTo_ns1__CreateOSD(soap, data, "ns1:CreateOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateOSD(struct soap*, _ns1__CreateOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__CreateOSD
#define soap_read_PointerTo_ns1__CreateOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__CreateOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetOSD
#define SOAP_TYPE_PointerTo_ns1__SetOSD (1982)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetOSD(struct soap*, _ns1__SetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetOSD(struct soap*, const char *, int, _ns1__SetOSD *const*, const char *);
SOAP_FMAC3 _ns1__SetOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetOSD(struct soap*, const char*, _ns1__SetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetOSD(struct soap*, _ns1__SetOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetOSD
#define soap_write_PointerTo_ns1__SetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetOSD(soap, data), 0) || soap_put_PointerTo_ns1__SetOSD(soap, data, "ns1:SetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetOSD(struct soap*, _ns1__SetOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetOSD
#define soap_read_PointerTo_ns1__SetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOSDOptions
#define SOAP_TYPE_PointerTo_ns1__GetOSDOptions (1978)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOSDOptions(struct soap*, const char *, int, _ns1__GetOSDOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetOSDOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOSDOptions(struct soap*, const char*, _ns1__GetOSDOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOSDOptions
#define soap_write_PointerTo_ns1__GetOSDOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOSDOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetOSDOptions(soap, data, "ns1:GetOSDOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOSDOptions
#define soap_read_PointerTo_ns1__GetOSDOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOSDOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOSD
#define SOAP_TYPE_PointerTo_ns1__GetOSD (1974)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOSD(struct soap*, _ns1__GetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOSD(struct soap*, const char *, int, _ns1__GetOSD *const*, const char *);
SOAP_FMAC3 _ns1__GetOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOSD(struct soap*, const char*, _ns1__GetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOSD(struct soap*, _ns1__GetOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOSD
#define soap_write_PointerTo_ns1__GetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOSD(soap, data), 0) || soap_put_PointerTo_ns1__GetOSD(soap, data, "ns1:GetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOSD(struct soap*, _ns1__GetOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOSD
#define soap_read_PointerTo_ns1__GetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOSDs
#define SOAP_TYPE_PointerTo_ns1__GetOSDs (1970)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOSDs(struct soap*, _ns1__GetOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOSDs(struct soap*, const char *, int, _ns1__GetOSDs *const*, const char *);
SOAP_FMAC3 _ns1__GetOSDs ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOSDs(struct soap*, const char*, _ns1__GetOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOSDs(struct soap*, _ns1__GetOSDs *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOSDs
#define soap_write_PointerTo_ns1__GetOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOSDs(soap, data), 0) || soap_put_PointerTo_ns1__GetOSDs(soap, data, "ns1:GetOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDs ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOSDs(struct soap*, _ns1__GetOSDs **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOSDs
#define soap_read_PointerTo_ns1__GetOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoSourceMode
#define SOAP_TYPE_PointerTo_ns1__SetVideoSourceMode (1966)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoSourceMode(struct soap*, const char *, int, _ns1__SetVideoSourceMode *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoSourceMode ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoSourceMode(struct soap*, const char*, _ns1__SetVideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoSourceMode
#define soap_write_PointerTo_ns1__SetVideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoSourceMode(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoSourceMode(soap, data, "ns1:SetVideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceMode ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoSourceMode
#define soap_read_PointerTo_ns1__SetVideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoSourceModes
#define SOAP_TYPE_PointerTo_ns1__GetVideoSourceModes (1962)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoSourceModes(struct soap*, const char *, int, _ns1__GetVideoSourceModes *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoSourceModes ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoSourceModes(struct soap*, const char*, _ns1__GetVideoSourceModes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoSourceModes
#define soap_write_PointerTo_ns1__GetVideoSourceModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoSourceModes(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoSourceModes(soap, data, "ns1:GetVideoSourceModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceModes ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoSourceModes
#define soap_read_PointerTo_ns1__GetVideoSourceModes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoSourceModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetSnapshotUri
#define SOAP_TYPE_PointerTo_ns1__GetSnapshotUri (1958)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSnapshotUri(struct soap*, const char *, int, _ns1__GetSnapshotUri *const*, const char *);
SOAP_FMAC3 _ns1__GetSnapshotUri ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSnapshotUri(struct soap*, const char*, _ns1__GetSnapshotUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetSnapshotUri
#define soap_write_PointerTo_ns1__GetSnapshotUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetSnapshotUri(soap, data), 0) || soap_put_PointerTo_ns1__GetSnapshotUri(soap, data, "ns1:GetSnapshotUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetSnapshotUri ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetSnapshotUri
#define soap_read_PointerTo_ns1__GetSnapshotUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetSnapshotUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_ns1__SetSynchronizationPoint (1954)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSynchronizationPoint(struct soap*, const char *, int, _ns1__SetSynchronizationPoint *const*, const char *);
SOAP_FMAC3 _ns1__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSynchronizationPoint(struct soap*, const char*, _ns1__SetSynchronizationPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetSynchronizationPoint
#define soap_write_PointerTo_ns1__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetSynchronizationPoint(soap, data), 0) || soap_put_PointerTo_ns1__SetSynchronizationPoint(soap, data, "ns1:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetSynchronizationPoint
#define soap_read_PointerTo_ns1__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__StopMulticastStreaming
#define SOAP_TYPE_PointerTo_ns1__StopMulticastStreaming (1950)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopMulticastStreaming(struct soap*, _ns1__StopMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopMulticastStreaming(struct soap*, const char *, int, _ns1__StopMulticastStreaming *const*, const char *);
SOAP_FMAC3 _ns1__StopMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopMulticastStreaming(struct soap*, const char*, _ns1__StopMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopMulticastStreaming(struct soap*, _ns1__StopMulticastStreaming *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__StopMulticastStreaming
#define soap_write_PointerTo_ns1__StopMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__StopMulticastStreaming(soap, data), 0) || soap_put_PointerTo_ns1__StopMulticastStreaming(soap, data, "ns1:StopMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StopMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopMulticastStreaming(struct soap*, _ns1__StopMulticastStreaming **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__StopMulticastStreaming
#define soap_read_PointerTo_ns1__StopMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__StopMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__StartMulticastStreaming
#define SOAP_TYPE_PointerTo_ns1__StartMulticastStreaming (1946)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StartMulticastStreaming(struct soap*, _ns1__StartMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StartMulticastStreaming(struct soap*, const char *, int, _ns1__StartMulticastStreaming *const*, const char *);
SOAP_FMAC3 _ns1__StartMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTo_ns1__StartMulticastStreaming(struct soap*, const char*, _ns1__StartMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StartMulticastStreaming(struct soap*, _ns1__StartMulticastStreaming *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__StartMulticastStreaming
#define soap_write_PointerTo_ns1__StartMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__StartMulticastStreaming(soap, data), 0) || soap_put_PointerTo_ns1__StartMulticastStreaming(soap, data, "ns1:StartMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StartMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTo_ns1__StartMulticastStreaming(struct soap*, _ns1__StartMulticastStreaming **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__StartMulticastStreaming
#define soap_read_PointerTo_ns1__StartMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__StartMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetStreamUri
#define SOAP_TYPE_PointerTo_ns1__GetStreamUri (1942)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStreamUri(struct soap*, const char *, int, _ns1__GetStreamUri *const*, const char *);
SOAP_FMAC3 _ns1__GetStreamUri ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStreamUri(struct soap*, const char*, _ns1__GetStreamUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetStreamUri
#define soap_write_PointerTo_ns1__GetStreamUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetStreamUri(soap, data), 0) || soap_put_PointerTo_ns1__GetStreamUri(soap, data, "ns1:GetStreamUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetStreamUri ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetStreamUri
#define soap_read_PointerTo_ns1__GetStreamUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetStreamUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances (1938)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char *, int, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *const*, const char *);
SOAP_FMAC3 _ns1__GetGuaranteedNumberOfVideoEncoderInstances ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, _ns1__GetGuaranteedNumberOfVideoEncoderInstances **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _ns1__GetGuaranteedNumberOfVideoEncoderInstances *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define soap_write_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data), 0) || soap_put_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data, "ns1:GetGuaranteedNumberOfVideoEncoderInstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetGuaranteedNumberOfVideoEncoderInstances ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _ns1__GetGuaranteedNumberOfVideoEncoderInstances **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances
#define soap_read_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetGuaranteedNumberOfVideoEncoderInstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetAudioDecoderConfigurationOptions (1934)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioDecoderConfigurationOptions(struct soap*, _ns1__GetAudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char *, int, _ns1__GetAudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioDecoderConfigurationOptions(struct soap*, _ns1__GetAudioDecoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioDecoderConfigurationOptions
#define soap_write_PointerTo_ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioDecoderConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioDecoderConfigurationOptions(soap, data, "ns1:GetAudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioDecoderConfigurationOptions(struct soap*, _ns1__GetAudioDecoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioDecoderConfigurationOptions
#define soap_read_PointerTo_ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetAudioOutputConfigurationOptions (1930)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioOutputConfigurationOptions(struct soap*, _ns1__GetAudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioOutputConfigurationOptions(struct soap*, const char *, int, _ns1__GetAudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, _ns1__GetAudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioOutputConfigurationOptions(struct soap*, _ns1__GetAudioOutputConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioOutputConfigurationOptions
#define soap_write_PointerTo_ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioOutputConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioOutputConfigurationOptions(soap, data, "ns1:GetAudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioOutputConfigurationOptions(struct soap*, _ns1__GetAudioOutputConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioOutputConfigurationOptions
#define soap_read_PointerTo_ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetMetadataConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetMetadataConfigurationOptions (1926)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMetadataConfigurationOptions(struct soap*, _ns1__GetMetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMetadataConfigurationOptions(struct soap*, const char *, int, _ns1__GetMetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetMetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMetadataConfigurationOptions(struct soap*, const char*, _ns1__GetMetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMetadataConfigurationOptions(struct soap*, _ns1__GetMetadataConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetMetadataConfigurationOptions
#define soap_write_PointerTo_ns1__GetMetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetMetadataConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetMetadataConfigurationOptions(soap, data, "ns1:GetMetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMetadataConfigurationOptions(struct soap*, _ns1__GetMetadataConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetMetadataConfigurationOptions
#define soap_read_PointerTo_ns1__GetMetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetMetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetAudioEncoderConfigurationOptions (1922)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioEncoderConfigurationOptions(struct soap*, _ns1__GetAudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char *, int, _ns1__GetAudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioEncoderConfigurationOptions(struct soap*, _ns1__GetAudioEncoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioEncoderConfigurationOptions
#define soap_write_PointerTo_ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioEncoderConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioEncoderConfigurationOptions(soap, data, "ns1:GetAudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioEncoderConfigurationOptions(struct soap*, _ns1__GetAudioEncoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioEncoderConfigurationOptions
#define soap_read_PointerTo_ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetAudioSourceConfigurationOptions (1918)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioSourceConfigurationOptions(struct soap*, _ns1__GetAudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioSourceConfigurationOptions(struct soap*, const char *, int, _ns1__GetAudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, _ns1__GetAudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioSourceConfigurationOptions(struct soap*, _ns1__GetAudioSourceConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioSourceConfigurationOptions
#define soap_write_PointerTo_ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioSourceConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioSourceConfigurationOptions(soap, data, "ns1:GetAudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioSourceConfigurationOptions(struct soap*, _ns1__GetAudioSourceConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioSourceConfigurationOptions
#define soap_read_PointerTo_ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetVideoEncoderConfigurationOptions (1914)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoEncoderConfigurationOptions(struct soap*, _ns1__GetVideoEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char *, int, _ns1__GetVideoEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoEncoderConfigurationOptions(struct soap*, _ns1__GetVideoEncoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoEncoderConfigurationOptions
#define soap_write_PointerTo_ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoEncoderConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoEncoderConfigurationOptions(soap, data, "ns1:GetVideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoEncoderConfigurationOptions(struct soap*, _ns1__GetVideoEncoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoEncoderConfigurationOptions
#define soap_read_PointerTo_ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTo_ns1__GetVideoSourceConfigurationOptions (1910)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoSourceConfigurationOptions(struct soap*, _ns1__GetVideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoSourceConfigurationOptions(struct soap*, const char *, int, _ns1__GetVideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, _ns1__GetVideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoSourceConfigurationOptions(struct soap*, _ns1__GetVideoSourceConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoSourceConfigurationOptions
#define soap_write_PointerTo_ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoSourceConfigurationOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoSourceConfigurationOptions(soap, data, "ns1:GetVideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoSourceConfigurationOptions(struct soap*, _ns1__GetVideoSourceConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoSourceConfigurationOptions
#define soap_read_PointerTo_ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioDecoderConfiguration (1906)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, const char *, int, _ns1__SetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, const char*, _ns1__SetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioDecoderConfiguration
#define soap_write_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data, "ns1:SetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioDecoderConfiguration
#define soap_read_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioOutputConfiguration (1902)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, const char *, int, _ns1__SetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, const char*, _ns1__SetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioOutputConfiguration
#define soap_write_PointerTo_ns1__SetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioOutputConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioOutputConfiguration(soap, data, "ns1:SetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioOutputConfiguration
#define soap_read_PointerTo_ns1__SetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetMetadataConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetMetadataConfiguration (1898)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMetadataConfiguration(struct soap*, const char *, int, _ns1__SetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMetadataConfiguration(struct soap*, const char*, _ns1__SetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetMetadataConfiguration
#define soap_write_PointerTo_ns1__SetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetMetadataConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetMetadataConfiguration(soap, data, "ns1:SetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetMetadataConfiguration
#define soap_read_PointerTo_ns1__SetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetVideoAnalyticsConfiguration (1894)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoAnalyticsConfiguration(struct soap*, _ns1__SetVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoAnalyticsConfiguration(struct soap*, const char *, int, _ns1__SetVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__SetVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoAnalyticsConfiguration(struct soap*, _ns1__SetVideoAnalyticsConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoAnalyticsConfiguration
#define soap_write_PointerTo_ns1__SetVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoAnalyticsConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoAnalyticsConfiguration(soap, data, "ns1:SetVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoAnalyticsConfiguration(struct soap*, _ns1__SetVideoAnalyticsConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoAnalyticsConfiguration
#define soap_read_PointerTo_ns1__SetVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioEncoderConfiguration (1890)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, const char *, int, _ns1__SetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, const char*, _ns1__SetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioEncoderConfiguration
#define soap_write_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data, "ns1:SetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioEncoderConfiguration
#define soap_read_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioSourceConfiguration (1886)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, const char *, int, _ns1__SetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, const char*, _ns1__SetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioSourceConfiguration
#define soap_write_PointerTo_ns1__SetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioSourceConfiguration(soap, data, "ns1:SetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioSourceConfiguration
#define soap_read_PointerTo_ns1__SetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetVideoEncoderConfiguration (1882)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, const char *, int, _ns1__SetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, const char*, _ns1__SetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoEncoderConfiguration
#define soap_write_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data, "ns1:SetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoEncoderConfiguration
#define soap_read_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetVideoSourceConfiguration (1878)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, const char *, int, _ns1__SetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, const char*, _ns1__SetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoSourceConfiguration
#define soap_write_PointerTo_ns1__SetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoSourceConfiguration(soap, data, "ns1:SetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoSourceConfiguration
#define soap_read_PointerTo_ns1__SetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations (1874)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, _ns1__GetCompatibleAudioDecoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleAudioDecoderConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleAudioDecoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioDecoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, _ns1__GetCompatibleAudioDecoderConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(soap, data, "ns1:GetCompatibleAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioDecoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(struct soap*, _ns1__GetCompatibleAudioDecoderConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioOutputConfigurations (1870)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(struct soap*, _ns1__GetCompatibleAudioOutputConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleAudioOutputConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleAudioOutputConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioOutputConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(struct soap*, _ns1__GetCompatibleAudioOutputConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleAudioOutputConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(soap, data, "ns1:GetCompatibleAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioOutputConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(struct soap*, _ns1__GetCompatibleAudioOutputConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleAudioOutputConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleMetadataConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleMetadataConfigurations (1866)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleMetadataConfigurations(struct soap*, _ns1__GetCompatibleMetadataConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleMetadataConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleMetadataConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleMetadataConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleMetadataConfigurations(struct soap*, const char*, _ns1__GetCompatibleMetadataConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleMetadataConfigurations(struct soap*, _ns1__GetCompatibleMetadataConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleMetadataConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleMetadataConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleMetadataConfigurations(soap, data, "ns1:GetCompatibleMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleMetadataConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleMetadataConfigurations(struct soap*, _ns1__GetCompatibleMetadataConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleMetadataConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations (1862)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _ns1__GetCompatibleVideoAnalyticsConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleVideoAnalyticsConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, _ns1__GetCompatibleVideoAnalyticsConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _ns1__GetCompatibleVideoAnalyticsConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data, "ns1:GetCompatibleVideoAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _ns1__GetCompatibleVideoAnalyticsConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleVideoAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioSourceConfigurations (1858)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(struct soap*, _ns1__GetCompatibleAudioSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleAudioSourceConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleAudioSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(struct soap*, _ns1__GetCompatibleAudioSourceConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleAudioSourceConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(soap, data, "ns1:GetCompatibleAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(struct soap*, _ns1__GetCompatibleAudioSourceConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleAudioSourceConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations (1854)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, _ns1__GetCompatibleAudioEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleAudioEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleAudioEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, _ns1__GetCompatibleAudioEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, _ns1__GetCompatibleAudioEncoderConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(soap, data, "ns1:GetCompatibleAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleAudioEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(struct soap*, _ns1__GetCompatibleAudioEncoderConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleVideoSourceConfigurations (1850)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(struct soap*, _ns1__GetCompatibleVideoSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleVideoSourceConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleVideoSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, _ns1__GetCompatibleVideoSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(struct soap*, _ns1__GetCompatibleVideoSourceConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleVideoSourceConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(soap, data, "ns1:GetCompatibleVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(struct soap*, _ns1__GetCompatibleVideoSourceConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleVideoSourceConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations (1846)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, _ns1__GetCompatibleVideoEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const char *, int, _ns1__GetCompatibleVideoEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetCompatibleVideoEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, _ns1__GetCompatibleVideoEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, _ns1__GetCompatibleVideoEncoderConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations
#define soap_write_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(soap, data, "ns1:GetCompatibleVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetCompatibleVideoEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(struct soap*, _ns1__GetCompatibleVideoEncoderConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations
#define soap_read_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetCompatibleVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetAudioDecoderConfiguration (1842)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioDecoderConfiguration(struct soap*, _ns1__GetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioDecoderConfiguration(struct soap*, const char *, int, _ns1__GetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioDecoderConfiguration(struct soap*, const char*, _ns1__GetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioDecoderConfiguration(struct soap*, _ns1__GetAudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioDecoderConfiguration
#define soap_write_PointerTo_ns1__GetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioDecoderConfiguration(soap, data, "ns1:GetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioDecoderConfiguration(struct soap*, _ns1__GetAudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioDecoderConfiguration
#define soap_read_PointerTo_ns1__GetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetAudioOutputConfiguration (1838)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioOutputConfiguration(struct soap*, _ns1__GetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioOutputConfiguration(struct soap*, const char *, int, _ns1__GetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioOutputConfiguration(struct soap*, const char*, _ns1__GetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioOutputConfiguration(struct soap*, _ns1__GetAudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioOutputConfiguration
#define soap_write_PointerTo_ns1__GetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioOutputConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioOutputConfiguration(soap, data, "ns1:GetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioOutputConfiguration(struct soap*, _ns1__GetAudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioOutputConfiguration
#define soap_read_PointerTo_ns1__GetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetMetadataConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetMetadataConfiguration (1834)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMetadataConfiguration(struct soap*, _ns1__GetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMetadataConfiguration(struct soap*, const char *, int, _ns1__GetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMetadataConfiguration(struct soap*, const char*, _ns1__GetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMetadataConfiguration(struct soap*, _ns1__GetMetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetMetadataConfiguration
#define soap_write_PointerTo_ns1__GetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetMetadataConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetMetadataConfiguration(soap, data, "ns1:GetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMetadataConfiguration(struct soap*, _ns1__GetMetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetMetadataConfiguration
#define soap_read_PointerTo_ns1__GetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetVideoAnalyticsConfiguration (1830)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoAnalyticsConfiguration(struct soap*, _ns1__GetVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoAnalyticsConfiguration(struct soap*, const char *, int, _ns1__GetVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__GetVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoAnalyticsConfiguration(struct soap*, _ns1__GetVideoAnalyticsConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoAnalyticsConfiguration
#define soap_write_PointerTo_ns1__GetVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoAnalyticsConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoAnalyticsConfiguration(soap, data, "ns1:GetVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoAnalyticsConfiguration(struct soap*, _ns1__GetVideoAnalyticsConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoAnalyticsConfiguration
#define soap_read_PointerTo_ns1__GetVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetAudioEncoderConfiguration (1826)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioEncoderConfiguration(struct soap*, _ns1__GetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioEncoderConfiguration(struct soap*, const char *, int, _ns1__GetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioEncoderConfiguration(struct soap*, const char*, _ns1__GetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioEncoderConfiguration(struct soap*, _ns1__GetAudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioEncoderConfiguration
#define soap_write_PointerTo_ns1__GetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioEncoderConfiguration(soap, data, "ns1:GetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioEncoderConfiguration(struct soap*, _ns1__GetAudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioEncoderConfiguration
#define soap_read_PointerTo_ns1__GetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetAudioSourceConfiguration (1822)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioSourceConfiguration(struct soap*, _ns1__GetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioSourceConfiguration(struct soap*, const char *, int, _ns1__GetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioSourceConfiguration(struct soap*, const char*, _ns1__GetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioSourceConfiguration(struct soap*, _ns1__GetAudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioSourceConfiguration
#define soap_write_PointerTo_ns1__GetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioSourceConfiguration(soap, data, "ns1:GetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioSourceConfiguration(struct soap*, _ns1__GetAudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioSourceConfiguration
#define soap_read_PointerTo_ns1__GetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetVideoEncoderConfiguration (1818)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoEncoderConfiguration(struct soap*, _ns1__GetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoEncoderConfiguration(struct soap*, const char *, int, _ns1__GetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoEncoderConfiguration(struct soap*, const char*, _ns1__GetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoEncoderConfiguration(struct soap*, _ns1__GetVideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoEncoderConfiguration
#define soap_write_PointerTo_ns1__GetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoEncoderConfiguration(soap, data, "ns1:GetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoEncoderConfiguration(struct soap*, _ns1__GetVideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoEncoderConfiguration
#define soap_read_PointerTo_ns1__GetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__GetVideoSourceConfiguration (1814)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoSourceConfiguration(struct soap*, _ns1__GetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoSourceConfiguration(struct soap*, const char *, int, _ns1__GetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoSourceConfiguration(struct soap*, const char*, _ns1__GetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoSourceConfiguration(struct soap*, _ns1__GetVideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoSourceConfiguration
#define soap_write_PointerTo_ns1__GetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoSourceConfiguration(soap, data, "ns1:GetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoSourceConfiguration(struct soap*, _ns1__GetVideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoSourceConfiguration
#define soap_read_PointerTo_ns1__GetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioDecoderConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetAudioDecoderConfigurations (1810)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioDecoderConfigurations(struct soap*, _ns1__GetAudioDecoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioDecoderConfigurations(struct soap*, const char *, int, _ns1__GetAudioDecoderConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioDecoderConfigurations(struct soap*, const char*, _ns1__GetAudioDecoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioDecoderConfigurations(struct soap*, _ns1__GetAudioDecoderConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioDecoderConfigurations
#define soap_write_PointerTo_ns1__GetAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioDecoderConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioDecoderConfigurations(soap, data, "ns1:GetAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioDecoderConfigurations(struct soap*, _ns1__GetAudioDecoderConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioDecoderConfigurations
#define soap_read_PointerTo_ns1__GetAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioOutputConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetAudioOutputConfigurations (1806)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioOutputConfigurations(struct soap*, _ns1__GetAudioOutputConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioOutputConfigurations(struct soap*, const char *, int, _ns1__GetAudioOutputConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioOutputConfigurations(struct soap*, const char*, _ns1__GetAudioOutputConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioOutputConfigurations(struct soap*, _ns1__GetAudioOutputConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioOutputConfigurations
#define soap_write_PointerTo_ns1__GetAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioOutputConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioOutputConfigurations(soap, data, "ns1:GetAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioOutputConfigurations(struct soap*, _ns1__GetAudioOutputConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioOutputConfigurations
#define soap_read_PointerTo_ns1__GetAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetMetadataConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetMetadataConfigurations (1802)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMetadataConfigurations(struct soap*, _ns1__GetMetadataConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMetadataConfigurations(struct soap*, const char *, int, _ns1__GetMetadataConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetMetadataConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMetadataConfigurations(struct soap*, const char*, _ns1__GetMetadataConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMetadataConfigurations(struct soap*, _ns1__GetMetadataConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetMetadataConfigurations
#define soap_write_PointerTo_ns1__GetMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetMetadataConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetMetadataConfigurations(soap, data, "ns1:GetMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMetadataConfigurations(struct soap*, _ns1__GetMetadataConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetMetadataConfigurations
#define soap_read_PointerTo_ns1__GetMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoAnalyticsConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetVideoAnalyticsConfigurations (1798)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoAnalyticsConfigurations(struct soap*, _ns1__GetVideoAnalyticsConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoAnalyticsConfigurations(struct soap*, const char *, int, _ns1__GetVideoAnalyticsConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoAnalyticsConfigurations(struct soap*, const char*, _ns1__GetVideoAnalyticsConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoAnalyticsConfigurations(struct soap*, _ns1__GetVideoAnalyticsConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoAnalyticsConfigurations
#define soap_write_PointerTo_ns1__GetVideoAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoAnalyticsConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoAnalyticsConfigurations(soap, data, "ns1:GetVideoAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoAnalyticsConfigurations(struct soap*, _ns1__GetVideoAnalyticsConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoAnalyticsConfigurations
#define soap_read_PointerTo_ns1__GetVideoAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioEncoderConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetAudioEncoderConfigurations (1794)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioEncoderConfigurations(struct soap*, _ns1__GetAudioEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioEncoderConfigurations(struct soap*, const char *, int, _ns1__GetAudioEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioEncoderConfigurations(struct soap*, const char*, _ns1__GetAudioEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioEncoderConfigurations(struct soap*, _ns1__GetAudioEncoderConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioEncoderConfigurations
#define soap_write_PointerTo_ns1__GetAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioEncoderConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioEncoderConfigurations(soap, data, "ns1:GetAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioEncoderConfigurations(struct soap*, _ns1__GetAudioEncoderConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioEncoderConfigurations
#define soap_read_PointerTo_ns1__GetAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioSourceConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetAudioSourceConfigurations (1790)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioSourceConfigurations(struct soap*, _ns1__GetAudioSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioSourceConfigurations(struct soap*, const char *, int, _ns1__GetAudioSourceConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioSourceConfigurations(struct soap*, const char*, _ns1__GetAudioSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioSourceConfigurations(struct soap*, _ns1__GetAudioSourceConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioSourceConfigurations
#define soap_write_PointerTo_ns1__GetAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioSourceConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioSourceConfigurations(soap, data, "ns1:GetAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioSourceConfigurations(struct soap*, _ns1__GetAudioSourceConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioSourceConfigurations
#define soap_read_PointerTo_ns1__GetAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoEncoderConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetVideoEncoderConfigurations (1786)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoEncoderConfigurations(struct soap*, _ns1__GetVideoEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoEncoderConfigurations(struct soap*, const char *, int, _ns1__GetVideoEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoEncoderConfigurations(struct soap*, const char*, _ns1__GetVideoEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoEncoderConfigurations(struct soap*, _ns1__GetVideoEncoderConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoEncoderConfigurations
#define soap_write_PointerTo_ns1__GetVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoEncoderConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoEncoderConfigurations(soap, data, "ns1:GetVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoEncoderConfigurations(struct soap*, _ns1__GetVideoEncoderConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoEncoderConfigurations
#define soap_read_PointerTo_ns1__GetVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoSourceConfigurations
#define SOAP_TYPE_PointerTo_ns1__GetVideoSourceConfigurations (1782)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoSourceConfigurations(struct soap*, _ns1__GetVideoSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoSourceConfigurations(struct soap*, const char *, int, _ns1__GetVideoSourceConfigurations *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoSourceConfigurations(struct soap*, const char*, _ns1__GetVideoSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoSourceConfigurations(struct soap*, _ns1__GetVideoSourceConfigurations *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoSourceConfigurations
#define soap_write_PointerTo_ns1__GetVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoSourceConfigurations(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoSourceConfigurations(soap, data, "ns1:GetVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoSourceConfigurations(struct soap*, _ns1__GetVideoSourceConfigurations **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoSourceConfigurations
#define soap_read_PointerTo_ns1__GetVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__DeleteProfile
#define SOAP_TYPE_PointerTo_ns1__DeleteProfile (1778)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteProfile(struct soap*, const char *, int, _ns1__DeleteProfile *const*, const char *);
SOAP_FMAC3 _ns1__DeleteProfile ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteProfile(struct soap*, const char*, _ns1__DeleteProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DeleteProfile
#define soap_write_PointerTo_ns1__DeleteProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__DeleteProfile(soap, data), 0) || soap_put_PointerTo_ns1__DeleteProfile(soap, data, "ns1:DeleteProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteProfile ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DeleteProfile
#define soap_read_PointerTo_ns1__DeleteProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__DeleteProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveAudioDecoderConfiguration (1774)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveAudioDecoderConfiguration(struct soap*, _ns1__RemoveAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveAudioDecoderConfiguration(struct soap*, const char *, int, _ns1__RemoveAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveAudioDecoderConfiguration(struct soap*, const char*, _ns1__RemoveAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveAudioDecoderConfiguration(struct soap*, _ns1__RemoveAudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveAudioDecoderConfiguration
#define soap_write_PointerTo_ns1__RemoveAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveAudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveAudioDecoderConfiguration(soap, data, "ns1:RemoveAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveAudioDecoderConfiguration(struct soap*, _ns1__RemoveAudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveAudioDecoderConfiguration
#define soap_read_PointerTo_ns1__RemoveAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveAudioOutputConfiguration (1770)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveAudioOutputConfiguration(struct soap*, _ns1__RemoveAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveAudioOutputConfiguration(struct soap*, const char *, int, _ns1__RemoveAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveAudioOutputConfiguration(struct soap*, const char*, _ns1__RemoveAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveAudioOutputConfiguration(struct soap*, _ns1__RemoveAudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveAudioOutputConfiguration
#define soap_write_PointerTo_ns1__RemoveAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveAudioOutputConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveAudioOutputConfiguration(soap, data, "ns1:RemoveAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveAudioOutputConfiguration(struct soap*, _ns1__RemoveAudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveAudioOutputConfiguration
#define soap_read_PointerTo_ns1__RemoveAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveMetadataConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveMetadataConfiguration (1766)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveMetadataConfiguration(struct soap*, _ns1__RemoveMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveMetadataConfiguration(struct soap*, const char *, int, _ns1__RemoveMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveMetadataConfiguration(struct soap*, const char*, _ns1__RemoveMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveMetadataConfiguration(struct soap*, _ns1__RemoveMetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveMetadataConfiguration
#define soap_write_PointerTo_ns1__RemoveMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveMetadataConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveMetadataConfiguration(soap, data, "ns1:RemoveMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveMetadataConfiguration(struct soap*, _ns1__RemoveMetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveMetadataConfiguration
#define soap_read_PointerTo_ns1__RemoveMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveVideoAnalyticsConfiguration (1762)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(struct soap*, _ns1__RemoveVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const char *, int, _ns1__RemoveVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__RemoveVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(struct soap*, _ns1__RemoveVideoAnalyticsConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveVideoAnalyticsConfiguration
#define soap_write_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(soap, data, "ns1:RemoveVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(struct soap*, _ns1__RemoveVideoAnalyticsConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveVideoAnalyticsConfiguration
#define soap_read_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemovePTZConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemovePTZConfiguration (1758)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemovePTZConfiguration(struct soap*, _ns1__RemovePTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemovePTZConfiguration(struct soap*, const char *, int, _ns1__RemovePTZConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemovePTZConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemovePTZConfiguration(struct soap*, const char*, _ns1__RemovePTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemovePTZConfiguration(struct soap*, _ns1__RemovePTZConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemovePTZConfiguration
#define soap_write_PointerTo_ns1__RemovePTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemovePTZConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemovePTZConfiguration(soap, data, "ns1:RemovePTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemovePTZConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemovePTZConfiguration(struct soap*, _ns1__RemovePTZConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemovePTZConfiguration
#define soap_read_PointerTo_ns1__RemovePTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemovePTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveAudioSourceConfiguration (1754)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveAudioSourceConfiguration(struct soap*, _ns1__RemoveAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveAudioSourceConfiguration(struct soap*, const char *, int, _ns1__RemoveAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveAudioSourceConfiguration(struct soap*, const char*, _ns1__RemoveAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveAudioSourceConfiguration(struct soap*, _ns1__RemoveAudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveAudioSourceConfiguration
#define soap_write_PointerTo_ns1__RemoveAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveAudioSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveAudioSourceConfiguration(soap, data, "ns1:RemoveAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveAudioSourceConfiguration(struct soap*, _ns1__RemoveAudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveAudioSourceConfiguration
#define soap_read_PointerTo_ns1__RemoveAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveAudioEncoderConfiguration (1750)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveAudioEncoderConfiguration(struct soap*, _ns1__RemoveAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveAudioEncoderConfiguration(struct soap*, const char *, int, _ns1__RemoveAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveAudioEncoderConfiguration(struct soap*, const char*, _ns1__RemoveAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveAudioEncoderConfiguration(struct soap*, _ns1__RemoveAudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveAudioEncoderConfiguration
#define soap_write_PointerTo_ns1__RemoveAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveAudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveAudioEncoderConfiguration(soap, data, "ns1:RemoveAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveAudioEncoderConfiguration(struct soap*, _ns1__RemoveAudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveAudioEncoderConfiguration
#define soap_read_PointerTo_ns1__RemoveAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveVideoSourceConfiguration (1746)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveVideoSourceConfiguration(struct soap*, _ns1__RemoveVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveVideoSourceConfiguration(struct soap*, const char *, int, _ns1__RemoveVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveVideoSourceConfiguration(struct soap*, const char*, _ns1__RemoveVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveVideoSourceConfiguration(struct soap*, _ns1__RemoveVideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveVideoSourceConfiguration
#define soap_write_PointerTo_ns1__RemoveVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveVideoSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveVideoSourceConfiguration(soap, data, "ns1:RemoveVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveVideoSourceConfiguration(struct soap*, _ns1__RemoveVideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveVideoSourceConfiguration
#define soap_read_PointerTo_ns1__RemoveVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveVideoEncoderConfiguration (1742)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveVideoEncoderConfiguration(struct soap*, _ns1__RemoveVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveVideoEncoderConfiguration(struct soap*, const char *, int, _ns1__RemoveVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveVideoEncoderConfiguration(struct soap*, const char*, _ns1__RemoveVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveVideoEncoderConfiguration(struct soap*, _ns1__RemoveVideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveVideoEncoderConfiguration
#define soap_write_PointerTo_ns1__RemoveVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveVideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveVideoEncoderConfiguration(soap, data, "ns1:RemoveVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveVideoEncoderConfiguration(struct soap*, _ns1__RemoveVideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveVideoEncoderConfiguration
#define soap_read_PointerTo_ns1__RemoveVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddAudioDecoderConfiguration (1738)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddAudioDecoderConfiguration(struct soap*, _ns1__AddAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddAudioDecoderConfiguration(struct soap*, const char *, int, _ns1__AddAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddAudioDecoderConfiguration(struct soap*, const char*, _ns1__AddAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddAudioDecoderConfiguration(struct soap*, _ns1__AddAudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddAudioDecoderConfiguration
#define soap_write_PointerTo_ns1__AddAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddAudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddAudioDecoderConfiguration(soap, data, "ns1:AddAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddAudioDecoderConfiguration(struct soap*, _ns1__AddAudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddAudioDecoderConfiguration
#define soap_read_PointerTo_ns1__AddAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddAudioOutputConfiguration (1734)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddAudioOutputConfiguration(struct soap*, _ns1__AddAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddAudioOutputConfiguration(struct soap*, const char *, int, _ns1__AddAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddAudioOutputConfiguration(struct soap*, const char*, _ns1__AddAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddAudioOutputConfiguration(struct soap*, _ns1__AddAudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddAudioOutputConfiguration
#define soap_write_PointerTo_ns1__AddAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddAudioOutputConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddAudioOutputConfiguration(soap, data, "ns1:AddAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddAudioOutputConfiguration(struct soap*, _ns1__AddAudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddAudioOutputConfiguration
#define soap_read_PointerTo_ns1__AddAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddMetadataConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddMetadataConfiguration (1730)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddMetadataConfiguration(struct soap*, _ns1__AddMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddMetadataConfiguration(struct soap*, const char *, int, _ns1__AddMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddMetadataConfiguration(struct soap*, const char*, _ns1__AddMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddMetadataConfiguration(struct soap*, _ns1__AddMetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddMetadataConfiguration
#define soap_write_PointerTo_ns1__AddMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddMetadataConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddMetadataConfiguration(soap, data, "ns1:AddMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddMetadataConfiguration(struct soap*, _ns1__AddMetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddMetadataConfiguration
#define soap_read_PointerTo_ns1__AddMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddVideoAnalyticsConfiguration (1726)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddVideoAnalyticsConfiguration(struct soap*, _ns1__AddVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddVideoAnalyticsConfiguration(struct soap*, const char *, int, _ns1__AddVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddVideoAnalyticsConfiguration(struct soap*, const char*, _ns1__AddVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddVideoAnalyticsConfiguration(struct soap*, _ns1__AddVideoAnalyticsConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddVideoAnalyticsConfiguration
#define soap_write_PointerTo_ns1__AddVideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddVideoAnalyticsConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddVideoAnalyticsConfiguration(soap, data, "ns1:AddVideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddVideoAnalyticsConfiguration(struct soap*, _ns1__AddVideoAnalyticsConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddVideoAnalyticsConfiguration
#define soap_read_PointerTo_ns1__AddVideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddVideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddPTZConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddPTZConfiguration (1722)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddPTZConfiguration(struct soap*, _ns1__AddPTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddPTZConfiguration(struct soap*, const char *, int, _ns1__AddPTZConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddPTZConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddPTZConfiguration(struct soap*, const char*, _ns1__AddPTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddPTZConfiguration(struct soap*, _ns1__AddPTZConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddPTZConfiguration
#define soap_write_PointerTo_ns1__AddPTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddPTZConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddPTZConfiguration(soap, data, "ns1:AddPTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddPTZConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddPTZConfiguration(struct soap*, _ns1__AddPTZConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddPTZConfiguration
#define soap_read_PointerTo_ns1__AddPTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddPTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddAudioSourceConfiguration (1718)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddAudioSourceConfiguration(struct soap*, _ns1__AddAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddAudioSourceConfiguration(struct soap*, const char *, int, _ns1__AddAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddAudioSourceConfiguration(struct soap*, const char*, _ns1__AddAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddAudioSourceConfiguration(struct soap*, _ns1__AddAudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddAudioSourceConfiguration
#define soap_write_PointerTo_ns1__AddAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddAudioSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddAudioSourceConfiguration(soap, data, "ns1:AddAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddAudioSourceConfiguration(struct soap*, _ns1__AddAudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddAudioSourceConfiguration
#define soap_read_PointerTo_ns1__AddAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddAudioEncoderConfiguration (1714)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddAudioEncoderConfiguration(struct soap*, _ns1__AddAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddAudioEncoderConfiguration(struct soap*, const char *, int, _ns1__AddAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddAudioEncoderConfiguration(struct soap*, const char*, _ns1__AddAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddAudioEncoderConfiguration(struct soap*, _ns1__AddAudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddAudioEncoderConfiguration
#define soap_write_PointerTo_ns1__AddAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddAudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddAudioEncoderConfiguration(soap, data, "ns1:AddAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddAudioEncoderConfiguration(struct soap*, _ns1__AddAudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddAudioEncoderConfiguration
#define soap_read_PointerTo_ns1__AddAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddVideoSourceConfiguration (1710)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddVideoSourceConfiguration(struct soap*, _ns1__AddVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddVideoSourceConfiguration(struct soap*, const char *, int, _ns1__AddVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddVideoSourceConfiguration(struct soap*, const char*, _ns1__AddVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddVideoSourceConfiguration(struct soap*, _ns1__AddVideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddVideoSourceConfiguration
#define soap_write_PointerTo_ns1__AddVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddVideoSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddVideoSourceConfiguration(soap, data, "ns1:AddVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddVideoSourceConfiguration(struct soap*, _ns1__AddVideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddVideoSourceConfiguration
#define soap_read_PointerTo_ns1__AddVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddVideoEncoderConfiguration (1706)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddVideoEncoderConfiguration(struct soap*, _ns1__AddVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddVideoEncoderConfiguration(struct soap*, const char *, int, _ns1__AddVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddVideoEncoderConfiguration(struct soap*, const char*, _ns1__AddVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddVideoEncoderConfiguration(struct soap*, _ns1__AddVideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddVideoEncoderConfiguration
#define soap_write_PointerTo_ns1__AddVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddVideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddVideoEncoderConfiguration(soap, data, "ns1:AddVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddVideoEncoderConfiguration(struct soap*, _ns1__AddVideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddVideoEncoderConfiguration
#define soap_read_PointerTo_ns1__AddVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetProfiles
#define SOAP_TYPE_PointerTo_ns1__GetProfiles (1702)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetProfiles(struct soap*, _ns1__GetProfiles *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetProfiles(struct soap*, const char *, int, _ns1__GetProfiles *const*, const char *);
SOAP_FMAC3 _ns1__GetProfiles ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetProfiles(struct soap*, const char*, _ns1__GetProfiles **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetProfiles(struct soap*, _ns1__GetProfiles *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetProfiles
#define soap_write_PointerTo_ns1__GetProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetProfiles(soap, data), 0) || soap_put_PointerTo_ns1__GetProfiles(soap, data, "ns1:GetProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfiles ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetProfiles(struct soap*, _ns1__GetProfiles **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetProfiles
#define soap_read_PointerTo_ns1__GetProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetProfile
#define SOAP_TYPE_PointerTo_ns1__GetProfile (1698)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetProfile(struct soap*, _ns1__GetProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetProfile(struct soap*, const char *, int, _ns1__GetProfile *const*, const char *);
SOAP_FMAC3 _ns1__GetProfile ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetProfile(struct soap*, const char*, _ns1__GetProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetProfile(struct soap*, _ns1__GetProfile *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetProfile
#define soap_write_PointerTo_ns1__GetProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetProfile(soap, data), 0) || soap_put_PointerTo_ns1__GetProfile(soap, data, "ns1:GetProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfile ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetProfile(struct soap*, _ns1__GetProfile **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetProfile
#define soap_read_PointerTo_ns1__GetProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__CreateProfile
#define SOAP_TYPE_PointerTo_ns1__CreateProfile (1694)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateProfile(struct soap*, _ns1__CreateProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateProfile(struct soap*, const char *, int, _ns1__CreateProfile *const*, const char *);
SOAP_FMAC3 _ns1__CreateProfile ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateProfile(struct soap*, const char*, _ns1__CreateProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateProfile(struct soap*, _ns1__CreateProfile *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__CreateProfile
#define soap_write_PointerTo_ns1__CreateProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__CreateProfile(soap, data), 0) || soap_put_PointerTo_ns1__CreateProfile(soap, data, "ns1:CreateProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateProfile ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateProfile(struct soap*, _ns1__CreateProfile **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__CreateProfile
#define soap_read_PointerTo_ns1__CreateProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__CreateProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioOutputs
#define SOAP_TYPE_PointerTo_ns1__GetAudioOutputs (1690)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioOutputs(struct soap*, _ns1__GetAudioOutputs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioOutputs(struct soap*, const char *, int, _ns1__GetAudioOutputs *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioOutputs ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioOutputs(struct soap*, const char*, _ns1__GetAudioOutputs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioOutputs(struct soap*, _ns1__GetAudioOutputs *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioOutputs
#define soap_write_PointerTo_ns1__GetAudioOutputs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioOutputs(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioOutputs(soap, data, "ns1:GetAudioOutputs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputs ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioOutputs(struct soap*, _ns1__GetAudioOutputs **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioOutputs
#define soap_read_PointerTo_ns1__GetAudioOutputs(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioOutputs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetAudioSources
#define SOAP_TYPE_PointerTo_ns1__GetAudioSources (1686)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAudioSources(struct soap*, _ns1__GetAudioSources *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAudioSources(struct soap*, const char *, int, _ns1__GetAudioSources *const*, const char *);
SOAP_FMAC3 _ns1__GetAudioSources ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAudioSources(struct soap*, const char*, _ns1__GetAudioSources **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAudioSources(struct soap*, _ns1__GetAudioSources *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetAudioSources
#define soap_write_PointerTo_ns1__GetAudioSources(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetAudioSources(soap, data), 0) || soap_put_PointerTo_ns1__GetAudioSources(soap, data, "ns1:GetAudioSources", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSources ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAudioSources(struct soap*, _ns1__GetAudioSources **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetAudioSources
#define soap_read_PointerTo_ns1__GetAudioSources(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetAudioSources(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoSources
#define SOAP_TYPE_PointerTo_ns1__GetVideoSources (1682)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoSources(struct soap*, _ns1__GetVideoSources *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoSources(struct soap*, const char *, int, _ns1__GetVideoSources *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoSources ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoSources(struct soap*, const char*, _ns1__GetVideoSources **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoSources(struct soap*, _ns1__GetVideoSources *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoSources
#define soap_write_PointerTo_ns1__GetVideoSources(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoSources(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoSources(soap, data, "ns1:GetVideoSources", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSources ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoSources(struct soap*, _ns1__GetVideoSources **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoSources
#define soap_read_PointerTo_ns1__GetVideoSources(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoSources(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_ns1__GetServiceCapabilities (1678)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetServiceCapabilities(struct soap*, const char *, int, _ns1__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _ns1__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetServiceCapabilities(struct soap*, const char*, _ns1__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetServiceCapabilities
#define soap_write_PointerTo_ns1__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetServiceCapabilities(soap, data), 0) || soap_put_PointerTo_ns1__GetServiceCapabilities(soap, data, "ns1:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetServiceCapabilities
#define soap_read_PointerTo_ns1__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__NCName
#define SOAP_TYPE_PointerToxsd__NCName (1677)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__NCName
#define soap_write_PointerToxsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__NCName(soap, data), 0) || soap_put_PointerToxsd__NCName(soap, data, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__NCName
#define soap_read_PointerToxsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic (1676)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, std::vector<_ns6__TopicNamespaceType_Topic >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, const char *, int, std::vector<_ns6__TopicNamespaceType_Topic >*const*, const char *);
SOAP_FMAC3 std::vector<_ns6__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_ns6__TopicNamespaceType_Topic >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, std::vector<_ns6__TopicNamespaceType_Topic >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic
#define soap_write_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns6__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, std::vector<_ns6__TopicNamespaceType_Topic >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic
#define soap_read_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns6__TopicNamespaceType_Topic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__ConcreteTopicExpression
#define SOAP_TYPE_PointerTons6__ConcreteTopicExpression (1674)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ConcreteTopicExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ConcreteTopicExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons6__ConcreteTopicExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ConcreteTopicExpression(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__ConcreteTopicExpression
#define soap_write_PointerTons6__ConcreteTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons6__ConcreteTopicExpression(soap, data), 0) || soap_put_PointerTons6__ConcreteTopicExpression(soap, data, "ns6:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons6__ConcreteTopicExpression(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons6__ConcreteTopicExpression
#define soap_read_PointerTons6__ConcreteTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__ConcreteTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (1673)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__QName
#define soap_write_PointerToxsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__QName(soap, data), 0) || soap_put_PointerToxsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__QName
#define soap_read_PointerToxsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__TopicType
#define SOAP_TYPE_PointerTons6__TopicType (1671)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__TopicType(struct soap*, ns6__TopicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__TopicType(struct soap*, const char *, int, ns6__TopicType *const*, const char *);
SOAP_FMAC3 ns6__TopicType ** SOAP_FMAC4 soap_in_PointerTons6__TopicType(struct soap*, const char*, ns6__TopicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__TopicType(struct soap*, ns6__TopicType *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__TopicType
#define soap_write_PointerTons6__TopicType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons6__TopicType(soap, data), 0) || soap_put_PointerTons6__TopicType(soap, data, "ns6:TopicType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__TopicType ** SOAP_FMAC4 soap_get_PointerTons6__TopicType(struct soap*, ns6__TopicType **, const char*, const char*);

#ifndef soap_read_PointerTons6__TopicType
#define soap_read_PointerTons6__TopicType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__TopicType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__QueryExpressionType
#define SOAP_TYPE_PointerTons6__QueryExpressionType (1670)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__QueryExpressionType(struct soap*, ns6__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__QueryExpressionType(struct soap*, const char *, int, ns6__QueryExpressionType *const*, const char *);
SOAP_FMAC3 ns6__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTons6__QueryExpressionType(struct soap*, const char*, ns6__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__QueryExpressionType(struct soap*, ns6__QueryExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__QueryExpressionType
#define soap_write_PointerTons6__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons6__QueryExpressionType(soap, data), 0) || soap_put_PointerTons6__QueryExpressionType(soap, data, "ns6:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTons6__QueryExpressionType(struct soap*, ns6__QueryExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTons6__QueryExpressionType
#define soap_read_PointerTons6__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__ResumeFailedFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__ResumeFailedFaultType_FaultCause (1668)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__ResumeFailedFaultType_FaultCause(struct soap*, _ns3__ResumeFailedFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__ResumeFailedFaultType_FaultCause(struct soap*, const char *, int, _ns3__ResumeFailedFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__ResumeFailedFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__ResumeFailedFaultType_FaultCause(struct soap*, const char*, _ns3__ResumeFailedFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__ResumeFailedFaultType_FaultCause(struct soap*, _ns3__ResumeFailedFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__ResumeFailedFaultType_FaultCause
#define soap_write_PointerTo_ns3__ResumeFailedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__ResumeFailedFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__ResumeFailedFaultType_FaultCause(soap, data, "ns3:ResumeFailedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeFailedFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__ResumeFailedFaultType_FaultCause(struct soap*, _ns3__ResumeFailedFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__ResumeFailedFaultType_FaultCause
#define soap_read_PointerTo_ns3__ResumeFailedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__ResumeFailedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description (1666)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, std::vector<_ns3__ResumeFailedFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__ResumeFailedFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__ResumeFailedFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, const char*, std::vector<_ns3__ResumeFailedFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, std::vector<_ns3__ResumeFailedFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__ResumeFailedFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, std::vector<_ns3__ResumeFailedFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__ResumeFailedFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__ResumeFailedFaultType_ErrorCode (1663)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(struct soap*, _ns3__ResumeFailedFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(struct soap*, const char *, int, _ns3__ResumeFailedFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__ResumeFailedFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(struct soap*, const char*, _ns3__ResumeFailedFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(struct soap*, _ns3__ResumeFailedFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__ResumeFailedFaultType_ErrorCode
#define soap_write_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(soap, data, "ns3:ResumeFailedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ResumeFailedFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(struct soap*, _ns3__ResumeFailedFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__ResumeFailedFaultType_ErrorCode
#define soap_read_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__ResumeFailedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__PauseFailedFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__PauseFailedFaultType_FaultCause (1661)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__PauseFailedFaultType_FaultCause(struct soap*, _ns3__PauseFailedFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__PauseFailedFaultType_FaultCause(struct soap*, const char *, int, _ns3__PauseFailedFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__PauseFailedFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__PauseFailedFaultType_FaultCause(struct soap*, const char*, _ns3__PauseFailedFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__PauseFailedFaultType_FaultCause(struct soap*, _ns3__PauseFailedFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__PauseFailedFaultType_FaultCause
#define soap_write_PointerTo_ns3__PauseFailedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__PauseFailedFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__PauseFailedFaultType_FaultCause(soap, data, "ns3:PauseFailedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseFailedFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__PauseFailedFaultType_FaultCause(struct soap*, _ns3__PauseFailedFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__PauseFailedFaultType_FaultCause
#define soap_read_PointerTo_ns3__PauseFailedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__PauseFailedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description (1659)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, std::vector<_ns3__PauseFailedFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__PauseFailedFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__PauseFailedFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, const char*, std::vector<_ns3__PauseFailedFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, std::vector<_ns3__PauseFailedFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__PauseFailedFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, std::vector<_ns3__PauseFailedFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__PauseFailedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__PauseFailedFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__PauseFailedFaultType_ErrorCode (1656)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__PauseFailedFaultType_ErrorCode(struct soap*, _ns3__PauseFailedFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__PauseFailedFaultType_ErrorCode(struct soap*, const char *, int, _ns3__PauseFailedFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__PauseFailedFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__PauseFailedFaultType_ErrorCode(struct soap*, const char*, _ns3__PauseFailedFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__PauseFailedFaultType_ErrorCode(struct soap*, _ns3__PauseFailedFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__PauseFailedFaultType_ErrorCode
#define soap_write_PointerTo_ns3__PauseFailedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__PauseFailedFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__PauseFailedFaultType_ErrorCode(soap, data, "ns3:PauseFailedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__PauseFailedFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__PauseFailedFaultType_ErrorCode(struct soap*, _ns3__PauseFailedFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__PauseFailedFaultType_ErrorCode
#define soap_read_PointerTo_ns3__PauseFailedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__PauseFailedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause (1654)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToDestroySubscriptionFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data, "ns3:UnableToDestroySubscriptionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToDestroySubscriptionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description (1652)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode (1649)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data, "ns3:UnableToDestroySubscriptionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroySubscriptionFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroySubscriptionFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToDestroySubscriptionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause (1647)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, const char*, _ns3__UnacceptableTerminationTimeFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data, "ns3:UnacceptableTerminationTimeFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnacceptableTerminationTimeFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description (1645)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode (1642)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, const char*, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data, "ns3:UnacceptableTerminationTimeFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableTerminationTimeFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableTerminationTimeFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnacceptableTerminationTimeFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause (1640)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, _ns3__UnableToCreatePullPointFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnableToCreatePullPointFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToCreatePullPointFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, _ns3__UnableToCreatePullPointFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data, "ns3:UnableToCreatePullPointFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(struct soap*, _ns3__UnableToCreatePullPointFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToCreatePullPointFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description (1638)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnableToCreatePullPointFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnableToCreatePullPointFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode (1635)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToCreatePullPointFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnableToCreatePullPointFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToCreatePullPointFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToCreatePullPointFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data, "ns3:UnableToCreatePullPointFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToCreatePullPointFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToCreatePullPointFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToCreatePullPointFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause (1633)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, _ns3__UnableToDestroyPullPointFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnableToDestroyPullPointFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToDestroyPullPointFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, _ns3__UnableToDestroyPullPointFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data, "ns3:UnableToDestroyPullPointFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(struct soap*, _ns3__UnableToDestroyPullPointFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToDestroyPullPointFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description (1631)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode (1628)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToDestroyPullPointFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroyPullPointFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data, "ns3:UnableToDestroyPullPointFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToDestroyPullPointFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(struct soap*, _ns3__UnableToDestroyPullPointFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToDestroyPullPointFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause (1626)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, _ns3__UnableToGetMessagesFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnableToGetMessagesFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, const char*, _ns3__UnableToGetMessagesFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, _ns3__UnableToGetMessagesFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(soap, data, "ns3:UnableToGetMessagesFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(struct soap*, _ns3__UnableToGetMessagesFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToGetMessagesFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description (1624)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnableToGetMessagesFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToGetMessagesFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnableToGetMessagesFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, std::vector<_ns3__UnableToGetMessagesFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode (1621)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, _ns3__UnableToGetMessagesFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnableToGetMessagesFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, const char*, _ns3__UnableToGetMessagesFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, _ns3__UnableToGetMessagesFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data, "ns3:UnableToGetMessagesFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnableToGetMessagesFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(struct soap*, _ns3__UnableToGetMessagesFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnableToGetMessagesFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause (1619)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, const char *, int, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, const char*, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause
#define soap_write_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data, "ns3:NoCurrentMessageOnTopicFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause
#define soap_read_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description (1617)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const char*, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode (1614)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, const char *, int, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, const char*, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode
#define soap_write_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data, "ns3:NoCurrentMessageOnTopicFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(struct soap*, _ns3__NoCurrentMessageOnTopicFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode
#define soap_read_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause (1612)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, const char*, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data, "ns3:UnacceptableInitialTerminationTimeFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description (1610)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode (1607)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, const char*, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data, "ns3:UnacceptableInitialTerminationTimeFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(struct soap*, _ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause (1605)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, const char *, int, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, const char*, _ns3__NotifyMessageNotSupportedFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause
#define soap_write_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data, "ns3:NotifyMessageNotSupportedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause
#define soap_read_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__NotifyMessageNotSupportedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description (1603)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const char*, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode (1600)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, const char *, int, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, const char*, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode
#define soap_write_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data, "ns3:NotifyMessageNotSupportedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__NotifyMessageNotSupportedFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(struct soap*, _ns3__NotifyMessageNotSupportedFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode
#define soap_read_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__NotifyMessageNotSupportedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause (1598)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, const char*, _ns3__UnsupportedPolicyRequestFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data, "ns3:UnsupportedPolicyRequestFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnsupportedPolicyRequestFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description (1596)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode (1593)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, const char*, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data, "ns3:UnsupportedPolicyRequestFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnsupportedPolicyRequestFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnsupportedPolicyRequestFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnsupportedPolicyRequestFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause (1591)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, const char *, int, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, const char*, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause
#define soap_write_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data, "ns3:UnrecognizedPolicyRequestFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause
#define soap_read_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description (1589)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode (1586)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, const char *, int, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, const char*, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode
#define soap_write_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data, "ns3:UnrecognizedPolicyRequestFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(struct soap*, _ns3__UnrecognizedPolicyRequestFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode
#define soap_read_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause (1584)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, const char *, int, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidMessageContentExpressionFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause
#define soap_write_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data, "ns3:InvalidMessageContentExpressionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause
#define soap_read_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidMessageContentExpressionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description (1582)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode (1579)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, const char *, int, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode
#define soap_write_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data, "ns3:InvalidMessageContentExpressionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidMessageContentExpressionFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidMessageContentExpressionFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode
#define soap_read_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidMessageContentExpressionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause (1577)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, const char *, int, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause
#define soap_write_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data, "ns3:InvalidProducerPropertiesExpressionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause
#define soap_read_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description (1575)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode (1572)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, const char *, int, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode
#define soap_write_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data, "ns3:InvalidProducerPropertiesExpressionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode
#define soap_read_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause (1570)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, const char *, int, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, const char*, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause
#define soap_write_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data, "ns3:MultipleTopicsSpecifiedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause
#define soap_read_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description (1568)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const char*, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode (1565)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, const char *, int, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, const char*, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode
#define soap_write_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data, "ns3:MultipleTopicsSpecifiedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(struct soap*, _ns3__MultipleTopicsSpecifiedFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode
#define soap_read_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause (1563)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, _ns3__TopicNotSupportedFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, const char *, int, _ns3__TopicNotSupportedFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, const char*, _ns3__TopicNotSupportedFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, _ns3__TopicNotSupportedFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause
#define soap_write_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(soap, data, "ns3:TopicNotSupportedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(struct soap*, _ns3__TopicNotSupportedFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause
#define soap_read_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__TopicNotSupportedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description (1561)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__TopicNotSupportedFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__TopicNotSupportedFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__TopicNotSupportedFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, const char*, std::vector<_ns3__TopicNotSupportedFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__TopicNotSupportedFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__TopicNotSupportedFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__TopicNotSupportedFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode (1558)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, _ns3__TopicNotSupportedFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, const char *, int, _ns3__TopicNotSupportedFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, const char*, _ns3__TopicNotSupportedFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, _ns3__TopicNotSupportedFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode
#define soap_write_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(soap, data, "ns3:TopicNotSupportedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicNotSupportedFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(struct soap*, _ns3__TopicNotSupportedFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode
#define soap_read_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__TopicNotSupportedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause (1556)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidTopicExpressionFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, const char *, int, _ns3__InvalidTopicExpressionFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidTopicExpressionFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidTopicExpressionFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause
#define soap_write_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data, "ns3:InvalidTopicExpressionFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(struct soap*, _ns3__InvalidTopicExpressionFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause
#define soap_read_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidTopicExpressionFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description (1554)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__InvalidTopicExpressionFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__InvalidTopicExpressionFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode (1551)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidTopicExpressionFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, const char *, int, _ns3__InvalidTopicExpressionFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidTopicExpressionFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidTopicExpressionFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode
#define soap_write_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data, "ns3:InvalidTopicExpressionFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidTopicExpressionFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(struct soap*, _ns3__InvalidTopicExpressionFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode
#define soap_read_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidTopicExpressionFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause (1549)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, const char *, int, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, const char*, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause
#define soap_write_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data, "ns3:TopicExpressionDialectUnknownFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause
#define soap_read_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description (1547)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const char*, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode (1544)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, const char *, int, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, const char*, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode
#define soap_write_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data, "ns3:TopicExpressionDialectUnknownFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(struct soap*, _ns3__TopicExpressionDialectUnknownFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode
#define soap_read_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidFilterFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__InvalidFilterFaultType_FaultCause (1541)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidFilterFaultType_FaultCause(struct soap*, _ns3__InvalidFilterFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidFilterFaultType_FaultCause(struct soap*, const char *, int, _ns3__InvalidFilterFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__InvalidFilterFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidFilterFaultType_FaultCause(struct soap*, const char*, _ns3__InvalidFilterFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidFilterFaultType_FaultCause(struct soap*, _ns3__InvalidFilterFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidFilterFaultType_FaultCause
#define soap_write_PointerTo_ns3__InvalidFilterFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidFilterFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__InvalidFilterFaultType_FaultCause(soap, data, "ns3:InvalidFilterFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidFilterFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidFilterFaultType_FaultCause(struct soap*, _ns3__InvalidFilterFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidFilterFaultType_FaultCause
#define soap_read_PointerTo_ns3__InvalidFilterFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidFilterFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description (1539)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, std::vector<_ns3__InvalidFilterFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__InvalidFilterFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__InvalidFilterFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidFilterFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, std::vector<_ns3__InvalidFilterFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__InvalidFilterFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, std::vector<_ns3__InvalidFilterFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__InvalidFilterFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__InvalidFilterFaultType_ErrorCode (1536)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(struct soap*, _ns3__InvalidFilterFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(struct soap*, const char *, int, _ns3__InvalidFilterFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__InvalidFilterFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(struct soap*, const char*, _ns3__InvalidFilterFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(struct soap*, _ns3__InvalidFilterFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__InvalidFilterFaultType_ErrorCode
#define soap_write_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(soap, data, "ns3:InvalidFilterFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__InvalidFilterFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(struct soap*, _ns3__InvalidFilterFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__InvalidFilterFaultType_ErrorCode
#define soap_read_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__InvalidFilterFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause (1534)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, _ns3__SubscribeCreationFailedFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, const char *, int, _ns3__SubscribeCreationFailedFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, const char*, _ns3__SubscribeCreationFailedFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, _ns3__SubscribeCreationFailedFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause
#define soap_write_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data, "ns3:SubscribeCreationFailedFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(struct soap*, _ns3__SubscribeCreationFailedFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause
#define soap_read_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__SubscribeCreationFailedFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description (1532)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const char *, int, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns3__SubscribeCreationFailedFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const char*, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns3__SubscribeCreationFailedFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode (1529)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, _ns3__SubscribeCreationFailedFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, const char *, int, _ns3__SubscribeCreationFailedFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, const char*, _ns3__SubscribeCreationFailedFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, _ns3__SubscribeCreationFailedFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode
#define soap_write_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data, "ns3:SubscribeCreationFailedFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SubscribeCreationFailedFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(struct soap*, _ns3__SubscribeCreationFailedFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode
#define soap_read_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__SubscribeCreationFailedFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDConfigurationExtension
#define SOAP_TYPE_PointerTons2__OSDConfigurationExtension (1527)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDConfigurationExtension(struct soap*, ns2__OSDConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDConfigurationExtension(struct soap*, const char *, int, ns2__OSDConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDConfigurationExtension(struct soap*, const char*, ns2__OSDConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDConfigurationExtension(struct soap*, ns2__OSDConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDConfigurationExtension
#define soap_write_PointerTons2__OSDConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__OSDConfigurationExtension(soap, data, "ns2:OSDConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDConfigurationExtension(struct soap*, ns2__OSDConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDConfigurationExtension
#define soap_read_PointerTons2__OSDConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDImgConfiguration
#define SOAP_TYPE_PointerTons2__OSDImgConfiguration (1526)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDImgConfiguration(struct soap*, ns2__OSDImgConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDImgConfiguration(struct soap*, const char *, int, ns2__OSDImgConfiguration *const*, const char *);
SOAP_FMAC3 ns2__OSDImgConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__OSDImgConfiguration(struct soap*, const char*, ns2__OSDImgConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDImgConfiguration(struct soap*, ns2__OSDImgConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDImgConfiguration
#define soap_write_PointerTons2__OSDImgConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDImgConfiguration(soap, data), 0) || soap_put_PointerTons2__OSDImgConfiguration(soap, data, "ns2:OSDImgConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__OSDImgConfiguration(struct soap*, ns2__OSDImgConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDImgConfiguration
#define soap_read_PointerTons2__OSDImgConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDImgConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDTextConfiguration
#define SOAP_TYPE_PointerTons2__OSDTextConfiguration (1525)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDTextConfiguration(struct soap*, ns2__OSDTextConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDTextConfiguration(struct soap*, const char *, int, ns2__OSDTextConfiguration *const*, const char *);
SOAP_FMAC3 ns2__OSDTextConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__OSDTextConfiguration(struct soap*, const char*, ns2__OSDTextConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDTextConfiguration(struct soap*, ns2__OSDTextConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDTextConfiguration
#define soap_write_PointerTons2__OSDTextConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDTextConfiguration(soap, data), 0) || soap_put_PointerTons2__OSDTextConfiguration(soap, data, "ns2:OSDTextConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__OSDTextConfiguration(struct soap*, ns2__OSDTextConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDTextConfiguration
#define soap_read_PointerTons2__OSDTextConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDTextConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDPosConfiguration
#define SOAP_TYPE_PointerTons2__OSDPosConfiguration (1524)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDPosConfiguration(struct soap*, ns2__OSDPosConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDPosConfiguration(struct soap*, const char *, int, ns2__OSDPosConfiguration *const*, const char *);
SOAP_FMAC3 ns2__OSDPosConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__OSDPosConfiguration(struct soap*, const char*, ns2__OSDPosConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDPosConfiguration(struct soap*, ns2__OSDPosConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDPosConfiguration
#define soap_write_PointerTons2__OSDPosConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDPosConfiguration(soap, data), 0) || soap_put_PointerTons2__OSDPosConfiguration(soap, data, "ns2:OSDPosConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDPosConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__OSDPosConfiguration(struct soap*, ns2__OSDPosConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDPosConfiguration
#define soap_read_PointerTons2__OSDPosConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDPosConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDReference
#define SOAP_TYPE_PointerTons2__OSDReference (1523)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDReference(struct soap*, ns2__OSDReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDReference(struct soap*, const char *, int, ns2__OSDReference *const*, const char *);
SOAP_FMAC3 ns2__OSDReference ** SOAP_FMAC4 soap_in_PointerTons2__OSDReference(struct soap*, const char*, ns2__OSDReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDReference(struct soap*, ns2__OSDReference *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDReference
#define soap_write_PointerTons2__OSDReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDReference(soap, data), 0) || soap_put_PointerTons2__OSDReference(soap, data, "ns2:OSDReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDReference ** SOAP_FMAC4 soap_get_PointerTons2__OSDReference(struct soap*, ns2__OSDReference **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDReference
#define soap_read_PointerTons2__OSDReference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataInput
#define SOAP_TYPE_PointerTons2__MetadataInput (1522)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataInput(struct soap*, ns2__MetadataInput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataInput(struct soap*, const char *, int, ns2__MetadataInput *const*, const char *);
SOAP_FMAC3 ns2__MetadataInput ** SOAP_FMAC4 soap_in_PointerTons2__MetadataInput(struct soap*, const char*, ns2__MetadataInput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataInput(struct soap*, ns2__MetadataInput *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataInput
#define soap_write_PointerTons2__MetadataInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataInput(soap, data), 0) || soap_put_PointerTons2__MetadataInput(soap, data, "ns2:MetadataInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataInput ** SOAP_FMAC4 soap_get_PointerTons2__MetadataInput(struct soap*, ns2__MetadataInput **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataInput
#define soap_read_PointerTons2__MetadataInput(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SourceIdentification
#define SOAP_TYPE_PointerTons2__SourceIdentification (1521)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SourceIdentification(struct soap*, ns2__SourceIdentification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SourceIdentification(struct soap*, const char *, int, ns2__SourceIdentification *const*, const char *);
SOAP_FMAC3 ns2__SourceIdentification ** SOAP_FMAC4 soap_in_PointerTons2__SourceIdentification(struct soap*, const char*, ns2__SourceIdentification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SourceIdentification(struct soap*, ns2__SourceIdentification *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SourceIdentification
#define soap_write_PointerTons2__SourceIdentification(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SourceIdentification(soap, data), 0) || soap_put_PointerTons2__SourceIdentification(soap, data, "ns2:SourceIdentification", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SourceIdentification ** SOAP_FMAC4 soap_get_PointerTons2__SourceIdentification(struct soap*, ns2__SourceIdentification **, const char*, const char*);

#ifndef soap_read_PointerTons2__SourceIdentification
#define soap_read_PointerTons2__SourceIdentification(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SourceIdentification(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_PointerTons2__AnalyticsDeviceEngineConfiguration (1520)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsDeviceEngineConfiguration(struct soap*, ns2__AnalyticsDeviceEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsDeviceEngineConfiguration(struct soap*, const char *, int, ns2__AnalyticsDeviceEngineConfiguration *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, ns2__AnalyticsDeviceEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsDeviceEngineConfiguration(struct soap*, ns2__AnalyticsDeviceEngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsDeviceEngineConfiguration
#define soap_write_PointerTons2__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsDeviceEngineConfiguration(soap, data), 0) || soap_put_PointerTons2__AnalyticsDeviceEngineConfiguration(soap, data, "ns2:AnalyticsDeviceEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsDeviceEngineConfiguration(struct soap*, ns2__AnalyticsDeviceEngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsDeviceEngineConfiguration
#define soap_read_PointerTons2__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsDeviceEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ObjectExtension
#define SOAP_TYPE_PointerTons2__ObjectExtension (1519)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ObjectExtension(struct soap*, ns2__ObjectExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ObjectExtension(struct soap*, const char *, int, ns2__ObjectExtension *const*, const char *);
SOAP_FMAC3 ns2__ObjectExtension ** SOAP_FMAC4 soap_in_PointerTons2__ObjectExtension(struct soap*, const char*, ns2__ObjectExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ObjectExtension(struct soap*, ns2__ObjectExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ObjectExtension
#define soap_write_PointerTons2__ObjectExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ObjectExtension(soap, data), 0) || soap_put_PointerTons2__ObjectExtension(soap, data, "ns2:ObjectExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectExtension ** SOAP_FMAC4 soap_get_PointerTons2__ObjectExtension(struct soap*, ns2__ObjectExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ObjectExtension
#define soap_read_PointerTons2__ObjectExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ObjectExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Behaviour
#define SOAP_TYPE_PointerTons2__Behaviour (1518)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Behaviour(struct soap*, ns2__Behaviour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Behaviour(struct soap*, const char *, int, ns2__Behaviour *const*, const char *);
SOAP_FMAC3 ns2__Behaviour ** SOAP_FMAC4 soap_in_PointerTons2__Behaviour(struct soap*, const char*, ns2__Behaviour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Behaviour(struct soap*, ns2__Behaviour *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Behaviour
#define soap_write_PointerTons2__Behaviour(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Behaviour(soap, data), 0) || soap_put_PointerTons2__Behaviour(soap, data, "ns2:Behaviour", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Behaviour ** SOAP_FMAC4 soap_get_PointerTons2__Behaviour(struct soap*, ns2__Behaviour **, const char*, const char*);

#ifndef soap_read_PointerTons2__Behaviour
#define soap_read_PointerTons2__Behaviour(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Behaviour(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Appearance
#define SOAP_TYPE_PointerTons2__Appearance (1517)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Appearance(struct soap*, ns2__Appearance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Appearance(struct soap*, const char *, int, ns2__Appearance *const*, const char *);
SOAP_FMAC3 ns2__Appearance ** SOAP_FMAC4 soap_in_PointerTons2__Appearance(struct soap*, const char*, ns2__Appearance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Appearance(struct soap*, ns2__Appearance *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Appearance
#define soap_write_PointerTons2__Appearance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Appearance(soap, data), 0) || soap_put_PointerTons2__Appearance(soap, data, "ns2:Appearance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Appearance ** SOAP_FMAC4 soap_get_PointerTons2__Appearance(struct soap*, ns2__Appearance **, const char*, const char*);

#ifndef soap_read_PointerTons2__Appearance
#define soap_read_PointerTons2__Appearance(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Appearance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZConfigurationExtension
#define SOAP_TYPE_PointerTons2__PTZConfigurationExtension (1516)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZConfigurationExtension(struct soap*, ns2__PTZConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZConfigurationExtension(struct soap*, const char *, int, ns2__PTZConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZConfigurationExtension(struct soap*, const char*, ns2__PTZConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZConfigurationExtension(struct soap*, ns2__PTZConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZConfigurationExtension
#define soap_write_PointerTons2__PTZConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__PTZConfigurationExtension(soap, data, "ns2:PTZConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZConfigurationExtension(struct soap*, ns2__PTZConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZConfigurationExtension
#define soap_read_PointerTons2__PTZConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ZoomLimits
#define SOAP_TYPE_PointerTons2__ZoomLimits (1515)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ZoomLimits(struct soap*, ns2__ZoomLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ZoomLimits(struct soap*, const char *, int, ns2__ZoomLimits *const*, const char *);
SOAP_FMAC3 ns2__ZoomLimits ** SOAP_FMAC4 soap_in_PointerTons2__ZoomLimits(struct soap*, const char*, ns2__ZoomLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ZoomLimits(struct soap*, ns2__ZoomLimits *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ZoomLimits
#define soap_write_PointerTons2__ZoomLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ZoomLimits(soap, data), 0) || soap_put_PointerTons2__ZoomLimits(soap, data, "ns2:ZoomLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ZoomLimits ** SOAP_FMAC4 soap_get_PointerTons2__ZoomLimits(struct soap*, ns2__ZoomLimits **, const char*, const char*);

#ifndef soap_read_PointerTons2__ZoomLimits
#define soap_read_PointerTons2__ZoomLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ZoomLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PanTiltLimits
#define SOAP_TYPE_PointerTons2__PanTiltLimits (1514)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PanTiltLimits(struct soap*, ns2__PanTiltLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PanTiltLimits(struct soap*, const char *, int, ns2__PanTiltLimits *const*, const char *);
SOAP_FMAC3 ns2__PanTiltLimits ** SOAP_FMAC4 soap_in_PointerTons2__PanTiltLimits(struct soap*, const char*, ns2__PanTiltLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PanTiltLimits(struct soap*, ns2__PanTiltLimits *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PanTiltLimits
#define soap_write_PointerTons2__PanTiltLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PanTiltLimits(soap, data), 0) || soap_put_PointerTons2__PanTiltLimits(soap, data, "ns2:PanTiltLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PanTiltLimits ** SOAP_FMAC4 soap_get_PointerTons2__PanTiltLimits(struct soap*, ns2__PanTiltLimits **, const char*, const char*);

#ifndef soap_read_PointerTons2__PanTiltLimits
#define soap_read_PointerTons2__PanTiltLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PanTiltLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZNodeExtension
#define SOAP_TYPE_PointerTons2__PTZNodeExtension (1513)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZNodeExtension(struct soap*, ns2__PTZNodeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZNodeExtension(struct soap*, const char *, int, ns2__PTZNodeExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZNodeExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZNodeExtension(struct soap*, const char*, ns2__PTZNodeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZNodeExtension(struct soap*, ns2__PTZNodeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZNodeExtension
#define soap_write_PointerTons2__PTZNodeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZNodeExtension(soap, data), 0) || soap_put_PointerTons2__PTZNodeExtension(soap, data, "ns2:PTZNodeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZNodeExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZNodeExtension(struct soap*, ns2__PTZNodeExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZNodeExtension
#define soap_read_PointerTons2__PTZNodeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZNodeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RelayOutputSettings
#define SOAP_TYPE_PointerTons2__RelayOutputSettings (1512)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RelayOutputSettings(struct soap*, ns2__RelayOutputSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RelayOutputSettings(struct soap*, const char *, int, ns2__RelayOutputSettings *const*, const char *);
SOAP_FMAC3 ns2__RelayOutputSettings ** SOAP_FMAC4 soap_in_PointerTons2__RelayOutputSettings(struct soap*, const char*, ns2__RelayOutputSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RelayOutputSettings(struct soap*, ns2__RelayOutputSettings *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RelayOutputSettings
#define soap_write_PointerTons2__RelayOutputSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RelayOutputSettings(soap, data), 0) || soap_put_PointerTons2__RelayOutputSettings(soap, data, "ns2:RelayOutputSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelayOutputSettings ** SOAP_FMAC4 soap_get_PointerTons2__RelayOutputSettings(struct soap*, ns2__RelayOutputSettings **, const char*, const char*);

#ifndef soap_read_PointerTons2__RelayOutputSettings
#define soap_read_PointerTons2__RelayOutputSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RelayOutputSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceExtension
#define SOAP_TYPE_PointerTons2__NetworkInterfaceExtension (1511)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceExtension(struct soap*, ns2__NetworkInterfaceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceExtension(struct soap*, const char *, int, ns2__NetworkInterfaceExtension *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceExtension ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceExtension(struct soap*, const char*, ns2__NetworkInterfaceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceExtension(struct soap*, ns2__NetworkInterfaceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceExtension
#define soap_write_PointerTons2__NetworkInterfaceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceExtension(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceExtension(soap, data, "ns2:NetworkInterfaceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceExtension ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceExtension(struct soap*, ns2__NetworkInterfaceExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceExtension
#define soap_read_PointerTons2__NetworkInterfaceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv6NetworkInterface
#define SOAP_TYPE_PointerTons2__IPv6NetworkInterface (1510)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv6NetworkInterface(struct soap*, ns2__IPv6NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv6NetworkInterface(struct soap*, const char *, int, ns2__IPv6NetworkInterface *const*, const char *);
SOAP_FMAC3 ns2__IPv6NetworkInterface ** SOAP_FMAC4 soap_in_PointerTons2__IPv6NetworkInterface(struct soap*, const char*, ns2__IPv6NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv6NetworkInterface(struct soap*, ns2__IPv6NetworkInterface *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv6NetworkInterface
#define soap_write_PointerTons2__IPv6NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv6NetworkInterface(soap, data), 0) || soap_put_PointerTons2__IPv6NetworkInterface(soap, data, "ns2:IPv6NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6NetworkInterface ** SOAP_FMAC4 soap_get_PointerTons2__IPv6NetworkInterface(struct soap*, ns2__IPv6NetworkInterface **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv6NetworkInterface
#define soap_read_PointerTons2__IPv6NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv6NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv4NetworkInterface
#define SOAP_TYPE_PointerTons2__IPv4NetworkInterface (1509)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv4NetworkInterface(struct soap*, ns2__IPv4NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv4NetworkInterface(struct soap*, const char *, int, ns2__IPv4NetworkInterface *const*, const char *);
SOAP_FMAC3 ns2__IPv4NetworkInterface ** SOAP_FMAC4 soap_in_PointerTons2__IPv4NetworkInterface(struct soap*, const char*, ns2__IPv4NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv4NetworkInterface(struct soap*, ns2__IPv4NetworkInterface *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv4NetworkInterface
#define soap_write_PointerTons2__IPv4NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv4NetworkInterface(soap, data), 0) || soap_put_PointerTons2__IPv4NetworkInterface(soap, data, "ns2:IPv4NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4NetworkInterface ** SOAP_FMAC4 soap_get_PointerTons2__IPv4NetworkInterface(struct soap*, ns2__IPv4NetworkInterface **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv4NetworkInterface
#define soap_read_PointerTons2__IPv4NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv4NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceLink
#define SOAP_TYPE_PointerTons2__NetworkInterfaceLink (1508)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceLink(struct soap*, ns2__NetworkInterfaceLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceLink(struct soap*, const char *, int, ns2__NetworkInterfaceLink *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceLink ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceLink(struct soap*, const char*, ns2__NetworkInterfaceLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceLink(struct soap*, ns2__NetworkInterfaceLink *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceLink
#define soap_write_PointerTons2__NetworkInterfaceLink(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceLink(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceLink(soap, data, "ns2:NetworkInterfaceLink", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceLink ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceLink(struct soap*, ns2__NetworkInterfaceLink **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceLink
#define soap_read_PointerTons2__NetworkInterfaceLink(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceLink(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceInfo
#define SOAP_TYPE_PointerTons2__NetworkInterfaceInfo (1507)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceInfo(struct soap*, ns2__NetworkInterfaceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceInfo(struct soap*, const char *, int, ns2__NetworkInterfaceInfo *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceInfo ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceInfo(struct soap*, const char*, ns2__NetworkInterfaceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceInfo(struct soap*, ns2__NetworkInterfaceInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceInfo
#define soap_write_PointerTons2__NetworkInterfaceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceInfo(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceInfo(soap, data, "ns2:NetworkInterfaceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceInfo ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceInfo(struct soap*, ns2__NetworkInterfaceInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceInfo
#define soap_read_PointerTons2__NetworkInterfaceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoOutputExtension
#define SOAP_TYPE_PointerTons2__VideoOutputExtension (1506)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoOutputExtension(struct soap*, ns2__VideoOutputExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoOutputExtension(struct soap*, const char *, int, ns2__VideoOutputExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoOutputExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoOutputExtension(struct soap*, const char*, ns2__VideoOutputExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoOutputExtension(struct soap*, ns2__VideoOutputExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoOutputExtension
#define soap_write_PointerTons2__VideoOutputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoOutputExtension(soap, data), 0) || soap_put_PointerTons2__VideoOutputExtension(soap, data, "ns2:VideoOutputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoOutputExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoOutputExtension(struct soap*, ns2__VideoOutputExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoOutputExtension
#define soap_read_PointerTons2__VideoOutputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoOutputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Layout
#define SOAP_TYPE_PointerTons2__Layout (1505)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Layout(struct soap*, ns2__Layout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Layout(struct soap*, const char *, int, ns2__Layout *const*, const char *);
SOAP_FMAC3 ns2__Layout ** SOAP_FMAC4 soap_in_PointerTons2__Layout(struct soap*, const char*, ns2__Layout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Layout(struct soap*, ns2__Layout *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Layout
#define soap_write_PointerTons2__Layout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Layout(soap, data), 0) || soap_put_PointerTons2__Layout(soap, data, "ns2:Layout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Layout ** SOAP_FMAC4 soap_get_PointerTons2__Layout(struct soap*, ns2__Layout **, const char*, const char*);

#ifndef soap_read_PointerTons2__Layout
#define soap_read_PointerTons2__Layout(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Layout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataConfigurationExtension
#define SOAP_TYPE_PointerTons2__MetadataConfigurationExtension (1504)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataConfigurationExtension(struct soap*, ns2__MetadataConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataConfigurationExtension(struct soap*, const char *, int, ns2__MetadataConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__MetadataConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__MetadataConfigurationExtension(struct soap*, const char*, ns2__MetadataConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataConfigurationExtension(struct soap*, ns2__MetadataConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataConfigurationExtension
#define soap_write_PointerTons2__MetadataConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__MetadataConfigurationExtension(soap, data, "ns2:MetadataConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__MetadataConfigurationExtension(struct soap*, ns2__MetadataConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataConfigurationExtension
#define soap_read_PointerTons2__MetadataConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EventSubscription
#define SOAP_TYPE_PointerTons2__EventSubscription (1503)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EventSubscription(struct soap*, ns2__EventSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EventSubscription(struct soap*, const char *, int, ns2__EventSubscription *const*, const char *);
SOAP_FMAC3 ns2__EventSubscription ** SOAP_FMAC4 soap_in_PointerTons2__EventSubscription(struct soap*, const char*, ns2__EventSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EventSubscription(struct soap*, ns2__EventSubscription *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EventSubscription
#define soap_write_PointerTons2__EventSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EventSubscription(soap, data), 0) || soap_put_PointerTons2__EventSubscription(soap, data, "ns2:EventSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventSubscription ** SOAP_FMAC4 soap_get_PointerTons2__EventSubscription(struct soap*, ns2__EventSubscription **, const char*, const char*);

#ifndef soap_read_PointerTons2__EventSubscription
#define soap_read_PointerTons2__EventSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EventSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZFilter
#define SOAP_TYPE_PointerTons2__PTZFilter (1502)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZFilter(struct soap*, ns2__PTZFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZFilter(struct soap*, const char *, int, ns2__PTZFilter *const*, const char *);
SOAP_FMAC3 ns2__PTZFilter ** SOAP_FMAC4 soap_in_PointerTons2__PTZFilter(struct soap*, const char*, ns2__PTZFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZFilter(struct soap*, ns2__PTZFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZFilter
#define soap_write_PointerTons2__PTZFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZFilter(soap, data), 0) || soap_put_PointerTons2__PTZFilter(soap, data, "ns2:PTZFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZFilter ** SOAP_FMAC4 soap_get_PointerTons2__PTZFilter(struct soap*, ns2__PTZFilter **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZFilter
#define soap_read_PointerTons2__PTZFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RuleEngineConfiguration
#define SOAP_TYPE_PointerTons2__RuleEngineConfiguration (1501)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RuleEngineConfiguration(struct soap*, ns2__RuleEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RuleEngineConfiguration(struct soap*, const char *, int, ns2__RuleEngineConfiguration *const*, const char *);
SOAP_FMAC3 ns2__RuleEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__RuleEngineConfiguration(struct soap*, const char*, ns2__RuleEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RuleEngineConfiguration(struct soap*, ns2__RuleEngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RuleEngineConfiguration
#define soap_write_PointerTons2__RuleEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RuleEngineConfiguration(soap, data), 0) || soap_put_PointerTons2__RuleEngineConfiguration(soap, data, "ns2:RuleEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RuleEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__RuleEngineConfiguration(struct soap*, ns2__RuleEngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__RuleEngineConfiguration
#define soap_read_PointerTons2__RuleEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RuleEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsEngineConfiguration
#define SOAP_TYPE_PointerTons2__AnalyticsEngineConfiguration (1500)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsEngineConfiguration(struct soap*, ns2__AnalyticsEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsEngineConfiguration(struct soap*, const char *, int, ns2__AnalyticsEngineConfiguration *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsEngineConfiguration(struct soap*, const char*, ns2__AnalyticsEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsEngineConfiguration(struct soap*, ns2__AnalyticsEngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsEngineConfiguration
#define soap_write_PointerTons2__AnalyticsEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsEngineConfiguration(soap, data), 0) || soap_put_PointerTons2__AnalyticsEngineConfiguration(soap, data, "ns2:AnalyticsEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsEngineConfiguration(struct soap*, ns2__AnalyticsEngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsEngineConfiguration
#define soap_read_PointerTons2__AnalyticsEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MulticastConfiguration
#define SOAP_TYPE_PointerTons2__MulticastConfiguration (1499)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MulticastConfiguration(struct soap*, ns2__MulticastConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MulticastConfiguration(struct soap*, const char *, int, ns2__MulticastConfiguration *const*, const char *);
SOAP_FMAC3 ns2__MulticastConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__MulticastConfiguration(struct soap*, const char*, ns2__MulticastConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MulticastConfiguration(struct soap*, ns2__MulticastConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MulticastConfiguration
#define soap_write_PointerTons2__MulticastConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MulticastConfiguration(soap, data), 0) || soap_put_PointerTons2__MulticastConfiguration(soap, data, "ns2:MulticastConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MulticastConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__MulticastConfiguration(struct soap*, ns2__MulticastConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__MulticastConfiguration
#define soap_read_PointerTons2__MulticastConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MulticastConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__H264Configuration
#define SOAP_TYPE_PointerTons2__H264Configuration (1498)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__H264Configuration(struct soap*, ns2__H264Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__H264Configuration(struct soap*, const char *, int, ns2__H264Configuration *const*, const char *);
SOAP_FMAC3 ns2__H264Configuration ** SOAP_FMAC4 soap_in_PointerTons2__H264Configuration(struct soap*, const char*, ns2__H264Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__H264Configuration(struct soap*, ns2__H264Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__H264Configuration
#define soap_write_PointerTons2__H264Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__H264Configuration(soap, data), 0) || soap_put_PointerTons2__H264Configuration(soap, data, "ns2:H264Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Configuration ** SOAP_FMAC4 soap_get_PointerTons2__H264Configuration(struct soap*, ns2__H264Configuration **, const char*, const char*);

#ifndef soap_read_PointerTons2__H264Configuration
#define soap_read_PointerTons2__H264Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__H264Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Mpeg4Configuration
#define SOAP_TYPE_PointerTons2__Mpeg4Configuration (1497)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Mpeg4Configuration(struct soap*, ns2__Mpeg4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Mpeg4Configuration(struct soap*, const char *, int, ns2__Mpeg4Configuration *const*, const char *);
SOAP_FMAC3 ns2__Mpeg4Configuration ** SOAP_FMAC4 soap_in_PointerTons2__Mpeg4Configuration(struct soap*, const char*, ns2__Mpeg4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Mpeg4Configuration(struct soap*, ns2__Mpeg4Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Mpeg4Configuration
#define soap_write_PointerTons2__Mpeg4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Mpeg4Configuration(soap, data), 0) || soap_put_PointerTons2__Mpeg4Configuration(soap, data, "ns2:Mpeg4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Configuration ** SOAP_FMAC4 soap_get_PointerTons2__Mpeg4Configuration(struct soap*, ns2__Mpeg4Configuration **, const char*, const char*);

#ifndef soap_read_PointerTons2__Mpeg4Configuration
#define soap_read_PointerTons2__Mpeg4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Mpeg4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoRateControl
#define SOAP_TYPE_PointerTons2__VideoRateControl (1496)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoRateControl(struct soap*, ns2__VideoRateControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoRateControl(struct soap*, const char *, int, ns2__VideoRateControl *const*, const char *);
SOAP_FMAC3 ns2__VideoRateControl ** SOAP_FMAC4 soap_in_PointerTons2__VideoRateControl(struct soap*, const char*, ns2__VideoRateControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoRateControl(struct soap*, ns2__VideoRateControl *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoRateControl
#define soap_write_PointerTons2__VideoRateControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoRateControl(soap, data), 0) || soap_put_PointerTons2__VideoRateControl(soap, data, "ns2:VideoRateControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoRateControl ** SOAP_FMAC4 soap_get_PointerTons2__VideoRateControl(struct soap*, ns2__VideoRateControl **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoRateControl
#define soap_read_PointerTons2__VideoRateControl(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoRateControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceConfigurationExtension
#define SOAP_TYPE_PointerTons2__VideoSourceConfigurationExtension (1495)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceConfigurationExtension(struct soap*, ns2__VideoSourceConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceConfigurationExtension(struct soap*, const char *, int, ns2__VideoSourceConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceConfigurationExtension(struct soap*, const char*, ns2__VideoSourceConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceConfigurationExtension(struct soap*, ns2__VideoSourceConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceConfigurationExtension
#define soap_write_PointerTons2__VideoSourceConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__VideoSourceConfigurationExtension(soap, data, "ns2:VideoSourceConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceConfigurationExtension(struct soap*, ns2__VideoSourceConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceConfigurationExtension
#define soap_read_PointerTons2__VideoSourceConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IntRectangle
#define SOAP_TYPE_PointerTons2__IntRectangle (1494)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IntRectangle(struct soap*, ns2__IntRectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IntRectangle(struct soap*, const char *, int, ns2__IntRectangle *const*, const char *);
SOAP_FMAC3 ns2__IntRectangle ** SOAP_FMAC4 soap_in_PointerTons2__IntRectangle(struct soap*, const char*, ns2__IntRectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IntRectangle(struct soap*, ns2__IntRectangle *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IntRectangle
#define soap_write_PointerTons2__IntRectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IntRectangle(soap, data), 0) || soap_put_PointerTons2__IntRectangle(soap, data, "ns2:IntRectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntRectangle ** SOAP_FMAC4 soap_get_PointerTons2__IntRectangle(struct soap*, ns2__IntRectangle **, const char*, const char*);

#ifndef soap_read_PointerTons2__IntRectangle
#define soap_read_PointerTons2__IntRectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IntRectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceExtension
#define SOAP_TYPE_PointerTons2__VideoSourceExtension (1493)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceExtension(struct soap*, ns2__VideoSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceExtension(struct soap*, const char *, int, ns2__VideoSourceExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceExtension(struct soap*, const char*, ns2__VideoSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceExtension(struct soap*, ns2__VideoSourceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceExtension
#define soap_write_PointerTons2__VideoSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceExtension(soap, data), 0) || soap_put_PointerTons2__VideoSourceExtension(soap, data, "ns2:VideoSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceExtension(struct soap*, ns2__VideoSourceExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceExtension
#define soap_read_PointerTons2__VideoSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettings
#define SOAP_TYPE_PointerTons2__ImagingSettings (1492)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettings(struct soap*, ns2__ImagingSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettings(struct soap*, const char *, int, ns2__ImagingSettings *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettings ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettings(struct soap*, const char*, ns2__ImagingSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettings(struct soap*, ns2__ImagingSettings *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettings
#define soap_write_PointerTons2__ImagingSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettings(soap, data), 0) || soap_put_PointerTons2__ImagingSettings(soap, data, "ns2:ImagingSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettings ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettings(struct soap*, ns2__ImagingSettings **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettings
#define soap_read_PointerTons2__ImagingSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons7__MetadataType
#define SOAP_TYPE_PointerTons7__MetadataType (1491)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__MetadataType(struct soap*, ns7__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__MetadataType(struct soap*, const char *, int, ns7__MetadataType *const*, const char *);
SOAP_FMAC3 ns7__MetadataType ** SOAP_FMAC4 soap_in_PointerTons7__MetadataType(struct soap*, const char*, ns7__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__MetadataType(struct soap*, ns7__MetadataType *const*, const char*, const char*);

#ifndef soap_write_PointerTons7__MetadataType
#define soap_write_PointerTons7__MetadataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons7__MetadataType(soap, data), 0) || soap_put_PointerTons7__MetadataType(soap, data, "ns7:MetadataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__MetadataType ** SOAP_FMAC4 soap_get_PointerTons7__MetadataType(struct soap*, ns7__MetadataType **, const char*, const char*);

#ifndef soap_read_PointerTons7__MetadataType
#define soap_read_PointerTons7__MetadataType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons7__MetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons7__ReferenceParametersType
#define SOAP_TYPE_PointerTons7__ReferenceParametersType (1490)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__ReferenceParametersType(struct soap*, ns7__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__ReferenceParametersType(struct soap*, const char *, int, ns7__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 ns7__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTons7__ReferenceParametersType(struct soap*, const char*, ns7__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__ReferenceParametersType(struct soap*, ns7__ReferenceParametersType *const*, const char*, const char*);

#ifndef soap_write_PointerTons7__ReferenceParametersType
#define soap_write_PointerTons7__ReferenceParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons7__ReferenceParametersType(soap, data), 0) || soap_put_PointerTons7__ReferenceParametersType(soap, data, "ns7:ReferenceParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTons7__ReferenceParametersType(struct soap*, ns7__ReferenceParametersType **, const char*, const char*);

#ifndef soap_read_PointerTons7__ReferenceParametersType
#define soap_read_PointerTons7__ReferenceParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons7__ReferenceParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons7__AttributedURIType
#define SOAP_TYPE_PointerTons7__AttributedURIType (1489)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__AttributedURIType(struct soap*, ns7__AttributedURIType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__AttributedURIType(struct soap*, const char *, int, ns7__AttributedURIType *const*, const char *);
SOAP_FMAC3 ns7__AttributedURIType ** SOAP_FMAC4 soap_in_PointerTons7__AttributedURIType(struct soap*, const char*, ns7__AttributedURIType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__AttributedURIType(struct soap*, ns7__AttributedURIType *const*, const char*, const char*);

#ifndef soap_write_PointerTons7__AttributedURIType
#define soap_write_PointerTons7__AttributedURIType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons7__AttributedURIType(soap, data), 0) || soap_put_PointerTons7__AttributedURIType(soap, data, "ns7:AttributedURIType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__AttributedURIType ** SOAP_FMAC4 soap_get_PointerTons7__AttributedURIType(struct soap*, ns7__AttributedURIType **, const char*, const char*);

#ifndef soap_read_PointerTons7__AttributedURIType
#define soap_read_PointerTons7__AttributedURIType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons7__AttributedURIType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__Documentation
#define SOAP_TYPE_PointerTons6__Documentation (1488)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__Documentation(struct soap*, ns6__Documentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__Documentation(struct soap*, const char *, int, ns6__Documentation *const*, const char *);
SOAP_FMAC3 ns6__Documentation ** SOAP_FMAC4 soap_in_PointerTons6__Documentation(struct soap*, const char*, ns6__Documentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__Documentation(struct soap*, ns6__Documentation *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__Documentation
#define soap_write_PointerTons6__Documentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons6__Documentation(soap, data), 0) || soap_put_PointerTons6__Documentation(soap, data, "ns6:Documentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__Documentation ** SOAP_FMAC4 soap_get_PointerTons6__Documentation(struct soap*, ns6__Documentation **, const char*, const char*);

#ifndef soap_read_PointerTons6__Documentation
#define soap_read_PointerTons6__Documentation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__Documentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns5__BaseFaultType_FaultCause
#define SOAP_TYPE_PointerTo_ns5__BaseFaultType_FaultCause (1487)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__BaseFaultType_FaultCause(struct soap*, _ns5__BaseFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__BaseFaultType_FaultCause(struct soap*, const char *, int, _ns5__BaseFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns5__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns5__BaseFaultType_FaultCause(struct soap*, const char*, _ns5__BaseFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__BaseFaultType_FaultCause(struct soap*, _ns5__BaseFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns5__BaseFaultType_FaultCause
#define soap_write_PointerTo_ns5__BaseFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns5__BaseFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_ns5__BaseFaultType_FaultCause(soap, data, "ns5:BaseFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns5__BaseFaultType_FaultCause(struct soap*, _ns5__BaseFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_ns5__BaseFaultType_FaultCause
#define soap_read_PointerTo_ns5__BaseFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns5__BaseFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description (1485)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, std::vector<_ns5__BaseFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, const char *, int, std::vector<_ns5__BaseFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_ns5__BaseFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, const char*, std::vector<_ns5__BaseFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, std::vector<_ns5__BaseFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns5__BaseFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, std::vector<_ns5__BaseFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns5__BaseFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (1483)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xml__lang
#define soap_write_PointerTo_xml__lang(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xml__lang(soap, data), 0) || soap_put_PointerTo_xml__lang(soap, data, "xml:lang", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTo_xml__lang
#define soap_read_PointerTo_xml__lang(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xml__lang(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns5__BaseFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_ns5__BaseFaultType_ErrorCode (1481)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__BaseFaultType_ErrorCode(struct soap*, _ns5__BaseFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__BaseFaultType_ErrorCode(struct soap*, const char *, int, _ns5__BaseFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns5__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns5__BaseFaultType_ErrorCode(struct soap*, const char*, _ns5__BaseFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__BaseFaultType_ErrorCode(struct soap*, _ns5__BaseFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns5__BaseFaultType_ErrorCode
#define soap_write_PointerTo_ns5__BaseFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns5__BaseFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_ns5__BaseFaultType_ErrorCode(soap, data, "ns5:BaseFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns5__BaseFaultType_ErrorCode(struct soap*, _ns5__BaseFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns5__BaseFaultType_ErrorCode
#define soap_read_PointerTo_ns5__BaseFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns5__BaseFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger (1479)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__nonNegativeInteger
#define soap_write_PointerToxsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__nonNegativeInteger(soap, data), 0) || soap_put_PointerToxsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__nonNegativeInteger
#define soap_read_PointerToxsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_ns3__Subscribe_SubscriptionPolicy (1478)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, const char *, int, _ns3__Subscribe_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, const char*, _ns3__Subscribe_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__Subscribe_SubscriptionPolicy
#define soap_write_PointerTo_ns3__Subscribe_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__Subscribe_SubscriptionPolicy(soap, data), 0) || soap_put_PointerTo_ns3__Subscribe_SubscriptionPolicy(soap, data, "ns3:Subscribe-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__Subscribe_SubscriptionPolicy
#define soap_read_PointerTo_ns3__Subscribe_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__Subscribe_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_PointerTons3__AbsoluteOrRelativeTimeType (1476)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__AbsoluteOrRelativeTimeType
#define soap_write_PointerTons3__AbsoluteOrRelativeTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__AbsoluteOrRelativeTimeType(soap, data), 0) || soap_put_PointerTons3__AbsoluteOrRelativeTimeType(soap, data, "ns3:AbsoluteOrRelativeTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons3__AbsoluteOrRelativeTimeType
#define soap_read_PointerTons3__AbsoluteOrRelativeTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__AbsoluteOrRelativeTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__SubscriptionPolicyType
#define SOAP_TYPE_PointerTons3__SubscriptionPolicyType (1474)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubscriptionPolicyType(struct soap*, const char *, int, ns3__SubscriptionPolicyType *const*, const char *);
SOAP_FMAC3 ns3__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTons3__SubscriptionPolicyType(struct soap*, const char*, ns3__SubscriptionPolicyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__SubscriptionPolicyType
#define soap_write_PointerTons3__SubscriptionPolicyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__SubscriptionPolicyType(soap, data), 0) || soap_put_PointerTons3__SubscriptionPolicyType(soap, data, "ns3:SubscriptionPolicyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTons3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType **, const char*, const char*);

#ifndef soap_read_PointerTons3__SubscriptionPolicyType
#define soap_read_PointerTons3__SubscriptionPolicyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__SubscriptionPolicyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__TopicSetType
#define SOAP_TYPE_PointerTons6__TopicSetType (1473)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__TopicSetType(struct soap*, ns6__TopicSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__TopicSetType(struct soap*, const char *, int, ns6__TopicSetType *const*, const char *);
SOAP_FMAC3 ns6__TopicSetType ** SOAP_FMAC4 soap_in_PointerTons6__TopicSetType(struct soap*, const char*, ns6__TopicSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__TopicSetType(struct soap*, ns6__TopicSetType *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__TopicSetType
#define soap_write_PointerTons6__TopicSetType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons6__TopicSetType(soap, data), 0) || soap_put_PointerTons6__TopicSetType(soap, data, "ns6:TopicSetType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns6__TopicSetType ** SOAP_FMAC4 soap_get_PointerTons6__TopicSetType(struct soap*, ns6__TopicSetType **, const char*, const char*);

#ifndef soap_read_PointerTons6__TopicSetType
#define soap_read_PointerTons6__TopicSetType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__TopicSetType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__TopicExpressionType
#define SOAP_TYPE_PointerTons3__TopicExpressionType (1470)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TopicExpressionType(struct soap*, ns3__TopicExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TopicExpressionType(struct soap*, const char *, int, ns3__TopicExpressionType *const*, const char *);
SOAP_FMAC3 ns3__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTons3__TopicExpressionType(struct soap*, const char*, ns3__TopicExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TopicExpressionType(struct soap*, ns3__TopicExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__TopicExpressionType
#define soap_write_PointerTons3__TopicExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__TopicExpressionType(soap, data), 0) || soap_put_PointerTons3__TopicExpressionType(soap, data, "ns3:TopicExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTons3__TopicExpressionType(struct soap*, ns3__TopicExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTons3__TopicExpressionType
#define soap_read_PointerTons3__TopicExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__TopicExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons7__EndpointReferenceType
#define SOAP_TYPE_PointerTons7__EndpointReferenceType (1469)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__EndpointReferenceType(struct soap*, ns7__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__EndpointReferenceType(struct soap*, const char *, int, ns7__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 ns7__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTons7__EndpointReferenceType(struct soap*, const char*, ns7__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__EndpointReferenceType(struct soap*, ns7__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTons7__EndpointReferenceType
#define soap_write_PointerTons7__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons7__EndpointReferenceType(soap, data), 0) || soap_put_PointerTons7__EndpointReferenceType(soap, data, "ns7:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns7__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTons7__EndpointReferenceType(struct soap*, ns7__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTons7__EndpointReferenceType
#define soap_read_PointerTons7__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons7__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PropertyOperation
#define SOAP_TYPE_PointerTons2__PropertyOperation (1468)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PropertyOperation(struct soap*, enum ns2__PropertyOperation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PropertyOperation(struct soap*, const char *, int, enum ns2__PropertyOperation *const*, const char *);
SOAP_FMAC3 enum ns2__PropertyOperation ** SOAP_FMAC4 soap_in_PointerTons2__PropertyOperation(struct soap*, const char*, enum ns2__PropertyOperation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PropertyOperation(struct soap*, enum ns2__PropertyOperation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PropertyOperation
#define soap_write_PointerTons2__PropertyOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PropertyOperation(soap, data), 0) || soap_put_PointerTons2__PropertyOperation(soap, data, "ns2:PropertyOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__PropertyOperation ** SOAP_FMAC4 soap_get_PointerTons2__PropertyOperation(struct soap*, enum ns2__PropertyOperation **, const char*, const char*);

#ifndef soap_read_PointerTons2__PropertyOperation
#define soap_read_PointerTons2__PropertyOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PropertyOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MessageExtension
#define SOAP_TYPE_PointerTons2__MessageExtension (1467)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MessageExtension(struct soap*, ns2__MessageExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MessageExtension(struct soap*, const char *, int, ns2__MessageExtension *const*, const char *);
SOAP_FMAC3 ns2__MessageExtension ** SOAP_FMAC4 soap_in_PointerTons2__MessageExtension(struct soap*, const char*, ns2__MessageExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MessageExtension(struct soap*, ns2__MessageExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MessageExtension
#define soap_write_PointerTons2__MessageExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MessageExtension(soap, data), 0) || soap_put_PointerTons2__MessageExtension(soap, data, "ns2:MessageExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageExtension ** SOAP_FMAC4 soap_get_PointerTons2__MessageExtension(struct soap*, ns2__MessageExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MessageExtension
#define soap_read_PointerTons2__MessageExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MessageExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__StorageReferencePathExtension
#define SOAP_TYPE_PointerTons2__StorageReferencePathExtension (1466)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__StorageReferencePathExtension(struct soap*, ns2__StorageReferencePathExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__StorageReferencePathExtension(struct soap*, const char *, int, ns2__StorageReferencePathExtension *const*, const char *);
SOAP_FMAC3 ns2__StorageReferencePathExtension ** SOAP_FMAC4 soap_in_PointerTons2__StorageReferencePathExtension(struct soap*, const char*, ns2__StorageReferencePathExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__StorageReferencePathExtension(struct soap*, ns2__StorageReferencePathExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__StorageReferencePathExtension
#define soap_write_PointerTons2__StorageReferencePathExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__StorageReferencePathExtension(soap, data), 0) || soap_put_PointerTons2__StorageReferencePathExtension(soap, data, "ns2:StorageReferencePathExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__StorageReferencePathExtension ** SOAP_FMAC4 soap_get_PointerTons2__StorageReferencePathExtension(struct soap*, ns2__StorageReferencePathExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__StorageReferencePathExtension
#define soap_read_PointerTons2__StorageReferencePathExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__StorageReferencePathExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ArrayOfFileProgressExtension
#define SOAP_TYPE_PointerTons2__ArrayOfFileProgressExtension (1465)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfFileProgressExtension(struct soap*, ns2__ArrayOfFileProgressExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfFileProgressExtension(struct soap*, const char *, int, ns2__ArrayOfFileProgressExtension *const*, const char *);
SOAP_FMAC3 ns2__ArrayOfFileProgressExtension ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfFileProgressExtension(struct soap*, const char*, ns2__ArrayOfFileProgressExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfFileProgressExtension(struct soap*, ns2__ArrayOfFileProgressExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ArrayOfFileProgressExtension
#define soap_write_PointerTons2__ArrayOfFileProgressExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ArrayOfFileProgressExtension(soap, data), 0) || soap_put_PointerTons2__ArrayOfFileProgressExtension(soap, data, "ns2:ArrayOfFileProgressExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ArrayOfFileProgressExtension ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfFileProgressExtension(struct soap*, ns2__ArrayOfFileProgressExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ArrayOfFileProgressExtension
#define soap_read_PointerTons2__ArrayOfFileProgressExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ArrayOfFileProgressExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FileProgress
#define SOAP_TYPE_PointerTons2__FileProgress (1463)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FileProgress(struct soap*, ns2__FileProgress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FileProgress(struct soap*, const char *, int, ns2__FileProgress *const*, const char *);
SOAP_FMAC3 ns2__FileProgress ** SOAP_FMAC4 soap_in_PointerTons2__FileProgress(struct soap*, const char*, ns2__FileProgress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FileProgress(struct soap*, ns2__FileProgress *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FileProgress
#define soap_write_PointerTons2__FileProgress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FileProgress(soap, data), 0) || soap_put_PointerTons2__FileProgress(soap, data, "ns2:FileProgress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FileProgress ** SOAP_FMAC4 soap_get_PointerTons2__FileProgress(struct soap*, ns2__FileProgress **, const char*, const char*);

#ifndef soap_read_PointerTons2__FileProgress
#define soap_read_PointerTons2__FileProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FileProgress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDConfigurationOptionsExtension
#define SOAP_TYPE_PointerTons2__OSDConfigurationOptionsExtension (1462)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDConfigurationOptionsExtension(struct soap*, ns2__OSDConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDConfigurationOptionsExtension(struct soap*, const char *, int, ns2__OSDConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDConfigurationOptionsExtension(struct soap*, const char*, ns2__OSDConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDConfigurationOptionsExtension(struct soap*, ns2__OSDConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDConfigurationOptionsExtension
#define soap_write_PointerTons2__OSDConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTons2__OSDConfigurationOptionsExtension(soap, data, "ns2:OSDConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDConfigurationOptionsExtension(struct soap*, ns2__OSDConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDConfigurationOptionsExtension
#define soap_read_PointerTons2__OSDConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDImgOptions
#define SOAP_TYPE_PointerTons2__OSDImgOptions (1461)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDImgOptions(struct soap*, ns2__OSDImgOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDImgOptions(struct soap*, const char *, int, ns2__OSDImgOptions *const*, const char *);
SOAP_FMAC3 ns2__OSDImgOptions ** SOAP_FMAC4 soap_in_PointerTons2__OSDImgOptions(struct soap*, const char*, ns2__OSDImgOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDImgOptions(struct soap*, ns2__OSDImgOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDImgOptions
#define soap_write_PointerTons2__OSDImgOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDImgOptions(soap, data), 0) || soap_put_PointerTons2__OSDImgOptions(soap, data, "ns2:OSDImgOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgOptions ** SOAP_FMAC4 soap_get_PointerTons2__OSDImgOptions(struct soap*, ns2__OSDImgOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDImgOptions
#define soap_read_PointerTons2__OSDImgOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDImgOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDTextOptions
#define SOAP_TYPE_PointerTons2__OSDTextOptions (1460)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDTextOptions(struct soap*, ns2__OSDTextOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDTextOptions(struct soap*, const char *, int, ns2__OSDTextOptions *const*, const char *);
SOAP_FMAC3 ns2__OSDTextOptions ** SOAP_FMAC4 soap_in_PointerTons2__OSDTextOptions(struct soap*, const char*, ns2__OSDTextOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDTextOptions(struct soap*, ns2__OSDTextOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDTextOptions
#define soap_write_PointerTons2__OSDTextOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDTextOptions(soap, data), 0) || soap_put_PointerTons2__OSDTextOptions(soap, data, "ns2:OSDTextOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextOptions ** SOAP_FMAC4 soap_get_PointerTons2__OSDTextOptions(struct soap*, ns2__OSDTextOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDTextOptions
#define soap_read_PointerTons2__OSDTextOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDTextOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MaximumNumberOfOSDs
#define SOAP_TYPE_PointerTons2__MaximumNumberOfOSDs (1458)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MaximumNumberOfOSDs(struct soap*, ns2__MaximumNumberOfOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MaximumNumberOfOSDs(struct soap*, const char *, int, ns2__MaximumNumberOfOSDs *const*, const char *);
SOAP_FMAC3 ns2__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_in_PointerTons2__MaximumNumberOfOSDs(struct soap*, const char*, ns2__MaximumNumberOfOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MaximumNumberOfOSDs(struct soap*, ns2__MaximumNumberOfOSDs *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MaximumNumberOfOSDs
#define soap_write_PointerTons2__MaximumNumberOfOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MaximumNumberOfOSDs(soap, data), 0) || soap_put_PointerTons2__MaximumNumberOfOSDs(soap, data, "ns2:MaximumNumberOfOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_get_PointerTons2__MaximumNumberOfOSDs(struct soap*, ns2__MaximumNumberOfOSDs **, const char*, const char*);

#ifndef soap_read_PointerTons2__MaximumNumberOfOSDs
#define soap_read_PointerTons2__MaximumNumberOfOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MaximumNumberOfOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDImgOptionsExtension
#define SOAP_TYPE_PointerTons2__OSDImgOptionsExtension (1457)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDImgOptionsExtension(struct soap*, ns2__OSDImgOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDImgOptionsExtension(struct soap*, const char *, int, ns2__OSDImgOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDImgOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDImgOptionsExtension(struct soap*, const char*, ns2__OSDImgOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDImgOptionsExtension(struct soap*, ns2__OSDImgOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDImgOptionsExtension
#define soap_write_PointerTons2__OSDImgOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDImgOptionsExtension(soap, data), 0) || soap_put_PointerTons2__OSDImgOptionsExtension(soap, data, "ns2:OSDImgOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDImgOptionsExtension(struct soap*, ns2__OSDImgOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDImgOptionsExtension
#define soap_read_PointerTons2__OSDImgOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDImgOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDTextOptionsExtension
#define SOAP_TYPE_PointerTons2__OSDTextOptionsExtension (1456)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDTextOptionsExtension(struct soap*, ns2__OSDTextOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDTextOptionsExtension(struct soap*, const char *, int, ns2__OSDTextOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDTextOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDTextOptionsExtension(struct soap*, const char*, ns2__OSDTextOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDTextOptionsExtension(struct soap*, ns2__OSDTextOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDTextOptionsExtension
#define soap_write_PointerTons2__OSDTextOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDTextOptionsExtension(soap, data), 0) || soap_put_PointerTons2__OSDTextOptionsExtension(soap, data, "ns2:OSDTextOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDTextOptionsExtension(struct soap*, ns2__OSDTextOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDTextOptionsExtension
#define soap_read_PointerTons2__OSDTextOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDTextOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDColorOptions
#define SOAP_TYPE_PointerTons2__OSDColorOptions (1455)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDColorOptions(struct soap*, ns2__OSDColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDColorOptions(struct soap*, const char *, int, ns2__OSDColorOptions *const*, const char *);
SOAP_FMAC3 ns2__OSDColorOptions ** SOAP_FMAC4 soap_in_PointerTons2__OSDColorOptions(struct soap*, const char*, ns2__OSDColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDColorOptions(struct soap*, ns2__OSDColorOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDColorOptions
#define soap_write_PointerTons2__OSDColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDColorOptions(soap, data), 0) || soap_put_PointerTons2__OSDColorOptions(soap, data, "ns2:OSDColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDColorOptions ** SOAP_FMAC4 soap_get_PointerTons2__OSDColorOptions(struct soap*, ns2__OSDColorOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDColorOptions
#define soap_read_PointerTons2__OSDColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDColorOptionsExtension
#define SOAP_TYPE_PointerTons2__OSDColorOptionsExtension (1454)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDColorOptionsExtension(struct soap*, ns2__OSDColorOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDColorOptionsExtension(struct soap*, const char *, int, ns2__OSDColorOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDColorOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDColorOptionsExtension(struct soap*, const char*, ns2__OSDColorOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDColorOptionsExtension(struct soap*, ns2__OSDColorOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDColorOptionsExtension
#define soap_write_PointerTons2__OSDColorOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDColorOptionsExtension(soap, data), 0) || soap_put_PointerTons2__OSDColorOptionsExtension(soap, data, "ns2:OSDColorOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDColorOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDColorOptionsExtension(struct soap*, ns2__OSDColorOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDColorOptionsExtension
#define soap_read_PointerTons2__OSDColorOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDColorOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ColorOptions
#define SOAP_TYPE_PointerTons2__ColorOptions (1453)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ColorOptions(struct soap*, ns2__ColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ColorOptions(struct soap*, const char *, int, ns2__ColorOptions *const*, const char *);
SOAP_FMAC3 ns2__ColorOptions ** SOAP_FMAC4 soap_in_PointerTons2__ColorOptions(struct soap*, const char*, ns2__ColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ColorOptions(struct soap*, ns2__ColorOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ColorOptions
#define soap_write_PointerTons2__ColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ColorOptions(soap, data), 0) || soap_put_PointerTons2__ColorOptions(soap, data, "ns2:ColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorOptions ** SOAP_FMAC4 soap_get_PointerTons2__ColorOptions(struct soap*, ns2__ColorOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__ColorOptions
#define soap_read_PointerTons2__ColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange (1451)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, std::vector<ns2__ColorspaceRange * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, const char *, int, std::vector<ns2__ColorspaceRange * >*const*, const char *);
SOAP_FMAC3 std::vector<ns2__ColorspaceRange * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, const char*, std::vector<ns2__ColorspaceRange * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, std::vector<ns2__ColorspaceRange * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange
#define soap_write_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<ns2__ColorspaceRange * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, std::vector<ns2__ColorspaceRange * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange
#define soap_read_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTons2__ColorspaceRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ColorspaceRange
#define SOAP_TYPE_PointerTons2__ColorspaceRange (1449)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ColorspaceRange(struct soap*, ns2__ColorspaceRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ColorspaceRange(struct soap*, const char *, int, ns2__ColorspaceRange *const*, const char *);
SOAP_FMAC3 ns2__ColorspaceRange ** SOAP_FMAC4 soap_in_PointerTons2__ColorspaceRange(struct soap*, const char*, ns2__ColorspaceRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ColorspaceRange(struct soap*, ns2__ColorspaceRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ColorspaceRange
#define soap_write_PointerTons2__ColorspaceRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ColorspaceRange(soap, data), 0) || soap_put_PointerTons2__ColorspaceRange(soap, data, "ns2:ColorspaceRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorspaceRange ** SOAP_FMAC4 soap_get_PointerTons2__ColorspaceRange(struct soap*, ns2__ColorspaceRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__ColorspaceRange
#define soap_read_PointerTons2__ColorspaceRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ColorspaceRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons2__Color
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTons2__Color (1448)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTons2__Color(struct soap*, std::vector<ns2__Color * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTons2__Color(struct soap*, const char *, int, std::vector<ns2__Color * >*const*, const char *);
SOAP_FMAC3 std::vector<ns2__Color * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTons2__Color(struct soap*, const char*, std::vector<ns2__Color * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTons2__Color(struct soap*, std::vector<ns2__Color * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTons2__Color
#define soap_write_PointerTostd__vectorTemplateOfPointerTons2__Color(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTons2__Color(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOfPointerTons2__Color(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<ns2__Color * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTons2__Color(struct soap*, std::vector<ns2__Color * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTons2__Color
#define soap_read_PointerTostd__vectorTemplateOfPointerTons2__Color(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTons2__Color(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDImgConfigurationExtension
#define SOAP_TYPE_PointerTons2__OSDImgConfigurationExtension (1446)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDImgConfigurationExtension(struct soap*, ns2__OSDImgConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDImgConfigurationExtension(struct soap*, const char *, int, ns2__OSDImgConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDImgConfigurationExtension(struct soap*, const char*, ns2__OSDImgConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDImgConfigurationExtension(struct soap*, ns2__OSDImgConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDImgConfigurationExtension
#define soap_write_PointerTons2__OSDImgConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDImgConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__OSDImgConfigurationExtension(soap, data, "ns2:OSDImgConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDImgConfigurationExtension(struct soap*, ns2__OSDImgConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDImgConfigurationExtension
#define soap_read_PointerTons2__OSDImgConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDImgConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDTextConfigurationExtension
#define SOAP_TYPE_PointerTons2__OSDTextConfigurationExtension (1445)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDTextConfigurationExtension(struct soap*, ns2__OSDTextConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDTextConfigurationExtension(struct soap*, const char *, int, ns2__OSDTextConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDTextConfigurationExtension(struct soap*, const char*, ns2__OSDTextConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDTextConfigurationExtension(struct soap*, ns2__OSDTextConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDTextConfigurationExtension
#define soap_write_PointerTons2__OSDTextConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDTextConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__OSDTextConfigurationExtension(soap, data, "ns2:OSDTextConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDTextConfigurationExtension(struct soap*, ns2__OSDTextConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDTextConfigurationExtension
#define soap_read_PointerTons2__OSDTextConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDTextConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDColor
#define SOAP_TYPE_PointerTons2__OSDColor (1444)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDColor(struct soap*, ns2__OSDColor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDColor(struct soap*, const char *, int, ns2__OSDColor *const*, const char *);
SOAP_FMAC3 ns2__OSDColor ** SOAP_FMAC4 soap_in_PointerTons2__OSDColor(struct soap*, const char*, ns2__OSDColor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDColor(struct soap*, ns2__OSDColor *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDColor
#define soap_write_PointerTons2__OSDColor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDColor(soap, data), 0) || soap_put_PointerTons2__OSDColor(soap, data, "ns2:OSDColor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDColor ** SOAP_FMAC4 soap_get_PointerTons2__OSDColor(struct soap*, ns2__OSDColor **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDColor
#define soap_read_PointerTons2__OSDColor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDColor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDPosConfigurationExtension
#define SOAP_TYPE_PointerTons2__OSDPosConfigurationExtension (1443)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDPosConfigurationExtension(struct soap*, ns2__OSDPosConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDPosConfigurationExtension(struct soap*, const char *, int, ns2__OSDPosConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__OSDPosConfigurationExtension(struct soap*, const char*, ns2__OSDPosConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDPosConfigurationExtension(struct soap*, ns2__OSDPosConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDPosConfigurationExtension
#define soap_write_PointerTons2__OSDPosConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDPosConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__OSDPosConfigurationExtension(soap, data, "ns2:OSDPosConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__OSDPosConfigurationExtension(struct soap*, ns2__OSDPosConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDPosConfigurationExtension
#define soap_read_PointerTons2__OSDPosConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDPosConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioClassDescriptorExtension
#define SOAP_TYPE_PointerTons2__AudioClassDescriptorExtension (1442)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioClassDescriptorExtension(struct soap*, ns2__AudioClassDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioClassDescriptorExtension(struct soap*, const char *, int, ns2__AudioClassDescriptorExtension *const*, const char *);
SOAP_FMAC3 ns2__AudioClassDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTons2__AudioClassDescriptorExtension(struct soap*, const char*, ns2__AudioClassDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioClassDescriptorExtension(struct soap*, ns2__AudioClassDescriptorExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioClassDescriptorExtension
#define soap_write_PointerTons2__AudioClassDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioClassDescriptorExtension(soap, data), 0) || soap_put_PointerTons2__AudioClassDescriptorExtension(soap, data, "ns2:AudioClassDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioClassDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTons2__AudioClassDescriptorExtension(struct soap*, ns2__AudioClassDescriptorExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioClassDescriptorExtension
#define soap_read_PointerTons2__AudioClassDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioClassDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioClassCandidate
#define SOAP_TYPE_PointerTons2__AudioClassCandidate (1440)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioClassCandidate(struct soap*, ns2__AudioClassCandidate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioClassCandidate(struct soap*, const char *, int, ns2__AudioClassCandidate *const*, const char *);
SOAP_FMAC3 ns2__AudioClassCandidate ** SOAP_FMAC4 soap_in_PointerTons2__AudioClassCandidate(struct soap*, const char*, ns2__AudioClassCandidate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioClassCandidate(struct soap*, ns2__AudioClassCandidate *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioClassCandidate
#define soap_write_PointerTons2__AudioClassCandidate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioClassCandidate(soap, data), 0) || soap_put_PointerTons2__AudioClassCandidate(soap, data, "ns2:AudioClassCandidate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioClassCandidate ** SOAP_FMAC4 soap_get_PointerTons2__AudioClassCandidate(struct soap*, ns2__AudioClassCandidate **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioClassCandidate
#define soap_read_PointerTons2__AudioClassCandidate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioClassCandidate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ActionEngineEventPayloadExtension
#define SOAP_TYPE_PointerTons2__ActionEngineEventPayloadExtension (1439)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ActionEngineEventPayloadExtension(struct soap*, ns2__ActionEngineEventPayloadExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ActionEngineEventPayloadExtension(struct soap*, const char *, int, ns2__ActionEngineEventPayloadExtension *const*, const char *);
SOAP_FMAC3 ns2__ActionEngineEventPayloadExtension ** SOAP_FMAC4 soap_in_PointerTons2__ActionEngineEventPayloadExtension(struct soap*, const char*, ns2__ActionEngineEventPayloadExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ActionEngineEventPayloadExtension(struct soap*, ns2__ActionEngineEventPayloadExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ActionEngineEventPayloadExtension
#define soap_write_PointerTons2__ActionEngineEventPayloadExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ActionEngineEventPayloadExtension(soap, data), 0) || soap_put_PointerTons2__ActionEngineEventPayloadExtension(soap, data, "ns2:ActionEngineEventPayloadExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ActionEngineEventPayloadExtension ** SOAP_FMAC4 soap_get_PointerTons2__ActionEngineEventPayloadExtension(struct soap*, ns2__ActionEngineEventPayloadExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ActionEngineEventPayloadExtension
#define soap_read_PointerTons2__ActionEngineEventPayloadExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ActionEngineEventPayloadExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Fault
#define SOAP_TYPE_PointerToSOAP_ENV__Fault (1438)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Fault(struct soap*, const char *, int, struct SOAP_ENV__Fault *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Fault ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Fault
#define soap_write_PointerToSOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Fault(soap, data), 0) || soap_put_PointerToSOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Fault
#define soap_read_PointerToSOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Envelope
#define SOAP_TYPE_PointerToSOAP_ENV__Envelope (1436)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Envelope(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Envelope(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Envelope(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Envelope(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Envelope
#define soap_write_PointerToSOAP_ENV__Envelope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Envelope(soap, data), 0) || soap_put_PointerToSOAP_ENV__Envelope(soap, data, "SOAP-ENV:Envelope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Envelope(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Envelope
#define soap_read_PointerToSOAP_ENV__Envelope(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Envelope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsState
#define SOAP_TYPE_PointerTons2__AnalyticsState (1435)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsState(struct soap*, ns2__AnalyticsState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsState(struct soap*, const char *, int, ns2__AnalyticsState *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsState ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsState(struct soap*, const char*, ns2__AnalyticsState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsState(struct soap*, ns2__AnalyticsState *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsState
#define soap_write_PointerTons2__AnalyticsState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsState(soap, data), 0) || soap_put_PointerTons2__AnalyticsState(soap, data, "ns2:AnalyticsState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsState ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsState(struct soap*, ns2__AnalyticsState **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsState
#define soap_read_PointerTons2__AnalyticsState(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataInputExtension
#define SOAP_TYPE_PointerTons2__MetadataInputExtension (1434)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataInputExtension(struct soap*, ns2__MetadataInputExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataInputExtension(struct soap*, const char *, int, ns2__MetadataInputExtension *const*, const char *);
SOAP_FMAC3 ns2__MetadataInputExtension ** SOAP_FMAC4 soap_in_PointerTons2__MetadataInputExtension(struct soap*, const char*, ns2__MetadataInputExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataInputExtension(struct soap*, ns2__MetadataInputExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataInputExtension
#define soap_write_PointerTons2__MetadataInputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataInputExtension(soap, data), 0) || soap_put_PointerTons2__MetadataInputExtension(soap, data, "ns2:MetadataInputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataInputExtension ** SOAP_FMAC4 soap_get_PointerTons2__MetadataInputExtension(struct soap*, ns2__MetadataInputExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataInputExtension
#define soap_read_PointerTons2__MetadataInputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataInputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SourceIdentificationExtension
#define SOAP_TYPE_PointerTons2__SourceIdentificationExtension (1433)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SourceIdentificationExtension(struct soap*, ns2__SourceIdentificationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SourceIdentificationExtension(struct soap*, const char *, int, ns2__SourceIdentificationExtension *const*, const char *);
SOAP_FMAC3 ns2__SourceIdentificationExtension ** SOAP_FMAC4 soap_in_PointerTons2__SourceIdentificationExtension(struct soap*, const char*, ns2__SourceIdentificationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SourceIdentificationExtension(struct soap*, ns2__SourceIdentificationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SourceIdentificationExtension
#define soap_write_PointerTons2__SourceIdentificationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SourceIdentificationExtension(soap, data), 0) || soap_put_PointerTons2__SourceIdentificationExtension(soap, data, "ns2:SourceIdentificationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SourceIdentificationExtension ** SOAP_FMAC4 soap_get_PointerTons2__SourceIdentificationExtension(struct soap*, ns2__SourceIdentificationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SourceIdentificationExtension
#define soap_read_PointerTons2__SourceIdentificationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SourceIdentificationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_PointerTons2__AnalyticsEngineInputInfoExtension (1432)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsEngineInputInfoExtension(struct soap*, ns2__AnalyticsEngineInputInfoExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsEngineInputInfoExtension(struct soap*, const char *, int, ns2__AnalyticsEngineInputInfoExtension *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsEngineInputInfoExtension ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsEngineInputInfoExtension(struct soap*, const char*, ns2__AnalyticsEngineInputInfoExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsEngineInputInfoExtension(struct soap*, ns2__AnalyticsEngineInputInfoExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsEngineInputInfoExtension
#define soap_write_PointerTons2__AnalyticsEngineInputInfoExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsEngineInputInfoExtension(soap, data), 0) || soap_put_PointerTons2__AnalyticsEngineInputInfoExtension(soap, data, "ns2:AnalyticsEngineInputInfoExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineInputInfoExtension ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsEngineInputInfoExtension(struct soap*, ns2__AnalyticsEngineInputInfoExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsEngineInputInfoExtension
#define soap_read_PointerTons2__AnalyticsEngineInputInfoExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsEngineInputInfoExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsEngineInputInfo
#define SOAP_TYPE_PointerTons2__AnalyticsEngineInputInfo (1431)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsEngineInputInfo(struct soap*, ns2__AnalyticsEngineInputInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsEngineInputInfo(struct soap*, const char *, int, ns2__AnalyticsEngineInputInfo *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsEngineInputInfo ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsEngineInputInfo(struct soap*, const char*, ns2__AnalyticsEngineInputInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsEngineInputInfo(struct soap*, ns2__AnalyticsEngineInputInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsEngineInputInfo
#define soap_write_PointerTons2__AnalyticsEngineInputInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsEngineInputInfo(soap, data), 0) || soap_put_PointerTons2__AnalyticsEngineInputInfo(soap, data, "ns2:AnalyticsEngineInputInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineInputInfo ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsEngineInputInfo(struct soap*, ns2__AnalyticsEngineInputInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsEngineInputInfo
#define soap_read_PointerTons2__AnalyticsEngineInputInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsEngineInputInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_PointerTons2__AnalyticsDeviceEngineConfigurationExtension (1430)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, ns2__AnalyticsDeviceEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char *, int, ns2__AnalyticsDeviceEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, ns2__AnalyticsDeviceEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, ns2__AnalyticsDeviceEngineConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsDeviceEngineConfigurationExtension
#define soap_write_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(soap, data, "ns2:AnalyticsDeviceEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(struct soap*, ns2__AnalyticsDeviceEngineConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsDeviceEngineConfigurationExtension
#define soap_read_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsDeviceEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EngineConfiguration
#define SOAP_TYPE_PointerTons2__EngineConfiguration (1428)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EngineConfiguration(struct soap*, ns2__EngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EngineConfiguration(struct soap*, const char *, int, ns2__EngineConfiguration *const*, const char *);
SOAP_FMAC3 ns2__EngineConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__EngineConfiguration(struct soap*, const char*, ns2__EngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EngineConfiguration(struct soap*, ns2__EngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EngineConfiguration
#define soap_write_PointerTons2__EngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EngineConfiguration(soap, data), 0) || soap_put_PointerTons2__EngineConfiguration(soap, data, "ns2:EngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EngineConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__EngineConfiguration(struct soap*, ns2__EngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__EngineConfiguration
#define soap_read_PointerTons2__EngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobConfiguration
#define SOAP_TYPE_PointerTons2__RecordingJobConfiguration (1427)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobConfiguration(struct soap*, ns2__RecordingJobConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobConfiguration(struct soap*, const char *, int, ns2__RecordingJobConfiguration *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobConfiguration(struct soap*, const char*, ns2__RecordingJobConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobConfiguration(struct soap*, ns2__RecordingJobConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobConfiguration
#define soap_write_PointerTons2__RecordingJobConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobConfiguration(soap, data), 0) || soap_put_PointerTons2__RecordingJobConfiguration(soap, data, "ns2:RecordingJobConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobConfiguration(struct soap*, ns2__RecordingJobConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobConfiguration
#define soap_read_PointerTons2__RecordingJobConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobStateTrack
#define SOAP_TYPE_PointerTons2__RecordingJobStateTrack (1425)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobStateTrack(struct soap*, ns2__RecordingJobStateTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobStateTrack(struct soap*, const char *, int, ns2__RecordingJobStateTrack *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobStateTrack ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobStateTrack(struct soap*, const char*, ns2__RecordingJobStateTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobStateTrack(struct soap*, ns2__RecordingJobStateTrack *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobStateTrack
#define soap_write_PointerTons2__RecordingJobStateTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobStateTrack(soap, data), 0) || soap_put_PointerTons2__RecordingJobStateTrack(soap, data, "ns2:RecordingJobStateTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateTrack ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobStateTrack(struct soap*, ns2__RecordingJobStateTrack **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobStateTrack
#define soap_read_PointerTons2__RecordingJobStateTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobStateTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobStateTracks
#define SOAP_TYPE_PointerTons2__RecordingJobStateTracks (1424)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobStateTracks(struct soap*, ns2__RecordingJobStateTracks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobStateTracks(struct soap*, const char *, int, ns2__RecordingJobStateTracks *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobStateTracks ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobStateTracks(struct soap*, const char*, ns2__RecordingJobStateTracks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobStateTracks(struct soap*, ns2__RecordingJobStateTracks *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobStateTracks
#define soap_write_PointerTons2__RecordingJobStateTracks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobStateTracks(soap, data), 0) || soap_put_PointerTons2__RecordingJobStateTracks(soap, data, "ns2:RecordingJobStateTracks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateTracks ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobStateTracks(struct soap*, ns2__RecordingJobStateTracks **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobStateTracks
#define soap_read_PointerTons2__RecordingJobStateTracks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobStateTracks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobStateInformationExtension
#define SOAP_TYPE_PointerTons2__RecordingJobStateInformationExtension (1423)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobStateInformationExtension(struct soap*, ns2__RecordingJobStateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobStateInformationExtension(struct soap*, const char *, int, ns2__RecordingJobStateInformationExtension *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobStateInformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobStateInformationExtension(struct soap*, const char*, ns2__RecordingJobStateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobStateInformationExtension(struct soap*, ns2__RecordingJobStateInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobStateInformationExtension
#define soap_write_PointerTons2__RecordingJobStateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobStateInformationExtension(soap, data), 0) || soap_put_PointerTons2__RecordingJobStateInformationExtension(soap, data, "ns2:RecordingJobStateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateInformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobStateInformationExtension(struct soap*, ns2__RecordingJobStateInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobStateInformationExtension
#define soap_read_PointerTons2__RecordingJobStateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobStateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobStateSource
#define SOAP_TYPE_PointerTons2__RecordingJobStateSource (1421)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobStateSource(struct soap*, ns2__RecordingJobStateSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobStateSource(struct soap*, const char *, int, ns2__RecordingJobStateSource *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobStateSource ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobStateSource(struct soap*, const char*, ns2__RecordingJobStateSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobStateSource(struct soap*, ns2__RecordingJobStateSource *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobStateSource
#define soap_write_PointerTons2__RecordingJobStateSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobStateSource(soap, data), 0) || soap_put_PointerTons2__RecordingJobStateSource(soap, data, "ns2:RecordingJobStateSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobStateSource ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobStateSource(struct soap*, ns2__RecordingJobStateSource **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobStateSource
#define soap_read_PointerTons2__RecordingJobStateSource(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobStateSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobSourceExtension
#define SOAP_TYPE_PointerTons2__RecordingJobSourceExtension (1420)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobSourceExtension(struct soap*, ns2__RecordingJobSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobSourceExtension(struct soap*, const char *, int, ns2__RecordingJobSourceExtension *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobSourceExtension ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobSourceExtension(struct soap*, const char*, ns2__RecordingJobSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobSourceExtension(struct soap*, ns2__RecordingJobSourceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobSourceExtension
#define soap_write_PointerTons2__RecordingJobSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobSourceExtension(soap, data), 0) || soap_put_PointerTons2__RecordingJobSourceExtension(soap, data, "ns2:RecordingJobSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobSourceExtension ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobSourceExtension(struct soap*, ns2__RecordingJobSourceExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobSourceExtension
#define soap_read_PointerTons2__RecordingJobSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobTrack
#define SOAP_TYPE_PointerTons2__RecordingJobTrack (1418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobTrack(struct soap*, ns2__RecordingJobTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobTrack(struct soap*, const char *, int, ns2__RecordingJobTrack *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobTrack ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobTrack(struct soap*, const char*, ns2__RecordingJobTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobTrack(struct soap*, ns2__RecordingJobTrack *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobTrack
#define soap_write_PointerTons2__RecordingJobTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobTrack(soap, data), 0) || soap_put_PointerTons2__RecordingJobTrack(soap, data, "ns2:RecordingJobTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobTrack ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobTrack(struct soap*, ns2__RecordingJobTrack **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobTrack
#define soap_read_PointerTons2__RecordingJobTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobConfigurationExtension
#define SOAP_TYPE_PointerTons2__RecordingJobConfigurationExtension (1417)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobConfigurationExtension(struct soap*, ns2__RecordingJobConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobConfigurationExtension(struct soap*, const char *, int, ns2__RecordingJobConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobConfigurationExtension(struct soap*, const char*, ns2__RecordingJobConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobConfigurationExtension(struct soap*, ns2__RecordingJobConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobConfigurationExtension
#define soap_write_PointerTons2__RecordingJobConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__RecordingJobConfigurationExtension(soap, data, "ns2:RecordingJobConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobConfigurationExtension(struct soap*, ns2__RecordingJobConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobConfigurationExtension
#define soap_read_PointerTons2__RecordingJobConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingJobSource
#define SOAP_TYPE_PointerTons2__RecordingJobSource (1415)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingJobSource(struct soap*, ns2__RecordingJobSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingJobSource(struct soap*, const char *, int, ns2__RecordingJobSource *const*, const char *);
SOAP_FMAC3 ns2__RecordingJobSource ** SOAP_FMAC4 soap_in_PointerTons2__RecordingJobSource(struct soap*, const char*, ns2__RecordingJobSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingJobSource(struct soap*, ns2__RecordingJobSource *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingJobSource
#define soap_write_PointerTons2__RecordingJobSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingJobSource(soap, data), 0) || soap_put_PointerTons2__RecordingJobSource(soap, data, "ns2:RecordingJobSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingJobSource ** SOAP_FMAC4 soap_get_PointerTons2__RecordingJobSource(struct soap*, ns2__RecordingJobSource **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingJobSource
#define soap_read_PointerTons2__RecordingJobSource(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingJobSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TrackConfiguration
#define SOAP_TYPE_PointerTons2__TrackConfiguration (1414)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TrackConfiguration(struct soap*, ns2__TrackConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TrackConfiguration(struct soap*, const char *, int, ns2__TrackConfiguration *const*, const char *);
SOAP_FMAC3 ns2__TrackConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__TrackConfiguration(struct soap*, const char*, ns2__TrackConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TrackConfiguration(struct soap*, ns2__TrackConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TrackConfiguration
#define soap_write_PointerTons2__TrackConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TrackConfiguration(soap, data), 0) || soap_put_PointerTons2__TrackConfiguration(soap, data, "ns2:TrackConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__TrackConfiguration(struct soap*, ns2__TrackConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__TrackConfiguration
#define soap_read_PointerTons2__TrackConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TrackConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__GetTracksResponseItem
#define SOAP_TYPE_PointerTons2__GetTracksResponseItem (1412)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GetTracksResponseItem(struct soap*, ns2__GetTracksResponseItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GetTracksResponseItem(struct soap*, const char *, int, ns2__GetTracksResponseItem *const*, const char *);
SOAP_FMAC3 ns2__GetTracksResponseItem ** SOAP_FMAC4 soap_in_PointerTons2__GetTracksResponseItem(struct soap*, const char*, ns2__GetTracksResponseItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GetTracksResponseItem(struct soap*, ns2__GetTracksResponseItem *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__GetTracksResponseItem
#define soap_write_PointerTons2__GetTracksResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__GetTracksResponseItem(soap, data), 0) || soap_put_PointerTons2__GetTracksResponseItem(soap, data, "ns2:GetTracksResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GetTracksResponseItem ** SOAP_FMAC4 soap_get_PointerTons2__GetTracksResponseItem(struct soap*, ns2__GetTracksResponseItem **, const char*, const char*);

#ifndef soap_read_PointerTons2__GetTracksResponseItem
#define soap_read_PointerTons2__GetTracksResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__GetTracksResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__GetTracksResponseList
#define SOAP_TYPE_PointerTons2__GetTracksResponseList (1411)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__GetTracksResponseList(struct soap*, ns2__GetTracksResponseList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__GetTracksResponseList(struct soap*, const char *, int, ns2__GetTracksResponseList *const*, const char *);
SOAP_FMAC3 ns2__GetTracksResponseList ** SOAP_FMAC4 soap_in_PointerTons2__GetTracksResponseList(struct soap*, const char*, ns2__GetTracksResponseList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__GetTracksResponseList(struct soap*, ns2__GetTracksResponseList *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__GetTracksResponseList
#define soap_write_PointerTons2__GetTracksResponseList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__GetTracksResponseList(soap, data), 0) || soap_put_PointerTons2__GetTracksResponseList(soap, data, "ns2:GetTracksResponseList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__GetTracksResponseList ** SOAP_FMAC4 soap_get_PointerTons2__GetTracksResponseList(struct soap*, ns2__GetTracksResponseList **, const char*, const char*);

#ifndef soap_read_PointerTons2__GetTracksResponseList
#define soap_read_PointerTons2__GetTracksResponseList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__GetTracksResponseList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingConfiguration
#define SOAP_TYPE_PointerTons2__RecordingConfiguration (1410)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingConfiguration(struct soap*, ns2__RecordingConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingConfiguration(struct soap*, const char *, int, ns2__RecordingConfiguration *const*, const char *);
SOAP_FMAC3 ns2__RecordingConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__RecordingConfiguration(struct soap*, const char*, ns2__RecordingConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingConfiguration(struct soap*, ns2__RecordingConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingConfiguration
#define soap_write_PointerTons2__RecordingConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingConfiguration(soap, data), 0) || soap_put_PointerTons2__RecordingConfiguration(soap, data, "ns2:RecordingConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__RecordingConfiguration(struct soap*, ns2__RecordingConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingConfiguration
#define soap_read_PointerTons2__RecordingConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__StringAttrList
#define SOAP_TYPE_PointerTons2__StringAttrList (1409)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__StringAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__StringAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__StringAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__StringAttrList(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__StringAttrList
#define soap_write_PointerTons2__StringAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__StringAttrList(soap, data), 0) || soap_put_PointerTons2__StringAttrList(soap, data, "ns2:StringAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__StringAttrList(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__StringAttrList
#define soap_read_PointerTons2__StringAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__StringAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TrackAttributesExtension
#define SOAP_TYPE_PointerTons2__TrackAttributesExtension (1408)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TrackAttributesExtension(struct soap*, ns2__TrackAttributesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TrackAttributesExtension(struct soap*, const char *, int, ns2__TrackAttributesExtension *const*, const char *);
SOAP_FMAC3 ns2__TrackAttributesExtension ** SOAP_FMAC4 soap_in_PointerTons2__TrackAttributesExtension(struct soap*, const char*, ns2__TrackAttributesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TrackAttributesExtension(struct soap*, ns2__TrackAttributesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TrackAttributesExtension
#define soap_write_PointerTons2__TrackAttributesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TrackAttributesExtension(soap, data), 0) || soap_put_PointerTons2__TrackAttributesExtension(soap, data, "ns2:TrackAttributesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackAttributesExtension ** SOAP_FMAC4 soap_get_PointerTons2__TrackAttributesExtension(struct soap*, ns2__TrackAttributesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__TrackAttributesExtension
#define soap_read_PointerTons2__TrackAttributesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TrackAttributesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataAttributes
#define SOAP_TYPE_PointerTons2__MetadataAttributes (1407)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataAttributes(struct soap*, ns2__MetadataAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataAttributes(struct soap*, const char *, int, ns2__MetadataAttributes *const*, const char *);
SOAP_FMAC3 ns2__MetadataAttributes ** SOAP_FMAC4 soap_in_PointerTons2__MetadataAttributes(struct soap*, const char*, ns2__MetadataAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataAttributes(struct soap*, ns2__MetadataAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataAttributes
#define soap_write_PointerTons2__MetadataAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataAttributes(soap, data), 0) || soap_put_PointerTons2__MetadataAttributes(soap, data, "ns2:MetadataAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataAttributes ** SOAP_FMAC4 soap_get_PointerTons2__MetadataAttributes(struct soap*, ns2__MetadataAttributes **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataAttributes
#define soap_read_PointerTons2__MetadataAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioAttributes
#define SOAP_TYPE_PointerTons2__AudioAttributes (1406)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioAttributes(struct soap*, ns2__AudioAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioAttributes(struct soap*, const char *, int, ns2__AudioAttributes *const*, const char *);
SOAP_FMAC3 ns2__AudioAttributes ** SOAP_FMAC4 soap_in_PointerTons2__AudioAttributes(struct soap*, const char*, ns2__AudioAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioAttributes(struct soap*, ns2__AudioAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioAttributes
#define soap_write_PointerTons2__AudioAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioAttributes(soap, data), 0) || soap_put_PointerTons2__AudioAttributes(soap, data, "ns2:AudioAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioAttributes ** SOAP_FMAC4 soap_get_PointerTons2__AudioAttributes(struct soap*, ns2__AudioAttributes **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioAttributes
#define soap_read_PointerTons2__AudioAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoAttributes
#define SOAP_TYPE_PointerTons2__VideoAttributes (1405)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoAttributes(struct soap*, ns2__VideoAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoAttributes(struct soap*, const char *, int, ns2__VideoAttributes *const*, const char *);
SOAP_FMAC3 ns2__VideoAttributes ** SOAP_FMAC4 soap_in_PointerTons2__VideoAttributes(struct soap*, const char*, ns2__VideoAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoAttributes(struct soap*, ns2__VideoAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoAttributes
#define soap_write_PointerTons2__VideoAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoAttributes(soap, data), 0) || soap_put_PointerTons2__VideoAttributes(soap, data, "ns2:VideoAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAttributes ** SOAP_FMAC4 soap_get_PointerTons2__VideoAttributes(struct soap*, ns2__VideoAttributes **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoAttributes
#define soap_read_PointerTons2__VideoAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TrackAttributes
#define SOAP_TYPE_PointerTons2__TrackAttributes (1403)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TrackAttributes(struct soap*, ns2__TrackAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TrackAttributes(struct soap*, const char *, int, ns2__TrackAttributes *const*, const char *);
SOAP_FMAC3 ns2__TrackAttributes ** SOAP_FMAC4 soap_in_PointerTons2__TrackAttributes(struct soap*, const char*, ns2__TrackAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TrackAttributes(struct soap*, ns2__TrackAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TrackAttributes
#define soap_write_PointerTons2__TrackAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TrackAttributes(soap, data), 0) || soap_put_PointerTons2__TrackAttributes(soap, data, "ns2:TrackAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackAttributes ** SOAP_FMAC4 soap_get_PointerTons2__TrackAttributes(struct soap*, ns2__TrackAttributes **, const char*, const char*);

#ifndef soap_read_PointerTons2__TrackAttributes
#define soap_read_PointerTons2__TrackAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TrackAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TrackInformation
#define SOAP_TYPE_PointerTons2__TrackInformation (1401)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TrackInformation(struct soap*, ns2__TrackInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TrackInformation(struct soap*, const char *, int, ns2__TrackInformation *const*, const char *);
SOAP_FMAC3 ns2__TrackInformation ** SOAP_FMAC4 soap_in_PointerTons2__TrackInformation(struct soap*, const char*, ns2__TrackInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TrackInformation(struct soap*, ns2__TrackInformation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TrackInformation
#define soap_write_PointerTons2__TrackInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TrackInformation(soap, data), 0) || soap_put_PointerTons2__TrackInformation(soap, data, "ns2:TrackInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TrackInformation ** SOAP_FMAC4 soap_get_PointerTons2__TrackInformation(struct soap*, ns2__TrackInformation **, const char*, const char*);

#ifndef soap_read_PointerTons2__TrackInformation
#define soap_read_PointerTons2__TrackInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TrackInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (1400)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTotime(soap, data), 0) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingSourceInformation
#define SOAP_TYPE_PointerTons2__RecordingSourceInformation (1399)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingSourceInformation(struct soap*, ns2__RecordingSourceInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingSourceInformation(struct soap*, const char *, int, ns2__RecordingSourceInformation *const*, const char *);
SOAP_FMAC3 ns2__RecordingSourceInformation ** SOAP_FMAC4 soap_in_PointerTons2__RecordingSourceInformation(struct soap*, const char*, ns2__RecordingSourceInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingSourceInformation(struct soap*, ns2__RecordingSourceInformation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingSourceInformation
#define soap_write_PointerTons2__RecordingSourceInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingSourceInformation(soap, data), 0) || soap_put_PointerTons2__RecordingSourceInformation(soap, data, "ns2:RecordingSourceInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingSourceInformation ** SOAP_FMAC4 soap_get_PointerTons2__RecordingSourceInformation(struct soap*, ns2__RecordingSourceInformation **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingSourceInformation
#define soap_read_PointerTons2__RecordingSourceInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingSourceInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FindMetadataResult
#define SOAP_TYPE_PointerTons2__FindMetadataResult (1397)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FindMetadataResult(struct soap*, ns2__FindMetadataResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FindMetadataResult(struct soap*, const char *, int, ns2__FindMetadataResult *const*, const char *);
SOAP_FMAC3 ns2__FindMetadataResult ** SOAP_FMAC4 soap_in_PointerTons2__FindMetadataResult(struct soap*, const char*, ns2__FindMetadataResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FindMetadataResult(struct soap*, ns2__FindMetadataResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FindMetadataResult
#define soap_write_PointerTons2__FindMetadataResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FindMetadataResult(soap, data), 0) || soap_put_PointerTons2__FindMetadataResult(soap, data, "ns2:FindMetadataResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindMetadataResult ** SOAP_FMAC4 soap_get_PointerTons2__FindMetadataResult(struct soap*, ns2__FindMetadataResult **, const char*, const char*);

#ifndef soap_read_PointerTons2__FindMetadataResult
#define soap_read_PointerTons2__FindMetadataResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FindMetadataResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FindPTZPositionResult
#define SOAP_TYPE_PointerTons2__FindPTZPositionResult (1395)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FindPTZPositionResult(struct soap*, ns2__FindPTZPositionResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FindPTZPositionResult(struct soap*, const char *, int, ns2__FindPTZPositionResult *const*, const char *);
SOAP_FMAC3 ns2__FindPTZPositionResult ** SOAP_FMAC4 soap_in_PointerTons2__FindPTZPositionResult(struct soap*, const char*, ns2__FindPTZPositionResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FindPTZPositionResult(struct soap*, ns2__FindPTZPositionResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FindPTZPositionResult
#define soap_write_PointerTons2__FindPTZPositionResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FindPTZPositionResult(soap, data), 0) || soap_put_PointerTons2__FindPTZPositionResult(soap, data, "ns2:FindPTZPositionResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindPTZPositionResult ** SOAP_FMAC4 soap_get_PointerTons2__FindPTZPositionResult(struct soap*, ns2__FindPTZPositionResult **, const char*, const char*);

#ifndef soap_read_PointerTons2__FindPTZPositionResult
#define soap_read_PointerTons2__FindPTZPositionResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FindPTZPositionResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FindEventResult
#define SOAP_TYPE_PointerTons2__FindEventResult (1393)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FindEventResult(struct soap*, ns2__FindEventResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FindEventResult(struct soap*, const char *, int, ns2__FindEventResult *const*, const char *);
SOAP_FMAC3 ns2__FindEventResult ** SOAP_FMAC4 soap_in_PointerTons2__FindEventResult(struct soap*, const char*, ns2__FindEventResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FindEventResult(struct soap*, ns2__FindEventResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FindEventResult
#define soap_write_PointerTons2__FindEventResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FindEventResult(soap, data), 0) || soap_put_PointerTons2__FindEventResult(soap, data, "ns2:FindEventResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FindEventResult ** SOAP_FMAC4 soap_get_PointerTons2__FindEventResult(struct soap*, ns2__FindEventResult **, const char*, const char*);

#ifndef soap_read_PointerTons2__FindEventResult
#define soap_read_PointerTons2__FindEventResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FindEventResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingInformation
#define SOAP_TYPE_PointerTons2__RecordingInformation (1391)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingInformation(struct soap*, ns2__RecordingInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingInformation(struct soap*, const char *, int, ns2__RecordingInformation *const*, const char *);
SOAP_FMAC3 ns2__RecordingInformation ** SOAP_FMAC4 soap_in_PointerTons2__RecordingInformation(struct soap*, const char*, ns2__RecordingInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingInformation(struct soap*, ns2__RecordingInformation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingInformation
#define soap_write_PointerTons2__RecordingInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingInformation(soap, data), 0) || soap_put_PointerTons2__RecordingInformation(soap, data, "ns2:RecordingInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingInformation ** SOAP_FMAC4 soap_get_PointerTons2__RecordingInformation(struct soap*, ns2__RecordingInformation **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingInformation
#define soap_read_PointerTons2__RecordingInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SearchScopeExtension
#define SOAP_TYPE_PointerTons2__SearchScopeExtension (1390)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SearchScopeExtension(struct soap*, ns2__SearchScopeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SearchScopeExtension(struct soap*, const char *, int, ns2__SearchScopeExtension *const*, const char *);
SOAP_FMAC3 ns2__SearchScopeExtension ** SOAP_FMAC4 soap_in_PointerTons2__SearchScopeExtension(struct soap*, const char*, ns2__SearchScopeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SearchScopeExtension(struct soap*, ns2__SearchScopeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SearchScopeExtension
#define soap_write_PointerTons2__SearchScopeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SearchScopeExtension(soap, data), 0) || soap_put_PointerTons2__SearchScopeExtension(soap, data, "ns2:SearchScopeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SearchScopeExtension ** SOAP_FMAC4 soap_get_PointerTons2__SearchScopeExtension(struct soap*, ns2__SearchScopeExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SearchScopeExtension
#define soap_read_PointerTons2__SearchScopeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SearchScopeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__XPathExpression
#define SOAP_TYPE_PointerTons2__XPathExpression (1389)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__XPathExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__XPathExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__XPathExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__XPathExpression(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__XPathExpression
#define soap_write_PointerTons2__XPathExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__XPathExpression(soap, data), 0) || soap_put_PointerTons2__XPathExpression(soap, data, "ns2:XPathExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__XPathExpression(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__XPathExpression
#define soap_read_PointerTons2__XPathExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__XPathExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SourceReference
#define SOAP_TYPE_PointerTons2__SourceReference (1386)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SourceReference(struct soap*, ns2__SourceReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SourceReference(struct soap*, const char *, int, ns2__SourceReference *const*, const char *);
SOAP_FMAC3 ns2__SourceReference ** SOAP_FMAC4 soap_in_PointerTons2__SourceReference(struct soap*, const char*, ns2__SourceReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SourceReference(struct soap*, ns2__SourceReference *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SourceReference
#define soap_write_PointerTons2__SourceReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SourceReference(soap, data), 0) || soap_put_PointerTons2__SourceReference(soap, data, "ns2:SourceReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SourceReference ** SOAP_FMAC4 soap_get_PointerTons2__SourceReference(struct soap*, ns2__SourceReference **, const char*, const char*);

#ifndef soap_read_PointerTons2__SourceReference
#define soap_read_PointerTons2__SourceReference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SourceReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReceiverConfiguration
#define SOAP_TYPE_PointerTons2__ReceiverConfiguration (1385)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReceiverConfiguration(struct soap*, ns2__ReceiverConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReceiverConfiguration(struct soap*, const char *, int, ns2__ReceiverConfiguration *const*, const char *);
SOAP_FMAC3 ns2__ReceiverConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__ReceiverConfiguration(struct soap*, const char*, ns2__ReceiverConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReceiverConfiguration(struct soap*, ns2__ReceiverConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReceiverConfiguration
#define soap_write_PointerTons2__ReceiverConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReceiverConfiguration(soap, data), 0) || soap_put_PointerTons2__ReceiverConfiguration(soap, data, "ns2:ReceiverConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__ReceiverConfiguration(struct soap*, ns2__ReceiverConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReceiverConfiguration
#define soap_read_PointerTons2__ReceiverConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReceiverConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PaneOptionExtension
#define SOAP_TYPE_PointerTons2__PaneOptionExtension (1384)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaneOptionExtension(struct soap*, ns2__PaneOptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaneOptionExtension(struct soap*, const char *, int, ns2__PaneOptionExtension *const*, const char *);
SOAP_FMAC3 ns2__PaneOptionExtension ** SOAP_FMAC4 soap_in_PointerTons2__PaneOptionExtension(struct soap*, const char*, ns2__PaneOptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaneOptionExtension(struct soap*, ns2__PaneOptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PaneOptionExtension
#define soap_write_PointerTons2__PaneOptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PaneOptionExtension(soap, data), 0) || soap_put_PointerTons2__PaneOptionExtension(soap, data, "ns2:PaneOptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneOptionExtension ** SOAP_FMAC4 soap_get_PointerTons2__PaneOptionExtension(struct soap*, ns2__PaneOptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PaneOptionExtension
#define soap_read_PointerTons2__PaneOptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PaneOptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__LayoutOptionsExtension
#define SOAP_TYPE_PointerTons2__LayoutOptionsExtension (1382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__LayoutOptionsExtension(struct soap*, ns2__LayoutOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__LayoutOptionsExtension(struct soap*, const char *, int, ns2__LayoutOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__LayoutOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__LayoutOptionsExtension(struct soap*, const char*, ns2__LayoutOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__LayoutOptionsExtension(struct soap*, ns2__LayoutOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__LayoutOptionsExtension
#define soap_write_PointerTons2__LayoutOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__LayoutOptionsExtension(soap, data), 0) || soap_put_PointerTons2__LayoutOptionsExtension(soap, data, "ns2:LayoutOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LayoutOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__LayoutOptionsExtension(struct soap*, ns2__LayoutOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__LayoutOptionsExtension
#define soap_read_PointerTons2__LayoutOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__LayoutOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PaneLayoutOptions
#define SOAP_TYPE_PointerTons2__PaneLayoutOptions (1380)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaneLayoutOptions(struct soap*, ns2__PaneLayoutOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaneLayoutOptions(struct soap*, const char *, int, ns2__PaneLayoutOptions *const*, const char *);
SOAP_FMAC3 ns2__PaneLayoutOptions ** SOAP_FMAC4 soap_in_PointerTons2__PaneLayoutOptions(struct soap*, const char*, ns2__PaneLayoutOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaneLayoutOptions(struct soap*, ns2__PaneLayoutOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PaneLayoutOptions
#define soap_write_PointerTons2__PaneLayoutOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PaneLayoutOptions(soap, data), 0) || soap_put_PointerTons2__PaneLayoutOptions(soap, data, "ns2:PaneLayoutOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneLayoutOptions ** SOAP_FMAC4 soap_get_PointerTons2__PaneLayoutOptions(struct soap*, ns2__PaneLayoutOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__PaneLayoutOptions
#define soap_read_PointerTons2__PaneLayoutOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PaneLayoutOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoDecoderConfigurationOptions
#define SOAP_TYPE_PointerTons2__VideoDecoderConfigurationOptions (1379)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoDecoderConfigurationOptions(struct soap*, ns2__VideoDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoDecoderConfigurationOptions(struct soap*, const char *, int, ns2__VideoDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__VideoDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__VideoDecoderConfigurationOptions(struct soap*, const char*, ns2__VideoDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoDecoderConfigurationOptions(struct soap*, ns2__VideoDecoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoDecoderConfigurationOptions
#define soap_write_PointerTons2__VideoDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoDecoderConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__VideoDecoderConfigurationOptions(soap, data, "ns2:VideoDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__VideoDecoderConfigurationOptions(struct soap*, ns2__VideoDecoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoDecoderConfigurationOptions
#define soap_read_PointerTons2__VideoDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__LayoutExtension
#define SOAP_TYPE_PointerTons2__LayoutExtension (1378)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__LayoutExtension(struct soap*, ns2__LayoutExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__LayoutExtension(struct soap*, const char *, int, ns2__LayoutExtension *const*, const char *);
SOAP_FMAC3 ns2__LayoutExtension ** SOAP_FMAC4 soap_in_PointerTons2__LayoutExtension(struct soap*, const char*, ns2__LayoutExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__LayoutExtension(struct soap*, ns2__LayoutExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__LayoutExtension
#define soap_write_PointerTons2__LayoutExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__LayoutExtension(soap, data), 0) || soap_put_PointerTons2__LayoutExtension(soap, data, "ns2:LayoutExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__LayoutExtension ** SOAP_FMAC4 soap_get_PointerTons2__LayoutExtension(struct soap*, ns2__LayoutExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__LayoutExtension
#define soap_read_PointerTons2__LayoutExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__LayoutExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PaneLayout
#define SOAP_TYPE_PointerTons2__PaneLayout (1376)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PaneLayout(struct soap*, ns2__PaneLayout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PaneLayout(struct soap*, const char *, int, ns2__PaneLayout *const*, const char *);
SOAP_FMAC3 ns2__PaneLayout ** SOAP_FMAC4 soap_in_PointerTons2__PaneLayout(struct soap*, const char*, ns2__PaneLayout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PaneLayout(struct soap*, ns2__PaneLayout *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PaneLayout
#define soap_write_PointerTons2__PaneLayout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PaneLayout(soap, data), 0) || soap_put_PointerTons2__PaneLayout(soap, data, "ns2:PaneLayout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PaneLayout ** SOAP_FMAC4 soap_get_PointerTons2__PaneLayout(struct soap*, ns2__PaneLayout **, const char*, const char*);

#ifndef soap_read_PointerTons2__PaneLayout
#define soap_read_PointerTons2__PaneLayout(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PaneLayout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns2__union_EventStream
#define SOAP_TYPE_PointerTo__ns2__union_EventStream (1375)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns2__union_EventStream(struct soap*, __ns2__union_EventStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns2__union_EventStream(struct soap*, const char *, int, __ns2__union_EventStream *const*, const char *);
SOAP_FMAC3 __ns2__union_EventStream ** SOAP_FMAC4 soap_in_PointerTo__ns2__union_EventStream(struct soap*, const char*, __ns2__union_EventStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns2__union_EventStream(struct soap*, __ns2__union_EventStream *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns2__union_EventStream
#define soap_write_PointerTo__ns2__union_EventStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__ns2__union_EventStream(soap, data), 0) || soap_put_PointerTo__ns2__union_EventStream(soap, data, "-ns2:union-EventStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_EventStream ** SOAP_FMAC4 soap_get_PointerTo__ns2__union_EventStream(struct soap*, __ns2__union_EventStream **, const char*, const char*);

#ifndef soap_read_PointerTo__ns2__union_EventStream
#define soap_read_PointerTo__ns2__union_EventStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns2__union_EventStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EventStreamExtension
#define SOAP_TYPE_PointerTons2__EventStreamExtension (1373)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EventStreamExtension(struct soap*, ns2__EventStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EventStreamExtension(struct soap*, const char *, int, ns2__EventStreamExtension *const*, const char *);
SOAP_FMAC3 ns2__EventStreamExtension ** SOAP_FMAC4 soap_in_PointerTons2__EventStreamExtension(struct soap*, const char*, ns2__EventStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EventStreamExtension(struct soap*, ns2__EventStreamExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EventStreamExtension
#define soap_write_PointerTons2__EventStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EventStreamExtension(soap, data), 0) || soap_put_PointerTons2__EventStreamExtension(soap, data, "ns2:EventStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventStreamExtension ** SOAP_FMAC4 soap_get_PointerTons2__EventStreamExtension(struct soap*, ns2__EventStreamExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__EventStreamExtension
#define soap_read_PointerTons2__EventStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EventStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__NotificationMessageHolderType
#define SOAP_TYPE_PointerTons3__NotificationMessageHolderType (1372)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__NotificationMessageHolderType(struct soap*, const char *, int, ns3__NotificationMessageHolderType *const*, const char *);
SOAP_FMAC3 ns3__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTons3__NotificationMessageHolderType(struct soap*, const char*, ns3__NotificationMessageHolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__NotificationMessageHolderType
#define soap_write_PointerTons3__NotificationMessageHolderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__NotificationMessageHolderType(soap, data), 0) || soap_put_PointerTons3__NotificationMessageHolderType(soap, data, "ns3:NotificationMessageHolderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTons3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType **, const char*, const char*);

#ifndef soap_read_PointerTons3__NotificationMessageHolderType
#define soap_read_PointerTons3__NotificationMessageHolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__NotificationMessageHolderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns2__union_PTZStream
#define SOAP_TYPE_PointerTo__ns2__union_PTZStream (1370)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns2__union_PTZStream(struct soap*, __ns2__union_PTZStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns2__union_PTZStream(struct soap*, const char *, int, __ns2__union_PTZStream *const*, const char *);
SOAP_FMAC3 __ns2__union_PTZStream ** SOAP_FMAC4 soap_in_PointerTo__ns2__union_PTZStream(struct soap*, const char*, __ns2__union_PTZStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns2__union_PTZStream(struct soap*, __ns2__union_PTZStream *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns2__union_PTZStream
#define soap_write_PointerTo__ns2__union_PTZStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__ns2__union_PTZStream(soap, data), 0) || soap_put_PointerTo__ns2__union_PTZStream(soap, data, "-ns2:union-PTZStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_PTZStream ** SOAP_FMAC4 soap_get_PointerTo__ns2__union_PTZStream(struct soap*, __ns2__union_PTZStream **, const char*, const char*);

#ifndef soap_read_PointerTo__ns2__union_PTZStream
#define soap_read_PointerTo__ns2__union_PTZStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns2__union_PTZStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZStreamExtension
#define SOAP_TYPE_PointerTons2__PTZStreamExtension (1368)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZStreamExtension(struct soap*, ns2__PTZStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZStreamExtension(struct soap*, const char *, int, ns2__PTZStreamExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZStreamExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZStreamExtension(struct soap*, const char*, ns2__PTZStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZStreamExtension(struct soap*, ns2__PTZStreamExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZStreamExtension
#define soap_write_PointerTons2__PTZStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZStreamExtension(soap, data), 0) || soap_put_PointerTons2__PTZStreamExtension(soap, data, "ns2:PTZStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStreamExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZStreamExtension(struct soap*, ns2__PTZStreamExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZStreamExtension
#define soap_read_PointerTons2__PTZStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns2__union_VideoAnalyticsStream
#define SOAP_TYPE_PointerTo__ns2__union_VideoAnalyticsStream (1366)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns2__union_VideoAnalyticsStream(struct soap*, __ns2__union_VideoAnalyticsStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns2__union_VideoAnalyticsStream(struct soap*, const char *, int, __ns2__union_VideoAnalyticsStream *const*, const char *);
SOAP_FMAC3 __ns2__union_VideoAnalyticsStream ** SOAP_FMAC4 soap_in_PointerTo__ns2__union_VideoAnalyticsStream(struct soap*, const char*, __ns2__union_VideoAnalyticsStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns2__union_VideoAnalyticsStream(struct soap*, __ns2__union_VideoAnalyticsStream *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns2__union_VideoAnalyticsStream
#define soap_write_PointerTo__ns2__union_VideoAnalyticsStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__ns2__union_VideoAnalyticsStream(soap, data), 0) || soap_put_PointerTo__ns2__union_VideoAnalyticsStream(soap, data, "-ns2:union-VideoAnalyticsStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_VideoAnalyticsStream ** SOAP_FMAC4 soap_get_PointerTo__ns2__union_VideoAnalyticsStream(struct soap*, __ns2__union_VideoAnalyticsStream **, const char*, const char*);

#ifndef soap_read_PointerTo__ns2__union_VideoAnalyticsStream
#define soap_read_PointerTo__ns2__union_VideoAnalyticsStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns2__union_VideoAnalyticsStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoAnalyticsStreamExtension
#define SOAP_TYPE_PointerTons2__VideoAnalyticsStreamExtension (1364)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoAnalyticsStreamExtension(struct soap*, ns2__VideoAnalyticsStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoAnalyticsStreamExtension(struct soap*, const char *, int, ns2__VideoAnalyticsStreamExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoAnalyticsStreamExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoAnalyticsStreamExtension(struct soap*, const char*, ns2__VideoAnalyticsStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoAnalyticsStreamExtension(struct soap*, ns2__VideoAnalyticsStreamExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoAnalyticsStreamExtension
#define soap_write_PointerTons2__VideoAnalyticsStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoAnalyticsStreamExtension(soap, data), 0) || soap_put_PointerTons2__VideoAnalyticsStreamExtension(soap, data, "ns2:VideoAnalyticsStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAnalyticsStreamExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoAnalyticsStreamExtension(struct soap*, ns2__VideoAnalyticsStreamExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoAnalyticsStreamExtension
#define soap_read_PointerTons2__VideoAnalyticsStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoAnalyticsStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Frame
#define SOAP_TYPE_PointerTons2__Frame (1363)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Frame(struct soap*, ns2__Frame *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Frame(struct soap*, const char *, int, ns2__Frame *const*, const char *);
SOAP_FMAC3 ns2__Frame ** SOAP_FMAC4 soap_in_PointerTons2__Frame(struct soap*, const char*, ns2__Frame **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Frame(struct soap*, ns2__Frame *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Frame
#define soap_write_PointerTons2__Frame(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Frame(soap, data), 0) || soap_put_PointerTons2__Frame(soap, data, "ns2:Frame", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Frame ** SOAP_FMAC4 soap_get_PointerTons2__Frame(struct soap*, ns2__Frame **, const char*, const char*);

#ifndef soap_read_PointerTons2__Frame
#define soap_read_PointerTons2__Frame(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Frame(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioAnalyticsStreamExtension
#define SOAP_TYPE_PointerTons2__AudioAnalyticsStreamExtension (1361)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioAnalyticsStreamExtension(struct soap*, ns2__AudioAnalyticsStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioAnalyticsStreamExtension(struct soap*, const char *, int, ns2__AudioAnalyticsStreamExtension *const*, const char *);
SOAP_FMAC3 ns2__AudioAnalyticsStreamExtension ** SOAP_FMAC4 soap_in_PointerTons2__AudioAnalyticsStreamExtension(struct soap*, const char*, ns2__AudioAnalyticsStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioAnalyticsStreamExtension(struct soap*, ns2__AudioAnalyticsStreamExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioAnalyticsStreamExtension
#define soap_write_PointerTons2__AudioAnalyticsStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioAnalyticsStreamExtension(soap, data), 0) || soap_put_PointerTons2__AudioAnalyticsStreamExtension(soap, data, "ns2:AudioAnalyticsStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioAnalyticsStreamExtension ** SOAP_FMAC4 soap_get_PointerTons2__AudioAnalyticsStreamExtension(struct soap*, ns2__AudioAnalyticsStreamExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioAnalyticsStreamExtension
#define soap_read_PointerTons2__AudioAnalyticsStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioAnalyticsStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioDescriptor
#define SOAP_TYPE_PointerTons2__AudioDescriptor (1359)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioDescriptor(struct soap*, ns2__AudioDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioDescriptor(struct soap*, const char *, int, ns2__AudioDescriptor *const*, const char *);
SOAP_FMAC3 ns2__AudioDescriptor ** SOAP_FMAC4 soap_in_PointerTons2__AudioDescriptor(struct soap*, const char*, ns2__AudioDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioDescriptor(struct soap*, ns2__AudioDescriptor *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioDescriptor
#define soap_write_PointerTons2__AudioDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioDescriptor(soap, data), 0) || soap_put_PointerTons2__AudioDescriptor(soap, data, "ns2:AudioDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDescriptor ** SOAP_FMAC4 soap_get_PointerTons2__AudioDescriptor(struct soap*, ns2__AudioDescriptor **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioDescriptor
#define soap_read_PointerTons2__AudioDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataStreamExtension2
#define SOAP_TYPE_PointerTons2__MetadataStreamExtension2 (1358)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataStreamExtension2(struct soap*, ns2__MetadataStreamExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataStreamExtension2(struct soap*, const char *, int, ns2__MetadataStreamExtension2 *const*, const char *);
SOAP_FMAC3 ns2__MetadataStreamExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__MetadataStreamExtension2(struct soap*, const char*, ns2__MetadataStreamExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataStreamExtension2(struct soap*, ns2__MetadataStreamExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataStreamExtension2
#define soap_write_PointerTons2__MetadataStreamExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataStreamExtension2(soap, data), 0) || soap_put_PointerTons2__MetadataStreamExtension2(soap, data, "ns2:MetadataStreamExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataStreamExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__MetadataStreamExtension2(struct soap*, ns2__MetadataStreamExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataStreamExtension2
#define soap_read_PointerTons2__MetadataStreamExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataStreamExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioAnalyticsStream
#define SOAP_TYPE_PointerTons2__AudioAnalyticsStream (1357)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioAnalyticsStream(struct soap*, ns2__AudioAnalyticsStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioAnalyticsStream(struct soap*, const char *, int, ns2__AudioAnalyticsStream *const*, const char *);
SOAP_FMAC3 ns2__AudioAnalyticsStream ** SOAP_FMAC4 soap_in_PointerTons2__AudioAnalyticsStream(struct soap*, const char*, ns2__AudioAnalyticsStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioAnalyticsStream(struct soap*, ns2__AudioAnalyticsStream *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioAnalyticsStream
#define soap_write_PointerTons2__AudioAnalyticsStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioAnalyticsStream(soap, data), 0) || soap_put_PointerTons2__AudioAnalyticsStream(soap, data, "ns2:AudioAnalyticsStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioAnalyticsStream ** SOAP_FMAC4 soap_get_PointerTons2__AudioAnalyticsStream(struct soap*, ns2__AudioAnalyticsStream **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioAnalyticsStream
#define soap_read_PointerTons2__AudioAnalyticsStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioAnalyticsStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns2__union_MetadataStream
#define SOAP_TYPE_PointerTo__ns2__union_MetadataStream (1356)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns2__union_MetadataStream(struct soap*, __ns2__union_MetadataStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns2__union_MetadataStream(struct soap*, const char *, int, __ns2__union_MetadataStream *const*, const char *);
SOAP_FMAC3 __ns2__union_MetadataStream ** SOAP_FMAC4 soap_in_PointerTo__ns2__union_MetadataStream(struct soap*, const char*, __ns2__union_MetadataStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns2__union_MetadataStream(struct soap*, __ns2__union_MetadataStream *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns2__union_MetadataStream
#define soap_write_PointerTo__ns2__union_MetadataStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__ns2__union_MetadataStream(soap, data), 0) || soap_put_PointerTo__ns2__union_MetadataStream(soap, data, "-ns2:union-MetadataStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns2__union_MetadataStream ** SOAP_FMAC4 soap_get_PointerTo__ns2__union_MetadataStream(struct soap*, __ns2__union_MetadataStream **, const char*, const char*);

#ifndef soap_read_PointerTo__ns2__union_MetadataStream
#define soap_read_PointerTo__ns2__union_MetadataStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns2__union_MetadataStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataStreamExtension
#define SOAP_TYPE_PointerTons2__MetadataStreamExtension (1354)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataStreamExtension(struct soap*, ns2__MetadataStreamExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataStreamExtension(struct soap*, const char *, int, ns2__MetadataStreamExtension *const*, const char *);
SOAP_FMAC3 ns2__MetadataStreamExtension ** SOAP_FMAC4 soap_in_PointerTons2__MetadataStreamExtension(struct soap*, const char*, ns2__MetadataStreamExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataStreamExtension(struct soap*, ns2__MetadataStreamExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataStreamExtension
#define soap_write_PointerTons2__MetadataStreamExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataStreamExtension(soap, data), 0) || soap_put_PointerTons2__MetadataStreamExtension(soap, data, "ns2:MetadataStreamExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataStreamExtension ** SOAP_FMAC4 soap_get_PointerTons2__MetadataStreamExtension(struct soap*, ns2__MetadataStreamExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataStreamExtension
#define soap_read_PointerTons2__MetadataStreamExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataStreamExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EventStream
#define SOAP_TYPE_PointerTons2__EventStream (1353)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EventStream(struct soap*, ns2__EventStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EventStream(struct soap*, const char *, int, ns2__EventStream *const*, const char *);
SOAP_FMAC3 ns2__EventStream ** SOAP_FMAC4 soap_in_PointerTons2__EventStream(struct soap*, const char*, ns2__EventStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EventStream(struct soap*, ns2__EventStream *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EventStream
#define soap_write_PointerTons2__EventStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EventStream(soap, data), 0) || soap_put_PointerTons2__EventStream(soap, data, "ns2:EventStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventStream ** SOAP_FMAC4 soap_get_PointerTons2__EventStream(struct soap*, ns2__EventStream **, const char*, const char*);

#ifndef soap_read_PointerTons2__EventStream
#define soap_read_PointerTons2__EventStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EventStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZStream
#define SOAP_TYPE_PointerTons2__PTZStream (1352)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZStream(struct soap*, ns2__PTZStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZStream(struct soap*, const char *, int, ns2__PTZStream *const*, const char *);
SOAP_FMAC3 ns2__PTZStream ** SOAP_FMAC4 soap_in_PointerTons2__PTZStream(struct soap*, const char*, ns2__PTZStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZStream(struct soap*, ns2__PTZStream *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZStream
#define soap_write_PointerTons2__PTZStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZStream(soap, data), 0) || soap_put_PointerTons2__PTZStream(soap, data, "ns2:PTZStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStream ** SOAP_FMAC4 soap_get_PointerTons2__PTZStream(struct soap*, ns2__PTZStream **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZStream
#define soap_read_PointerTons2__PTZStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoAnalyticsStream
#define SOAP_TYPE_PointerTons2__VideoAnalyticsStream (1351)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoAnalyticsStream(struct soap*, ns2__VideoAnalyticsStream *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoAnalyticsStream(struct soap*, const char *, int, ns2__VideoAnalyticsStream *const*, const char *);
SOAP_FMAC3 ns2__VideoAnalyticsStream ** SOAP_FMAC4 soap_in_PointerTons2__VideoAnalyticsStream(struct soap*, const char*, ns2__VideoAnalyticsStream **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoAnalyticsStream(struct soap*, ns2__VideoAnalyticsStream *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoAnalyticsStream
#define soap_write_PointerTons2__VideoAnalyticsStream(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoAnalyticsStream(soap, data), 0) || soap_put_PointerTons2__VideoAnalyticsStream(soap, data, "ns2:VideoAnalyticsStream", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAnalyticsStream ** SOAP_FMAC4 soap_get_PointerTons2__VideoAnalyticsStream(struct soap*, ns2__VideoAnalyticsStream **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoAnalyticsStream
#define soap_read_PointerTons2__VideoAnalyticsStream(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoAnalyticsStream(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MotionExpression
#define SOAP_TYPE_PointerTons2__MotionExpression (1349)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MotionExpression(struct soap*, ns2__MotionExpression *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MotionExpression(struct soap*, const char *, int, ns2__MotionExpression *const*, const char *);
SOAP_FMAC3 ns2__MotionExpression ** SOAP_FMAC4 soap_in_PointerTons2__MotionExpression(struct soap*, const char*, ns2__MotionExpression **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MotionExpression(struct soap*, ns2__MotionExpression *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MotionExpression
#define soap_write_PointerTons2__MotionExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MotionExpression(soap, data), 0) || soap_put_PointerTons2__MotionExpression(soap, data, "ns2:MotionExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MotionExpression ** SOAP_FMAC4 soap_get_PointerTons2__MotionExpression(struct soap*, ns2__MotionExpression **, const char*, const char*);

#ifndef soap_read_PointerTons2__MotionExpression
#define soap_read_PointerTons2__MotionExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MotionExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PolylineArray
#define SOAP_TYPE_PointerTons2__PolylineArray (1348)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PolylineArray(struct soap*, ns2__PolylineArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PolylineArray(struct soap*, const char *, int, ns2__PolylineArray *const*, const char *);
SOAP_FMAC3 ns2__PolylineArray ** SOAP_FMAC4 soap_in_PointerTons2__PolylineArray(struct soap*, const char*, ns2__PolylineArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PolylineArray(struct soap*, ns2__PolylineArray *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PolylineArray
#define soap_write_PointerTons2__PolylineArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PolylineArray(soap, data), 0) || soap_put_PointerTons2__PolylineArray(soap, data, "ns2:PolylineArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PolylineArray ** SOAP_FMAC4 soap_get_PointerTons2__PolylineArray(struct soap*, ns2__PolylineArray **, const char*, const char*);

#ifndef soap_read_PointerTons2__PolylineArray
#define soap_read_PointerTons2__PolylineArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PolylineArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PolylineArrayExtension
#define SOAP_TYPE_PointerTons2__PolylineArrayExtension (1347)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PolylineArrayExtension(struct soap*, ns2__PolylineArrayExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PolylineArrayExtension(struct soap*, const char *, int, ns2__PolylineArrayExtension *const*, const char *);
SOAP_FMAC3 ns2__PolylineArrayExtension ** SOAP_FMAC4 soap_in_PointerTons2__PolylineArrayExtension(struct soap*, const char*, ns2__PolylineArrayExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PolylineArrayExtension(struct soap*, ns2__PolylineArrayExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PolylineArrayExtension
#define soap_write_PointerTons2__PolylineArrayExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PolylineArrayExtension(soap, data), 0) || soap_put_PointerTons2__PolylineArrayExtension(soap, data, "ns2:PolylineArrayExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PolylineArrayExtension ** SOAP_FMAC4 soap_get_PointerTons2__PolylineArrayExtension(struct soap*, ns2__PolylineArrayExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PolylineArrayExtension
#define soap_read_PointerTons2__PolylineArrayExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PolylineArrayExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Polyline
#define SOAP_TYPE_PointerTons2__Polyline (1345)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Polyline(struct soap*, ns2__Polyline *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Polyline(struct soap*, const char *, int, ns2__Polyline *const*, const char *);
SOAP_FMAC3 ns2__Polyline ** SOAP_FMAC4 soap_in_PointerTons2__Polyline(struct soap*, const char*, ns2__Polyline **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Polyline(struct soap*, ns2__Polyline *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Polyline
#define soap_write_PointerTons2__Polyline(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Polyline(soap, data), 0) || soap_put_PointerTons2__Polyline(soap, data, "ns2:Polyline", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Polyline ** SOAP_FMAC4 soap_get_PointerTons2__Polyline(struct soap*, ns2__Polyline **, const char*, const char*);

#ifndef soap_read_PointerTons2__Polyline
#define soap_read_PointerTons2__Polyline(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Polyline(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_PointerTons2__SupportedAnalyticsModulesExtension (1344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SupportedAnalyticsModulesExtension(struct soap*, ns2__SupportedAnalyticsModulesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SupportedAnalyticsModulesExtension(struct soap*, const char *, int, ns2__SupportedAnalyticsModulesExtension *const*, const char *);
SOAP_FMAC3 ns2__SupportedAnalyticsModulesExtension ** SOAP_FMAC4 soap_in_PointerTons2__SupportedAnalyticsModulesExtension(struct soap*, const char*, ns2__SupportedAnalyticsModulesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SupportedAnalyticsModulesExtension(struct soap*, ns2__SupportedAnalyticsModulesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SupportedAnalyticsModulesExtension
#define soap_write_PointerTons2__SupportedAnalyticsModulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SupportedAnalyticsModulesExtension(soap, data), 0) || soap_put_PointerTons2__SupportedAnalyticsModulesExtension(soap, data, "ns2:SupportedAnalyticsModulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportedAnalyticsModulesExtension ** SOAP_FMAC4 soap_get_PointerTons2__SupportedAnalyticsModulesExtension(struct soap*, ns2__SupportedAnalyticsModulesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SupportedAnalyticsModulesExtension
#define soap_read_PointerTons2__SupportedAnalyticsModulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SupportedAnalyticsModulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SupportedRulesExtension
#define SOAP_TYPE_PointerTons2__SupportedRulesExtension (1343)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SupportedRulesExtension(struct soap*, ns2__SupportedRulesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SupportedRulesExtension(struct soap*, const char *, int, ns2__SupportedRulesExtension *const*, const char *);
SOAP_FMAC3 ns2__SupportedRulesExtension ** SOAP_FMAC4 soap_in_PointerTons2__SupportedRulesExtension(struct soap*, const char*, ns2__SupportedRulesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SupportedRulesExtension(struct soap*, ns2__SupportedRulesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SupportedRulesExtension
#define soap_write_PointerTons2__SupportedRulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SupportedRulesExtension(soap, data), 0) || soap_put_PointerTons2__SupportedRulesExtension(soap, data, "ns2:SupportedRulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SupportedRulesExtension ** SOAP_FMAC4 soap_get_PointerTons2__SupportedRulesExtension(struct soap*, ns2__SupportedRulesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SupportedRulesExtension
#define soap_read_PointerTons2__SupportedRulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SupportedRulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ConfigDescription
#define SOAP_TYPE_PointerTons2__ConfigDescription (1341)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ConfigDescription(struct soap*, ns2__ConfigDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ConfigDescription(struct soap*, const char *, int, ns2__ConfigDescription *const*, const char *);
SOAP_FMAC3 ns2__ConfigDescription ** SOAP_FMAC4 soap_in_PointerTons2__ConfigDescription(struct soap*, const char*, ns2__ConfigDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ConfigDescription(struct soap*, ns2__ConfigDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ConfigDescription
#define soap_write_PointerTons2__ConfigDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ConfigDescription(soap, data), 0) || soap_put_PointerTons2__ConfigDescription(soap, data, "ns2:ConfigDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ConfigDescription ** SOAP_FMAC4 soap_get_PointerTons2__ConfigDescription(struct soap*, ns2__ConfigDescription **, const char*, const char*);

#ifndef soap_read_PointerTons2__ConfigDescription
#define soap_read_PointerTons2__ConfigDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ConfigDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ConfigDescriptionExtension
#define SOAP_TYPE_PointerTons2__ConfigDescriptionExtension (1340)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ConfigDescriptionExtension(struct soap*, ns2__ConfigDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ConfigDescriptionExtension(struct soap*, const char *, int, ns2__ConfigDescriptionExtension *const*, const char *);
SOAP_FMAC3 ns2__ConfigDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTons2__ConfigDescriptionExtension(struct soap*, const char*, ns2__ConfigDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ConfigDescriptionExtension(struct soap*, ns2__ConfigDescriptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ConfigDescriptionExtension
#define soap_write_PointerTons2__ConfigDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ConfigDescriptionExtension(soap, data), 0) || soap_put_PointerTons2__ConfigDescriptionExtension(soap, data, "ns2:ConfigDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ConfigDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTons2__ConfigDescriptionExtension(struct soap*, ns2__ConfigDescriptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ConfigDescriptionExtension
#define soap_read_PointerTons2__ConfigDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ConfigDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages (1339)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, std::vector<_ns2__ConfigDescription_Messages >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, const char *, int, std::vector<_ns2__ConfigDescription_Messages >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ConfigDescription_Messages >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, const char*, std::vector<_ns2__ConfigDescription_Messages >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, std::vector<_ns2__ConfigDescription_Messages >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ConfigDescription_Messages >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, std::vector<_ns2__ConfigDescription_Messages >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ConfigDescription_Messages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ItemList
#define SOAP_TYPE_PointerTons2__ItemList (1336)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ItemList(struct soap*, ns2__ItemList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ItemList(struct soap*, const char *, int, ns2__ItemList *const*, const char *);
SOAP_FMAC3 ns2__ItemList ** SOAP_FMAC4 soap_in_PointerTons2__ItemList(struct soap*, const char*, ns2__ItemList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ItemList(struct soap*, ns2__ItemList *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ItemList
#define soap_write_PointerTons2__ItemList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ItemList(soap, data), 0) || soap_put_PointerTons2__ItemList(soap, data, "ns2:ItemList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemList ** SOAP_FMAC4 soap_get_PointerTons2__ItemList(struct soap*, ns2__ItemList **, const char*, const char*);

#ifndef soap_read_PointerTons2__ItemList
#define soap_read_PointerTons2__ItemList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ItemList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RuleEngineConfigurationExtension
#define SOAP_TYPE_PointerTons2__RuleEngineConfigurationExtension (1335)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RuleEngineConfigurationExtension(struct soap*, ns2__RuleEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RuleEngineConfigurationExtension(struct soap*, const char *, int, ns2__RuleEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__RuleEngineConfigurationExtension(struct soap*, const char*, ns2__RuleEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RuleEngineConfigurationExtension(struct soap*, ns2__RuleEngineConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RuleEngineConfigurationExtension
#define soap_write_PointerTons2__RuleEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RuleEngineConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__RuleEngineConfigurationExtension(soap, data, "ns2:RuleEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__RuleEngineConfigurationExtension(struct soap*, ns2__RuleEngineConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RuleEngineConfigurationExtension
#define soap_read_PointerTons2__RuleEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RuleEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_PointerTons2__AnalyticsEngineConfigurationExtension (1334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsEngineConfigurationExtension(struct soap*, ns2__AnalyticsEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsEngineConfigurationExtension(struct soap*, const char *, int, ns2__AnalyticsEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsEngineConfigurationExtension(struct soap*, const char*, ns2__AnalyticsEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsEngineConfigurationExtension(struct soap*, ns2__AnalyticsEngineConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsEngineConfigurationExtension
#define soap_write_PointerTons2__AnalyticsEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsEngineConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__AnalyticsEngineConfigurationExtension(soap, data, "ns2:AnalyticsEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsEngineConfigurationExtension(struct soap*, ns2__AnalyticsEngineConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsEngineConfigurationExtension
#define soap_read_PointerTons2__AnalyticsEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Config
#define SOAP_TYPE_PointerTons2__Config (1332)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Config(struct soap*, ns2__Config *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Config(struct soap*, const char *, int, ns2__Config *const*, const char *);
SOAP_FMAC3 ns2__Config ** SOAP_FMAC4 soap_in_PointerTons2__Config(struct soap*, const char*, ns2__Config **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Config(struct soap*, ns2__Config *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Config
#define soap_write_PointerTons2__Config(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Config(soap, data), 0) || soap_put_PointerTons2__Config(soap, data, "ns2:Config", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Config ** SOAP_FMAC4 soap_get_PointerTons2__Config(struct soap*, ns2__Config **, const char*, const char*);

#ifndef soap_read_PointerTons2__Config
#define soap_read_PointerTons2__Config(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Config(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ObjectTreeExtension
#define SOAP_TYPE_PointerTons2__ObjectTreeExtension (1331)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ObjectTreeExtension(struct soap*, ns2__ObjectTreeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ObjectTreeExtension(struct soap*, const char *, int, ns2__ObjectTreeExtension *const*, const char *);
SOAP_FMAC3 ns2__ObjectTreeExtension ** SOAP_FMAC4 soap_in_PointerTons2__ObjectTreeExtension(struct soap*, const char*, ns2__ObjectTreeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ObjectTreeExtension(struct soap*, ns2__ObjectTreeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ObjectTreeExtension
#define soap_write_PointerTons2__ObjectTreeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ObjectTreeExtension(soap, data), 0) || soap_put_PointerTons2__ObjectTreeExtension(soap, data, "ns2:ObjectTreeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectTreeExtension ** SOAP_FMAC4 soap_get_PointerTons2__ObjectTreeExtension(struct soap*, ns2__ObjectTreeExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ObjectTreeExtension
#define soap_read_PointerTons2__ObjectTreeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ObjectTreeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Merge
#define SOAP_TYPE_PointerTons2__Merge (1329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Merge(struct soap*, ns2__Merge *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Merge(struct soap*, const char *, int, ns2__Merge *const*, const char *);
SOAP_FMAC3 ns2__Merge ** SOAP_FMAC4 soap_in_PointerTons2__Merge(struct soap*, const char*, ns2__Merge **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Merge(struct soap*, ns2__Merge *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Merge
#define soap_write_PointerTons2__Merge(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Merge(soap, data), 0) || soap_put_PointerTons2__Merge(soap, data, "ns2:Merge", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Merge ** SOAP_FMAC4 soap_get_PointerTons2__Merge(struct soap*, ns2__Merge **, const char*, const char*);

#ifndef soap_read_PointerTons2__Merge
#define soap_read_PointerTons2__Merge(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Merge(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Split
#define SOAP_TYPE_PointerTons2__Split (1327)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Split(struct soap*, ns2__Split *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Split(struct soap*, const char *, int, ns2__Split *const*, const char *);
SOAP_FMAC3 ns2__Split ** SOAP_FMAC4 soap_in_PointerTons2__Split(struct soap*, const char*, ns2__Split **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Split(struct soap*, ns2__Split *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Split
#define soap_write_PointerTons2__Split(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Split(soap, data), 0) || soap_put_PointerTons2__Split(soap, data, "ns2:Split", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Split ** SOAP_FMAC4 soap_get_PointerTons2__Split(struct soap*, ns2__Split **, const char*, const char*);

#ifndef soap_read_PointerTons2__Split
#define soap_read_PointerTons2__Split(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Split(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Rename
#define SOAP_TYPE_PointerTons2__Rename (1325)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Rename(struct soap*, ns2__Rename *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Rename(struct soap*, const char *, int, ns2__Rename *const*, const char *);
SOAP_FMAC3 ns2__Rename ** SOAP_FMAC4 soap_in_PointerTons2__Rename(struct soap*, const char*, ns2__Rename **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Rename(struct soap*, ns2__Rename *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Rename
#define soap_write_PointerTons2__Rename(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Rename(soap, data), 0) || soap_put_PointerTons2__Rename(soap, data, "ns2:Rename", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Rename ** SOAP_FMAC4 soap_get_PointerTons2__Rename(struct soap*, ns2__Rename **, const char*, const char*);

#ifndef soap_read_PointerTons2__Rename
#define soap_read_PointerTons2__Rename(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Rename(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__BehaviourExtension
#define SOAP_TYPE_PointerTons2__BehaviourExtension (1324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BehaviourExtension(struct soap*, ns2__BehaviourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BehaviourExtension(struct soap*, const char *, int, ns2__BehaviourExtension *const*, const char *);
SOAP_FMAC3 ns2__BehaviourExtension ** SOAP_FMAC4 soap_in_PointerTons2__BehaviourExtension(struct soap*, const char*, ns2__BehaviourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BehaviourExtension(struct soap*, ns2__BehaviourExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__BehaviourExtension
#define soap_write_PointerTons2__BehaviourExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__BehaviourExtension(soap, data), 0) || soap_put_PointerTons2__BehaviourExtension(soap, data, "ns2:BehaviourExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BehaviourExtension ** SOAP_FMAC4 soap_get_PointerTons2__BehaviourExtension(struct soap*, ns2__BehaviourExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__BehaviourExtension
#define soap_read_PointerTons2__BehaviourExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__BehaviourExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__Behaviour_Idle
#define SOAP_TYPE_PointerTo_ns2__Behaviour_Idle (1323)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__Behaviour_Idle(struct soap*, _ns2__Behaviour_Idle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__Behaviour_Idle(struct soap*, const char *, int, _ns2__Behaviour_Idle *const*, const char *);
SOAP_FMAC3 _ns2__Behaviour_Idle ** SOAP_FMAC4 soap_in_PointerTo_ns2__Behaviour_Idle(struct soap*, const char*, _ns2__Behaviour_Idle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__Behaviour_Idle(struct soap*, _ns2__Behaviour_Idle *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__Behaviour_Idle
#define soap_write_PointerTo_ns2__Behaviour_Idle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__Behaviour_Idle(soap, data), 0) || soap_put_PointerTo_ns2__Behaviour_Idle(soap, data, "ns2:Behaviour-Idle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__Behaviour_Idle ** SOAP_FMAC4 soap_get_PointerTo_ns2__Behaviour_Idle(struct soap*, _ns2__Behaviour_Idle **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__Behaviour_Idle
#define soap_read_PointerTo_ns2__Behaviour_Idle(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__Behaviour_Idle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__Behaviour_Removed
#define SOAP_TYPE_PointerTo_ns2__Behaviour_Removed (1321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__Behaviour_Removed(struct soap*, _ns2__Behaviour_Removed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__Behaviour_Removed(struct soap*, const char *, int, _ns2__Behaviour_Removed *const*, const char *);
SOAP_FMAC3 _ns2__Behaviour_Removed ** SOAP_FMAC4 soap_in_PointerTo_ns2__Behaviour_Removed(struct soap*, const char*, _ns2__Behaviour_Removed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__Behaviour_Removed(struct soap*, _ns2__Behaviour_Removed *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__Behaviour_Removed
#define soap_write_PointerTo_ns2__Behaviour_Removed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__Behaviour_Removed(soap, data), 0) || soap_put_PointerTo_ns2__Behaviour_Removed(soap, data, "ns2:Behaviour-Removed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__Behaviour_Removed ** SOAP_FMAC4 soap_get_PointerTo_ns2__Behaviour_Removed(struct soap*, _ns2__Behaviour_Removed **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__Behaviour_Removed
#define soap_read_PointerTo_ns2__Behaviour_Removed(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__Behaviour_Removed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (1319)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__integer
#define soap_write_PointerToxsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__integer(soap, data), 0) || soap_put_PointerToxsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__integer
#define soap_read_PointerToxsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ObjectId
#define SOAP_TYPE_PointerTons2__ObjectId (1317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ObjectId(struct soap*, ns2__ObjectId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ObjectId(struct soap*, const char *, int, ns2__ObjectId *const*, const char *);
SOAP_FMAC3 ns2__ObjectId ** SOAP_FMAC4 soap_in_PointerTons2__ObjectId(struct soap*, const char*, ns2__ObjectId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ObjectId(struct soap*, ns2__ObjectId *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ObjectId
#define soap_write_PointerTons2__ObjectId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ObjectId(soap, data), 0) || soap_put_PointerTons2__ObjectId(soap, data, "ns2:ObjectId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectId ** SOAP_FMAC4 soap_get_PointerTons2__ObjectId(struct soap*, ns2__ObjectId **, const char*, const char*);

#ifndef soap_read_PointerTons2__ObjectId
#define soap_read_PointerTons2__ObjectId(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ObjectId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FrameExtension2
#define SOAP_TYPE_PointerTons2__FrameExtension2 (1316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FrameExtension2(struct soap*, ns2__FrameExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FrameExtension2(struct soap*, const char *, int, ns2__FrameExtension2 *const*, const char *);
SOAP_FMAC3 ns2__FrameExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__FrameExtension2(struct soap*, const char*, ns2__FrameExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FrameExtension2(struct soap*, ns2__FrameExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FrameExtension2
#define soap_write_PointerTons2__FrameExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FrameExtension2(soap, data), 0) || soap_put_PointerTons2__FrameExtension2(soap, data, "ns2:FrameExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FrameExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__FrameExtension2(struct soap*, ns2__FrameExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__FrameExtension2
#define soap_read_PointerTons2__FrameExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FrameExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MotionInCells
#define SOAP_TYPE_PointerTons2__MotionInCells (1315)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MotionInCells(struct soap*, ns2__MotionInCells *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MotionInCells(struct soap*, const char *, int, ns2__MotionInCells *const*, const char *);
SOAP_FMAC3 ns2__MotionInCells ** SOAP_FMAC4 soap_in_PointerTons2__MotionInCells(struct soap*, const char*, ns2__MotionInCells **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MotionInCells(struct soap*, ns2__MotionInCells *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MotionInCells
#define soap_write_PointerTons2__MotionInCells(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MotionInCells(soap, data), 0) || soap_put_PointerTons2__MotionInCells(soap, data, "ns2:MotionInCells", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MotionInCells ** SOAP_FMAC4 soap_get_PointerTons2__MotionInCells(struct soap*, ns2__MotionInCells **, const char*, const char*);

#ifndef soap_read_PointerTons2__MotionInCells
#define soap_read_PointerTons2__MotionInCells(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MotionInCells(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FrameExtension
#define SOAP_TYPE_PointerTons2__FrameExtension (1314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FrameExtension(struct soap*, ns2__FrameExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FrameExtension(struct soap*, const char *, int, ns2__FrameExtension *const*, const char *);
SOAP_FMAC3 ns2__FrameExtension ** SOAP_FMAC4 soap_in_PointerTons2__FrameExtension(struct soap*, const char*, ns2__FrameExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FrameExtension(struct soap*, ns2__FrameExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FrameExtension
#define soap_write_PointerTons2__FrameExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FrameExtension(soap, data), 0) || soap_put_PointerTons2__FrameExtension(soap, data, "ns2:FrameExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FrameExtension ** SOAP_FMAC4 soap_get_PointerTons2__FrameExtension(struct soap*, ns2__FrameExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__FrameExtension
#define soap_read_PointerTons2__FrameExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FrameExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ObjectTree
#define SOAP_TYPE_PointerTons2__ObjectTree (1313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ObjectTree(struct soap*, ns2__ObjectTree *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ObjectTree(struct soap*, const char *, int, ns2__ObjectTree *const*, const char *);
SOAP_FMAC3 ns2__ObjectTree ** SOAP_FMAC4 soap_in_PointerTons2__ObjectTree(struct soap*, const char*, ns2__ObjectTree **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ObjectTree(struct soap*, ns2__ObjectTree *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ObjectTree
#define soap_write_PointerTons2__ObjectTree(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ObjectTree(soap, data), 0) || soap_put_PointerTons2__ObjectTree(soap, data, "ns2:ObjectTree", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ObjectTree ** SOAP_FMAC4 soap_get_PointerTons2__ObjectTree(struct soap*, ns2__ObjectTree **, const char*, const char*);

#ifndef soap_read_PointerTons2__ObjectTree
#define soap_read_PointerTons2__ObjectTree(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ObjectTree(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Object
#define SOAP_TYPE_PointerTons2__Object (1311)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Object(struct soap*, ns2__Object *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Object(struct soap*, const char *, int, ns2__Object *const*, const char *);
SOAP_FMAC3 ns2__Object ** SOAP_FMAC4 soap_in_PointerTons2__Object(struct soap*, const char*, ns2__Object **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Object(struct soap*, ns2__Object *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Object
#define soap_write_PointerTons2__Object(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Object(soap, data), 0) || soap_put_PointerTons2__Object(soap, data, "ns2:Object", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Object ** SOAP_FMAC4 soap_get_PointerTons2__Object(struct soap*, ns2__Object **, const char*, const char*);

#ifndef soap_read_PointerTons2__Object
#define soap_read_PointerTons2__Object(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Object(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZStatus
#define SOAP_TYPE_PointerTons2__PTZStatus (1310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZStatus(struct soap*, ns2__PTZStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZStatus(struct soap*, const char *, int, ns2__PTZStatus *const*, const char *);
SOAP_FMAC3 ns2__PTZStatus ** SOAP_FMAC4 soap_in_PointerTons2__PTZStatus(struct soap*, const char*, ns2__PTZStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZStatus(struct soap*, ns2__PTZStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZStatus
#define soap_write_PointerTons2__PTZStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZStatus(soap, data), 0) || soap_put_PointerTons2__PTZStatus(soap, data, "ns2:PTZStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStatus ** SOAP_FMAC4 soap_get_PointerTons2__PTZStatus(struct soap*, ns2__PTZStatus **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZStatus
#define soap_read_PointerTons2__PTZStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TransformationExtension
#define SOAP_TYPE_PointerTons2__TransformationExtension (1309)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TransformationExtension(struct soap*, ns2__TransformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TransformationExtension(struct soap*, const char *, int, ns2__TransformationExtension *const*, const char *);
SOAP_FMAC3 ns2__TransformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__TransformationExtension(struct soap*, const char*, ns2__TransformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TransformationExtension(struct soap*, ns2__TransformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TransformationExtension
#define soap_write_PointerTons2__TransformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TransformationExtension(soap, data), 0) || soap_put_PointerTons2__TransformationExtension(soap, data, "ns2:TransformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TransformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__TransformationExtension(struct soap*, ns2__TransformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__TransformationExtension
#define soap_read_PointerTons2__TransformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TransformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ClassDescriptorExtension2
#define SOAP_TYPE_PointerTons2__ClassDescriptorExtension2 (1308)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ClassDescriptorExtension2(struct soap*, ns2__ClassDescriptorExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ClassDescriptorExtension2(struct soap*, const char *, int, ns2__ClassDescriptorExtension2 *const*, const char *);
SOAP_FMAC3 ns2__ClassDescriptorExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__ClassDescriptorExtension2(struct soap*, const char*, ns2__ClassDescriptorExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ClassDescriptorExtension2(struct soap*, ns2__ClassDescriptorExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ClassDescriptorExtension2
#define soap_write_PointerTons2__ClassDescriptorExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ClassDescriptorExtension2(soap, data), 0) || soap_put_PointerTons2__ClassDescriptorExtension2(soap, data, "ns2:ClassDescriptorExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassDescriptorExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__ClassDescriptorExtension2(struct soap*, ns2__ClassDescriptorExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ClassDescriptorExtension2
#define soap_read_PointerTons2__ClassDescriptorExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ClassDescriptorExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OtherType
#define SOAP_TYPE_PointerTons2__OtherType (1306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OtherType(struct soap*, ns2__OtherType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OtherType(struct soap*, const char *, int, ns2__OtherType *const*, const char *);
SOAP_FMAC3 ns2__OtherType ** SOAP_FMAC4 soap_in_PointerTons2__OtherType(struct soap*, const char*, ns2__OtherType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OtherType(struct soap*, ns2__OtherType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OtherType
#define soap_write_PointerTons2__OtherType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OtherType(soap, data), 0) || soap_put_PointerTons2__OtherType(soap, data, "ns2:OtherType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OtherType ** SOAP_FMAC4 soap_get_PointerTons2__OtherType(struct soap*, ns2__OtherType **, const char*, const char*);

#ifndef soap_read_PointerTons2__OtherType
#define soap_read_PointerTons2__OtherType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OtherType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ClassDescriptorExtension
#define SOAP_TYPE_PointerTons2__ClassDescriptorExtension (1305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ClassDescriptorExtension(struct soap*, ns2__ClassDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ClassDescriptorExtension(struct soap*, const char *, int, ns2__ClassDescriptorExtension *const*, const char *);
SOAP_FMAC3 ns2__ClassDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTons2__ClassDescriptorExtension(struct soap*, const char*, ns2__ClassDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ClassDescriptorExtension(struct soap*, ns2__ClassDescriptorExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ClassDescriptorExtension
#define soap_write_PointerTons2__ClassDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ClassDescriptorExtension(soap, data), 0) || soap_put_PointerTons2__ClassDescriptorExtension(soap, data, "ns2:ClassDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTons2__ClassDescriptorExtension(struct soap*, ns2__ClassDescriptorExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ClassDescriptorExtension
#define soap_read_PointerTons2__ClassDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ClassDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate (1304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_ns2__ClassDescriptor_ClassCandidate >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, const char *, int, std::vector<_ns2__ClassDescriptor_ClassCandidate >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ClassDescriptor_ClassCandidate >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, const char*, std::vector<_ns2__ClassDescriptor_ClassCandidate >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_ns2__ClassDescriptor_ClassCandidate >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ClassDescriptor_ClassCandidate >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_ns2__ClassDescriptor_ClassCandidate >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ColorDescriptorExtension
#define SOAP_TYPE_PointerTons2__ColorDescriptorExtension (1301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ColorDescriptorExtension(struct soap*, ns2__ColorDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ColorDescriptorExtension(struct soap*, const char *, int, ns2__ColorDescriptorExtension *const*, const char *);
SOAP_FMAC3 ns2__ColorDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTons2__ColorDescriptorExtension(struct soap*, const char*, ns2__ColorDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ColorDescriptorExtension(struct soap*, ns2__ColorDescriptorExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ColorDescriptorExtension
#define soap_write_PointerTons2__ColorDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ColorDescriptorExtension(soap, data), 0) || soap_put_PointerTons2__ColorDescriptorExtension(soap, data, "ns2:ColorDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTons2__ColorDescriptorExtension(struct soap*, ns2__ColorDescriptorExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ColorDescriptorExtension
#define soap_read_PointerTons2__ColorDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ColorDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster (1300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, std::vector<_ns2__ColorDescriptor_ColorCluster >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, const char *, int, std::vector<_ns2__ColorDescriptor_ColorCluster >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ColorDescriptor_ColorCluster >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, const char*, std::vector<_ns2__ColorDescriptor_ColorCluster >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, std::vector<_ns2__ColorDescriptor_ColorCluster >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ColorDescriptor_ColorCluster >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, std::vector<_ns2__ColorDescriptor_ColorCluster >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ColorCovariance
#define SOAP_TYPE_PointerTons2__ColorCovariance (1298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ColorCovariance(struct soap*, ns2__ColorCovariance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ColorCovariance(struct soap*, const char *, int, ns2__ColorCovariance *const*, const char *);
SOAP_FMAC3 ns2__ColorCovariance ** SOAP_FMAC4 soap_in_PointerTons2__ColorCovariance(struct soap*, const char*, ns2__ColorCovariance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ColorCovariance(struct soap*, ns2__ColorCovariance *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ColorCovariance
#define soap_write_PointerTons2__ColorCovariance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ColorCovariance(soap, data), 0) || soap_put_PointerTons2__ColorCovariance(soap, data, "ns2:ColorCovariance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorCovariance ** SOAP_FMAC4 soap_get_PointerTons2__ColorCovariance(struct soap*, ns2__ColorCovariance **, const char*, const char*);

#ifndef soap_read_PointerTons2__ColorCovariance
#define soap_read_PointerTons2__ColorCovariance(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ColorCovariance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Color
#define SOAP_TYPE_PointerTons2__Color (1297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Color(struct soap*, ns2__Color *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Color(struct soap*, const char *, int, ns2__Color *const*, const char *);
SOAP_FMAC3 ns2__Color ** SOAP_FMAC4 soap_in_PointerTons2__Color(struct soap*, const char*, ns2__Color **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Color(struct soap*, ns2__Color *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Color
#define soap_write_PointerTons2__Color(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Color(soap, data), 0) || soap_put_PointerTons2__Color(soap, data, "ns2:Color", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Color ** SOAP_FMAC4 soap_get_PointerTons2__Color(struct soap*, ns2__Color **, const char*, const char*);

#ifndef soap_read_PointerTons2__Color
#define soap_read_PointerTons2__Color(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Color(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ShapeDescriptorExtension
#define SOAP_TYPE_PointerTons2__ShapeDescriptorExtension (1295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ShapeDescriptorExtension(struct soap*, ns2__ShapeDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ShapeDescriptorExtension(struct soap*, const char *, int, ns2__ShapeDescriptorExtension *const*, const char *);
SOAP_FMAC3 ns2__ShapeDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTons2__ShapeDescriptorExtension(struct soap*, const char*, ns2__ShapeDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ShapeDescriptorExtension(struct soap*, ns2__ShapeDescriptorExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ShapeDescriptorExtension
#define soap_write_PointerTons2__ShapeDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ShapeDescriptorExtension(soap, data), 0) || soap_put_PointerTons2__ShapeDescriptorExtension(soap, data, "ns2:ShapeDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ShapeDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTons2__ShapeDescriptorExtension(struct soap*, ns2__ShapeDescriptorExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ShapeDescriptorExtension
#define soap_read_PointerTons2__ShapeDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ShapeDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Polygon
#define SOAP_TYPE_PointerTons2__Polygon (1293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Polygon(struct soap*, ns2__Polygon *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Polygon(struct soap*, const char *, int, ns2__Polygon *const*, const char *);
SOAP_FMAC3 ns2__Polygon ** SOAP_FMAC4 soap_in_PointerTons2__Polygon(struct soap*, const char*, ns2__Polygon **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Polygon(struct soap*, ns2__Polygon *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Polygon
#define soap_write_PointerTons2__Polygon(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Polygon(soap, data), 0) || soap_put_PointerTons2__Polygon(soap, data, "ns2:Polygon", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Polygon ** SOAP_FMAC4 soap_get_PointerTons2__Polygon(struct soap*, ns2__Polygon **, const char*, const char*);

#ifndef soap_read_PointerTons2__Polygon
#define soap_read_PointerTons2__Polygon(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Polygon(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AppearanceExtension
#define SOAP_TYPE_PointerTons2__AppearanceExtension (1292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AppearanceExtension(struct soap*, ns2__AppearanceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AppearanceExtension(struct soap*, const char *, int, ns2__AppearanceExtension *const*, const char *);
SOAP_FMAC3 ns2__AppearanceExtension ** SOAP_FMAC4 soap_in_PointerTons2__AppearanceExtension(struct soap*, const char*, ns2__AppearanceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AppearanceExtension(struct soap*, ns2__AppearanceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AppearanceExtension
#define soap_write_PointerTons2__AppearanceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AppearanceExtension(soap, data), 0) || soap_put_PointerTons2__AppearanceExtension(soap, data, "ns2:AppearanceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AppearanceExtension ** SOAP_FMAC4 soap_get_PointerTons2__AppearanceExtension(struct soap*, ns2__AppearanceExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AppearanceExtension
#define soap_read_PointerTons2__AppearanceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AppearanceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ClassDescriptor
#define SOAP_TYPE_PointerTons2__ClassDescriptor (1291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ClassDescriptor(struct soap*, ns2__ClassDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ClassDescriptor(struct soap*, const char *, int, ns2__ClassDescriptor *const*, const char *);
SOAP_FMAC3 ns2__ClassDescriptor ** SOAP_FMAC4 soap_in_PointerTons2__ClassDescriptor(struct soap*, const char*, ns2__ClassDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ClassDescriptor(struct soap*, ns2__ClassDescriptor *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ClassDescriptor
#define soap_write_PointerTons2__ClassDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ClassDescriptor(soap, data), 0) || soap_put_PointerTons2__ClassDescriptor(soap, data, "ns2:ClassDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ClassDescriptor ** SOAP_FMAC4 soap_get_PointerTons2__ClassDescriptor(struct soap*, ns2__ClassDescriptor **, const char*, const char*);

#ifndef soap_read_PointerTons2__ClassDescriptor
#define soap_read_PointerTons2__ClassDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ClassDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ColorDescriptor
#define SOAP_TYPE_PointerTons2__ColorDescriptor (1290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ColorDescriptor(struct soap*, ns2__ColorDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ColorDescriptor(struct soap*, const char *, int, ns2__ColorDescriptor *const*, const char *);
SOAP_FMAC3 ns2__ColorDescriptor ** SOAP_FMAC4 soap_in_PointerTons2__ColorDescriptor(struct soap*, const char*, ns2__ColorDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ColorDescriptor(struct soap*, ns2__ColorDescriptor *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ColorDescriptor
#define soap_write_PointerTons2__ColorDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ColorDescriptor(soap, data), 0) || soap_put_PointerTons2__ColorDescriptor(soap, data, "ns2:ColorDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ColorDescriptor ** SOAP_FMAC4 soap_get_PointerTons2__ColorDescriptor(struct soap*, ns2__ColorDescriptor **, const char*, const char*);

#ifndef soap_read_PointerTons2__ColorDescriptor
#define soap_read_PointerTons2__ColorDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ColorDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ShapeDescriptor
#define SOAP_TYPE_PointerTons2__ShapeDescriptor (1289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ShapeDescriptor(struct soap*, ns2__ShapeDescriptor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ShapeDescriptor(struct soap*, const char *, int, ns2__ShapeDescriptor *const*, const char *);
SOAP_FMAC3 ns2__ShapeDescriptor ** SOAP_FMAC4 soap_in_PointerTons2__ShapeDescriptor(struct soap*, const char*, ns2__ShapeDescriptor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ShapeDescriptor(struct soap*, ns2__ShapeDescriptor *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ShapeDescriptor
#define soap_write_PointerTons2__ShapeDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ShapeDescriptor(soap, data), 0) || soap_put_PointerTons2__ShapeDescriptor(soap, data, "ns2:ShapeDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ShapeDescriptor ** SOAP_FMAC4 soap_get_PointerTons2__ShapeDescriptor(struct soap*, ns2__ShapeDescriptor **, const char*, const char*);

#ifndef soap_read_PointerTons2__ShapeDescriptor
#define soap_read_PointerTons2__ShapeDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ShapeDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Transformation
#define SOAP_TYPE_PointerTons2__Transformation (1288)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Transformation(struct soap*, ns2__Transformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Transformation(struct soap*, const char *, int, ns2__Transformation *const*, const char *);
SOAP_FMAC3 ns2__Transformation ** SOAP_FMAC4 soap_in_PointerTons2__Transformation(struct soap*, const char*, ns2__Transformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Transformation(struct soap*, ns2__Transformation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Transformation
#define soap_write_PointerTons2__Transformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Transformation(soap, data), 0) || soap_put_PointerTons2__Transformation(soap, data, "ns2:Transformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Transformation ** SOAP_FMAC4 soap_get_PointerTons2__Transformation(struct soap*, ns2__Transformation **, const char*, const char*);

#ifndef soap_read_PointerTons2__Transformation
#define soap_read_PointerTons2__Transformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Transformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Vector
#define SOAP_TYPE_PointerTons2__Vector (1286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Vector(struct soap*, ns2__Vector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Vector(struct soap*, const char *, int, ns2__Vector *const*, const char *);
SOAP_FMAC3 ns2__Vector ** SOAP_FMAC4 soap_in_PointerTons2__Vector(struct soap*, const char*, ns2__Vector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Vector(struct soap*, ns2__Vector *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Vector
#define soap_write_PointerTons2__Vector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Vector(soap, data), 0) || soap_put_PointerTons2__Vector(soap, data, "ns2:Vector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Vector ** SOAP_FMAC4 soap_get_PointerTons2__Vector(struct soap*, ns2__Vector **, const char*, const char*);

#ifndef soap_read_PointerTons2__Vector
#define soap_read_PointerTons2__Vector(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Vector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ItemListDescriptionExtension
#define SOAP_TYPE_PointerTons2__ItemListDescriptionExtension (1285)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ItemListDescriptionExtension(struct soap*, ns2__ItemListDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ItemListDescriptionExtension(struct soap*, const char *, int, ns2__ItemListDescriptionExtension *const*, const char *);
SOAP_FMAC3 ns2__ItemListDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTons2__ItemListDescriptionExtension(struct soap*, const char*, ns2__ItemListDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ItemListDescriptionExtension(struct soap*, ns2__ItemListDescriptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ItemListDescriptionExtension
#define soap_write_PointerTons2__ItemListDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ItemListDescriptionExtension(soap, data), 0) || soap_put_PointerTons2__ItemListDescriptionExtension(soap, data, "ns2:ItemListDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemListDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTons2__ItemListDescriptionExtension(struct soap*, ns2__ItemListDescriptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ItemListDescriptionExtension
#define soap_read_PointerTons2__ItemListDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ItemListDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription (1284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_ElementItemDescription >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, const char *, int, std::vector<_ns2__ItemListDescription_ElementItemDescription >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ItemListDescription_ElementItemDescription >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, const char*, std::vector<_ns2__ItemListDescription_ElementItemDescription >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_ElementItemDescription >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ItemListDescription_ElementItemDescription >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_ElementItemDescription >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription (1281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, const char *, int, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ItemListDescription_SimpleItemDescription >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, const char*, std::vector<_ns2__ItemListDescription_SimpleItemDescription >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ItemListDescription_SimpleItemDescription >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_SimpleItemDescription >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MessageDescriptionExtension
#define SOAP_TYPE_PointerTons2__MessageDescriptionExtension (1278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MessageDescriptionExtension(struct soap*, ns2__MessageDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MessageDescriptionExtension(struct soap*, const char *, int, ns2__MessageDescriptionExtension *const*, const char *);
SOAP_FMAC3 ns2__MessageDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTons2__MessageDescriptionExtension(struct soap*, const char*, ns2__MessageDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MessageDescriptionExtension(struct soap*, ns2__MessageDescriptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MessageDescriptionExtension
#define soap_write_PointerTons2__MessageDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MessageDescriptionExtension(soap, data), 0) || soap_put_PointerTons2__MessageDescriptionExtension(soap, data, "ns2:MessageDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MessageDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTons2__MessageDescriptionExtension(struct soap*, ns2__MessageDescriptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MessageDescriptionExtension
#define soap_read_PointerTons2__MessageDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MessageDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ItemListDescription
#define SOAP_TYPE_PointerTons2__ItemListDescription (1277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ItemListDescription(struct soap*, ns2__ItemListDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ItemListDescription(struct soap*, const char *, int, ns2__ItemListDescription *const*, const char *);
SOAP_FMAC3 ns2__ItemListDescription ** SOAP_FMAC4 soap_in_PointerTons2__ItemListDescription(struct soap*, const char*, ns2__ItemListDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ItemListDescription(struct soap*, ns2__ItemListDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ItemListDescription
#define soap_write_PointerTons2__ItemListDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ItemListDescription(soap, data), 0) || soap_put_PointerTons2__ItemListDescription(soap, data, "ns2:ItemListDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemListDescription ** SOAP_FMAC4 soap_get_PointerTons2__ItemListDescription(struct soap*, ns2__ItemListDescription **, const char*, const char*);

#ifndef soap_read_PointerTons2__ItemListDescription
#define soap_read_PointerTons2__ItemListDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ItemListDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ItemListExtension
#define SOAP_TYPE_PointerTons2__ItemListExtension (1276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ItemListExtension(struct soap*, ns2__ItemListExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ItemListExtension(struct soap*, const char *, int, ns2__ItemListExtension *const*, const char *);
SOAP_FMAC3 ns2__ItemListExtension ** SOAP_FMAC4 soap_in_PointerTons2__ItemListExtension(struct soap*, const char*, ns2__ItemListExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ItemListExtension(struct soap*, ns2__ItemListExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ItemListExtension
#define soap_write_PointerTons2__ItemListExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ItemListExtension(soap, data), 0) || soap_put_PointerTons2__ItemListExtension(soap, data, "ns2:ItemListExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ItemListExtension ** SOAP_FMAC4 soap_get_PointerTons2__ItemListExtension(struct soap*, ns2__ItemListExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ItemListExtension
#define soap_read_PointerTons2__ItemListExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ItemListExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem (1275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, std::vector<_ns2__ItemList_ElementItem >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, const char *, int, std::vector<_ns2__ItemList_ElementItem >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ItemList_ElementItem >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, const char*, std::vector<_ns2__ItemList_ElementItem >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, std::vector<_ns2__ItemList_ElementItem >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ItemList_ElementItem >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, std::vector<_ns2__ItemList_ElementItem >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ItemList_ElementItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem (1272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, std::vector<_ns2__ItemList_SimpleItem >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, const char *, int, std::vector<_ns2__ItemList_SimpleItem >*const*, const char *);
SOAP_FMAC3 std::vector<_ns2__ItemList_SimpleItem >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, const char*, std::vector<_ns2__ItemList_SimpleItem >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, std::vector<_ns2__ItemList_SimpleItem >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem
#define soap_write_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns2__ItemList_SimpleItem >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, std::vector<_ns2__ItemList_SimpleItem >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem
#define soap_read_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns2__ItemList_SimpleItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusOptions20Extension
#define SOAP_TYPE_PointerTons2__FocusOptions20Extension (1269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusOptions20Extension(struct soap*, ns2__FocusOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusOptions20Extension(struct soap*, const char *, int, ns2__FocusOptions20Extension *const*, const char *);
SOAP_FMAC3 ns2__FocusOptions20Extension ** SOAP_FMAC4 soap_in_PointerTons2__FocusOptions20Extension(struct soap*, const char*, ns2__FocusOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusOptions20Extension(struct soap*, ns2__FocusOptions20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusOptions20Extension
#define soap_write_PointerTons2__FocusOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusOptions20Extension(soap, data), 0) || soap_put_PointerTons2__FocusOptions20Extension(soap, data, "ns2:FocusOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusOptions20Extension ** SOAP_FMAC4 soap_get_PointerTons2__FocusOptions20Extension(struct soap*, ns2__FocusOptions20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusOptions20Extension
#define soap_read_PointerTons2__FocusOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WhiteBalanceOptions20Extension
#define SOAP_TYPE_PointerTons2__WhiteBalanceOptions20Extension (1268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WhiteBalanceOptions20Extension(struct soap*, ns2__WhiteBalanceOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WhiteBalanceOptions20Extension(struct soap*, const char *, int, ns2__WhiteBalanceOptions20Extension *const*, const char *);
SOAP_FMAC3 ns2__WhiteBalanceOptions20Extension ** SOAP_FMAC4 soap_in_PointerTons2__WhiteBalanceOptions20Extension(struct soap*, const char*, ns2__WhiteBalanceOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WhiteBalanceOptions20Extension(struct soap*, ns2__WhiteBalanceOptions20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WhiteBalanceOptions20Extension
#define soap_write_PointerTons2__WhiteBalanceOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WhiteBalanceOptions20Extension(soap, data), 0) || soap_put_PointerTons2__WhiteBalanceOptions20Extension(soap, data, "ns2:WhiteBalanceOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceOptions20Extension ** SOAP_FMAC4 soap_get_PointerTons2__WhiteBalanceOptions20Extension(struct soap*, ns2__WhiteBalanceOptions20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__WhiteBalanceOptions20Extension
#define soap_read_PointerTons2__WhiteBalanceOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WhiteBalanceOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusConfiguration20Extension
#define SOAP_TYPE_PointerTons2__FocusConfiguration20Extension (1267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusConfiguration20Extension(struct soap*, ns2__FocusConfiguration20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusConfiguration20Extension(struct soap*, const char *, int, ns2__FocusConfiguration20Extension *const*, const char *);
SOAP_FMAC3 ns2__FocusConfiguration20Extension ** SOAP_FMAC4 soap_in_PointerTons2__FocusConfiguration20Extension(struct soap*, const char*, ns2__FocusConfiguration20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusConfiguration20Extension(struct soap*, ns2__FocusConfiguration20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusConfiguration20Extension
#define soap_write_PointerTons2__FocusConfiguration20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusConfiguration20Extension(soap, data), 0) || soap_put_PointerTons2__FocusConfiguration20Extension(soap, data, "ns2:FocusConfiguration20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusConfiguration20Extension ** SOAP_FMAC4 soap_get_PointerTons2__FocusConfiguration20Extension(struct soap*, ns2__FocusConfiguration20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusConfiguration20Extension
#define soap_read_PointerTons2__FocusConfiguration20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusConfiguration20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WhiteBalance20Extension
#define SOAP_TYPE_PointerTons2__WhiteBalance20Extension (1266)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WhiteBalance20Extension(struct soap*, ns2__WhiteBalance20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WhiteBalance20Extension(struct soap*, const char *, int, ns2__WhiteBalance20Extension *const*, const char *);
SOAP_FMAC3 ns2__WhiteBalance20Extension ** SOAP_FMAC4 soap_in_PointerTons2__WhiteBalance20Extension(struct soap*, const char*, ns2__WhiteBalance20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WhiteBalance20Extension(struct soap*, ns2__WhiteBalance20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WhiteBalance20Extension
#define soap_write_PointerTons2__WhiteBalance20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WhiteBalance20Extension(soap, data), 0) || soap_put_PointerTons2__WhiteBalance20Extension(soap, data, "ns2:WhiteBalance20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalance20Extension ** SOAP_FMAC4 soap_get_PointerTons2__WhiteBalance20Extension(struct soap*, ns2__WhiteBalance20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__WhiteBalance20Extension
#define soap_read_PointerTons2__WhiteBalance20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WhiteBalance20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RelativeFocusOptions20
#define SOAP_TYPE_PointerTons2__RelativeFocusOptions20 (1265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RelativeFocusOptions20(struct soap*, ns2__RelativeFocusOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RelativeFocusOptions20(struct soap*, const char *, int, ns2__RelativeFocusOptions20 *const*, const char *);
SOAP_FMAC3 ns2__RelativeFocusOptions20 ** SOAP_FMAC4 soap_in_PointerTons2__RelativeFocusOptions20(struct soap*, const char*, ns2__RelativeFocusOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RelativeFocusOptions20(struct soap*, ns2__RelativeFocusOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RelativeFocusOptions20
#define soap_write_PointerTons2__RelativeFocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RelativeFocusOptions20(soap, data), 0) || soap_put_PointerTons2__RelativeFocusOptions20(soap, data, "ns2:RelativeFocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelativeFocusOptions20 ** SOAP_FMAC4 soap_get_PointerTons2__RelativeFocusOptions20(struct soap*, ns2__RelativeFocusOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__RelativeFocusOptions20
#define soap_read_PointerTons2__RelativeFocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RelativeFocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension (1263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char *, int, ns2__IrCutFilterAutoAdjustmentOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, ns2__IrCutFilterAutoAdjustmentOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_write_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data), 0) || soap_put_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data, "ns2:IrCutFilterAutoAdjustmentOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_read_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IrCutFilterAutoAdjustmentOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImageStabilizationOptionsExtension
#define SOAP_TYPE_PointerTons2__ImageStabilizationOptionsExtension (1262)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImageStabilizationOptionsExtension(struct soap*, ns2__ImageStabilizationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImageStabilizationOptionsExtension(struct soap*, const char *, int, ns2__ImageStabilizationOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__ImageStabilizationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__ImageStabilizationOptionsExtension(struct soap*, const char*, ns2__ImageStabilizationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImageStabilizationOptionsExtension(struct soap*, ns2__ImageStabilizationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImageStabilizationOptionsExtension
#define soap_write_PointerTons2__ImageStabilizationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImageStabilizationOptionsExtension(soap, data), 0) || soap_put_PointerTons2__ImageStabilizationOptionsExtension(soap, data, "ns2:ImageStabilizationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__ImageStabilizationOptionsExtension(struct soap*, ns2__ImageStabilizationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImageStabilizationOptionsExtension
#define soap_read_PointerTons2__ImageStabilizationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImageStabilizationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingOptions20Extension4
#define SOAP_TYPE_PointerTons2__ImagingOptions20Extension4 (1260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingOptions20Extension4(struct soap*, ns2__ImagingOptions20Extension4 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingOptions20Extension4(struct soap*, const char *, int, ns2__ImagingOptions20Extension4 *const*, const char *);
SOAP_FMAC3 ns2__ImagingOptions20Extension4 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingOptions20Extension4(struct soap*, const char*, ns2__ImagingOptions20Extension4 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingOptions20Extension4(struct soap*, ns2__ImagingOptions20Extension4 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingOptions20Extension4
#define soap_write_PointerTons2__ImagingOptions20Extension4(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingOptions20Extension4(soap, data), 0) || soap_put_PointerTons2__ImagingOptions20Extension4(soap, data, "ns2:ImagingOptions20Extension4", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension4 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingOptions20Extension4(struct soap*, ns2__ImagingOptions20Extension4 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingOptions20Extension4
#define soap_read_PointerTons2__ImagingOptions20Extension4(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingOptions20Extension4(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NoiseReductionOptions
#define SOAP_TYPE_PointerTons2__NoiseReductionOptions (1259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NoiseReductionOptions(struct soap*, ns2__NoiseReductionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NoiseReductionOptions(struct soap*, const char *, int, ns2__NoiseReductionOptions *const*, const char *);
SOAP_FMAC3 ns2__NoiseReductionOptions ** SOAP_FMAC4 soap_in_PointerTons2__NoiseReductionOptions(struct soap*, const char*, ns2__NoiseReductionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NoiseReductionOptions(struct soap*, ns2__NoiseReductionOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NoiseReductionOptions
#define soap_write_PointerTons2__NoiseReductionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NoiseReductionOptions(soap, data), 0) || soap_put_PointerTons2__NoiseReductionOptions(soap, data, "ns2:NoiseReductionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NoiseReductionOptions ** SOAP_FMAC4 soap_get_PointerTons2__NoiseReductionOptions(struct soap*, ns2__NoiseReductionOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__NoiseReductionOptions
#define soap_read_PointerTons2__NoiseReductionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NoiseReductionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DefoggingOptions
#define SOAP_TYPE_PointerTons2__DefoggingOptions (1258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DefoggingOptions(struct soap*, ns2__DefoggingOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DefoggingOptions(struct soap*, const char *, int, ns2__DefoggingOptions *const*, const char *);
SOAP_FMAC3 ns2__DefoggingOptions ** SOAP_FMAC4 soap_in_PointerTons2__DefoggingOptions(struct soap*, const char*, ns2__DefoggingOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DefoggingOptions(struct soap*, ns2__DefoggingOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DefoggingOptions
#define soap_write_PointerTons2__DefoggingOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DefoggingOptions(soap, data), 0) || soap_put_PointerTons2__DefoggingOptions(soap, data, "ns2:DefoggingOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DefoggingOptions ** SOAP_FMAC4 soap_get_PointerTons2__DefoggingOptions(struct soap*, ns2__DefoggingOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__DefoggingOptions
#define soap_read_PointerTons2__DefoggingOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DefoggingOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ToneCompensationOptions
#define SOAP_TYPE_PointerTons2__ToneCompensationOptions (1257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ToneCompensationOptions(struct soap*, ns2__ToneCompensationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ToneCompensationOptions(struct soap*, const char *, int, ns2__ToneCompensationOptions *const*, const char *);
SOAP_FMAC3 ns2__ToneCompensationOptions ** SOAP_FMAC4 soap_in_PointerTons2__ToneCompensationOptions(struct soap*, const char*, ns2__ToneCompensationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ToneCompensationOptions(struct soap*, ns2__ToneCompensationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ToneCompensationOptions
#define soap_write_PointerTons2__ToneCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ToneCompensationOptions(soap, data), 0) || soap_put_PointerTons2__ToneCompensationOptions(soap, data, "ns2:ToneCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensationOptions ** SOAP_FMAC4 soap_get_PointerTons2__ToneCompensationOptions(struct soap*, ns2__ToneCompensationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__ToneCompensationOptions
#define soap_read_PointerTons2__ToneCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ToneCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingOptions20Extension3
#define SOAP_TYPE_PointerTons2__ImagingOptions20Extension3 (1256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingOptions20Extension3(struct soap*, ns2__ImagingOptions20Extension3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingOptions20Extension3(struct soap*, const char *, int, ns2__ImagingOptions20Extension3 *const*, const char *);
SOAP_FMAC3 ns2__ImagingOptions20Extension3 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingOptions20Extension3(struct soap*, const char*, ns2__ImagingOptions20Extension3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingOptions20Extension3(struct soap*, ns2__ImagingOptions20Extension3 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingOptions20Extension3
#define soap_write_PointerTons2__ImagingOptions20Extension3(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingOptions20Extension3(soap, data), 0) || soap_put_PointerTons2__ImagingOptions20Extension3(soap, data, "ns2:ImagingOptions20Extension3", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension3 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingOptions20Extension3(struct soap*, ns2__ImagingOptions20Extension3 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingOptions20Extension3
#define soap_read_PointerTons2__ImagingOptions20Extension3(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingOptions20Extension3(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustmentOptions (1255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IrCutFilterAutoAdjustmentOptions(struct soap*, ns2__IrCutFilterAutoAdjustmentOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IrCutFilterAutoAdjustmentOptions(struct soap*, const char *, int, ns2__IrCutFilterAutoAdjustmentOptions *const*, const char *);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptions ** SOAP_FMAC4 soap_in_PointerTons2__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, ns2__IrCutFilterAutoAdjustmentOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IrCutFilterAutoAdjustmentOptions(struct soap*, ns2__IrCutFilterAutoAdjustmentOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IrCutFilterAutoAdjustmentOptions
#define soap_write_PointerTons2__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IrCutFilterAutoAdjustmentOptions(soap, data), 0) || soap_put_PointerTons2__IrCutFilterAutoAdjustmentOptions(soap, data, "ns2:IrCutFilterAutoAdjustmentOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentOptions ** SOAP_FMAC4 soap_get_PointerTons2__IrCutFilterAutoAdjustmentOptions(struct soap*, ns2__IrCutFilterAutoAdjustmentOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__IrCutFilterAutoAdjustmentOptions
#define soap_read_PointerTons2__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IrCutFilterAutoAdjustmentOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingOptions20Extension2
#define SOAP_TYPE_PointerTons2__ImagingOptions20Extension2 (1254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingOptions20Extension2(struct soap*, ns2__ImagingOptions20Extension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingOptions20Extension2(struct soap*, const char *, int, ns2__ImagingOptions20Extension2 *const*, const char *);
SOAP_FMAC3 ns2__ImagingOptions20Extension2 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingOptions20Extension2(struct soap*, const char*, ns2__ImagingOptions20Extension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingOptions20Extension2(struct soap*, ns2__ImagingOptions20Extension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingOptions20Extension2
#define soap_write_PointerTons2__ImagingOptions20Extension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingOptions20Extension2(soap, data), 0) || soap_put_PointerTons2__ImagingOptions20Extension2(soap, data, "ns2:ImagingOptions20Extension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension2 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingOptions20Extension2(struct soap*, ns2__ImagingOptions20Extension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingOptions20Extension2
#define soap_read_PointerTons2__ImagingOptions20Extension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingOptions20Extension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImageStabilizationOptions
#define SOAP_TYPE_PointerTons2__ImageStabilizationOptions (1253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImageStabilizationOptions(struct soap*, ns2__ImageStabilizationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImageStabilizationOptions(struct soap*, const char *, int, ns2__ImageStabilizationOptions *const*, const char *);
SOAP_FMAC3 ns2__ImageStabilizationOptions ** SOAP_FMAC4 soap_in_PointerTons2__ImageStabilizationOptions(struct soap*, const char*, ns2__ImageStabilizationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImageStabilizationOptions(struct soap*, ns2__ImageStabilizationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImageStabilizationOptions
#define soap_write_PointerTons2__ImageStabilizationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImageStabilizationOptions(soap, data), 0) || soap_put_PointerTons2__ImageStabilizationOptions(soap, data, "ns2:ImageStabilizationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationOptions ** SOAP_FMAC4 soap_get_PointerTons2__ImageStabilizationOptions(struct soap*, ns2__ImageStabilizationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImageStabilizationOptions
#define soap_read_PointerTons2__ImageStabilizationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImageStabilizationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingOptions20Extension
#define SOAP_TYPE_PointerTons2__ImagingOptions20Extension (1252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingOptions20Extension(struct soap*, ns2__ImagingOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingOptions20Extension(struct soap*, const char *, int, ns2__ImagingOptions20Extension *const*, const char *);
SOAP_FMAC3 ns2__ImagingOptions20Extension ** SOAP_FMAC4 soap_in_PointerTons2__ImagingOptions20Extension(struct soap*, const char*, ns2__ImagingOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingOptions20Extension(struct soap*, ns2__ImagingOptions20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingOptions20Extension
#define soap_write_PointerTons2__ImagingOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingOptions20Extension(soap, data), 0) || soap_put_PointerTons2__ImagingOptions20Extension(soap, data, "ns2:ImagingOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingOptions20Extension ** SOAP_FMAC4 soap_get_PointerTons2__ImagingOptions20Extension(struct soap*, ns2__ImagingOptions20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingOptions20Extension
#define soap_read_PointerTons2__ImagingOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WhiteBalanceOptions20
#define SOAP_TYPE_PointerTons2__WhiteBalanceOptions20 (1251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WhiteBalanceOptions20(struct soap*, ns2__WhiteBalanceOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WhiteBalanceOptions20(struct soap*, const char *, int, ns2__WhiteBalanceOptions20 *const*, const char *);
SOAP_FMAC3 ns2__WhiteBalanceOptions20 ** SOAP_FMAC4 soap_in_PointerTons2__WhiteBalanceOptions20(struct soap*, const char*, ns2__WhiteBalanceOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WhiteBalanceOptions20(struct soap*, ns2__WhiteBalanceOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WhiteBalanceOptions20
#define soap_write_PointerTons2__WhiteBalanceOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WhiteBalanceOptions20(soap, data), 0) || soap_put_PointerTons2__WhiteBalanceOptions20(soap, data, "ns2:WhiteBalanceOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceOptions20 ** SOAP_FMAC4 soap_get_PointerTons2__WhiteBalanceOptions20(struct soap*, ns2__WhiteBalanceOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__WhiteBalanceOptions20
#define soap_read_PointerTons2__WhiteBalanceOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WhiteBalanceOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WideDynamicRangeOptions20
#define SOAP_TYPE_PointerTons2__WideDynamicRangeOptions20 (1250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WideDynamicRangeOptions20(struct soap*, ns2__WideDynamicRangeOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WideDynamicRangeOptions20(struct soap*, const char *, int, ns2__WideDynamicRangeOptions20 *const*, const char *);
SOAP_FMAC3 ns2__WideDynamicRangeOptions20 ** SOAP_FMAC4 soap_in_PointerTons2__WideDynamicRangeOptions20(struct soap*, const char*, ns2__WideDynamicRangeOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WideDynamicRangeOptions20(struct soap*, ns2__WideDynamicRangeOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WideDynamicRangeOptions20
#define soap_write_PointerTons2__WideDynamicRangeOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WideDynamicRangeOptions20(soap, data), 0) || soap_put_PointerTons2__WideDynamicRangeOptions20(soap, data, "ns2:WideDynamicRangeOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRangeOptions20 ** SOAP_FMAC4 soap_get_PointerTons2__WideDynamicRangeOptions20(struct soap*, ns2__WideDynamicRangeOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__WideDynamicRangeOptions20
#define soap_read_PointerTons2__WideDynamicRangeOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WideDynamicRangeOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusOptions20
#define SOAP_TYPE_PointerTons2__FocusOptions20 (1249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusOptions20(struct soap*, ns2__FocusOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusOptions20(struct soap*, const char *, int, ns2__FocusOptions20 *const*, const char *);
SOAP_FMAC3 ns2__FocusOptions20 ** SOAP_FMAC4 soap_in_PointerTons2__FocusOptions20(struct soap*, const char*, ns2__FocusOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusOptions20(struct soap*, ns2__FocusOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusOptions20
#define soap_write_PointerTons2__FocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusOptions20(soap, data), 0) || soap_put_PointerTons2__FocusOptions20(soap, data, "ns2:FocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusOptions20 ** SOAP_FMAC4 soap_get_PointerTons2__FocusOptions20(struct soap*, ns2__FocusOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusOptions20
#define soap_read_PointerTons2__FocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ExposureOptions20
#define SOAP_TYPE_PointerTons2__ExposureOptions20 (1248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ExposureOptions20(struct soap*, ns2__ExposureOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ExposureOptions20(struct soap*, const char *, int, ns2__ExposureOptions20 *const*, const char *);
SOAP_FMAC3 ns2__ExposureOptions20 ** SOAP_FMAC4 soap_in_PointerTons2__ExposureOptions20(struct soap*, const char*, ns2__ExposureOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ExposureOptions20(struct soap*, ns2__ExposureOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ExposureOptions20
#define soap_write_PointerTons2__ExposureOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ExposureOptions20(soap, data), 0) || soap_put_PointerTons2__ExposureOptions20(soap, data, "ns2:ExposureOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ExposureOptions20 ** SOAP_FMAC4 soap_get_PointerTons2__ExposureOptions20(struct soap*, ns2__ExposureOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ExposureOptions20
#define soap_read_PointerTons2__ExposureOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ExposureOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__BacklightCompensationOptions20
#define SOAP_TYPE_PointerTons2__BacklightCompensationOptions20 (1247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BacklightCompensationOptions20(struct soap*, ns2__BacklightCompensationOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BacklightCompensationOptions20(struct soap*, const char *, int, ns2__BacklightCompensationOptions20 *const*, const char *);
SOAP_FMAC3 ns2__BacklightCompensationOptions20 ** SOAP_FMAC4 soap_in_PointerTons2__BacklightCompensationOptions20(struct soap*, const char*, ns2__BacklightCompensationOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BacklightCompensationOptions20(struct soap*, ns2__BacklightCompensationOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__BacklightCompensationOptions20
#define soap_write_PointerTons2__BacklightCompensationOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__BacklightCompensationOptions20(soap, data), 0) || soap_put_PointerTons2__BacklightCompensationOptions20(soap, data, "ns2:BacklightCompensationOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensationOptions20 ** SOAP_FMAC4 soap_get_PointerTons2__BacklightCompensationOptions20(struct soap*, ns2__BacklightCompensationOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__BacklightCompensationOptions20
#define soap_read_PointerTons2__BacklightCompensationOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__BacklightCompensationOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DefoggingExtension
#define SOAP_TYPE_PointerTons2__DefoggingExtension (1246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DefoggingExtension(struct soap*, ns2__DefoggingExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DefoggingExtension(struct soap*, const char *, int, ns2__DefoggingExtension *const*, const char *);
SOAP_FMAC3 ns2__DefoggingExtension ** SOAP_FMAC4 soap_in_PointerTons2__DefoggingExtension(struct soap*, const char*, ns2__DefoggingExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DefoggingExtension(struct soap*, ns2__DefoggingExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DefoggingExtension
#define soap_write_PointerTons2__DefoggingExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DefoggingExtension(soap, data), 0) || soap_put_PointerTons2__DefoggingExtension(soap, data, "ns2:DefoggingExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DefoggingExtension ** SOAP_FMAC4 soap_get_PointerTons2__DefoggingExtension(struct soap*, ns2__DefoggingExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__DefoggingExtension
#define soap_read_PointerTons2__DefoggingExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DefoggingExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ToneCompensationExtension
#define SOAP_TYPE_PointerTons2__ToneCompensationExtension (1245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ToneCompensationExtension(struct soap*, ns2__ToneCompensationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ToneCompensationExtension(struct soap*, const char *, int, ns2__ToneCompensationExtension *const*, const char *);
SOAP_FMAC3 ns2__ToneCompensationExtension ** SOAP_FMAC4 soap_in_PointerTons2__ToneCompensationExtension(struct soap*, const char*, ns2__ToneCompensationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ToneCompensationExtension(struct soap*, ns2__ToneCompensationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ToneCompensationExtension
#define soap_write_PointerTons2__ToneCompensationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ToneCompensationExtension(soap, data), 0) || soap_put_PointerTons2__ToneCompensationExtension(soap, data, "ns2:ToneCompensationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensationExtension ** SOAP_FMAC4 soap_get_PointerTons2__ToneCompensationExtension(struct soap*, ns2__ToneCompensationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ToneCompensationExtension
#define soap_read_PointerTons2__ToneCompensationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ToneCompensationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ExposurePriority
#define SOAP_TYPE_PointerTons2__ExposurePriority (1244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ExposurePriority(struct soap*, enum ns2__ExposurePriority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ExposurePriority(struct soap*, const char *, int, enum ns2__ExposurePriority *const*, const char *);
SOAP_FMAC3 enum ns2__ExposurePriority ** SOAP_FMAC4 soap_in_PointerTons2__ExposurePriority(struct soap*, const char*, enum ns2__ExposurePriority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ExposurePriority(struct soap*, enum ns2__ExposurePriority *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ExposurePriority
#define soap_write_PointerTons2__ExposurePriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ExposurePriority(soap, data), 0) || soap_put_PointerTons2__ExposurePriority(soap, data, "ns2:ExposurePriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ExposurePriority ** SOAP_FMAC4 soap_get_PointerTons2__ExposurePriority(struct soap*, enum ns2__ExposurePriority **, const char*, const char*);

#ifndef soap_read_PointerTons2__ExposurePriority
#define soap_read_PointerTons2__ExposurePriority(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ExposurePriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustmentExtension (1243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IrCutFilterAutoAdjustmentExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IrCutFilterAutoAdjustmentExtension(struct soap*, const char *, int, ns2__IrCutFilterAutoAdjustmentExtension *const*, const char *);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_in_PointerTons2__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, ns2__IrCutFilterAutoAdjustmentExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IrCutFilterAutoAdjustmentExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IrCutFilterAutoAdjustmentExtension
#define soap_write_PointerTons2__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IrCutFilterAutoAdjustmentExtension(soap, data), 0) || soap_put_PointerTons2__IrCutFilterAutoAdjustmentExtension(soap, data, "ns2:IrCutFilterAutoAdjustmentExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_get_PointerTons2__IrCutFilterAutoAdjustmentExtension(struct soap*, ns2__IrCutFilterAutoAdjustmentExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__IrCutFilterAutoAdjustmentExtension
#define soap_read_PointerTons2__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IrCutFilterAutoAdjustmentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImageStabilizationExtension
#define SOAP_TYPE_PointerTons2__ImageStabilizationExtension (1242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImageStabilizationExtension(struct soap*, ns2__ImageStabilizationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImageStabilizationExtension(struct soap*, const char *, int, ns2__ImageStabilizationExtension *const*, const char *);
SOAP_FMAC3 ns2__ImageStabilizationExtension ** SOAP_FMAC4 soap_in_PointerTons2__ImageStabilizationExtension(struct soap*, const char*, ns2__ImageStabilizationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImageStabilizationExtension(struct soap*, ns2__ImageStabilizationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImageStabilizationExtension
#define soap_write_PointerTons2__ImageStabilizationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImageStabilizationExtension(soap, data), 0) || soap_put_PointerTons2__ImageStabilizationExtension(soap, data, "ns2:ImageStabilizationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilizationExtension ** SOAP_FMAC4 soap_get_PointerTons2__ImageStabilizationExtension(struct soap*, ns2__ImageStabilizationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImageStabilizationExtension
#define soap_read_PointerTons2__ImageStabilizationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImageStabilizationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettingsExtension204
#define SOAP_TYPE_PointerTons2__ImagingSettingsExtension204 (1241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettingsExtension204(struct soap*, ns2__ImagingSettingsExtension204 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettingsExtension204(struct soap*, const char *, int, ns2__ImagingSettingsExtension204 *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettingsExtension204(struct soap*, const char*, ns2__ImagingSettingsExtension204 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettingsExtension204(struct soap*, ns2__ImagingSettingsExtension204 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettingsExtension204
#define soap_write_PointerTons2__ImagingSettingsExtension204(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettingsExtension204(soap, data), 0) || soap_put_PointerTons2__ImagingSettingsExtension204(soap, data, "ns2:ImagingSettingsExtension204", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettingsExtension204(struct soap*, ns2__ImagingSettingsExtension204 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettingsExtension204
#define soap_read_PointerTons2__ImagingSettingsExtension204(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettingsExtension204(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NoiseReduction
#define SOAP_TYPE_PointerTons2__NoiseReduction (1240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NoiseReduction(struct soap*, ns2__NoiseReduction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NoiseReduction(struct soap*, const char *, int, ns2__NoiseReduction *const*, const char *);
SOAP_FMAC3 ns2__NoiseReduction ** SOAP_FMAC4 soap_in_PointerTons2__NoiseReduction(struct soap*, const char*, ns2__NoiseReduction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NoiseReduction(struct soap*, ns2__NoiseReduction *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NoiseReduction
#define soap_write_PointerTons2__NoiseReduction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NoiseReduction(soap, data), 0) || soap_put_PointerTons2__NoiseReduction(soap, data, "ns2:NoiseReduction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NoiseReduction ** SOAP_FMAC4 soap_get_PointerTons2__NoiseReduction(struct soap*, ns2__NoiseReduction **, const char*, const char*);

#ifndef soap_read_PointerTons2__NoiseReduction
#define soap_read_PointerTons2__NoiseReduction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NoiseReduction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Defogging
#define SOAP_TYPE_PointerTons2__Defogging (1239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Defogging(struct soap*, ns2__Defogging *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Defogging(struct soap*, const char *, int, ns2__Defogging *const*, const char *);
SOAP_FMAC3 ns2__Defogging ** SOAP_FMAC4 soap_in_PointerTons2__Defogging(struct soap*, const char*, ns2__Defogging **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Defogging(struct soap*, ns2__Defogging *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Defogging
#define soap_write_PointerTons2__Defogging(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Defogging(soap, data), 0) || soap_put_PointerTons2__Defogging(soap, data, "ns2:Defogging", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Defogging ** SOAP_FMAC4 soap_get_PointerTons2__Defogging(struct soap*, ns2__Defogging **, const char*, const char*);

#ifndef soap_read_PointerTons2__Defogging
#define soap_read_PointerTons2__Defogging(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Defogging(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ToneCompensation
#define SOAP_TYPE_PointerTons2__ToneCompensation (1238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ToneCompensation(struct soap*, ns2__ToneCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ToneCompensation(struct soap*, const char *, int, ns2__ToneCompensation *const*, const char *);
SOAP_FMAC3 ns2__ToneCompensation ** SOAP_FMAC4 soap_in_PointerTons2__ToneCompensation(struct soap*, const char*, ns2__ToneCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ToneCompensation(struct soap*, ns2__ToneCompensation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ToneCompensation
#define soap_write_PointerTons2__ToneCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ToneCompensation(soap, data), 0) || soap_put_PointerTons2__ToneCompensation(soap, data, "ns2:ToneCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ToneCompensation ** SOAP_FMAC4 soap_get_PointerTons2__ToneCompensation(struct soap*, ns2__ToneCompensation **, const char*, const char*);

#ifndef soap_read_PointerTons2__ToneCompensation
#define soap_read_PointerTons2__ToneCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ToneCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettingsExtension203
#define SOAP_TYPE_PointerTons2__ImagingSettingsExtension203 (1237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettingsExtension203(struct soap*, ns2__ImagingSettingsExtension203 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettingsExtension203(struct soap*, const char *, int, ns2__ImagingSettingsExtension203 *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettingsExtension203(struct soap*, const char*, ns2__ImagingSettingsExtension203 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettingsExtension203(struct soap*, ns2__ImagingSettingsExtension203 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettingsExtension203
#define soap_write_PointerTons2__ImagingSettingsExtension203(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettingsExtension203(soap, data), 0) || soap_put_PointerTons2__ImagingSettingsExtension203(soap, data, "ns2:ImagingSettingsExtension203", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettingsExtension203(struct soap*, ns2__ImagingSettingsExtension203 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettingsExtension203
#define soap_read_PointerTons2__ImagingSettingsExtension203(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettingsExtension203(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustment
#define SOAP_TYPE_PointerTons2__IrCutFilterAutoAdjustment (1235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IrCutFilterAutoAdjustment(struct soap*, ns2__IrCutFilterAutoAdjustment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IrCutFilterAutoAdjustment(struct soap*, const char *, int, ns2__IrCutFilterAutoAdjustment *const*, const char *);
SOAP_FMAC3 ns2__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_in_PointerTons2__IrCutFilterAutoAdjustment(struct soap*, const char*, ns2__IrCutFilterAutoAdjustment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IrCutFilterAutoAdjustment(struct soap*, ns2__IrCutFilterAutoAdjustment *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IrCutFilterAutoAdjustment
#define soap_write_PointerTons2__IrCutFilterAutoAdjustment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IrCutFilterAutoAdjustment(soap, data), 0) || soap_put_PointerTons2__IrCutFilterAutoAdjustment(soap, data, "ns2:IrCutFilterAutoAdjustment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_get_PointerTons2__IrCutFilterAutoAdjustment(struct soap*, ns2__IrCutFilterAutoAdjustment **, const char*, const char*);

#ifndef soap_read_PointerTons2__IrCutFilterAutoAdjustment
#define soap_read_PointerTons2__IrCutFilterAutoAdjustment(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IrCutFilterAutoAdjustment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettingsExtension202
#define SOAP_TYPE_PointerTons2__ImagingSettingsExtension202 (1234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettingsExtension202(struct soap*, ns2__ImagingSettingsExtension202 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettingsExtension202(struct soap*, const char *, int, ns2__ImagingSettingsExtension202 *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettingsExtension202(struct soap*, const char*, ns2__ImagingSettingsExtension202 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettingsExtension202(struct soap*, ns2__ImagingSettingsExtension202 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettingsExtension202
#define soap_write_PointerTons2__ImagingSettingsExtension202(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettingsExtension202(soap, data), 0) || soap_put_PointerTons2__ImagingSettingsExtension202(soap, data, "ns2:ImagingSettingsExtension202", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettingsExtension202(struct soap*, ns2__ImagingSettingsExtension202 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettingsExtension202
#define soap_read_PointerTons2__ImagingSettingsExtension202(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettingsExtension202(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImageStabilization
#define SOAP_TYPE_PointerTons2__ImageStabilization (1233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImageStabilization(struct soap*, ns2__ImageStabilization *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImageStabilization(struct soap*, const char *, int, ns2__ImageStabilization *const*, const char *);
SOAP_FMAC3 ns2__ImageStabilization ** SOAP_FMAC4 soap_in_PointerTons2__ImageStabilization(struct soap*, const char*, ns2__ImageStabilization **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImageStabilization(struct soap*, ns2__ImageStabilization *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImageStabilization
#define soap_write_PointerTons2__ImageStabilization(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImageStabilization(soap, data), 0) || soap_put_PointerTons2__ImageStabilization(soap, data, "ns2:ImageStabilization", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImageStabilization ** SOAP_FMAC4 soap_get_PointerTons2__ImageStabilization(struct soap*, ns2__ImageStabilization **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImageStabilization
#define soap_read_PointerTons2__ImageStabilization(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImageStabilization(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettingsExtension20
#define SOAP_TYPE_PointerTons2__ImagingSettingsExtension20 (1232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettingsExtension20(struct soap*, ns2__ImagingSettingsExtension20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettingsExtension20(struct soap*, const char *, int, ns2__ImagingSettingsExtension20 *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettingsExtension20(struct soap*, const char*, ns2__ImagingSettingsExtension20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettingsExtension20(struct soap*, ns2__ImagingSettingsExtension20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettingsExtension20
#define soap_write_PointerTons2__ImagingSettingsExtension20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettingsExtension20(soap, data), 0) || soap_put_PointerTons2__ImagingSettingsExtension20(soap, data, "ns2:ImagingSettingsExtension20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettingsExtension20(struct soap*, ns2__ImagingSettingsExtension20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettingsExtension20
#define soap_read_PointerTons2__ImagingSettingsExtension20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettingsExtension20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WhiteBalance20
#define SOAP_TYPE_PointerTons2__WhiteBalance20 (1231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WhiteBalance20(struct soap*, ns2__WhiteBalance20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WhiteBalance20(struct soap*, const char *, int, ns2__WhiteBalance20 *const*, const char *);
SOAP_FMAC3 ns2__WhiteBalance20 ** SOAP_FMAC4 soap_in_PointerTons2__WhiteBalance20(struct soap*, const char*, ns2__WhiteBalance20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WhiteBalance20(struct soap*, ns2__WhiteBalance20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WhiteBalance20
#define soap_write_PointerTons2__WhiteBalance20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WhiteBalance20(soap, data), 0) || soap_put_PointerTons2__WhiteBalance20(soap, data, "ns2:WhiteBalance20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalance20 ** SOAP_FMAC4 soap_get_PointerTons2__WhiteBalance20(struct soap*, ns2__WhiteBalance20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__WhiteBalance20
#define soap_read_PointerTons2__WhiteBalance20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WhiteBalance20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WideDynamicRange20
#define SOAP_TYPE_PointerTons2__WideDynamicRange20 (1230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WideDynamicRange20(struct soap*, ns2__WideDynamicRange20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WideDynamicRange20(struct soap*, const char *, int, ns2__WideDynamicRange20 *const*, const char *);
SOAP_FMAC3 ns2__WideDynamicRange20 ** SOAP_FMAC4 soap_in_PointerTons2__WideDynamicRange20(struct soap*, const char*, ns2__WideDynamicRange20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WideDynamicRange20(struct soap*, ns2__WideDynamicRange20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WideDynamicRange20
#define soap_write_PointerTons2__WideDynamicRange20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WideDynamicRange20(soap, data), 0) || soap_put_PointerTons2__WideDynamicRange20(soap, data, "ns2:WideDynamicRange20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRange20 ** SOAP_FMAC4 soap_get_PointerTons2__WideDynamicRange20(struct soap*, ns2__WideDynamicRange20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__WideDynamicRange20
#define soap_read_PointerTons2__WideDynamicRange20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WideDynamicRange20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusConfiguration20
#define SOAP_TYPE_PointerTons2__FocusConfiguration20 (1229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusConfiguration20(struct soap*, ns2__FocusConfiguration20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusConfiguration20(struct soap*, const char *, int, ns2__FocusConfiguration20 *const*, const char *);
SOAP_FMAC3 ns2__FocusConfiguration20 ** SOAP_FMAC4 soap_in_PointerTons2__FocusConfiguration20(struct soap*, const char*, ns2__FocusConfiguration20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusConfiguration20(struct soap*, ns2__FocusConfiguration20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusConfiguration20
#define soap_write_PointerTons2__FocusConfiguration20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusConfiguration20(soap, data), 0) || soap_put_PointerTons2__FocusConfiguration20(soap, data, "ns2:FocusConfiguration20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusConfiguration20 ** SOAP_FMAC4 soap_get_PointerTons2__FocusConfiguration20(struct soap*, ns2__FocusConfiguration20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusConfiguration20
#define soap_read_PointerTons2__FocusConfiguration20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusConfiguration20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Exposure20
#define SOAP_TYPE_PointerTons2__Exposure20 (1228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Exposure20(struct soap*, ns2__Exposure20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Exposure20(struct soap*, const char *, int, ns2__Exposure20 *const*, const char *);
SOAP_FMAC3 ns2__Exposure20 ** SOAP_FMAC4 soap_in_PointerTons2__Exposure20(struct soap*, const char*, ns2__Exposure20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Exposure20(struct soap*, ns2__Exposure20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Exposure20
#define soap_write_PointerTons2__Exposure20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Exposure20(soap, data), 0) || soap_put_PointerTons2__Exposure20(soap, data, "ns2:Exposure20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Exposure20 ** SOAP_FMAC4 soap_get_PointerTons2__Exposure20(struct soap*, ns2__Exposure20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__Exposure20
#define soap_read_PointerTons2__Exposure20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Exposure20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__BacklightCompensation20
#define SOAP_TYPE_PointerTons2__BacklightCompensation20 (1227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BacklightCompensation20(struct soap*, ns2__BacklightCompensation20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BacklightCompensation20(struct soap*, const char *, int, ns2__BacklightCompensation20 *const*, const char *);
SOAP_FMAC3 ns2__BacklightCompensation20 ** SOAP_FMAC4 soap_in_PointerTons2__BacklightCompensation20(struct soap*, const char*, ns2__BacklightCompensation20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BacklightCompensation20(struct soap*, ns2__BacklightCompensation20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__BacklightCompensation20
#define soap_write_PointerTons2__BacklightCompensation20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__BacklightCompensation20(soap, data), 0) || soap_put_PointerTons2__BacklightCompensation20(soap, data, "ns2:BacklightCompensation20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensation20 ** SOAP_FMAC4 soap_get_PointerTons2__BacklightCompensation20(struct soap*, ns2__BacklightCompensation20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__BacklightCompensation20
#define soap_read_PointerTons2__BacklightCompensation20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__BacklightCompensation20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusStatus20Extension
#define SOAP_TYPE_PointerTons2__FocusStatus20Extension (1226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusStatus20Extension(struct soap*, ns2__FocusStatus20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusStatus20Extension(struct soap*, const char *, int, ns2__FocusStatus20Extension *const*, const char *);
SOAP_FMAC3 ns2__FocusStatus20Extension ** SOAP_FMAC4 soap_in_PointerTons2__FocusStatus20Extension(struct soap*, const char*, ns2__FocusStatus20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusStatus20Extension(struct soap*, ns2__FocusStatus20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusStatus20Extension
#define soap_write_PointerTons2__FocusStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusStatus20Extension(soap, data), 0) || soap_put_PointerTons2__FocusStatus20Extension(soap, data, "ns2:FocusStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusStatus20Extension ** SOAP_FMAC4 soap_get_PointerTons2__FocusStatus20Extension(struct soap*, ns2__FocusStatus20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusStatus20Extension
#define soap_read_PointerTons2__FocusStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingStatus20Extension
#define SOAP_TYPE_PointerTons2__ImagingStatus20Extension (1225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingStatus20Extension(struct soap*, ns2__ImagingStatus20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingStatus20Extension(struct soap*, const char *, int, ns2__ImagingStatus20Extension *const*, const char *);
SOAP_FMAC3 ns2__ImagingStatus20Extension ** SOAP_FMAC4 soap_in_PointerTons2__ImagingStatus20Extension(struct soap*, const char*, ns2__ImagingStatus20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingStatus20Extension(struct soap*, ns2__ImagingStatus20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingStatus20Extension
#define soap_write_PointerTons2__ImagingStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingStatus20Extension(soap, data), 0) || soap_put_PointerTons2__ImagingStatus20Extension(soap, data, "ns2:ImagingStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingStatus20Extension ** SOAP_FMAC4 soap_get_PointerTons2__ImagingStatus20Extension(struct soap*, ns2__ImagingStatus20Extension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingStatus20Extension
#define soap_read_PointerTons2__ImagingStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusStatus20
#define SOAP_TYPE_PointerTons2__FocusStatus20 (1224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusStatus20(struct soap*, ns2__FocusStatus20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusStatus20(struct soap*, const char *, int, ns2__FocusStatus20 *const*, const char *);
SOAP_FMAC3 ns2__FocusStatus20 ** SOAP_FMAC4 soap_in_PointerTons2__FocusStatus20(struct soap*, const char*, ns2__FocusStatus20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusStatus20(struct soap*, ns2__FocusStatus20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusStatus20
#define soap_write_PointerTons2__FocusStatus20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusStatus20(soap, data), 0) || soap_put_PointerTons2__FocusStatus20(soap, data, "ns2:FocusStatus20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusStatus20 ** SOAP_FMAC4 soap_get_PointerTons2__FocusStatus20(struct soap*, ns2__FocusStatus20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusStatus20
#define soap_read_PointerTons2__FocusStatus20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusStatus20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ContinuousFocusOptions
#define SOAP_TYPE_PointerTons2__ContinuousFocusOptions (1223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ContinuousFocusOptions(struct soap*, ns2__ContinuousFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ContinuousFocusOptions(struct soap*, const char *, int, ns2__ContinuousFocusOptions *const*, const char *);
SOAP_FMAC3 ns2__ContinuousFocusOptions ** SOAP_FMAC4 soap_in_PointerTons2__ContinuousFocusOptions(struct soap*, const char*, ns2__ContinuousFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ContinuousFocusOptions(struct soap*, ns2__ContinuousFocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ContinuousFocusOptions
#define soap_write_PointerTons2__ContinuousFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ContinuousFocusOptions(soap, data), 0) || soap_put_PointerTons2__ContinuousFocusOptions(soap, data, "ns2:ContinuousFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ContinuousFocusOptions ** SOAP_FMAC4 soap_get_PointerTons2__ContinuousFocusOptions(struct soap*, ns2__ContinuousFocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__ContinuousFocusOptions
#define soap_read_PointerTons2__ContinuousFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ContinuousFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RelativeFocusOptions
#define SOAP_TYPE_PointerTons2__RelativeFocusOptions (1222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RelativeFocusOptions(struct soap*, ns2__RelativeFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RelativeFocusOptions(struct soap*, const char *, int, ns2__RelativeFocusOptions *const*, const char *);
SOAP_FMAC3 ns2__RelativeFocusOptions ** SOAP_FMAC4 soap_in_PointerTons2__RelativeFocusOptions(struct soap*, const char*, ns2__RelativeFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RelativeFocusOptions(struct soap*, ns2__RelativeFocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RelativeFocusOptions
#define soap_write_PointerTons2__RelativeFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RelativeFocusOptions(soap, data), 0) || soap_put_PointerTons2__RelativeFocusOptions(soap, data, "ns2:RelativeFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelativeFocusOptions ** SOAP_FMAC4 soap_get_PointerTons2__RelativeFocusOptions(struct soap*, ns2__RelativeFocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__RelativeFocusOptions
#define soap_read_PointerTons2__RelativeFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RelativeFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AbsoluteFocusOptions
#define SOAP_TYPE_PointerTons2__AbsoluteFocusOptions (1221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AbsoluteFocusOptions(struct soap*, ns2__AbsoluteFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AbsoluteFocusOptions(struct soap*, const char *, int, ns2__AbsoluteFocusOptions *const*, const char *);
SOAP_FMAC3 ns2__AbsoluteFocusOptions ** SOAP_FMAC4 soap_in_PointerTons2__AbsoluteFocusOptions(struct soap*, const char*, ns2__AbsoluteFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AbsoluteFocusOptions(struct soap*, ns2__AbsoluteFocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AbsoluteFocusOptions
#define soap_write_PointerTons2__AbsoluteFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AbsoluteFocusOptions(soap, data), 0) || soap_put_PointerTons2__AbsoluteFocusOptions(soap, data, "ns2:AbsoluteFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AbsoluteFocusOptions ** SOAP_FMAC4 soap_get_PointerTons2__AbsoluteFocusOptions(struct soap*, ns2__AbsoluteFocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__AbsoluteFocusOptions
#define soap_read_PointerTons2__AbsoluteFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AbsoluteFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ContinuousFocus
#define SOAP_TYPE_PointerTons2__ContinuousFocus (1220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ContinuousFocus(struct soap*, ns2__ContinuousFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ContinuousFocus(struct soap*, const char *, int, ns2__ContinuousFocus *const*, const char *);
SOAP_FMAC3 ns2__ContinuousFocus ** SOAP_FMAC4 soap_in_PointerTons2__ContinuousFocus(struct soap*, const char*, ns2__ContinuousFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ContinuousFocus(struct soap*, ns2__ContinuousFocus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ContinuousFocus
#define soap_write_PointerTons2__ContinuousFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ContinuousFocus(soap, data), 0) || soap_put_PointerTons2__ContinuousFocus(soap, data, "ns2:ContinuousFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ContinuousFocus ** SOAP_FMAC4 soap_get_PointerTons2__ContinuousFocus(struct soap*, ns2__ContinuousFocus **, const char*, const char*);

#ifndef soap_read_PointerTons2__ContinuousFocus
#define soap_read_PointerTons2__ContinuousFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ContinuousFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RelativeFocus
#define SOAP_TYPE_PointerTons2__RelativeFocus (1219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RelativeFocus(struct soap*, ns2__RelativeFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RelativeFocus(struct soap*, const char *, int, ns2__RelativeFocus *const*, const char *);
SOAP_FMAC3 ns2__RelativeFocus ** SOAP_FMAC4 soap_in_PointerTons2__RelativeFocus(struct soap*, const char*, ns2__RelativeFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RelativeFocus(struct soap*, ns2__RelativeFocus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RelativeFocus
#define soap_write_PointerTons2__RelativeFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RelativeFocus(soap, data), 0) || soap_put_PointerTons2__RelativeFocus(soap, data, "ns2:RelativeFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RelativeFocus ** SOAP_FMAC4 soap_get_PointerTons2__RelativeFocus(struct soap*, ns2__RelativeFocus **, const char*, const char*);

#ifndef soap_read_PointerTons2__RelativeFocus
#define soap_read_PointerTons2__RelativeFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RelativeFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AbsoluteFocus
#define SOAP_TYPE_PointerTons2__AbsoluteFocus (1218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AbsoluteFocus(struct soap*, ns2__AbsoluteFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AbsoluteFocus(struct soap*, const char *, int, ns2__AbsoluteFocus *const*, const char *);
SOAP_FMAC3 ns2__AbsoluteFocus ** SOAP_FMAC4 soap_in_PointerTons2__AbsoluteFocus(struct soap*, const char*, ns2__AbsoluteFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AbsoluteFocus(struct soap*, ns2__AbsoluteFocus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AbsoluteFocus
#define soap_write_PointerTons2__AbsoluteFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AbsoluteFocus(soap, data), 0) || soap_put_PointerTons2__AbsoluteFocus(soap, data, "ns2:AbsoluteFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AbsoluteFocus ** SOAP_FMAC4 soap_get_PointerTons2__AbsoluteFocus(struct soap*, ns2__AbsoluteFocus **, const char*, const char*);

#ifndef soap_read_PointerTons2__AbsoluteFocus
#define soap_read_PointerTons2__AbsoluteFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AbsoluteFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WhiteBalanceOptions
#define SOAP_TYPE_PointerTons2__WhiteBalanceOptions (1212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WhiteBalanceOptions(struct soap*, ns2__WhiteBalanceOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WhiteBalanceOptions(struct soap*, const char *, int, ns2__WhiteBalanceOptions *const*, const char *);
SOAP_FMAC3 ns2__WhiteBalanceOptions ** SOAP_FMAC4 soap_in_PointerTons2__WhiteBalanceOptions(struct soap*, const char*, ns2__WhiteBalanceOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WhiteBalanceOptions(struct soap*, ns2__WhiteBalanceOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WhiteBalanceOptions
#define soap_write_PointerTons2__WhiteBalanceOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WhiteBalanceOptions(soap, data), 0) || soap_put_PointerTons2__WhiteBalanceOptions(soap, data, "ns2:WhiteBalanceOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalanceOptions ** SOAP_FMAC4 soap_get_PointerTons2__WhiteBalanceOptions(struct soap*, ns2__WhiteBalanceOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__WhiteBalanceOptions
#define soap_read_PointerTons2__WhiteBalanceOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WhiteBalanceOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WideDynamicRangeOptions
#define SOAP_TYPE_PointerTons2__WideDynamicRangeOptions (1211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WideDynamicRangeOptions(struct soap*, ns2__WideDynamicRangeOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WideDynamicRangeOptions(struct soap*, const char *, int, ns2__WideDynamicRangeOptions *const*, const char *);
SOAP_FMAC3 ns2__WideDynamicRangeOptions ** SOAP_FMAC4 soap_in_PointerTons2__WideDynamicRangeOptions(struct soap*, const char*, ns2__WideDynamicRangeOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WideDynamicRangeOptions(struct soap*, ns2__WideDynamicRangeOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WideDynamicRangeOptions
#define soap_write_PointerTons2__WideDynamicRangeOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WideDynamicRangeOptions(soap, data), 0) || soap_put_PointerTons2__WideDynamicRangeOptions(soap, data, "ns2:WideDynamicRangeOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRangeOptions ** SOAP_FMAC4 soap_get_PointerTons2__WideDynamicRangeOptions(struct soap*, ns2__WideDynamicRangeOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__WideDynamicRangeOptions
#define soap_read_PointerTons2__WideDynamicRangeOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WideDynamicRangeOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusOptions
#define SOAP_TYPE_PointerTons2__FocusOptions (1209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusOptions(struct soap*, ns2__FocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusOptions(struct soap*, const char *, int, ns2__FocusOptions *const*, const char *);
SOAP_FMAC3 ns2__FocusOptions ** SOAP_FMAC4 soap_in_PointerTons2__FocusOptions(struct soap*, const char*, ns2__FocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusOptions(struct soap*, ns2__FocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusOptions
#define soap_write_PointerTons2__FocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusOptions(soap, data), 0) || soap_put_PointerTons2__FocusOptions(soap, data, "ns2:FocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusOptions ** SOAP_FMAC4 soap_get_PointerTons2__FocusOptions(struct soap*, ns2__FocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusOptions
#define soap_read_PointerTons2__FocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ExposureOptions
#define SOAP_TYPE_PointerTons2__ExposureOptions (1208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ExposureOptions(struct soap*, ns2__ExposureOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ExposureOptions(struct soap*, const char *, int, ns2__ExposureOptions *const*, const char *);
SOAP_FMAC3 ns2__ExposureOptions ** SOAP_FMAC4 soap_in_PointerTons2__ExposureOptions(struct soap*, const char*, ns2__ExposureOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ExposureOptions(struct soap*, ns2__ExposureOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ExposureOptions
#define soap_write_PointerTons2__ExposureOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ExposureOptions(soap, data), 0) || soap_put_PointerTons2__ExposureOptions(soap, data, "ns2:ExposureOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ExposureOptions ** SOAP_FMAC4 soap_get_PointerTons2__ExposureOptions(struct soap*, ns2__ExposureOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__ExposureOptions
#define soap_read_PointerTons2__ExposureOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ExposureOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__BacklightCompensationOptions
#define SOAP_TYPE_PointerTons2__BacklightCompensationOptions (1207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BacklightCompensationOptions(struct soap*, ns2__BacklightCompensationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BacklightCompensationOptions(struct soap*, const char *, int, ns2__BacklightCompensationOptions *const*, const char *);
SOAP_FMAC3 ns2__BacklightCompensationOptions ** SOAP_FMAC4 soap_in_PointerTons2__BacklightCompensationOptions(struct soap*, const char*, ns2__BacklightCompensationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BacklightCompensationOptions(struct soap*, ns2__BacklightCompensationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__BacklightCompensationOptions
#define soap_write_PointerTons2__BacklightCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__BacklightCompensationOptions(soap, data), 0) || soap_put_PointerTons2__BacklightCompensationOptions(soap, data, "ns2:BacklightCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensationOptions ** SOAP_FMAC4 soap_get_PointerTons2__BacklightCompensationOptions(struct soap*, ns2__BacklightCompensationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__BacklightCompensationOptions
#define soap_read_PointerTons2__BacklightCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__BacklightCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Rectangle
#define SOAP_TYPE_PointerTons2__Rectangle (1206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Rectangle(struct soap*, ns2__Rectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Rectangle(struct soap*, const char *, int, ns2__Rectangle *const*, const char *);
SOAP_FMAC3 ns2__Rectangle ** SOAP_FMAC4 soap_in_PointerTons2__Rectangle(struct soap*, const char*, ns2__Rectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Rectangle(struct soap*, ns2__Rectangle *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Rectangle
#define soap_write_PointerTons2__Rectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Rectangle(soap, data), 0) || soap_put_PointerTons2__Rectangle(soap, data, "ns2:Rectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Rectangle ** SOAP_FMAC4 soap_get_PointerTons2__Rectangle(struct soap*, ns2__Rectangle **, const char*, const char*);

#ifndef soap_read_PointerTons2__Rectangle
#define soap_read_PointerTons2__Rectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Rectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettingsExtension
#define SOAP_TYPE_PointerTons2__ImagingSettingsExtension (1205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettingsExtension(struct soap*, ns2__ImagingSettingsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettingsExtension(struct soap*, const char *, int, ns2__ImagingSettingsExtension *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettingsExtension ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettingsExtension(struct soap*, const char*, ns2__ImagingSettingsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettingsExtension(struct soap*, ns2__ImagingSettingsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettingsExtension
#define soap_write_PointerTons2__ImagingSettingsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettingsExtension(soap, data), 0) || soap_put_PointerTons2__ImagingSettingsExtension(soap, data, "ns2:ImagingSettingsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettingsExtension ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettingsExtension(struct soap*, ns2__ImagingSettingsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettingsExtension
#define soap_read_PointerTons2__ImagingSettingsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettingsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WhiteBalance
#define SOAP_TYPE_PointerTons2__WhiteBalance (1204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WhiteBalance(struct soap*, ns2__WhiteBalance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WhiteBalance(struct soap*, const char *, int, ns2__WhiteBalance *const*, const char *);
SOAP_FMAC3 ns2__WhiteBalance ** SOAP_FMAC4 soap_in_PointerTons2__WhiteBalance(struct soap*, const char*, ns2__WhiteBalance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WhiteBalance(struct soap*, ns2__WhiteBalance *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WhiteBalance
#define soap_write_PointerTons2__WhiteBalance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WhiteBalance(soap, data), 0) || soap_put_PointerTons2__WhiteBalance(soap, data, "ns2:WhiteBalance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WhiteBalance ** SOAP_FMAC4 soap_get_PointerTons2__WhiteBalance(struct soap*, ns2__WhiteBalance **, const char*, const char*);

#ifndef soap_read_PointerTons2__WhiteBalance
#define soap_read_PointerTons2__WhiteBalance(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WhiteBalance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__WideDynamicRange
#define SOAP_TYPE_PointerTons2__WideDynamicRange (1203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__WideDynamicRange(struct soap*, ns2__WideDynamicRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__WideDynamicRange(struct soap*, const char *, int, ns2__WideDynamicRange *const*, const char *);
SOAP_FMAC3 ns2__WideDynamicRange ** SOAP_FMAC4 soap_in_PointerTons2__WideDynamicRange(struct soap*, const char*, ns2__WideDynamicRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__WideDynamicRange(struct soap*, ns2__WideDynamicRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__WideDynamicRange
#define soap_write_PointerTons2__WideDynamicRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__WideDynamicRange(soap, data), 0) || soap_put_PointerTons2__WideDynamicRange(soap, data, "ns2:WideDynamicRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__WideDynamicRange ** SOAP_FMAC4 soap_get_PointerTons2__WideDynamicRange(struct soap*, ns2__WideDynamicRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__WideDynamicRange
#define soap_read_PointerTons2__WideDynamicRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__WideDynamicRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IrCutFilterMode
#define SOAP_TYPE_PointerTons2__IrCutFilterMode (1202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IrCutFilterMode(struct soap*, enum ns2__IrCutFilterMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IrCutFilterMode(struct soap*, const char *, int, enum ns2__IrCutFilterMode *const*, const char *);
SOAP_FMAC3 enum ns2__IrCutFilterMode ** SOAP_FMAC4 soap_in_PointerTons2__IrCutFilterMode(struct soap*, const char*, enum ns2__IrCutFilterMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IrCutFilterMode(struct soap*, enum ns2__IrCutFilterMode *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IrCutFilterMode
#define soap_write_PointerTons2__IrCutFilterMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IrCutFilterMode(soap, data), 0) || soap_put_PointerTons2__IrCutFilterMode(soap, data, "ns2:IrCutFilterMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IrCutFilterMode ** SOAP_FMAC4 soap_get_PointerTons2__IrCutFilterMode(struct soap*, enum ns2__IrCutFilterMode **, const char*, const char*);

#ifndef soap_read_PointerTons2__IrCutFilterMode
#define soap_read_PointerTons2__IrCutFilterMode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IrCutFilterMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusConfiguration
#define SOAP_TYPE_PointerTons2__FocusConfiguration (1201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusConfiguration(struct soap*, ns2__FocusConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusConfiguration(struct soap*, const char *, int, ns2__FocusConfiguration *const*, const char *);
SOAP_FMAC3 ns2__FocusConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__FocusConfiguration(struct soap*, const char*, ns2__FocusConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusConfiguration(struct soap*, ns2__FocusConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusConfiguration
#define soap_write_PointerTons2__FocusConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusConfiguration(soap, data), 0) || soap_put_PointerTons2__FocusConfiguration(soap, data, "ns2:FocusConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__FocusConfiguration(struct soap*, ns2__FocusConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusConfiguration
#define soap_read_PointerTons2__FocusConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Exposure
#define SOAP_TYPE_PointerTons2__Exposure (1200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Exposure(struct soap*, ns2__Exposure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Exposure(struct soap*, const char *, int, ns2__Exposure *const*, const char *);
SOAP_FMAC3 ns2__Exposure ** SOAP_FMAC4 soap_in_PointerTons2__Exposure(struct soap*, const char*, ns2__Exposure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Exposure(struct soap*, ns2__Exposure *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Exposure
#define soap_write_PointerTons2__Exposure(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Exposure(soap, data), 0) || soap_put_PointerTons2__Exposure(soap, data, "ns2:Exposure", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Exposure ** SOAP_FMAC4 soap_get_PointerTons2__Exposure(struct soap*, ns2__Exposure **, const char*, const char*);

#ifndef soap_read_PointerTons2__Exposure
#define soap_read_PointerTons2__Exposure(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Exposure(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (1199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);

#ifndef soap_write_PointerTofloat
#define soap_write_PointerTofloat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofloat(soap, data), 0) || soap_put_PointerTofloat(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);

#ifndef soap_read_PointerTofloat
#define soap_read_PointerTofloat(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofloat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__BacklightCompensation
#define SOAP_TYPE_PointerTons2__BacklightCompensation (1198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BacklightCompensation(struct soap*, ns2__BacklightCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BacklightCompensation(struct soap*, const char *, int, ns2__BacklightCompensation *const*, const char *);
SOAP_FMAC3 ns2__BacklightCompensation ** SOAP_FMAC4 soap_in_PointerTons2__BacklightCompensation(struct soap*, const char*, ns2__BacklightCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BacklightCompensation(struct soap*, ns2__BacklightCompensation *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__BacklightCompensation
#define soap_write_PointerTons2__BacklightCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__BacklightCompensation(soap, data), 0) || soap_put_PointerTons2__BacklightCompensation(soap, data, "ns2:BacklightCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BacklightCompensation ** SOAP_FMAC4 soap_get_PointerTons2__BacklightCompensation(struct soap*, ns2__BacklightCompensation **, const char*, const char*);

#ifndef soap_read_PointerTons2__BacklightCompensation
#define soap_read_PointerTons2__BacklightCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__BacklightCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FocusStatus
#define SOAP_TYPE_PointerTons2__FocusStatus (1197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FocusStatus(struct soap*, ns2__FocusStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FocusStatus(struct soap*, const char *, int, ns2__FocusStatus *const*, const char *);
SOAP_FMAC3 ns2__FocusStatus ** SOAP_FMAC4 soap_in_PointerTons2__FocusStatus(struct soap*, const char*, ns2__FocusStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FocusStatus(struct soap*, ns2__FocusStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FocusStatus
#define soap_write_PointerTons2__FocusStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FocusStatus(soap, data), 0) || soap_put_PointerTons2__FocusStatus(soap, data, "ns2:FocusStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FocusStatus ** SOAP_FMAC4 soap_get_PointerTons2__FocusStatus(struct soap*, ns2__FocusStatus **, const char*, const char*);

#ifndef soap_read_PointerTons2__FocusStatus
#define soap_read_PointerTons2__FocusStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FocusStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourStartingConditionOptionsExtension (1196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, ns2__PTZPresetTourStartingConditionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char *, int, ns2__PTZPresetTourStartingConditionOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, ns2__PTZPresetTourStartingConditionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, ns2__PTZPresetTourStartingConditionOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourStartingConditionOptionsExtension
#define soap_write_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(soap, data, "ns2:PTZPresetTourStartingConditionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(struct soap*, ns2__PTZPresetTourStartingConditionOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourStartingConditionOptionsExtension
#define soap_read_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourStartingConditionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourPresetDetailOptionsExtension (1194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, ns2__PTZPresetTourPresetDetailOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char *, int, ns2__PTZPresetTourPresetDetailOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, ns2__PTZPresetTourPresetDetailOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, ns2__PTZPresetTourPresetDetailOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourPresetDetailOptionsExtension
#define soap_write_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(soap, data, "ns2:PTZPresetTourPresetDetailOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(struct soap*, ns2__PTZPresetTourPresetDetailOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourPresetDetailOptionsExtension
#define soap_read_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourPresetDetailOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_PointerTons2__PTZPresetTourPresetDetailOptions (1193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourPresetDetailOptions(struct soap*, ns2__PTZPresetTourPresetDetailOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourPresetDetailOptions(struct soap*, const char *, int, ns2__PTZPresetTourPresetDetailOptions *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourPresetDetailOptions(struct soap*, const char*, ns2__PTZPresetTourPresetDetailOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourPresetDetailOptions(struct soap*, ns2__PTZPresetTourPresetDetailOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourPresetDetailOptions
#define soap_write_PointerTons2__PTZPresetTourPresetDetailOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourPresetDetailOptions(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourPresetDetailOptions(soap, data, "ns2:PTZPresetTourPresetDetailOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourPresetDetailOptions(struct soap*, ns2__PTZPresetTourPresetDetailOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourPresetDetailOptions
#define soap_read_PointerTons2__PTZPresetTourPresetDetailOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourPresetDetailOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourSpotOptions
#define SOAP_TYPE_PointerTons2__PTZPresetTourSpotOptions (1192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourSpotOptions(struct soap*, ns2__PTZPresetTourSpotOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourSpotOptions(struct soap*, const char *, int, ns2__PTZPresetTourSpotOptions *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourSpotOptions(struct soap*, const char*, ns2__PTZPresetTourSpotOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourSpotOptions(struct soap*, ns2__PTZPresetTourSpotOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourSpotOptions
#define soap_write_PointerTons2__PTZPresetTourSpotOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourSpotOptions(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourSpotOptions(soap, data, "ns2:PTZPresetTourSpotOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourSpotOptions(struct soap*, ns2__PTZPresetTourSpotOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourSpotOptions
#define soap_read_PointerTons2__PTZPresetTourSpotOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourSpotOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_PointerTons2__PTZPresetTourStartingConditionOptions (1191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourStartingConditionOptions(struct soap*, ns2__PTZPresetTourStartingConditionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourStartingConditionOptions(struct soap*, const char *, int, ns2__PTZPresetTourStartingConditionOptions *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourStartingConditionOptions(struct soap*, const char*, ns2__PTZPresetTourStartingConditionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourStartingConditionOptions(struct soap*, ns2__PTZPresetTourStartingConditionOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourStartingConditionOptions
#define soap_write_PointerTons2__PTZPresetTourStartingConditionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourStartingConditionOptions(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourStartingConditionOptions(soap, data, "ns2:PTZPresetTourStartingConditionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourStartingConditionOptions(struct soap*, ns2__PTZPresetTourStartingConditionOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourStartingConditionOptions
#define soap_read_PointerTons2__PTZPresetTourStartingConditionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourStartingConditionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourStartingConditionExtension (1190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourStartingConditionExtension(struct soap*, ns2__PTZPresetTourStartingConditionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourStartingConditionExtension(struct soap*, const char *, int, ns2__PTZPresetTourStartingConditionExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourStartingConditionExtension(struct soap*, const char*, ns2__PTZPresetTourStartingConditionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourStartingConditionExtension(struct soap*, ns2__PTZPresetTourStartingConditionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourStartingConditionExtension
#define soap_write_PointerTons2__PTZPresetTourStartingConditionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourStartingConditionExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourStartingConditionExtension(soap, data, "ns2:PTZPresetTourStartingConditionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourStartingConditionExtension(struct soap*, ns2__PTZPresetTourStartingConditionExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourStartingConditionExtension
#define soap_read_PointerTons2__PTZPresetTourStartingConditionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourStartingConditionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourDirection
#define SOAP_TYPE_PointerTons2__PTZPresetTourDirection (1189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourDirection(struct soap*, enum ns2__PTZPresetTourDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourDirection(struct soap*, const char *, int, enum ns2__PTZPresetTourDirection *const*, const char *);
SOAP_FMAC3 enum ns2__PTZPresetTourDirection ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourDirection(struct soap*, const char*, enum ns2__PTZPresetTourDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourDirection(struct soap*, enum ns2__PTZPresetTourDirection *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourDirection
#define soap_write_PointerTons2__PTZPresetTourDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourDirection(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourDirection(soap, data, "ns2:PTZPresetTourDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__PTZPresetTourDirection ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourDirection(struct soap*, enum ns2__PTZPresetTourDirection **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourDirection
#define soap_read_PointerTons2__PTZPresetTourDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourStatusExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourStatusExtension (1188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourStatusExtension(struct soap*, ns2__PTZPresetTourStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourStatusExtension(struct soap*, const char *, int, ns2__PTZPresetTourStatusExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourStatusExtension(struct soap*, const char*, ns2__PTZPresetTourStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourStatusExtension(struct soap*, ns2__PTZPresetTourStatusExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourStatusExtension
#define soap_write_PointerTons2__PTZPresetTourStatusExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourStatusExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourStatusExtension(soap, data, "ns2:PTZPresetTourStatusExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourStatusExtension(struct soap*, ns2__PTZPresetTourStatusExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourStatusExtension
#define soap_read_PointerTons2__PTZPresetTourStatusExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourStatusExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourTypeExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourTypeExtension (1186)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourTypeExtension(struct soap*, ns2__PTZPresetTourTypeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourTypeExtension(struct soap*, const char *, int, ns2__PTZPresetTourTypeExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourTypeExtension(struct soap*, const char*, ns2__PTZPresetTourTypeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourTypeExtension(struct soap*, ns2__PTZPresetTourTypeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourTypeExtension
#define soap_write_PointerTons2__PTZPresetTourTypeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourTypeExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourTypeExtension(soap, data, "ns2:PTZPresetTourTypeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourTypeExtension(struct soap*, ns2__PTZPresetTourTypeExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourTypeExtension
#define soap_read_PointerTons2__PTZPresetTourTypeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourTypeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourSpotExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourSpotExtension (1185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourSpotExtension(struct soap*, ns2__PTZPresetTourSpotExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourSpotExtension(struct soap*, const char *, int, ns2__PTZPresetTourSpotExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourSpotExtension(struct soap*, const char*, ns2__PTZPresetTourSpotExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourSpotExtension(struct soap*, ns2__PTZPresetTourSpotExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourSpotExtension
#define soap_write_PointerTons2__PTZPresetTourSpotExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourSpotExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourSpotExtension(soap, data, "ns2:PTZPresetTourSpotExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourSpotExtension(struct soap*, ns2__PTZPresetTourSpotExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourSpotExtension
#define soap_read_PointerTons2__PTZPresetTourSpotExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourSpotExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZSpeed
#define SOAP_TYPE_PointerTons2__PTZSpeed (1184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZSpeed(struct soap*, ns2__PTZSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZSpeed(struct soap*, const char *, int, ns2__PTZSpeed *const*, const char *);
SOAP_FMAC3 ns2__PTZSpeed ** SOAP_FMAC4 soap_in_PointerTons2__PTZSpeed(struct soap*, const char*, ns2__PTZSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZSpeed(struct soap*, ns2__PTZSpeed *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZSpeed
#define soap_write_PointerTons2__PTZSpeed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZSpeed(soap, data), 0) || soap_put_PointerTons2__PTZSpeed(soap, data, "ns2:PTZSpeed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZSpeed ** SOAP_FMAC4 soap_get_PointerTons2__PTZSpeed(struct soap*, ns2__PTZSpeed **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZSpeed
#define soap_read_PointerTons2__PTZSpeed(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZSpeed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourPresetDetail
#define SOAP_TYPE_PointerTons2__PTZPresetTourPresetDetail (1183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourPresetDetail(struct soap*, ns2__PTZPresetTourPresetDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourPresetDetail(struct soap*, const char *, int, ns2__PTZPresetTourPresetDetail *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourPresetDetail(struct soap*, const char*, ns2__PTZPresetTourPresetDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourPresetDetail(struct soap*, ns2__PTZPresetTourPresetDetail *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourPresetDetail
#define soap_write_PointerTons2__PTZPresetTourPresetDetail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourPresetDetail(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourPresetDetail(soap, data, "ns2:PTZPresetTourPresetDetail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourPresetDetail(struct soap*, ns2__PTZPresetTourPresetDetail **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourPresetDetail
#define soap_read_PointerTons2__PTZPresetTourPresetDetail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourPresetDetail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourExtension (1182)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourExtension(struct soap*, ns2__PTZPresetTourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourExtension(struct soap*, const char *, int, ns2__PTZPresetTourExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourExtension(struct soap*, const char*, ns2__PTZPresetTourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourExtension(struct soap*, ns2__PTZPresetTourExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourExtension
#define soap_write_PointerTons2__PTZPresetTourExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourExtension(soap, data, "ns2:PTZPresetTourExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourExtension(struct soap*, ns2__PTZPresetTourExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourExtension
#define soap_read_PointerTons2__PTZPresetTourExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourSpot
#define SOAP_TYPE_PointerTons2__PTZPresetTourSpot (1180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourSpot(struct soap*, ns2__PTZPresetTourSpot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourSpot(struct soap*, const char *, int, ns2__PTZPresetTourSpot *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourSpot ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourSpot(struct soap*, const char*, ns2__PTZPresetTourSpot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourSpot(struct soap*, ns2__PTZPresetTourSpot *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourSpot
#define soap_write_PointerTons2__PTZPresetTourSpot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourSpot(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourSpot(soap, data, "ns2:PTZPresetTourSpot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSpot ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourSpot(struct soap*, ns2__PTZPresetTourSpot **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourSpot
#define soap_read_PointerTons2__PTZPresetTourSpot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourSpot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourStartingCondition
#define SOAP_TYPE_PointerTons2__PTZPresetTourStartingCondition (1179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourStartingCondition(struct soap*, ns2__PTZPresetTourStartingCondition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourStartingCondition(struct soap*, const char *, int, ns2__PTZPresetTourStartingCondition *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourStartingCondition(struct soap*, const char*, ns2__PTZPresetTourStartingCondition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourStartingCondition(struct soap*, ns2__PTZPresetTourStartingCondition *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourStartingCondition
#define soap_write_PointerTons2__PTZPresetTourStartingCondition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourStartingCondition(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourStartingCondition(soap, data, "ns2:PTZPresetTourStartingCondition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourStartingCondition(struct soap*, ns2__PTZPresetTourStartingCondition **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourStartingCondition
#define soap_read_PointerTons2__PTZPresetTourStartingCondition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourStartingCondition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourStatus
#define SOAP_TYPE_PointerTons2__PTZPresetTourStatus (1178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourStatus(struct soap*, ns2__PTZPresetTourStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourStatus(struct soap*, const char *, int, ns2__PTZPresetTourStatus *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourStatus ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourStatus(struct soap*, const char*, ns2__PTZPresetTourStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourStatus(struct soap*, ns2__PTZPresetTourStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourStatus
#define soap_write_PointerTons2__PTZPresetTourStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourStatus(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourStatus(soap, data, "ns2:PTZPresetTourStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourStatus ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourStatus(struct soap*, ns2__PTZPresetTourStatus **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourStatus
#define soap_read_PointerTons2__PTZPresetTourStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MoveStatus
#define SOAP_TYPE_PointerTons2__MoveStatus (1177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MoveStatus(struct soap*, enum ns2__MoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MoveStatus(struct soap*, const char *, int, enum ns2__MoveStatus *const*, const char *);
SOAP_FMAC3 enum ns2__MoveStatus ** SOAP_FMAC4 soap_in_PointerTons2__MoveStatus(struct soap*, const char*, enum ns2__MoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MoveStatus(struct soap*, enum ns2__MoveStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MoveStatus
#define soap_write_PointerTons2__MoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MoveStatus(soap, data), 0) || soap_put_PointerTons2__MoveStatus(soap, data, "ns2:MoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__MoveStatus ** SOAP_FMAC4 soap_get_PointerTons2__MoveStatus(struct soap*, enum ns2__MoveStatus **, const char*, const char*);

#ifndef soap_read_PointerTons2__MoveStatus
#define soap_read_PointerTons2__MoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Name
#define SOAP_TYPE_PointerTons2__Name (1176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Name(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Name(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__Name(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Name(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Name
#define soap_write_PointerTons2__Name(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Name(soap, data), 0) || soap_put_PointerTons2__Name(soap, data, "ns2:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__Name(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__Name
#define soap_read_PointerTons2__Name(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Name(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZMoveStatus
#define SOAP_TYPE_PointerTons2__PTZMoveStatus (1175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZMoveStatus(struct soap*, ns2__PTZMoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZMoveStatus(struct soap*, const char *, int, ns2__PTZMoveStatus *const*, const char *);
SOAP_FMAC3 ns2__PTZMoveStatus ** SOAP_FMAC4 soap_in_PointerTons2__PTZMoveStatus(struct soap*, const char*, ns2__PTZMoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZMoveStatus(struct soap*, ns2__PTZMoveStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZMoveStatus
#define soap_write_PointerTons2__PTZMoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZMoveStatus(soap, data), 0) || soap_put_PointerTons2__PTZMoveStatus(soap, data, "ns2:PTZMoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZMoveStatus ** SOAP_FMAC4 soap_get_PointerTons2__PTZMoveStatus(struct soap*, ns2__PTZMoveStatus **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZMoveStatus
#define soap_read_PointerTons2__PTZMoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZMoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZVector
#define SOAP_TYPE_PointerTons2__PTZVector (1174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZVector(struct soap*, ns2__PTZVector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZVector(struct soap*, const char *, int, ns2__PTZVector *const*, const char *);
SOAP_FMAC3 ns2__PTZVector ** SOAP_FMAC4 soap_in_PointerTons2__PTZVector(struct soap*, const char*, ns2__PTZVector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZVector(struct soap*, ns2__PTZVector *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZVector
#define soap_write_PointerTons2__PTZVector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZVector(soap, data), 0) || soap_put_PointerTons2__PTZVector(soap, data, "ns2:PTZVector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZVector ** SOAP_FMAC4 soap_get_PointerTons2__PTZVector(struct soap*, ns2__PTZVector **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZVector
#define soap_read_PointerTons2__PTZVector(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZVector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Vector1D
#define SOAP_TYPE_PointerTons2__Vector1D (1173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Vector1D(struct soap*, ns2__Vector1D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Vector1D(struct soap*, const char *, int, ns2__Vector1D *const*, const char *);
SOAP_FMAC3 ns2__Vector1D ** SOAP_FMAC4 soap_in_PointerTons2__Vector1D(struct soap*, const char*, ns2__Vector1D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Vector1D(struct soap*, ns2__Vector1D *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Vector1D
#define soap_write_PointerTons2__Vector1D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Vector1D(soap, data), 0) || soap_put_PointerTons2__Vector1D(soap, data, "ns2:Vector1D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Vector1D ** SOAP_FMAC4 soap_get_PointerTons2__Vector1D(struct soap*, ns2__Vector1D **, const char*, const char*);

#ifndef soap_read_PointerTons2__Vector1D
#define soap_read_PointerTons2__Vector1D(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Vector1D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Vector2D
#define SOAP_TYPE_PointerTons2__Vector2D (1172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Vector2D(struct soap*, ns2__Vector2D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Vector2D(struct soap*, const char *, int, ns2__Vector2D *const*, const char *);
SOAP_FMAC3 ns2__Vector2D ** SOAP_FMAC4 soap_in_PointerTons2__Vector2D(struct soap*, const char*, ns2__Vector2D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Vector2D(struct soap*, ns2__Vector2D *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Vector2D
#define soap_write_PointerTons2__Vector2D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Vector2D(soap, data), 0) || soap_put_PointerTons2__Vector2D(soap, data, "ns2:Vector2D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Vector2D ** SOAP_FMAC4 soap_get_PointerTons2__Vector2D(struct soap*, ns2__Vector2D **, const char*, const char*);

#ifndef soap_read_PointerTons2__Vector2D
#define soap_read_PointerTons2__Vector2D(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Vector2D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (1171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyURI
#define soap_write_PointerToxsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__anyURI(soap, data), 0) || soap_put_PointerToxsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyURI
#define soap_read_PointerToxsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__FloatRange
#define SOAP_TYPE_PointerTons2__FloatRange (1170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__FloatRange(struct soap*, ns2__FloatRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__FloatRange(struct soap*, const char *, int, ns2__FloatRange *const*, const char *);
SOAP_FMAC3 ns2__FloatRange ** SOAP_FMAC4 soap_in_PointerTons2__FloatRange(struct soap*, const char*, ns2__FloatRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__FloatRange(struct soap*, ns2__FloatRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__FloatRange
#define soap_write_PointerTons2__FloatRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__FloatRange(soap, data), 0) || soap_put_PointerTons2__FloatRange(soap, data, "ns2:FloatRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__FloatRange ** SOAP_FMAC4 soap_get_PointerTons2__FloatRange(struct soap*, ns2__FloatRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__FloatRange
#define soap_read_PointerTons2__FloatRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__FloatRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZSpacesExtension
#define SOAP_TYPE_PointerTons2__PTZSpacesExtension (1169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZSpacesExtension(struct soap*, ns2__PTZSpacesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZSpacesExtension(struct soap*, const char *, int, ns2__PTZSpacesExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZSpacesExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZSpacesExtension(struct soap*, const char*, ns2__PTZSpacesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZSpacesExtension(struct soap*, ns2__PTZSpacesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZSpacesExtension
#define soap_write_PointerTons2__PTZSpacesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZSpacesExtension(soap, data), 0) || soap_put_PointerTons2__PTZSpacesExtension(soap, data, "ns2:PTZSpacesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZSpacesExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZSpacesExtension(struct soap*, ns2__PTZSpacesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZSpacesExtension
#define soap_read_PointerTons2__PTZSpacesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZSpacesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Space1DDescription
#define SOAP_TYPE_PointerTons2__Space1DDescription (1166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Space1DDescription(struct soap*, ns2__Space1DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Space1DDescription(struct soap*, const char *, int, ns2__Space1DDescription *const*, const char *);
SOAP_FMAC3 ns2__Space1DDescription ** SOAP_FMAC4 soap_in_PointerTons2__Space1DDescription(struct soap*, const char*, ns2__Space1DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Space1DDescription(struct soap*, ns2__Space1DDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Space1DDescription
#define soap_write_PointerTons2__Space1DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Space1DDescription(soap, data), 0) || soap_put_PointerTons2__Space1DDescription(soap, data, "ns2:Space1DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Space1DDescription ** SOAP_FMAC4 soap_get_PointerTons2__Space1DDescription(struct soap*, ns2__Space1DDescription **, const char*, const char*);

#ifndef soap_read_PointerTons2__Space1DDescription
#define soap_read_PointerTons2__Space1DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Space1DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Space2DDescription
#define SOAP_TYPE_PointerTons2__Space2DDescription (1165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Space2DDescription(struct soap*, ns2__Space2DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Space2DDescription(struct soap*, const char *, int, ns2__Space2DDescription *const*, const char *);
SOAP_FMAC3 ns2__Space2DDescription ** SOAP_FMAC4 soap_in_PointerTons2__Space2DDescription(struct soap*, const char*, ns2__Space2DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Space2DDescription(struct soap*, ns2__Space2DDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Space2DDescription
#define soap_write_PointerTons2__Space2DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Space2DDescription(soap, data), 0) || soap_put_PointerTons2__Space2DDescription(soap, data, "ns2:Space2DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Space2DDescription ** SOAP_FMAC4 soap_get_PointerTons2__Space2DDescription(struct soap*, ns2__Space2DDescription **, const char*, const char*);

#ifndef soap_read_PointerTons2__Space2DDescription
#define soap_read_PointerTons2__Space2DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Space2DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReverseOptionsExtension
#define SOAP_TYPE_PointerTons2__ReverseOptionsExtension (1164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReverseOptionsExtension(struct soap*, ns2__ReverseOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReverseOptionsExtension(struct soap*, const char *, int, ns2__ReverseOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__ReverseOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__ReverseOptionsExtension(struct soap*, const char*, ns2__ReverseOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReverseOptionsExtension(struct soap*, ns2__ReverseOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReverseOptionsExtension
#define soap_write_PointerTons2__ReverseOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReverseOptionsExtension(soap, data), 0) || soap_put_PointerTons2__ReverseOptionsExtension(soap, data, "ns2:ReverseOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReverseOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__ReverseOptionsExtension(struct soap*, ns2__ReverseOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReverseOptionsExtension
#define soap_read_PointerTons2__ReverseOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReverseOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EFlipOptionsExtension
#define SOAP_TYPE_PointerTons2__EFlipOptionsExtension (1162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EFlipOptionsExtension(struct soap*, ns2__EFlipOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EFlipOptionsExtension(struct soap*, const char *, int, ns2__EFlipOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__EFlipOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__EFlipOptionsExtension(struct soap*, const char*, ns2__EFlipOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EFlipOptionsExtension(struct soap*, ns2__EFlipOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EFlipOptionsExtension
#define soap_write_PointerTons2__EFlipOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EFlipOptionsExtension(soap, data), 0) || soap_put_PointerTons2__EFlipOptionsExtension(soap, data, "ns2:EFlipOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlipOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__EFlipOptionsExtension(struct soap*, ns2__EFlipOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__EFlipOptionsExtension
#define soap_read_PointerTons2__EFlipOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EFlipOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTControlDirectionOptionsExtension
#define SOAP_TYPE_PointerTons2__PTControlDirectionOptionsExtension (1160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTControlDirectionOptionsExtension(struct soap*, ns2__PTControlDirectionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTControlDirectionOptionsExtension(struct soap*, const char *, int, ns2__PTControlDirectionOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTControlDirectionOptionsExtension(struct soap*, const char*, ns2__PTControlDirectionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTControlDirectionOptionsExtension(struct soap*, ns2__PTControlDirectionOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTControlDirectionOptionsExtension
#define soap_write_PointerTons2__PTControlDirectionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTControlDirectionOptionsExtension(soap, data), 0) || soap_put_PointerTons2__PTControlDirectionOptionsExtension(soap, data, "ns2:PTControlDirectionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTControlDirectionOptionsExtension(struct soap*, ns2__PTControlDirectionOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTControlDirectionOptionsExtension
#define soap_read_PointerTons2__PTControlDirectionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTControlDirectionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReverseOptions
#define SOAP_TYPE_PointerTons2__ReverseOptions (1159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReverseOptions(struct soap*, ns2__ReverseOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReverseOptions(struct soap*, const char *, int, ns2__ReverseOptions *const*, const char *);
SOAP_FMAC3 ns2__ReverseOptions ** SOAP_FMAC4 soap_in_PointerTons2__ReverseOptions(struct soap*, const char*, ns2__ReverseOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReverseOptions(struct soap*, ns2__ReverseOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReverseOptions
#define soap_write_PointerTons2__ReverseOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReverseOptions(soap, data), 0) || soap_put_PointerTons2__ReverseOptions(soap, data, "ns2:ReverseOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReverseOptions ** SOAP_FMAC4 soap_get_PointerTons2__ReverseOptions(struct soap*, ns2__ReverseOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReverseOptions
#define soap_read_PointerTons2__ReverseOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReverseOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EFlipOptions
#define SOAP_TYPE_PointerTons2__EFlipOptions (1158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EFlipOptions(struct soap*, ns2__EFlipOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EFlipOptions(struct soap*, const char *, int, ns2__EFlipOptions *const*, const char *);
SOAP_FMAC3 ns2__EFlipOptions ** SOAP_FMAC4 soap_in_PointerTons2__EFlipOptions(struct soap*, const char*, ns2__EFlipOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EFlipOptions(struct soap*, ns2__EFlipOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EFlipOptions
#define soap_write_PointerTons2__EFlipOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EFlipOptions(soap, data), 0) || soap_put_PointerTons2__EFlipOptions(soap, data, "ns2:EFlipOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlipOptions ** SOAP_FMAC4 soap_get_PointerTons2__EFlipOptions(struct soap*, ns2__EFlipOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__EFlipOptions
#define soap_read_PointerTons2__EFlipOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EFlipOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IntAttrList
#define SOAP_TYPE_PointerTons2__IntAttrList (1157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IntAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IntAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__IntAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IntAttrList(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IntAttrList
#define soap_write_PointerTons2__IntAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IntAttrList(soap, data), 0) || soap_put_PointerTons2__IntAttrList(soap, data, "ns2:IntAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__IntAttrList(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__IntAttrList
#define soap_read_PointerTons2__IntAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IntAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZConfigurationOptions2
#define SOAP_TYPE_PointerTons2__PTZConfigurationOptions2 (1156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZConfigurationOptions2(struct soap*, ns2__PTZConfigurationOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZConfigurationOptions2(struct soap*, const char *, int, ns2__PTZConfigurationOptions2 *const*, const char *);
SOAP_FMAC3 ns2__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_in_PointerTons2__PTZConfigurationOptions2(struct soap*, const char*, ns2__PTZConfigurationOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZConfigurationOptions2(struct soap*, ns2__PTZConfigurationOptions2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZConfigurationOptions2
#define soap_write_PointerTons2__PTZConfigurationOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZConfigurationOptions2(soap, data), 0) || soap_put_PointerTons2__PTZConfigurationOptions2(soap, data, "ns2:PTZConfigurationOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_get_PointerTons2__PTZConfigurationOptions2(struct soap*, ns2__PTZConfigurationOptions2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZConfigurationOptions2
#define soap_read_PointerTons2__PTZConfigurationOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZConfigurationOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTControlDirectionOptions
#define SOAP_TYPE_PointerTons2__PTControlDirectionOptions (1155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTControlDirectionOptions(struct soap*, ns2__PTControlDirectionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTControlDirectionOptions(struct soap*, const char *, int, ns2__PTControlDirectionOptions *const*, const char *);
SOAP_FMAC3 ns2__PTControlDirectionOptions ** SOAP_FMAC4 soap_in_PointerTons2__PTControlDirectionOptions(struct soap*, const char*, ns2__PTControlDirectionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTControlDirectionOptions(struct soap*, ns2__PTControlDirectionOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTControlDirectionOptions
#define soap_write_PointerTons2__PTControlDirectionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTControlDirectionOptions(soap, data), 0) || soap_put_PointerTons2__PTControlDirectionOptions(soap, data, "ns2:PTControlDirectionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirectionOptions ** SOAP_FMAC4 soap_get_PointerTons2__PTControlDirectionOptions(struct soap*, ns2__PTControlDirectionOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTControlDirectionOptions
#define soap_read_PointerTons2__PTControlDirectionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTControlDirectionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DurationRange
#define SOAP_TYPE_PointerTons2__DurationRange (1154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DurationRange(struct soap*, ns2__DurationRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DurationRange(struct soap*, const char *, int, ns2__DurationRange *const*, const char *);
SOAP_FMAC3 ns2__DurationRange ** SOAP_FMAC4 soap_in_PointerTons2__DurationRange(struct soap*, const char*, ns2__DurationRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DurationRange(struct soap*, ns2__DurationRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DurationRange
#define soap_write_PointerTons2__DurationRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DurationRange(soap, data), 0) || soap_put_PointerTons2__DurationRange(soap, data, "ns2:DurationRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DurationRange ** SOAP_FMAC4 soap_get_PointerTons2__DurationRange(struct soap*, ns2__DurationRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__DurationRange
#define soap_read_PointerTons2__DurationRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DurationRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZSpaces
#define SOAP_TYPE_PointerTons2__PTZSpaces (1153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZSpaces(struct soap*, ns2__PTZSpaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZSpaces(struct soap*, const char *, int, ns2__PTZSpaces *const*, const char *);
SOAP_FMAC3 ns2__PTZSpaces ** SOAP_FMAC4 soap_in_PointerTons2__PTZSpaces(struct soap*, const char*, ns2__PTZSpaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZSpaces(struct soap*, ns2__PTZSpaces *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZSpaces
#define soap_write_PointerTons2__PTZSpaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZSpaces(soap, data), 0) || soap_put_PointerTons2__PTZSpaces(soap, data, "ns2:PTZSpaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZSpaces ** SOAP_FMAC4 soap_get_PointerTons2__PTZSpaces(struct soap*, ns2__PTZSpaces **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZSpaces
#define soap_read_PointerTons2__PTZSpaces(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZSpaces(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTControlDirectionExtension
#define SOAP_TYPE_PointerTons2__PTControlDirectionExtension (1152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTControlDirectionExtension(struct soap*, ns2__PTControlDirectionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTControlDirectionExtension(struct soap*, const char *, int, ns2__PTControlDirectionExtension *const*, const char *);
SOAP_FMAC3 ns2__PTControlDirectionExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTControlDirectionExtension(struct soap*, const char*, ns2__PTControlDirectionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTControlDirectionExtension(struct soap*, ns2__PTControlDirectionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTControlDirectionExtension
#define soap_write_PointerTons2__PTControlDirectionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTControlDirectionExtension(soap, data), 0) || soap_put_PointerTons2__PTControlDirectionExtension(soap, data, "ns2:PTControlDirectionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirectionExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTControlDirectionExtension(struct soap*, ns2__PTControlDirectionExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTControlDirectionExtension
#define soap_read_PointerTons2__PTControlDirectionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTControlDirectionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Reverse
#define SOAP_TYPE_PointerTons2__Reverse (1151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Reverse(struct soap*, ns2__Reverse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Reverse(struct soap*, const char *, int, ns2__Reverse *const*, const char *);
SOAP_FMAC3 ns2__Reverse ** SOAP_FMAC4 soap_in_PointerTons2__Reverse(struct soap*, const char*, ns2__Reverse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Reverse(struct soap*, ns2__Reverse *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Reverse
#define soap_write_PointerTons2__Reverse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Reverse(soap, data), 0) || soap_put_PointerTons2__Reverse(soap, data, "ns2:Reverse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Reverse ** SOAP_FMAC4 soap_get_PointerTons2__Reverse(struct soap*, ns2__Reverse **, const char*, const char*);

#ifndef soap_read_PointerTons2__Reverse
#define soap_read_PointerTons2__Reverse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Reverse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EFlip
#define SOAP_TYPE_PointerTons2__EFlip (1150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EFlip(struct soap*, ns2__EFlip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EFlip(struct soap*, const char *, int, ns2__EFlip *const*, const char *);
SOAP_FMAC3 ns2__EFlip ** SOAP_FMAC4 soap_in_PointerTons2__EFlip(struct soap*, const char*, ns2__EFlip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EFlip(struct soap*, ns2__EFlip *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EFlip
#define soap_write_PointerTons2__EFlip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EFlip(soap, data), 0) || soap_put_PointerTons2__EFlip(soap, data, "ns2:EFlip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EFlip ** SOAP_FMAC4 soap_get_PointerTons2__EFlip(struct soap*, ns2__EFlip **, const char*, const char*);

#ifndef soap_read_PointerTons2__EFlip
#define soap_read_PointerTons2__EFlip(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EFlip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZConfigurationExtension2
#define SOAP_TYPE_PointerTons2__PTZConfigurationExtension2 (1149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZConfigurationExtension2(struct soap*, ns2__PTZConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZConfigurationExtension2(struct soap*, const char *, int, ns2__PTZConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 ns2__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__PTZConfigurationExtension2(struct soap*, const char*, ns2__PTZConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZConfigurationExtension2(struct soap*, ns2__PTZConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZConfigurationExtension2
#define soap_write_PointerTons2__PTZConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZConfigurationExtension2(soap, data), 0) || soap_put_PointerTons2__PTZConfigurationExtension2(soap, data, "ns2:PTZConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__PTZConfigurationExtension2(struct soap*, ns2__PTZConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZConfigurationExtension2
#define soap_read_PointerTons2__PTZConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTControlDirection
#define SOAP_TYPE_PointerTons2__PTControlDirection (1148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTControlDirection(struct soap*, ns2__PTControlDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTControlDirection(struct soap*, const char *, int, ns2__PTControlDirection *const*, const char *);
SOAP_FMAC3 ns2__PTControlDirection ** SOAP_FMAC4 soap_in_PointerTons2__PTControlDirection(struct soap*, const char*, ns2__PTControlDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTControlDirection(struct soap*, ns2__PTControlDirection *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTControlDirection
#define soap_write_PointerTons2__PTControlDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTControlDirection(soap, data), 0) || soap_put_PointerTons2__PTControlDirection(soap, data, "ns2:PTControlDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTControlDirection ** SOAP_FMAC4 soap_get_PointerTons2__PTControlDirection(struct soap*, ns2__PTControlDirection **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTControlDirection
#define soap_read_PointerTons2__PTControlDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTControlDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourSupportedExtension
#define SOAP_TYPE_PointerTons2__PTZPresetTourSupportedExtension (1147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourSupportedExtension(struct soap*, ns2__PTZPresetTourSupportedExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourSupportedExtension(struct soap*, const char *, int, ns2__PTZPresetTourSupportedExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourSupportedExtension(struct soap*, const char*, ns2__PTZPresetTourSupportedExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourSupportedExtension(struct soap*, ns2__PTZPresetTourSupportedExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourSupportedExtension
#define soap_write_PointerTons2__PTZPresetTourSupportedExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourSupportedExtension(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourSupportedExtension(soap, data, "ns2:PTZPresetTourSupportedExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourSupportedExtension(struct soap*, ns2__PTZPresetTourSupportedExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourSupportedExtension
#define soap_read_PointerTons2__PTZPresetTourSupportedExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourSupportedExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZNodeExtension2
#define SOAP_TYPE_PointerTons2__PTZNodeExtension2 (1145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZNodeExtension2(struct soap*, ns2__PTZNodeExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZNodeExtension2(struct soap*, const char *, int, ns2__PTZNodeExtension2 *const*, const char *);
SOAP_FMAC3 ns2__PTZNodeExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__PTZNodeExtension2(struct soap*, const char*, ns2__PTZNodeExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZNodeExtension2(struct soap*, ns2__PTZNodeExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZNodeExtension2
#define soap_write_PointerTons2__PTZNodeExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZNodeExtension2(soap, data), 0) || soap_put_PointerTons2__PTZNodeExtension2(soap, data, "ns2:PTZNodeExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZNodeExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__PTZNodeExtension2(struct soap*, ns2__PTZNodeExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZNodeExtension2
#define soap_read_PointerTons2__PTZNodeExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZNodeExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZPresetTourSupported
#define SOAP_TYPE_PointerTons2__PTZPresetTourSupported (1144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZPresetTourSupported(struct soap*, ns2__PTZPresetTourSupported *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZPresetTourSupported(struct soap*, const char *, int, ns2__PTZPresetTourSupported *const*, const char *);
SOAP_FMAC3 ns2__PTZPresetTourSupported ** SOAP_FMAC4 soap_in_PointerTons2__PTZPresetTourSupported(struct soap*, const char*, ns2__PTZPresetTourSupported **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZPresetTourSupported(struct soap*, ns2__PTZPresetTourSupported *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZPresetTourSupported
#define soap_write_PointerTons2__PTZPresetTourSupported(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZPresetTourSupported(soap, data), 0) || soap_put_PointerTons2__PTZPresetTourSupported(soap, data, "ns2:PTZPresetTourSupported", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZPresetTourSupported ** SOAP_FMAC4 soap_get_PointerTons2__PTZPresetTourSupported(struct soap*, ns2__PTZPresetTourSupported **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZPresetTourSupported
#define soap_read_PointerTons2__PTZPresetTourSupported(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZPresetTourSupported(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EapMethodExtension
#define SOAP_TYPE_PointerTons2__EapMethodExtension (1143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EapMethodExtension(struct soap*, ns2__EapMethodExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EapMethodExtension(struct soap*, const char *, int, ns2__EapMethodExtension *const*, const char *);
SOAP_FMAC3 ns2__EapMethodExtension ** SOAP_FMAC4 soap_in_PointerTons2__EapMethodExtension(struct soap*, const char*, ns2__EapMethodExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EapMethodExtension(struct soap*, ns2__EapMethodExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EapMethodExtension
#define soap_write_PointerTons2__EapMethodExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EapMethodExtension(soap, data), 0) || soap_put_PointerTons2__EapMethodExtension(soap, data, "ns2:EapMethodExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EapMethodExtension ** SOAP_FMAC4 soap_get_PointerTons2__EapMethodExtension(struct soap*, ns2__EapMethodExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__EapMethodExtension
#define soap_read_PointerTons2__EapMethodExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EapMethodExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TLSConfiguration
#define SOAP_TYPE_PointerTons2__TLSConfiguration (1142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TLSConfiguration(struct soap*, ns2__TLSConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TLSConfiguration(struct soap*, const char *, int, ns2__TLSConfiguration *const*, const char *);
SOAP_FMAC3 ns2__TLSConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__TLSConfiguration(struct soap*, const char*, ns2__TLSConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TLSConfiguration(struct soap*, ns2__TLSConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TLSConfiguration
#define soap_write_PointerTons2__TLSConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TLSConfiguration(soap, data), 0) || soap_put_PointerTons2__TLSConfiguration(soap, data, "ns2:TLSConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TLSConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__TLSConfiguration(struct soap*, ns2__TLSConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__TLSConfiguration
#define soap_read_PointerTons2__TLSConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TLSConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot1XConfigurationExtension
#define SOAP_TYPE_PointerTons2__Dot1XConfigurationExtension (1141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot1XConfigurationExtension(struct soap*, ns2__Dot1XConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot1XConfigurationExtension(struct soap*, const char *, int, ns2__Dot1XConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__Dot1XConfigurationExtension(struct soap*, const char*, ns2__Dot1XConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot1XConfigurationExtension(struct soap*, ns2__Dot1XConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot1XConfigurationExtension
#define soap_write_PointerTons2__Dot1XConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot1XConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__Dot1XConfigurationExtension(soap, data, "ns2:Dot1XConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__Dot1XConfigurationExtension(struct soap*, ns2__Dot1XConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot1XConfigurationExtension
#define soap_read_PointerTons2__Dot1XConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot1XConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EAPMethodConfiguration
#define SOAP_TYPE_PointerTons2__EAPMethodConfiguration (1140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EAPMethodConfiguration(struct soap*, ns2__EAPMethodConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EAPMethodConfiguration(struct soap*, const char *, int, ns2__EAPMethodConfiguration *const*, const char *);
SOAP_FMAC3 ns2__EAPMethodConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__EAPMethodConfiguration(struct soap*, const char*, ns2__EAPMethodConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EAPMethodConfiguration(struct soap*, ns2__EAPMethodConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EAPMethodConfiguration
#define soap_write_PointerTons2__EAPMethodConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EAPMethodConfiguration(soap, data), 0) || soap_put_PointerTons2__EAPMethodConfiguration(soap, data, "ns2:EAPMethodConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EAPMethodConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__EAPMethodConfiguration(struct soap*, ns2__EAPMethodConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__EAPMethodConfiguration
#define soap_read_PointerTons2__EAPMethodConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EAPMethodConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CertificateInformationExtension
#define SOAP_TYPE_PointerTons2__CertificateInformationExtension (1139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CertificateInformationExtension(struct soap*, ns2__CertificateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CertificateInformationExtension(struct soap*, const char *, int, ns2__CertificateInformationExtension *const*, const char *);
SOAP_FMAC3 ns2__CertificateInformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__CertificateInformationExtension(struct soap*, const char*, ns2__CertificateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CertificateInformationExtension(struct soap*, ns2__CertificateInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CertificateInformationExtension
#define soap_write_PointerTons2__CertificateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__CertificateInformationExtension(soap, data), 0) || soap_put_PointerTons2__CertificateInformationExtension(soap, data, "ns2:CertificateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateInformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__CertificateInformationExtension(struct soap*, ns2__CertificateInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__CertificateInformationExtension
#define soap_read_PointerTons2__CertificateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CertificateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DateTimeRange
#define SOAP_TYPE_PointerTons2__DateTimeRange (1138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DateTimeRange(struct soap*, ns2__DateTimeRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DateTimeRange(struct soap*, const char *, int, ns2__DateTimeRange *const*, const char *);
SOAP_FMAC3 ns2__DateTimeRange ** SOAP_FMAC4 soap_in_PointerTons2__DateTimeRange(struct soap*, const char*, ns2__DateTimeRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DateTimeRange(struct soap*, ns2__DateTimeRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DateTimeRange
#define soap_write_PointerTons2__DateTimeRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DateTimeRange(soap, data), 0) || soap_put_PointerTons2__DateTimeRange(soap, data, "ns2:DateTimeRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DateTimeRange ** SOAP_FMAC4 soap_get_PointerTons2__DateTimeRange(struct soap*, ns2__DateTimeRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__DateTimeRange
#define soap_read_PointerTons2__DateTimeRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DateTimeRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CertificateUsage
#define SOAP_TYPE_PointerTons2__CertificateUsage (1137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CertificateUsage(struct soap*, ns2__CertificateUsage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CertificateUsage(struct soap*, const char *, int, ns2__CertificateUsage *const*, const char *);
SOAP_FMAC3 ns2__CertificateUsage ** SOAP_FMAC4 soap_in_PointerTons2__CertificateUsage(struct soap*, const char*, ns2__CertificateUsage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CertificateUsage(struct soap*, ns2__CertificateUsage *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CertificateUsage
#define soap_write_PointerTons2__CertificateUsage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__CertificateUsage(soap, data), 0) || soap_put_PointerTons2__CertificateUsage(soap, data, "ns2:CertificateUsage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateUsage ** SOAP_FMAC4 soap_get_PointerTons2__CertificateUsage(struct soap*, ns2__CertificateUsage **, const char*, const char*);

#ifndef soap_read_PointerTons2__CertificateUsage
#define soap_read_PointerTons2__CertificateUsage(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CertificateUsage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__BinaryData
#define SOAP_TYPE_PointerTons2__BinaryData (1136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__BinaryData(struct soap*, ns2__BinaryData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__BinaryData(struct soap*, const char *, int, ns2__BinaryData *const*, const char *);
SOAP_FMAC3 ns2__BinaryData ** SOAP_FMAC4 soap_in_PointerTons2__BinaryData(struct soap*, const char*, ns2__BinaryData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__BinaryData(struct soap*, ns2__BinaryData *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__BinaryData
#define soap_write_PointerTons2__BinaryData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__BinaryData(soap, data), 0) || soap_put_PointerTons2__BinaryData(soap, data, "ns2:BinaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__BinaryData ** SOAP_FMAC4 soap_get_PointerTons2__BinaryData(struct soap*, ns2__BinaryData **, const char*, const char*);

#ifndef soap_read_PointerTons2__BinaryData
#define soap_read_PointerTons2__BinaryData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__BinaryData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CertificateGenerationParametersExtension
#define SOAP_TYPE_PointerTons2__CertificateGenerationParametersExtension (1135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CertificateGenerationParametersExtension(struct soap*, ns2__CertificateGenerationParametersExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CertificateGenerationParametersExtension(struct soap*, const char *, int, ns2__CertificateGenerationParametersExtension *const*, const char *);
SOAP_FMAC3 ns2__CertificateGenerationParametersExtension ** SOAP_FMAC4 soap_in_PointerTons2__CertificateGenerationParametersExtension(struct soap*, const char*, ns2__CertificateGenerationParametersExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CertificateGenerationParametersExtension(struct soap*, ns2__CertificateGenerationParametersExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CertificateGenerationParametersExtension
#define soap_write_PointerTons2__CertificateGenerationParametersExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__CertificateGenerationParametersExtension(soap, data), 0) || soap_put_PointerTons2__CertificateGenerationParametersExtension(soap, data, "ns2:CertificateGenerationParametersExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CertificateGenerationParametersExtension ** SOAP_FMAC4 soap_get_PointerTons2__CertificateGenerationParametersExtension(struct soap*, ns2__CertificateGenerationParametersExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__CertificateGenerationParametersExtension
#define soap_read_PointerTons2__CertificateGenerationParametersExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CertificateGenerationParametersExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__UserExtension
#define SOAP_TYPE_PointerTons2__UserExtension (1134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UserExtension(struct soap*, ns2__UserExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UserExtension(struct soap*, const char *, int, ns2__UserExtension *const*, const char *);
SOAP_FMAC3 ns2__UserExtension ** SOAP_FMAC4 soap_in_PointerTons2__UserExtension(struct soap*, const char*, ns2__UserExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UserExtension(struct soap*, ns2__UserExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__UserExtension
#define soap_write_PointerTons2__UserExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__UserExtension(soap, data), 0) || soap_put_PointerTons2__UserExtension(soap, data, "ns2:UserExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__UserExtension ** SOAP_FMAC4 soap_get_PointerTons2__UserExtension(struct soap*, ns2__UserExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__UserExtension
#define soap_read_PointerTons2__UserExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__UserExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Date
#define SOAP_TYPE_PointerTons2__Date (1133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Date(struct soap*, ns2__Date *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Date(struct soap*, const char *, int, ns2__Date *const*, const char *);
SOAP_FMAC3 ns2__Date ** SOAP_FMAC4 soap_in_PointerTons2__Date(struct soap*, const char*, ns2__Date **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Date(struct soap*, ns2__Date *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Date
#define soap_write_PointerTons2__Date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Date(soap, data), 0) || soap_put_PointerTons2__Date(soap, data, "ns2:Date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Date ** SOAP_FMAC4 soap_get_PointerTons2__Date(struct soap*, ns2__Date **, const char*, const char*);

#ifndef soap_read_PointerTons2__Date
#define soap_read_PointerTons2__Date(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Date(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Time
#define SOAP_TYPE_PointerTons2__Time (1132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Time(struct soap*, ns2__Time *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Time(struct soap*, const char *, int, ns2__Time *const*, const char *);
SOAP_FMAC3 ns2__Time ** SOAP_FMAC4 soap_in_PointerTons2__Time(struct soap*, const char*, ns2__Time **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Time(struct soap*, ns2__Time *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Time
#define soap_write_PointerTons2__Time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Time(soap, data), 0) || soap_put_PointerTons2__Time(soap, data, "ns2:Time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Time ** SOAP_FMAC4 soap_get_PointerTons2__Time(struct soap*, ns2__Time **, const char*, const char*);

#ifndef soap_read_PointerTons2__Time
#define soap_read_PointerTons2__Time(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SystemDateTimeExtension
#define SOAP_TYPE_PointerTons2__SystemDateTimeExtension (1131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SystemDateTimeExtension(struct soap*, ns2__SystemDateTimeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SystemDateTimeExtension(struct soap*, const char *, int, ns2__SystemDateTimeExtension *const*, const char *);
SOAP_FMAC3 ns2__SystemDateTimeExtension ** SOAP_FMAC4 soap_in_PointerTons2__SystemDateTimeExtension(struct soap*, const char*, ns2__SystemDateTimeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SystemDateTimeExtension(struct soap*, ns2__SystemDateTimeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SystemDateTimeExtension
#define soap_write_PointerTons2__SystemDateTimeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SystemDateTimeExtension(soap, data), 0) || soap_put_PointerTons2__SystemDateTimeExtension(soap, data, "ns2:SystemDateTimeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemDateTimeExtension ** SOAP_FMAC4 soap_get_PointerTons2__SystemDateTimeExtension(struct soap*, ns2__SystemDateTimeExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SystemDateTimeExtension
#define soap_read_PointerTons2__SystemDateTimeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SystemDateTimeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DateTime
#define SOAP_TYPE_PointerTons2__DateTime (1130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DateTime(struct soap*, ns2__DateTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DateTime(struct soap*, const char *, int, ns2__DateTime *const*, const char *);
SOAP_FMAC3 ns2__DateTime ** SOAP_FMAC4 soap_in_PointerTons2__DateTime(struct soap*, const char*, ns2__DateTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DateTime(struct soap*, ns2__DateTime *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DateTime
#define soap_write_PointerTons2__DateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DateTime(soap, data), 0) || soap_put_PointerTons2__DateTime(soap, data, "ns2:DateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DateTime ** SOAP_FMAC4 soap_get_PointerTons2__DateTime(struct soap*, ns2__DateTime **, const char*, const char*);

#ifndef soap_read_PointerTons2__DateTime
#define soap_read_PointerTons2__DateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TimeZone
#define SOAP_TYPE_PointerTons2__TimeZone (1129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TimeZone(struct soap*, ns2__TimeZone *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TimeZone(struct soap*, const char *, int, ns2__TimeZone *const*, const char *);
SOAP_FMAC3 ns2__TimeZone ** SOAP_FMAC4 soap_in_PointerTons2__TimeZone(struct soap*, const char*, ns2__TimeZone **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TimeZone(struct soap*, ns2__TimeZone *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TimeZone
#define soap_write_PointerTons2__TimeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__TimeZone(soap, data), 0) || soap_put_PointerTons2__TimeZone(soap, data, "ns2:TimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__TimeZone ** SOAP_FMAC4 soap_get_PointerTons2__TimeZone(struct soap*, ns2__TimeZone **, const char*, const char*);

#ifndef soap_read_PointerTons2__TimeZone
#define soap_read_PointerTons2__TimeZone(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TimeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SystemLogUri
#define SOAP_TYPE_PointerTons2__SystemLogUri (1127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SystemLogUri(struct soap*, ns2__SystemLogUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SystemLogUri(struct soap*, const char *, int, ns2__SystemLogUri *const*, const char *);
SOAP_FMAC3 ns2__SystemLogUri ** SOAP_FMAC4 soap_in_PointerTons2__SystemLogUri(struct soap*, const char*, ns2__SystemLogUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SystemLogUri(struct soap*, ns2__SystemLogUri *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SystemLogUri
#define soap_write_PointerTons2__SystemLogUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SystemLogUri(soap, data), 0) || soap_put_PointerTons2__SystemLogUri(soap, data, "ns2:SystemLogUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemLogUri ** SOAP_FMAC4 soap_get_PointerTons2__SystemLogUri(struct soap*, ns2__SystemLogUri **, const char*, const char*);

#ifndef soap_read_PointerTons2__SystemLogUri
#define soap_read_PointerTons2__SystemLogUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SystemLogUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Include
#define SOAP_TYPE_PointerTons4__Include (1126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Include(struct soap*, ns4__Include *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Include(struct soap*, const char *, int, ns4__Include *const*, const char *);
SOAP_FMAC3 ns4__Include ** SOAP_FMAC4 soap_in_PointerTons4__Include(struct soap*, const char*, ns4__Include **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Include(struct soap*, ns4__Include *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Include
#define soap_write_PointerTons4__Include(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons4__Include(soap, data), 0) || soap_put_PointerTons4__Include(soap, data, "ns4:Include", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__Include ** SOAP_FMAC4 soap_get_PointerTons4__Include(struct soap*, ns4__Include **, const char*, const char*);

#ifndef soap_read_PointerTons4__Include
#define soap_read_PointerTons4__Include(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Include(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xmime__contentType
#define SOAP_TYPE_PointerTo_xmime__contentType (1125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xmime__contentType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xmime__contentType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xmime__contentType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xmime__contentType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xmime__contentType
#define soap_write_PointerTo_xmime__contentType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xmime__contentType(soap, data), 0) || soap_put_PointerTo_xmime__contentType(soap, data, "xmime:contentType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xmime__contentType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTo_xmime__contentType
#define soap_read_PointerTo_xmime__contentType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xmime__contentType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AttachmentData
#define SOAP_TYPE_PointerTons2__AttachmentData (1124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AttachmentData(struct soap*, ns2__AttachmentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AttachmentData(struct soap*, const char *, int, ns2__AttachmentData *const*, const char *);
SOAP_FMAC3 ns2__AttachmentData ** SOAP_FMAC4 soap_in_PointerTons2__AttachmentData(struct soap*, const char*, ns2__AttachmentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AttachmentData(struct soap*, ns2__AttachmentData *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AttachmentData
#define soap_write_PointerTons2__AttachmentData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AttachmentData(soap, data), 0) || soap_put_PointerTons2__AttachmentData(soap, data, "ns2:AttachmentData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AttachmentData ** SOAP_FMAC4 soap_get_PointerTons2__AttachmentData(struct soap*, ns2__AttachmentData **, const char*, const char*);

#ifndef soap_read_PointerTons2__AttachmentData
#define soap_read_PointerTons2__AttachmentData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AttachmentData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsDeviceExtension
#define SOAP_TYPE_PointerTons2__AnalyticsDeviceExtension (1123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsDeviceExtension(struct soap*, ns2__AnalyticsDeviceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsDeviceExtension(struct soap*, const char *, int, ns2__AnalyticsDeviceExtension *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsDeviceExtension(struct soap*, const char*, ns2__AnalyticsDeviceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsDeviceExtension(struct soap*, ns2__AnalyticsDeviceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsDeviceExtension
#define soap_write_PointerTons2__AnalyticsDeviceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsDeviceExtension(soap, data), 0) || soap_put_PointerTons2__AnalyticsDeviceExtension(soap, data, "ns2:AnalyticsDeviceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsDeviceExtension(struct soap*, ns2__AnalyticsDeviceExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsDeviceExtension
#define soap_read_PointerTons2__AnalyticsDeviceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsDeviceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SystemCapabilitiesExtension2
#define SOAP_TYPE_PointerTons2__SystemCapabilitiesExtension2 (1122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SystemCapabilitiesExtension2(struct soap*, ns2__SystemCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SystemCapabilitiesExtension2(struct soap*, const char *, int, ns2__SystemCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 ns2__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__SystemCapabilitiesExtension2(struct soap*, const char*, ns2__SystemCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SystemCapabilitiesExtension2(struct soap*, ns2__SystemCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SystemCapabilitiesExtension2
#define soap_write_PointerTons2__SystemCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SystemCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTons2__SystemCapabilitiesExtension2(soap, data, "ns2:SystemCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__SystemCapabilitiesExtension2(struct soap*, ns2__SystemCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__SystemCapabilitiesExtension2
#define soap_read_PointerTons2__SystemCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SystemCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SystemCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__SystemCapabilitiesExtension (1121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SystemCapabilitiesExtension(struct soap*, ns2__SystemCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SystemCapabilitiesExtension(struct soap*, const char *, int, ns2__SystemCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__SystemCapabilitiesExtension(struct soap*, const char*, ns2__SystemCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SystemCapabilitiesExtension(struct soap*, ns2__SystemCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SystemCapabilitiesExtension
#define soap_write_PointerTons2__SystemCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SystemCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__SystemCapabilitiesExtension(soap, data, "ns2:SystemCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__SystemCapabilitiesExtension(struct soap*, ns2__SystemCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SystemCapabilitiesExtension
#define soap_read_PointerTons2__SystemCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SystemCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OnvifVersion
#define SOAP_TYPE_PointerTons2__OnvifVersion (1119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OnvifVersion(struct soap*, ns2__OnvifVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OnvifVersion(struct soap*, const char *, int, ns2__OnvifVersion *const*, const char *);
SOAP_FMAC3 ns2__OnvifVersion ** SOAP_FMAC4 soap_in_PointerTons2__OnvifVersion(struct soap*, const char*, ns2__OnvifVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OnvifVersion(struct soap*, ns2__OnvifVersion *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OnvifVersion
#define soap_write_PointerTons2__OnvifVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OnvifVersion(soap, data), 0) || soap_put_PointerTons2__OnvifVersion(soap, data, "ns2:OnvifVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OnvifVersion ** SOAP_FMAC4 soap_get_PointerTons2__OnvifVersion(struct soap*, ns2__OnvifVersion **, const char*, const char*);

#ifndef soap_read_PointerTons2__OnvifVersion
#define soap_read_PointerTons2__OnvifVersion(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OnvifVersion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SecurityCapabilitiesExtension2
#define SOAP_TYPE_PointerTons2__SecurityCapabilitiesExtension2 (1118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SecurityCapabilitiesExtension2(struct soap*, ns2__SecurityCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SecurityCapabilitiesExtension2(struct soap*, const char *, int, ns2__SecurityCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 ns2__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__SecurityCapabilitiesExtension2(struct soap*, const char*, ns2__SecurityCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SecurityCapabilitiesExtension2(struct soap*, ns2__SecurityCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SecurityCapabilitiesExtension2
#define soap_write_PointerTons2__SecurityCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SecurityCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTons2__SecurityCapabilitiesExtension2(soap, data, "ns2:SecurityCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__SecurityCapabilitiesExtension2(struct soap*, ns2__SecurityCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__SecurityCapabilitiesExtension2
#define soap_read_PointerTons2__SecurityCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SecurityCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SecurityCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__SecurityCapabilitiesExtension (1117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SecurityCapabilitiesExtension(struct soap*, ns2__SecurityCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SecurityCapabilitiesExtension(struct soap*, const char *, int, ns2__SecurityCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__SecurityCapabilitiesExtension(struct soap*, const char*, ns2__SecurityCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SecurityCapabilitiesExtension(struct soap*, ns2__SecurityCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SecurityCapabilitiesExtension
#define soap_write_PointerTons2__SecurityCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SecurityCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__SecurityCapabilitiesExtension(soap, data, "ns2:SecurityCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__SecurityCapabilitiesExtension(struct soap*, ns2__SecurityCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__SecurityCapabilitiesExtension
#define soap_read_PointerTons2__SecurityCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SecurityCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkCapabilitiesExtension2
#define SOAP_TYPE_PointerTons2__NetworkCapabilitiesExtension2 (1116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkCapabilitiesExtension2(struct soap*, ns2__NetworkCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkCapabilitiesExtension2(struct soap*, const char *, int, ns2__NetworkCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 ns2__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__NetworkCapabilitiesExtension2(struct soap*, const char*, ns2__NetworkCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkCapabilitiesExtension2(struct soap*, ns2__NetworkCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkCapabilitiesExtension2
#define soap_write_PointerTons2__NetworkCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTons2__NetworkCapabilitiesExtension2(soap, data, "ns2:NetworkCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__NetworkCapabilitiesExtension2(struct soap*, ns2__NetworkCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkCapabilitiesExtension2
#define soap_read_PointerTons2__NetworkCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__NetworkCapabilitiesExtension (1115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkCapabilitiesExtension(struct soap*, ns2__NetworkCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkCapabilitiesExtension(struct soap*, const char *, int, ns2__NetworkCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__NetworkCapabilitiesExtension(struct soap*, const char*, ns2__NetworkCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkCapabilitiesExtension(struct soap*, ns2__NetworkCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkCapabilitiesExtension
#define soap_write_PointerTons2__NetworkCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__NetworkCapabilitiesExtension(soap, data, "ns2:NetworkCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__NetworkCapabilitiesExtension(struct soap*, ns2__NetworkCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkCapabilitiesExtension
#define soap_read_PointerTons2__NetworkCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__RealTimeStreamingCapabilitiesExtension (1114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RealTimeStreamingCapabilitiesExtension(struct soap*, ns2__RealTimeStreamingCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RealTimeStreamingCapabilitiesExtension(struct soap*, const char *, int, ns2__RealTimeStreamingCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, ns2__RealTimeStreamingCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RealTimeStreamingCapabilitiesExtension(struct soap*, ns2__RealTimeStreamingCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RealTimeStreamingCapabilitiesExtension
#define soap_write_PointerTons2__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RealTimeStreamingCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__RealTimeStreamingCapabilitiesExtension(soap, data, "ns2:RealTimeStreamingCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__RealTimeStreamingCapabilitiesExtension(struct soap*, ns2__RealTimeStreamingCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RealTimeStreamingCapabilitiesExtension
#define soap_read_PointerTons2__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RealTimeStreamingCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ProfileCapabilities
#define SOAP_TYPE_PointerTons2__ProfileCapabilities (1113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProfileCapabilities(struct soap*, ns2__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProfileCapabilities(struct soap*, const char *, int, ns2__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 ns2__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__ProfileCapabilities(struct soap*, const char*, ns2__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProfileCapabilities(struct soap*, ns2__ProfileCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ProfileCapabilities
#define soap_write_PointerTons2__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ProfileCapabilities(soap, data), 0) || soap_put_PointerTons2__ProfileCapabilities(soap, data, "ns2:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__ProfileCapabilities(struct soap*, ns2__ProfileCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__ProfileCapabilities
#define soap_read_PointerTons2__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MediaCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__MediaCapabilitiesExtension (1112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MediaCapabilitiesExtension(struct soap*, ns2__MediaCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MediaCapabilitiesExtension(struct soap*, const char *, int, ns2__MediaCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__MediaCapabilitiesExtension(struct soap*, const char*, ns2__MediaCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MediaCapabilitiesExtension(struct soap*, ns2__MediaCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MediaCapabilitiesExtension
#define soap_write_PointerTons2__MediaCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MediaCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__MediaCapabilitiesExtension(soap, data, "ns2:MediaCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__MediaCapabilitiesExtension(struct soap*, ns2__MediaCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MediaCapabilitiesExtension
#define soap_read_PointerTons2__MediaCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MediaCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RealTimeStreamingCapabilities
#define SOAP_TYPE_PointerTons2__RealTimeStreamingCapabilities (1111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RealTimeStreamingCapabilities(struct soap*, ns2__RealTimeStreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RealTimeStreamingCapabilities(struct soap*, const char *, int, ns2__RealTimeStreamingCapabilities *const*, const char *);
SOAP_FMAC3 ns2__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__RealTimeStreamingCapabilities(struct soap*, const char*, ns2__RealTimeStreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RealTimeStreamingCapabilities(struct soap*, ns2__RealTimeStreamingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RealTimeStreamingCapabilities
#define soap_write_PointerTons2__RealTimeStreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RealTimeStreamingCapabilities(soap, data), 0) || soap_put_PointerTons2__RealTimeStreamingCapabilities(soap, data, "ns2:RealTimeStreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__RealTimeStreamingCapabilities(struct soap*, ns2__RealTimeStreamingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__RealTimeStreamingCapabilities
#define soap_read_PointerTons2__RealTimeStreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RealTimeStreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IOCapabilitiesExtension2
#define SOAP_TYPE_PointerTons2__IOCapabilitiesExtension2 (1110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IOCapabilitiesExtension2(struct soap*, ns2__IOCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IOCapabilitiesExtension2(struct soap*, const char *, int, ns2__IOCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 ns2__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__IOCapabilitiesExtension2(struct soap*, const char*, ns2__IOCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IOCapabilitiesExtension2(struct soap*, ns2__IOCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IOCapabilitiesExtension2
#define soap_write_PointerTons2__IOCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IOCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTons2__IOCapabilitiesExtension2(soap, data, "ns2:IOCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__IOCapabilitiesExtension2(struct soap*, ns2__IOCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__IOCapabilitiesExtension2
#define soap_read_PointerTons2__IOCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IOCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IOCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__IOCapabilitiesExtension (1108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IOCapabilitiesExtension(struct soap*, ns2__IOCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IOCapabilitiesExtension(struct soap*, const char *, int, ns2__IOCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__IOCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__IOCapabilitiesExtension(struct soap*, const char*, ns2__IOCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IOCapabilitiesExtension(struct soap*, ns2__IOCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IOCapabilitiesExtension
#define soap_write_PointerTons2__IOCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IOCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__IOCapabilitiesExtension(soap, data, "ns2:IOCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IOCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__IOCapabilitiesExtension(struct soap*, ns2__IOCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__IOCapabilitiesExtension
#define soap_read_PointerTons2__IOCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IOCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DeviceCapabilitiesExtension
#define SOAP_TYPE_PointerTons2__DeviceCapabilitiesExtension (1107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeviceCapabilitiesExtension(struct soap*, ns2__DeviceCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeviceCapabilitiesExtension(struct soap*, const char *, int, ns2__DeviceCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__DeviceCapabilitiesExtension(struct soap*, const char*, ns2__DeviceCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeviceCapabilitiesExtension(struct soap*, ns2__DeviceCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DeviceCapabilitiesExtension
#define soap_write_PointerTons2__DeviceCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DeviceCapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__DeviceCapabilitiesExtension(soap, data, "ns2:DeviceCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__DeviceCapabilitiesExtension(struct soap*, ns2__DeviceCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__DeviceCapabilitiesExtension
#define soap_read_PointerTons2__DeviceCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DeviceCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SecurityCapabilities
#define SOAP_TYPE_PointerTons2__SecurityCapabilities (1106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SecurityCapabilities(struct soap*, ns2__SecurityCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SecurityCapabilities(struct soap*, const char *, int, ns2__SecurityCapabilities *const*, const char *);
SOAP_FMAC3 ns2__SecurityCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__SecurityCapabilities(struct soap*, const char*, ns2__SecurityCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SecurityCapabilities(struct soap*, ns2__SecurityCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SecurityCapabilities
#define soap_write_PointerTons2__SecurityCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SecurityCapabilities(soap, data), 0) || soap_put_PointerTons2__SecurityCapabilities(soap, data, "ns2:SecurityCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SecurityCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__SecurityCapabilities(struct soap*, ns2__SecurityCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__SecurityCapabilities
#define soap_read_PointerTons2__SecurityCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SecurityCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IOCapabilities
#define SOAP_TYPE_PointerTons2__IOCapabilities (1105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IOCapabilities(struct soap*, ns2__IOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IOCapabilities(struct soap*, const char *, int, ns2__IOCapabilities *const*, const char *);
SOAP_FMAC3 ns2__IOCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__IOCapabilities(struct soap*, const char*, ns2__IOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IOCapabilities(struct soap*, ns2__IOCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IOCapabilities
#define soap_write_PointerTons2__IOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IOCapabilities(soap, data), 0) || soap_put_PointerTons2__IOCapabilities(soap, data, "ns2:IOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IOCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__IOCapabilities(struct soap*, ns2__IOCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__IOCapabilities
#define soap_read_PointerTons2__IOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SystemCapabilities
#define SOAP_TYPE_PointerTons2__SystemCapabilities (1104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SystemCapabilities(struct soap*, ns2__SystemCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SystemCapabilities(struct soap*, const char *, int, ns2__SystemCapabilities *const*, const char *);
SOAP_FMAC3 ns2__SystemCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__SystemCapabilities(struct soap*, const char*, ns2__SystemCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SystemCapabilities(struct soap*, ns2__SystemCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SystemCapabilities
#define soap_write_PointerTons2__SystemCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SystemCapabilities(soap, data), 0) || soap_put_PointerTons2__SystemCapabilities(soap, data, "ns2:SystemCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SystemCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__SystemCapabilities(struct soap*, ns2__SystemCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__SystemCapabilities
#define soap_read_PointerTons2__SystemCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SystemCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkCapabilities
#define SOAP_TYPE_PointerTons2__NetworkCapabilities (1103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkCapabilities(struct soap*, ns2__NetworkCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkCapabilities(struct soap*, const char *, int, ns2__NetworkCapabilities *const*, const char *);
SOAP_FMAC3 ns2__NetworkCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__NetworkCapabilities(struct soap*, const char*, ns2__NetworkCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkCapabilities(struct soap*, ns2__NetworkCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkCapabilities
#define soap_write_PointerTons2__NetworkCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkCapabilities(soap, data), 0) || soap_put_PointerTons2__NetworkCapabilities(soap, data, "ns2:NetworkCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__NetworkCapabilities(struct soap*, ns2__NetworkCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkCapabilities
#define soap_read_PointerTons2__NetworkCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CapabilitiesExtension2
#define SOAP_TYPE_PointerTons2__CapabilitiesExtension2 (1102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CapabilitiesExtension2(struct soap*, ns2__CapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CapabilitiesExtension2(struct soap*, const char *, int, ns2__CapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 ns2__CapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__CapabilitiesExtension2(struct soap*, const char*, ns2__CapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CapabilitiesExtension2(struct soap*, ns2__CapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CapabilitiesExtension2
#define soap_write_PointerTons2__CapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__CapabilitiesExtension2(soap, data), 0) || soap_put_PointerTons2__CapabilitiesExtension2(soap, data, "ns2:CapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__CapabilitiesExtension2(struct soap*, ns2__CapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__CapabilitiesExtension2
#define soap_read_PointerTons2__CapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsDeviceCapabilities
#define SOAP_TYPE_PointerTons2__AnalyticsDeviceCapabilities (1101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsDeviceCapabilities(struct soap*, ns2__AnalyticsDeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsDeviceCapabilities(struct soap*, const char *, int, ns2__AnalyticsDeviceCapabilities *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsDeviceCapabilities(struct soap*, const char*, ns2__AnalyticsDeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsDeviceCapabilities(struct soap*, ns2__AnalyticsDeviceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsDeviceCapabilities
#define soap_write_PointerTons2__AnalyticsDeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsDeviceCapabilities(soap, data), 0) || soap_put_PointerTons2__AnalyticsDeviceCapabilities(soap, data, "ns2:AnalyticsDeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsDeviceCapabilities(struct soap*, ns2__AnalyticsDeviceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsDeviceCapabilities
#define soap_read_PointerTons2__AnalyticsDeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsDeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReceiverCapabilities
#define SOAP_TYPE_PointerTons2__ReceiverCapabilities (1100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReceiverCapabilities(struct soap*, ns2__ReceiverCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReceiverCapabilities(struct soap*, const char *, int, ns2__ReceiverCapabilities *const*, const char *);
SOAP_FMAC3 ns2__ReceiverCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__ReceiverCapabilities(struct soap*, const char*, ns2__ReceiverCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReceiverCapabilities(struct soap*, ns2__ReceiverCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReceiverCapabilities
#define soap_write_PointerTons2__ReceiverCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReceiverCapabilities(soap, data), 0) || soap_put_PointerTons2__ReceiverCapabilities(soap, data, "ns2:ReceiverCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReceiverCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__ReceiverCapabilities(struct soap*, ns2__ReceiverCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReceiverCapabilities
#define soap_read_PointerTons2__ReceiverCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReceiverCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReplayCapabilities
#define SOAP_TYPE_PointerTons2__ReplayCapabilities (1099)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReplayCapabilities(struct soap*, ns2__ReplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReplayCapabilities(struct soap*, const char *, int, ns2__ReplayCapabilities *const*, const char *);
SOAP_FMAC3 ns2__ReplayCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__ReplayCapabilities(struct soap*, const char*, ns2__ReplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReplayCapabilities(struct soap*, ns2__ReplayCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReplayCapabilities
#define soap_write_PointerTons2__ReplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReplayCapabilities(soap, data), 0) || soap_put_PointerTons2__ReplayCapabilities(soap, data, "ns2:ReplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ReplayCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__ReplayCapabilities(struct soap*, ns2__ReplayCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReplayCapabilities
#define soap_read_PointerTons2__ReplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__SearchCapabilities
#define SOAP_TYPE_PointerTons2__SearchCapabilities (1098)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SearchCapabilities(struct soap*, ns2__SearchCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SearchCapabilities(struct soap*, const char *, int, ns2__SearchCapabilities *const*, const char *);
SOAP_FMAC3 ns2__SearchCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__SearchCapabilities(struct soap*, const char*, ns2__SearchCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SearchCapabilities(struct soap*, ns2__SearchCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__SearchCapabilities
#define soap_write_PointerTons2__SearchCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__SearchCapabilities(soap, data), 0) || soap_put_PointerTons2__SearchCapabilities(soap, data, "ns2:SearchCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__SearchCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__SearchCapabilities(struct soap*, ns2__SearchCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__SearchCapabilities
#define soap_read_PointerTons2__SearchCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__SearchCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RecordingCapabilities
#define SOAP_TYPE_PointerTons2__RecordingCapabilities (1097)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RecordingCapabilities(struct soap*, ns2__RecordingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RecordingCapabilities(struct soap*, const char *, int, ns2__RecordingCapabilities *const*, const char *);
SOAP_FMAC3 ns2__RecordingCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__RecordingCapabilities(struct soap*, const char*, ns2__RecordingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RecordingCapabilities(struct soap*, ns2__RecordingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RecordingCapabilities
#define soap_write_PointerTons2__RecordingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RecordingCapabilities(soap, data), 0) || soap_put_PointerTons2__RecordingCapabilities(soap, data, "ns2:RecordingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RecordingCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__RecordingCapabilities(struct soap*, ns2__RecordingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__RecordingCapabilities
#define soap_read_PointerTons2__RecordingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RecordingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DisplayCapabilities
#define SOAP_TYPE_PointerTons2__DisplayCapabilities (1096)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DisplayCapabilities(struct soap*, ns2__DisplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DisplayCapabilities(struct soap*, const char *, int, ns2__DisplayCapabilities *const*, const char *);
SOAP_FMAC3 ns2__DisplayCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__DisplayCapabilities(struct soap*, const char*, ns2__DisplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DisplayCapabilities(struct soap*, ns2__DisplayCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DisplayCapabilities
#define soap_write_PointerTons2__DisplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DisplayCapabilities(soap, data), 0) || soap_put_PointerTons2__DisplayCapabilities(soap, data, "ns2:DisplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DisplayCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__DisplayCapabilities(struct soap*, ns2__DisplayCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__DisplayCapabilities
#define soap_read_PointerTons2__DisplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DisplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DeviceIOCapabilities
#define SOAP_TYPE_PointerTons2__DeviceIOCapabilities (1095)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeviceIOCapabilities(struct soap*, ns2__DeviceIOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeviceIOCapabilities(struct soap*, const char *, int, ns2__DeviceIOCapabilities *const*, const char *);
SOAP_FMAC3 ns2__DeviceIOCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__DeviceIOCapabilities(struct soap*, const char*, ns2__DeviceIOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeviceIOCapabilities(struct soap*, ns2__DeviceIOCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DeviceIOCapabilities
#define soap_write_PointerTons2__DeviceIOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DeviceIOCapabilities(soap, data), 0) || soap_put_PointerTons2__DeviceIOCapabilities(soap, data, "ns2:DeviceIOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceIOCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__DeviceIOCapabilities(struct soap*, ns2__DeviceIOCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__DeviceIOCapabilities
#define soap_read_PointerTons2__DeviceIOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DeviceIOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CapabilitiesExtension
#define SOAP_TYPE_PointerTons2__CapabilitiesExtension (1094)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CapabilitiesExtension(struct soap*, ns2__CapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CapabilitiesExtension(struct soap*, const char *, int, ns2__CapabilitiesExtension *const*, const char *);
SOAP_FMAC3 ns2__CapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTons2__CapabilitiesExtension(struct soap*, const char*, ns2__CapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CapabilitiesExtension(struct soap*, ns2__CapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CapabilitiesExtension
#define soap_write_PointerTons2__CapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__CapabilitiesExtension(soap, data), 0) || soap_put_PointerTons2__CapabilitiesExtension(soap, data, "ns2:CapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__CapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTons2__CapabilitiesExtension(struct soap*, ns2__CapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__CapabilitiesExtension
#define soap_read_PointerTons2__CapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZCapabilities
#define SOAP_TYPE_PointerTons2__PTZCapabilities (1093)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZCapabilities(struct soap*, ns2__PTZCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZCapabilities(struct soap*, const char *, int, ns2__PTZCapabilities *const*, const char *);
SOAP_FMAC3 ns2__PTZCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__PTZCapabilities(struct soap*, const char*, ns2__PTZCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZCapabilities(struct soap*, ns2__PTZCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZCapabilities
#define soap_write_PointerTons2__PTZCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZCapabilities(soap, data), 0) || soap_put_PointerTons2__PTZCapabilities(soap, data, "ns2:PTZCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__PTZCapabilities(struct soap*, ns2__PTZCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZCapabilities
#define soap_read_PointerTons2__PTZCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MediaCapabilities
#define SOAP_TYPE_PointerTons2__MediaCapabilities (1092)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MediaCapabilities(struct soap*, ns2__MediaCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MediaCapabilities(struct soap*, const char *, int, ns2__MediaCapabilities *const*, const char *);
SOAP_FMAC3 ns2__MediaCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__MediaCapabilities(struct soap*, const char*, ns2__MediaCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MediaCapabilities(struct soap*, ns2__MediaCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MediaCapabilities
#define soap_write_PointerTons2__MediaCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MediaCapabilities(soap, data), 0) || soap_put_PointerTons2__MediaCapabilities(soap, data, "ns2:MediaCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__MediaCapabilities(struct soap*, ns2__MediaCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__MediaCapabilities
#define soap_read_PointerTons2__MediaCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MediaCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingCapabilities
#define SOAP_TYPE_PointerTons2__ImagingCapabilities (1091)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingCapabilities(struct soap*, ns2__ImagingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingCapabilities(struct soap*, const char *, int, ns2__ImagingCapabilities *const*, const char *);
SOAP_FMAC3 ns2__ImagingCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__ImagingCapabilities(struct soap*, const char*, ns2__ImagingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingCapabilities(struct soap*, ns2__ImagingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingCapabilities
#define soap_write_PointerTons2__ImagingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingCapabilities(soap, data), 0) || soap_put_PointerTons2__ImagingCapabilities(soap, data, "ns2:ImagingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__ImagingCapabilities(struct soap*, ns2__ImagingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingCapabilities
#define soap_read_PointerTons2__ImagingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__EventCapabilities
#define SOAP_TYPE_PointerTons2__EventCapabilities (1090)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__EventCapabilities(struct soap*, ns2__EventCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__EventCapabilities(struct soap*, const char *, int, ns2__EventCapabilities *const*, const char *);
SOAP_FMAC3 ns2__EventCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__EventCapabilities(struct soap*, const char*, ns2__EventCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__EventCapabilities(struct soap*, ns2__EventCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__EventCapabilities
#define soap_write_PointerTons2__EventCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__EventCapabilities(soap, data), 0) || soap_put_PointerTons2__EventCapabilities(soap, data, "ns2:EventCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__EventCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__EventCapabilities(struct soap*, ns2__EventCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__EventCapabilities
#define soap_read_PointerTons2__EventCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__EventCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DeviceCapabilities
#define SOAP_TYPE_PointerTons2__DeviceCapabilities (1089)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DeviceCapabilities(struct soap*, ns2__DeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DeviceCapabilities(struct soap*, const char *, int, ns2__DeviceCapabilities *const*, const char *);
SOAP_FMAC3 ns2__DeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__DeviceCapabilities(struct soap*, const char*, ns2__DeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DeviceCapabilities(struct soap*, ns2__DeviceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DeviceCapabilities
#define soap_write_PointerTons2__DeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DeviceCapabilities(soap, data), 0) || soap_put_PointerTons2__DeviceCapabilities(soap, data, "ns2:DeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__DeviceCapabilities(struct soap*, ns2__DeviceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__DeviceCapabilities
#define soap_read_PointerTons2__DeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AnalyticsCapabilities
#define SOAP_TYPE_PointerTons2__AnalyticsCapabilities (1088)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AnalyticsCapabilities(struct soap*, ns2__AnalyticsCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AnalyticsCapabilities(struct soap*, const char *, int, ns2__AnalyticsCapabilities *const*, const char *);
SOAP_FMAC3 ns2__AnalyticsCapabilities ** SOAP_FMAC4 soap_in_PointerTons2__AnalyticsCapabilities(struct soap*, const char*, ns2__AnalyticsCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AnalyticsCapabilities(struct soap*, ns2__AnalyticsCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AnalyticsCapabilities
#define soap_write_PointerTons2__AnalyticsCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AnalyticsCapabilities(soap, data), 0) || soap_put_PointerTons2__AnalyticsCapabilities(soap, data, "ns2:AnalyticsCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AnalyticsCapabilities ** SOAP_FMAC4 soap_get_PointerTons2__AnalyticsCapabilities(struct soap*, ns2__AnalyticsCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons2__AnalyticsCapabilities
#define soap_read_PointerTons2__AnalyticsCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AnalyticsCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11AvailableNetworksExtension
#define SOAP_TYPE_PointerTons2__Dot11AvailableNetworksExtension (1087)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11AvailableNetworksExtension(struct soap*, ns2__Dot11AvailableNetworksExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11AvailableNetworksExtension(struct soap*, const char *, int, ns2__Dot11AvailableNetworksExtension *const*, const char *);
SOAP_FMAC3 ns2__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_in_PointerTons2__Dot11AvailableNetworksExtension(struct soap*, const char*, ns2__Dot11AvailableNetworksExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11AvailableNetworksExtension(struct soap*, ns2__Dot11AvailableNetworksExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11AvailableNetworksExtension
#define soap_write_PointerTons2__Dot11AvailableNetworksExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11AvailableNetworksExtension(soap, data), 0) || soap_put_PointerTons2__Dot11AvailableNetworksExtension(soap, data, "ns2:Dot11AvailableNetworksExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_get_PointerTons2__Dot11AvailableNetworksExtension(struct soap*, ns2__Dot11AvailableNetworksExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11AvailableNetworksExtension
#define soap_read_PointerTons2__Dot11AvailableNetworksExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11AvailableNetworksExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11SignalStrength
#define SOAP_TYPE_PointerTons2__Dot11SignalStrength (1084)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11SignalStrength(struct soap*, enum ns2__Dot11SignalStrength *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11SignalStrength(struct soap*, const char *, int, enum ns2__Dot11SignalStrength *const*, const char *);
SOAP_FMAC3 enum ns2__Dot11SignalStrength ** SOAP_FMAC4 soap_in_PointerTons2__Dot11SignalStrength(struct soap*, const char*, enum ns2__Dot11SignalStrength **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11SignalStrength(struct soap*, enum ns2__Dot11SignalStrength *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11SignalStrength
#define soap_write_PointerTons2__Dot11SignalStrength(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11SignalStrength(soap, data), 0) || soap_put_PointerTons2__Dot11SignalStrength(soap, data, "ns2:Dot11SignalStrength", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11SignalStrength ** SOAP_FMAC4 soap_get_PointerTons2__Dot11SignalStrength(struct soap*, enum ns2__Dot11SignalStrength **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11SignalStrength
#define soap_read_PointerTons2__Dot11SignalStrength(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11SignalStrength(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11PSKSetExtension
#define SOAP_TYPE_PointerTons2__Dot11PSKSetExtension (1083)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11PSKSetExtension(struct soap*, ns2__Dot11PSKSetExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11PSKSetExtension(struct soap*, const char *, int, ns2__Dot11PSKSetExtension *const*, const char *);
SOAP_FMAC3 ns2__Dot11PSKSetExtension ** SOAP_FMAC4 soap_in_PointerTons2__Dot11PSKSetExtension(struct soap*, const char*, ns2__Dot11PSKSetExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11PSKSetExtension(struct soap*, ns2__Dot11PSKSetExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11PSKSetExtension
#define soap_write_PointerTons2__Dot11PSKSetExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11PSKSetExtension(soap, data), 0) || soap_put_PointerTons2__Dot11PSKSetExtension(soap, data, "ns2:Dot11PSKSetExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11PSKSetExtension ** SOAP_FMAC4 soap_get_PointerTons2__Dot11PSKSetExtension(struct soap*, ns2__Dot11PSKSetExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11PSKSetExtension
#define soap_read_PointerTons2__Dot11PSKSetExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11PSKSetExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11PSKPassphrase
#define SOAP_TYPE_PointerTons2__Dot11PSKPassphrase (1082)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11PSKPassphrase(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11PSKPassphrase(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__Dot11PSKPassphrase(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11PSKPassphrase(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11PSKPassphrase
#define soap_write_PointerTons2__Dot11PSKPassphrase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11PSKPassphrase(soap, data), 0) || soap_put_PointerTons2__Dot11PSKPassphrase(soap, data, "ns2:Dot11PSKPassphrase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__Dot11PSKPassphrase(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11PSKPassphrase
#define soap_read_PointerTons2__Dot11PSKPassphrase(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11PSKPassphrase(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11PSK
#define SOAP_TYPE_PointerTons2__Dot11PSK (1081)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11PSK(struct soap*, xsd__hexBinary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11PSK(struct soap*, const char *, int, xsd__hexBinary *const*, const char *);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_in_PointerTons2__Dot11PSK(struct soap*, const char*, xsd__hexBinary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11PSK(struct soap*, xsd__hexBinary *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11PSK
#define soap_write_PointerTons2__Dot11PSK(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11PSK(soap, data), 0) || soap_put_PointerTons2__Dot11PSK(soap, data, "ns2:Dot11PSK", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_get_PointerTons2__Dot11PSK(struct soap*, xsd__hexBinary **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11PSK
#define soap_read_PointerTons2__Dot11PSK(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11PSK(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_PointerTons2__Dot11SecurityConfigurationExtension (1080)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11SecurityConfigurationExtension(struct soap*, ns2__Dot11SecurityConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11SecurityConfigurationExtension(struct soap*, const char *, int, ns2__Dot11SecurityConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__Dot11SecurityConfigurationExtension(struct soap*, const char*, ns2__Dot11SecurityConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11SecurityConfigurationExtension(struct soap*, ns2__Dot11SecurityConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11SecurityConfigurationExtension
#define soap_write_PointerTons2__Dot11SecurityConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11SecurityConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__Dot11SecurityConfigurationExtension(soap, data, "ns2:Dot11SecurityConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__Dot11SecurityConfigurationExtension(struct soap*, ns2__Dot11SecurityConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11SecurityConfigurationExtension
#define soap_read_PointerTons2__Dot11SecurityConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11SecurityConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11PSKSet
#define SOAP_TYPE_PointerTons2__Dot11PSKSet (1079)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11PSKSet(struct soap*, ns2__Dot11PSKSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11PSKSet(struct soap*, const char *, int, ns2__Dot11PSKSet *const*, const char *);
SOAP_FMAC3 ns2__Dot11PSKSet ** SOAP_FMAC4 soap_in_PointerTons2__Dot11PSKSet(struct soap*, const char*, ns2__Dot11PSKSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11PSKSet(struct soap*, ns2__Dot11PSKSet *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11PSKSet
#define soap_write_PointerTons2__Dot11PSKSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11PSKSet(soap, data), 0) || soap_put_PointerTons2__Dot11PSKSet(soap, data, "ns2:Dot11PSKSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11PSKSet ** SOAP_FMAC4 soap_get_PointerTons2__Dot11PSKSet(struct soap*, ns2__Dot11PSKSet **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11PSKSet
#define soap_read_PointerTons2__Dot11PSKSet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11PSKSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11Cipher
#define SOAP_TYPE_PointerTons2__Dot11Cipher (1078)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11Cipher(struct soap*, enum ns2__Dot11Cipher *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11Cipher(struct soap*, const char *, int, enum ns2__Dot11Cipher *const*, const char *);
SOAP_FMAC3 enum ns2__Dot11Cipher ** SOAP_FMAC4 soap_in_PointerTons2__Dot11Cipher(struct soap*, const char*, enum ns2__Dot11Cipher **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11Cipher(struct soap*, enum ns2__Dot11Cipher *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11Cipher
#define soap_write_PointerTons2__Dot11Cipher(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11Cipher(soap, data), 0) || soap_put_PointerTons2__Dot11Cipher(soap, data, "ns2:Dot11Cipher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Dot11Cipher ** SOAP_FMAC4 soap_get_PointerTons2__Dot11Cipher(struct soap*, enum ns2__Dot11Cipher **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11Cipher
#define soap_read_PointerTons2__Dot11Cipher(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11Cipher(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11SecurityConfiguration
#define SOAP_TYPE_PointerTons2__Dot11SecurityConfiguration (1077)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11SecurityConfiguration(struct soap*, ns2__Dot11SecurityConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11SecurityConfiguration(struct soap*, const char *, int, ns2__Dot11SecurityConfiguration *const*, const char *);
SOAP_FMAC3 ns2__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__Dot11SecurityConfiguration(struct soap*, const char*, ns2__Dot11SecurityConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11SecurityConfiguration(struct soap*, ns2__Dot11SecurityConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11SecurityConfiguration
#define soap_write_PointerTons2__Dot11SecurityConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11SecurityConfiguration(soap, data), 0) || soap_put_PointerTons2__Dot11SecurityConfiguration(soap, data, "ns2:Dot11SecurityConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__Dot11SecurityConfiguration(struct soap*, ns2__Dot11SecurityConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11SecurityConfiguration
#define soap_read_PointerTons2__Dot11SecurityConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11SecurityConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPAddressFilterExtension
#define SOAP_TYPE_PointerTons2__IPAddressFilterExtension (1076)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPAddressFilterExtension(struct soap*, ns2__IPAddressFilterExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPAddressFilterExtension(struct soap*, const char *, int, ns2__IPAddressFilterExtension *const*, const char *);
SOAP_FMAC3 ns2__IPAddressFilterExtension ** SOAP_FMAC4 soap_in_PointerTons2__IPAddressFilterExtension(struct soap*, const char*, ns2__IPAddressFilterExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPAddressFilterExtension(struct soap*, ns2__IPAddressFilterExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPAddressFilterExtension
#define soap_write_PointerTons2__IPAddressFilterExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPAddressFilterExtension(soap, data), 0) || soap_put_PointerTons2__IPAddressFilterExtension(soap, data, "ns2:IPAddressFilterExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPAddressFilterExtension ** SOAP_FMAC4 soap_get_PointerTons2__IPAddressFilterExtension(struct soap*, ns2__IPAddressFilterExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPAddressFilterExtension
#define soap_read_PointerTons2__IPAddressFilterExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPAddressFilterExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_PointerTons2__NetworkZeroConfigurationExtension2 (1075)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkZeroConfigurationExtension2(struct soap*, ns2__NetworkZeroConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkZeroConfigurationExtension2(struct soap*, const char *, int, ns2__NetworkZeroConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__NetworkZeroConfigurationExtension2(struct soap*, const char*, ns2__NetworkZeroConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkZeroConfigurationExtension2(struct soap*, ns2__NetworkZeroConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkZeroConfigurationExtension2
#define soap_write_PointerTons2__NetworkZeroConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkZeroConfigurationExtension2(soap, data), 0) || soap_put_PointerTons2__NetworkZeroConfigurationExtension2(soap, data, "ns2:NetworkZeroConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__NetworkZeroConfigurationExtension2(struct soap*, ns2__NetworkZeroConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkZeroConfigurationExtension2
#define soap_read_PointerTons2__NetworkZeroConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkZeroConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkZeroConfiguration
#define SOAP_TYPE_PointerTons2__NetworkZeroConfiguration (1073)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkZeroConfiguration(struct soap*, ns2__NetworkZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkZeroConfiguration(struct soap*, const char *, int, ns2__NetworkZeroConfiguration *const*, const char *);
SOAP_FMAC3 ns2__NetworkZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__NetworkZeroConfiguration(struct soap*, const char*, ns2__NetworkZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkZeroConfiguration(struct soap*, ns2__NetworkZeroConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkZeroConfiguration
#define soap_write_PointerTons2__NetworkZeroConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkZeroConfiguration(soap, data), 0) || soap_put_PointerTons2__NetworkZeroConfiguration(soap, data, "ns2:NetworkZeroConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__NetworkZeroConfiguration(struct soap*, ns2__NetworkZeroConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkZeroConfiguration
#define soap_read_PointerTons2__NetworkZeroConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkZeroConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkZeroConfigurationExtension
#define SOAP_TYPE_PointerTons2__NetworkZeroConfigurationExtension (1072)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkZeroConfigurationExtension(struct soap*, ns2__NetworkZeroConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkZeroConfigurationExtension(struct soap*, const char *, int, ns2__NetworkZeroConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__NetworkZeroConfigurationExtension(struct soap*, const char*, ns2__NetworkZeroConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkZeroConfigurationExtension(struct soap*, ns2__NetworkZeroConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkZeroConfigurationExtension
#define soap_write_PointerTons2__NetworkZeroConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkZeroConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__NetworkZeroConfigurationExtension(soap, data, "ns2:NetworkZeroConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__NetworkZeroConfigurationExtension(struct soap*, ns2__NetworkZeroConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkZeroConfigurationExtension
#define soap_read_PointerTons2__NetworkZeroConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkZeroConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv6DHCPConfiguration
#define SOAP_TYPE_PointerTons2__IPv6DHCPConfiguration (1069)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv6DHCPConfiguration(struct soap*, enum ns2__IPv6DHCPConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv6DHCPConfiguration(struct soap*, const char *, int, enum ns2__IPv6DHCPConfiguration *const*, const char *);
SOAP_FMAC3 enum ns2__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__IPv6DHCPConfiguration(struct soap*, const char*, enum ns2__IPv6DHCPConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv6DHCPConfiguration(struct soap*, enum ns2__IPv6DHCPConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv6DHCPConfiguration
#define soap_write_PointerTons2__IPv6DHCPConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv6DHCPConfiguration(soap, data), 0) || soap_put_PointerTons2__IPv6DHCPConfiguration(soap, data, "ns2:IPv6DHCPConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__IPv6DHCPConfiguration(struct soap*, enum ns2__IPv6DHCPConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv6DHCPConfiguration
#define soap_read_PointerTons2__IPv6DHCPConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv6DHCPConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_PointerTons2__NetworkInterfaceSetConfigurationExtension2 (1068)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceSetConfigurationExtension2(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char *, int, ns2__NetworkInterfaceSetConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, ns2__NetworkInterfaceSetConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceSetConfigurationExtension2(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceSetConfigurationExtension2
#define soap_write_PointerTons2__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceSetConfigurationExtension2(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceSetConfigurationExtension2(soap, data, "ns2:NetworkInterfaceSetConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceSetConfigurationExtension2(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceSetConfigurationExtension2
#define soap_read_PointerTons2__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceSetConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_PointerTons2__NetworkInterfaceSetConfigurationExtension (1067)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceSetConfigurationExtension(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceSetConfigurationExtension(struct soap*, const char *, int, ns2__NetworkInterfaceSetConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, ns2__NetworkInterfaceSetConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceSetConfigurationExtension(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceSetConfigurationExtension
#define soap_write_PointerTons2__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceSetConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceSetConfigurationExtension(soap, data, "ns2:NetworkInterfaceSetConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceSetConfigurationExtension(struct soap*, ns2__NetworkInterfaceSetConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceSetConfigurationExtension
#define soap_read_PointerTons2__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceSetConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTons2__IPv6NetworkInterfaceSetConfiguration (1066)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv6NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv6NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char *, int, ns2__IPv6NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 ns2__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, ns2__IPv6NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv6NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv6NetworkInterfaceSetConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv6NetworkInterfaceSetConfiguration
#define soap_write_PointerTons2__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv6NetworkInterfaceSetConfiguration(soap, data), 0) || soap_put_PointerTons2__IPv6NetworkInterfaceSetConfiguration(soap, data, "ns2:IPv6NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__IPv6NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv6NetworkInterfaceSetConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv6NetworkInterfaceSetConfiguration
#define soap_read_PointerTons2__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv6NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTons2__IPv4NetworkInterfaceSetConfiguration (1065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv4NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv4NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char *, int, ns2__IPv4NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 ns2__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, ns2__IPv4NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv4NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv4NetworkInterfaceSetConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv4NetworkInterfaceSetConfiguration
#define soap_write_PointerTons2__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv4NetworkInterfaceSetConfiguration(soap, data), 0) || soap_put_PointerTons2__IPv4NetworkInterfaceSetConfiguration(soap, data, "ns2:IPv4NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__IPv4NetworkInterfaceSetConfiguration(struct soap*, ns2__IPv4NetworkInterfaceSetConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv4NetworkInterfaceSetConfiguration
#define soap_read_PointerTons2__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv4NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DynamicDNSInformationExtension
#define SOAP_TYPE_PointerTons2__DynamicDNSInformationExtension (1064)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DynamicDNSInformationExtension(struct soap*, ns2__DynamicDNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DynamicDNSInformationExtension(struct soap*, const char *, int, ns2__DynamicDNSInformationExtension *const*, const char *);
SOAP_FMAC3 ns2__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__DynamicDNSInformationExtension(struct soap*, const char*, ns2__DynamicDNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DynamicDNSInformationExtension(struct soap*, ns2__DynamicDNSInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DynamicDNSInformationExtension
#define soap_write_PointerTons2__DynamicDNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DynamicDNSInformationExtension(soap, data), 0) || soap_put_PointerTons2__DynamicDNSInformationExtension(soap, data, "ns2:DynamicDNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__DynamicDNSInformationExtension(struct soap*, ns2__DynamicDNSInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__DynamicDNSInformationExtension
#define soap_read_PointerTons2__DynamicDNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DynamicDNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__duration
#define SOAP_TYPE_PointerToxsd__duration (1063)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__duration
#define soap_write_PointerToxsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__duration(soap, data), 0) || soap_put_PointerToxsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__duration
#define soap_read_PointerToxsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NTPInformationExtension
#define SOAP_TYPE_PointerTons2__NTPInformationExtension (1062)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NTPInformationExtension(struct soap*, ns2__NTPInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NTPInformationExtension(struct soap*, const char *, int, ns2__NTPInformationExtension *const*, const char *);
SOAP_FMAC3 ns2__NTPInformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__NTPInformationExtension(struct soap*, const char*, ns2__NTPInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NTPInformationExtension(struct soap*, ns2__NTPInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NTPInformationExtension
#define soap_write_PointerTons2__NTPInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NTPInformationExtension(soap, data), 0) || soap_put_PointerTons2__NTPInformationExtension(soap, data, "ns2:NTPInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NTPInformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__NTPInformationExtension(struct soap*, ns2__NTPInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NTPInformationExtension
#define soap_read_PointerTons2__NTPInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NTPInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkHost
#define SOAP_TYPE_PointerTons2__NetworkHost (1060)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkHost(struct soap*, ns2__NetworkHost *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkHost(struct soap*, const char *, int, ns2__NetworkHost *const*, const char *);
SOAP_FMAC3 ns2__NetworkHost ** SOAP_FMAC4 soap_in_PointerTons2__NetworkHost(struct soap*, const char*, ns2__NetworkHost **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkHost(struct soap*, ns2__NetworkHost *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkHost
#define soap_write_PointerTons2__NetworkHost(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkHost(soap, data), 0) || soap_put_PointerTons2__NetworkHost(soap, data, "ns2:NetworkHost", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkHost ** SOAP_FMAC4 soap_get_PointerTons2__NetworkHost(struct soap*, ns2__NetworkHost **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkHost
#define soap_read_PointerTons2__NetworkHost(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkHost(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DNSInformationExtension
#define SOAP_TYPE_PointerTons2__DNSInformationExtension (1059)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DNSInformationExtension(struct soap*, ns2__DNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DNSInformationExtension(struct soap*, const char *, int, ns2__DNSInformationExtension *const*, const char *);
SOAP_FMAC3 ns2__DNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__DNSInformationExtension(struct soap*, const char*, ns2__DNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DNSInformationExtension(struct soap*, ns2__DNSInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DNSInformationExtension
#define soap_write_PointerTons2__DNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DNSInformationExtension(soap, data), 0) || soap_put_PointerTons2__DNSInformationExtension(soap, data, "ns2:DNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__DNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__DNSInformationExtension(struct soap*, ns2__DNSInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__DNSInformationExtension
#define soap_read_PointerTons2__DNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__HostnameInformationExtension
#define SOAP_TYPE_PointerTons2__HostnameInformationExtension (1056)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HostnameInformationExtension(struct soap*, ns2__HostnameInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HostnameInformationExtension(struct soap*, const char *, int, ns2__HostnameInformationExtension *const*, const char *);
SOAP_FMAC3 ns2__HostnameInformationExtension ** SOAP_FMAC4 soap_in_PointerTons2__HostnameInformationExtension(struct soap*, const char*, ns2__HostnameInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HostnameInformationExtension(struct soap*, ns2__HostnameInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__HostnameInformationExtension
#define soap_write_PointerTons2__HostnameInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__HostnameInformationExtension(soap, data), 0) || soap_put_PointerTons2__HostnameInformationExtension(soap, data, "ns2:HostnameInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__HostnameInformationExtension ** SOAP_FMAC4 soap_get_PointerTons2__HostnameInformationExtension(struct soap*, ns2__HostnameInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__HostnameInformationExtension
#define soap_read_PointerTons2__HostnameInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__HostnameInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__token
#define SOAP_TYPE_PointerToxsd__token (1055)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__token(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__token(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__token(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__token(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__token
#define soap_write_PointerToxsd__token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__token(soap, data), 0) || soap_put_PointerToxsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__token(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__token
#define soap_read_PointerToxsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkHostExtension
#define SOAP_TYPE_PointerTons2__NetworkHostExtension (1054)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkHostExtension(struct soap*, ns2__NetworkHostExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkHostExtension(struct soap*, const char *, int, ns2__NetworkHostExtension *const*, const char *);
SOAP_FMAC3 ns2__NetworkHostExtension ** SOAP_FMAC4 soap_in_PointerTons2__NetworkHostExtension(struct soap*, const char*, ns2__NetworkHostExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkHostExtension(struct soap*, ns2__NetworkHostExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkHostExtension
#define soap_write_PointerTons2__NetworkHostExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkHostExtension(soap, data), 0) || soap_put_PointerTons2__NetworkHostExtension(soap, data, "ns2:NetworkHostExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkHostExtension ** SOAP_FMAC4 soap_get_PointerTons2__NetworkHostExtension(struct soap*, ns2__NetworkHostExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkHostExtension
#define soap_read_PointerTons2__NetworkHostExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkHostExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__DNSName
#define SOAP_TYPE_PointerTons2__DNSName (1053)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DNSName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DNSName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__DNSName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DNSName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__DNSName
#define soap_write_PointerTons2__DNSName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__DNSName(soap, data), 0) || soap_put_PointerTons2__DNSName(soap, data, "ns2:DNSName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__DNSName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__DNSName
#define soap_read_PointerTons2__DNSName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__DNSName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv6Address
#define SOAP_TYPE_PointerTons2__IPv6Address (1052)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv6Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv6Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__IPv6Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv6Address(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv6Address
#define soap_write_PointerTons2__IPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv6Address(soap, data), 0) || soap_put_PointerTons2__IPv6Address(soap, data, "ns2:IPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__IPv6Address(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv6Address
#define soap_read_PointerTons2__IPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv4Address
#define SOAP_TYPE_PointerTons2__IPv4Address (1051)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv4Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv4Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__IPv4Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv4Address(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv4Address
#define soap_write_PointerTons2__IPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv4Address(soap, data), 0) || soap_put_PointerTons2__IPv4Address(soap, data, "ns2:IPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__IPv4Address(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv4Address
#define soap_read_PointerTons2__IPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkProtocolExtension
#define SOAP_TYPE_PointerTons2__NetworkProtocolExtension (1050)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkProtocolExtension(struct soap*, ns2__NetworkProtocolExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkProtocolExtension(struct soap*, const char *, int, ns2__NetworkProtocolExtension *const*, const char *);
SOAP_FMAC3 ns2__NetworkProtocolExtension ** SOAP_FMAC4 soap_in_PointerTons2__NetworkProtocolExtension(struct soap*, const char*, ns2__NetworkProtocolExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkProtocolExtension(struct soap*, ns2__NetworkProtocolExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkProtocolExtension
#define soap_write_PointerTons2__NetworkProtocolExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkProtocolExtension(soap, data), 0) || soap_put_PointerTons2__NetworkProtocolExtension(soap, data, "ns2:NetworkProtocolExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkProtocolExtension ** SOAP_FMAC4 soap_get_PointerTons2__NetworkProtocolExtension(struct soap*, ns2__NetworkProtocolExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkProtocolExtension
#define soap_read_PointerTons2__NetworkProtocolExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkProtocolExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv6ConfigurationExtension
#define SOAP_TYPE_PointerTons2__IPv6ConfigurationExtension (1049)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv6ConfigurationExtension(struct soap*, ns2__IPv6ConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv6ConfigurationExtension(struct soap*, const char *, int, ns2__IPv6ConfigurationExtension *const*, const char *);
SOAP_FMAC3 ns2__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTons2__IPv6ConfigurationExtension(struct soap*, const char*, ns2__IPv6ConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv6ConfigurationExtension(struct soap*, ns2__IPv6ConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv6ConfigurationExtension
#define soap_write_PointerTons2__IPv6ConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv6ConfigurationExtension(soap, data), 0) || soap_put_PointerTons2__IPv6ConfigurationExtension(soap, data, "ns2:IPv6ConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTons2__IPv6ConfigurationExtension(struct soap*, ns2__IPv6ConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv6ConfigurationExtension
#define soap_read_PointerTons2__IPv6ConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv6ConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PrefixedIPv6Address
#define SOAP_TYPE_PointerTons2__PrefixedIPv6Address (1047)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PrefixedIPv6Address(struct soap*, ns2__PrefixedIPv6Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PrefixedIPv6Address(struct soap*, const char *, int, ns2__PrefixedIPv6Address *const*, const char *);
SOAP_FMAC3 ns2__PrefixedIPv6Address ** SOAP_FMAC4 soap_in_PointerTons2__PrefixedIPv6Address(struct soap*, const char*, ns2__PrefixedIPv6Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PrefixedIPv6Address(struct soap*, ns2__PrefixedIPv6Address *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PrefixedIPv6Address
#define soap_write_PointerTons2__PrefixedIPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PrefixedIPv6Address(soap, data), 0) || soap_put_PointerTons2__PrefixedIPv6Address(soap, data, "ns2:PrefixedIPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PrefixedIPv6Address ** SOAP_FMAC4 soap_get_PointerTons2__PrefixedIPv6Address(struct soap*, ns2__PrefixedIPv6Address **, const char*, const char*);

#ifndef soap_read_PointerTons2__PrefixedIPv6Address
#define soap_read_PointerTons2__PrefixedIPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PrefixedIPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PrefixedIPv4Address
#define SOAP_TYPE_PointerTons2__PrefixedIPv4Address (1045)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PrefixedIPv4Address(struct soap*, ns2__PrefixedIPv4Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PrefixedIPv4Address(struct soap*, const char *, int, ns2__PrefixedIPv4Address *const*, const char *);
SOAP_FMAC3 ns2__PrefixedIPv4Address ** SOAP_FMAC4 soap_in_PointerTons2__PrefixedIPv4Address(struct soap*, const char*, ns2__PrefixedIPv4Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PrefixedIPv4Address(struct soap*, ns2__PrefixedIPv4Address *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PrefixedIPv4Address
#define soap_write_PointerTons2__PrefixedIPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PrefixedIPv4Address(soap, data), 0) || soap_put_PointerTons2__PrefixedIPv4Address(soap, data, "ns2:PrefixedIPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PrefixedIPv4Address ** SOAP_FMAC4 soap_get_PointerTons2__PrefixedIPv4Address(struct soap*, ns2__PrefixedIPv4Address **, const char*, const char*);

#ifndef soap_read_PointerTons2__PrefixedIPv4Address
#define soap_read_PointerTons2__PrefixedIPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PrefixedIPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv4Configuration
#define SOAP_TYPE_PointerTons2__IPv4Configuration (1044)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv4Configuration(struct soap*, ns2__IPv4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv4Configuration(struct soap*, const char *, int, ns2__IPv4Configuration *const*, const char *);
SOAP_FMAC3 ns2__IPv4Configuration ** SOAP_FMAC4 soap_in_PointerTons2__IPv4Configuration(struct soap*, const char*, ns2__IPv4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv4Configuration(struct soap*, ns2__IPv4Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv4Configuration
#define soap_write_PointerTons2__IPv4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv4Configuration(soap, data), 0) || soap_put_PointerTons2__IPv4Configuration(soap, data, "ns2:IPv4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv4Configuration ** SOAP_FMAC4 soap_get_PointerTons2__IPv4Configuration(struct soap*, ns2__IPv4Configuration **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv4Configuration
#define soap_read_PointerTons2__IPv4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPv6Configuration
#define SOAP_TYPE_PointerTons2__IPv6Configuration (1043)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPv6Configuration(struct soap*, ns2__IPv6Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPv6Configuration(struct soap*, const char *, int, ns2__IPv6Configuration *const*, const char *);
SOAP_FMAC3 ns2__IPv6Configuration ** SOAP_FMAC4 soap_in_PointerTons2__IPv6Configuration(struct soap*, const char*, ns2__IPv6Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPv6Configuration(struct soap*, ns2__IPv6Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPv6Configuration
#define soap_write_PointerTons2__IPv6Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPv6Configuration(soap, data), 0) || soap_put_PointerTons2__IPv6Configuration(soap, data, "ns2:IPv6Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPv6Configuration ** SOAP_FMAC4 soap_get_PointerTons2__IPv6Configuration(struct soap*, ns2__IPv6Configuration **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPv6Configuration
#define soap_read_PointerTons2__IPv6Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPv6Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (1042)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_PointerTons2__NetworkInterfaceConnectionSetting (1041)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceConnectionSetting(struct soap*, ns2__NetworkInterfaceConnectionSetting *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceConnectionSetting(struct soap*, const char *, int, ns2__NetworkInterfaceConnectionSetting *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceConnectionSetting(struct soap*, const char*, ns2__NetworkInterfaceConnectionSetting **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceConnectionSetting(struct soap*, ns2__NetworkInterfaceConnectionSetting *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceConnectionSetting
#define soap_write_PointerTons2__NetworkInterfaceConnectionSetting(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceConnectionSetting(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceConnectionSetting(soap, data, "ns2:NetworkInterfaceConnectionSetting", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceConnectionSetting(struct soap*, ns2__NetworkInterfaceConnectionSetting **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceConnectionSetting
#define soap_read_PointerTons2__NetworkInterfaceConnectionSetting(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceConnectionSetting(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__NetworkInterfaceExtension2
#define SOAP_TYPE_PointerTons2__NetworkInterfaceExtension2 (1040)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NetworkInterfaceExtension2(struct soap*, ns2__NetworkInterfaceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NetworkInterfaceExtension2(struct soap*, const char *, int, ns2__NetworkInterfaceExtension2 *const*, const char *);
SOAP_FMAC3 ns2__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__NetworkInterfaceExtension2(struct soap*, const char*, ns2__NetworkInterfaceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NetworkInterfaceExtension2(struct soap*, ns2__NetworkInterfaceExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__NetworkInterfaceExtension2
#define soap_write_PointerTons2__NetworkInterfaceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__NetworkInterfaceExtension2(soap, data), 0) || soap_put_PointerTons2__NetworkInterfaceExtension2(soap, data, "ns2:NetworkInterfaceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__NetworkInterfaceExtension2(struct soap*, ns2__NetworkInterfaceExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__NetworkInterfaceExtension2
#define soap_read_PointerTons2__NetworkInterfaceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__NetworkInterfaceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot11Configuration
#define SOAP_TYPE_PointerTons2__Dot11Configuration (1038)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot11Configuration(struct soap*, ns2__Dot11Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot11Configuration(struct soap*, const char *, int, ns2__Dot11Configuration *const*, const char *);
SOAP_FMAC3 ns2__Dot11Configuration ** SOAP_FMAC4 soap_in_PointerTons2__Dot11Configuration(struct soap*, const char*, ns2__Dot11Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot11Configuration(struct soap*, ns2__Dot11Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot11Configuration
#define soap_write_PointerTons2__Dot11Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot11Configuration(soap, data), 0) || soap_put_PointerTons2__Dot11Configuration(soap, data, "ns2:Dot11Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot11Configuration ** SOAP_FMAC4 soap_get_PointerTons2__Dot11Configuration(struct soap*, ns2__Dot11Configuration **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot11Configuration
#define soap_read_PointerTons2__Dot11Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot11Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Dot3Configuration
#define SOAP_TYPE_PointerTons2__Dot3Configuration (1036)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Dot3Configuration(struct soap*, ns2__Dot3Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Dot3Configuration(struct soap*, const char *, int, ns2__Dot3Configuration *const*, const char *);
SOAP_FMAC3 ns2__Dot3Configuration ** SOAP_FMAC4 soap_in_PointerTons2__Dot3Configuration(struct soap*, const char*, ns2__Dot3Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Dot3Configuration(struct soap*, ns2__Dot3Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Dot3Configuration
#define soap_write_PointerTons2__Dot3Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Dot3Configuration(soap, data), 0) || soap_put_PointerTons2__Dot3Configuration(soap, data, "ns2:Dot3Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Dot3Configuration ** SOAP_FMAC4 soap_get_PointerTons2__Dot3Configuration(struct soap*, ns2__Dot3Configuration **, const char*, const char*);

#ifndef soap_read_PointerTons2__Dot3Configuration
#define soap_read_PointerTons2__Dot3Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Dot3Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Transport
#define SOAP_TYPE_PointerTons2__Transport (1035)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Transport(struct soap*, ns2__Transport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Transport(struct soap*, const char *, int, ns2__Transport *const*, const char *);
SOAP_FMAC3 ns2__Transport ** SOAP_FMAC4 soap_in_PointerTons2__Transport(struct soap*, const char*, ns2__Transport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Transport(struct soap*, ns2__Transport *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Transport
#define soap_write_PointerTons2__Transport(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Transport(soap, data), 0) || soap_put_PointerTons2__Transport(soap, data, "ns2:Transport", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Transport ** SOAP_FMAC4 soap_get_PointerTons2__Transport(struct soap*, ns2__Transport **, const char*, const char*);

#ifndef soap_read_PointerTons2__Transport
#define soap_read_PointerTons2__Transport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Transport(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IPAddress
#define SOAP_TYPE_PointerTons2__IPAddress (1034)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IPAddress(struct soap*, ns2__IPAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IPAddress(struct soap*, const char *, int, ns2__IPAddress *const*, const char *);
SOAP_FMAC3 ns2__IPAddress ** SOAP_FMAC4 soap_in_PointerTons2__IPAddress(struct soap*, const char*, ns2__IPAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IPAddress(struct soap*, ns2__IPAddress *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IPAddress
#define soap_write_PointerTons2__IPAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IPAddress(soap, data), 0) || soap_put_PointerTons2__IPAddress(soap, data, "ns2:IPAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IPAddress ** SOAP_FMAC4 soap_get_PointerTons2__IPAddress(struct soap*, ns2__IPAddress **, const char*, const char*);

#ifndef soap_read_PointerTons2__IPAddress
#define soap_read_PointerTons2__IPAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IPAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTons2__AudioDecoderConfigurationOptionsExtension (1033)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioDecoderConfigurationOptionsExtension(struct soap*, ns2__AudioDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioDecoderConfigurationOptionsExtension(struct soap*, const char *, int, ns2__AudioDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, ns2__AudioDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioDecoderConfigurationOptionsExtension(struct soap*, ns2__AudioDecoderConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioDecoderConfigurationOptionsExtension
#define soap_write_PointerTons2__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioDecoderConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTons2__AudioDecoderConfigurationOptionsExtension(soap, data, "ns2:AudioDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__AudioDecoderConfigurationOptionsExtension(struct soap*, ns2__AudioDecoderConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioDecoderConfigurationOptionsExtension
#define soap_read_PointerTons2__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__G726DecOptions
#define SOAP_TYPE_PointerTons2__G726DecOptions (1032)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__G726DecOptions(struct soap*, ns2__G726DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__G726DecOptions(struct soap*, const char *, int, ns2__G726DecOptions *const*, const char *);
SOAP_FMAC3 ns2__G726DecOptions ** SOAP_FMAC4 soap_in_PointerTons2__G726DecOptions(struct soap*, const char*, ns2__G726DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__G726DecOptions(struct soap*, ns2__G726DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__G726DecOptions
#define soap_write_PointerTons2__G726DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__G726DecOptions(soap, data), 0) || soap_put_PointerTons2__G726DecOptions(soap, data, "ns2:G726DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__G726DecOptions ** SOAP_FMAC4 soap_get_PointerTons2__G726DecOptions(struct soap*, ns2__G726DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__G726DecOptions
#define soap_read_PointerTons2__G726DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__G726DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__G711DecOptions
#define SOAP_TYPE_PointerTons2__G711DecOptions (1031)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__G711DecOptions(struct soap*, ns2__G711DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__G711DecOptions(struct soap*, const char *, int, ns2__G711DecOptions *const*, const char *);
SOAP_FMAC3 ns2__G711DecOptions ** SOAP_FMAC4 soap_in_PointerTons2__G711DecOptions(struct soap*, const char*, ns2__G711DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__G711DecOptions(struct soap*, ns2__G711DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__G711DecOptions
#define soap_write_PointerTons2__G711DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__G711DecOptions(soap, data), 0) || soap_put_PointerTons2__G711DecOptions(soap, data, "ns2:G711DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__G711DecOptions ** SOAP_FMAC4 soap_get_PointerTons2__G711DecOptions(struct soap*, ns2__G711DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__G711DecOptions
#define soap_read_PointerTons2__G711DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__G711DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AACDecOptions
#define SOAP_TYPE_PointerTons2__AACDecOptions (1030)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AACDecOptions(struct soap*, ns2__AACDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AACDecOptions(struct soap*, const char *, int, ns2__AACDecOptions *const*, const char *);
SOAP_FMAC3 ns2__AACDecOptions ** SOAP_FMAC4 soap_in_PointerTons2__AACDecOptions(struct soap*, const char*, ns2__AACDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AACDecOptions(struct soap*, ns2__AACDecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AACDecOptions
#define soap_write_PointerTons2__AACDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AACDecOptions(soap, data), 0) || soap_put_PointerTons2__AACDecOptions(soap, data, "ns2:AACDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AACDecOptions ** SOAP_FMAC4 soap_get_PointerTons2__AACDecOptions(struct soap*, ns2__AACDecOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__AACDecOptions
#define soap_read_PointerTons2__AACDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AACDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTons2__VideoDecoderConfigurationOptionsExtension (1028)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoDecoderConfigurationOptionsExtension(struct soap*, ns2__VideoDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoDecoderConfigurationOptionsExtension(struct soap*, const char *, int, ns2__VideoDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, ns2__VideoDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoDecoderConfigurationOptionsExtension(struct soap*, ns2__VideoDecoderConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoDecoderConfigurationOptionsExtension
#define soap_write_PointerTons2__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoDecoderConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTons2__VideoDecoderConfigurationOptionsExtension(soap, data, "ns2:VideoDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoDecoderConfigurationOptionsExtension(struct soap*, ns2__VideoDecoderConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoDecoderConfigurationOptionsExtension
#define soap_read_PointerTons2__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Mpeg4DecOptions
#define SOAP_TYPE_PointerTons2__Mpeg4DecOptions (1027)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Mpeg4DecOptions(struct soap*, ns2__Mpeg4DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Mpeg4DecOptions(struct soap*, const char *, int, ns2__Mpeg4DecOptions *const*, const char *);
SOAP_FMAC3 ns2__Mpeg4DecOptions ** SOAP_FMAC4 soap_in_PointerTons2__Mpeg4DecOptions(struct soap*, const char*, ns2__Mpeg4DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Mpeg4DecOptions(struct soap*, ns2__Mpeg4DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Mpeg4DecOptions
#define soap_write_PointerTons2__Mpeg4DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Mpeg4DecOptions(soap, data), 0) || soap_put_PointerTons2__Mpeg4DecOptions(soap, data, "ns2:Mpeg4DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4DecOptions ** SOAP_FMAC4 soap_get_PointerTons2__Mpeg4DecOptions(struct soap*, ns2__Mpeg4DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__Mpeg4DecOptions
#define soap_read_PointerTons2__Mpeg4DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Mpeg4DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__H264DecOptions
#define SOAP_TYPE_PointerTons2__H264DecOptions (1026)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__H264DecOptions(struct soap*, ns2__H264DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__H264DecOptions(struct soap*, const char *, int, ns2__H264DecOptions *const*, const char *);
SOAP_FMAC3 ns2__H264DecOptions ** SOAP_FMAC4 soap_in_PointerTons2__H264DecOptions(struct soap*, const char*, ns2__H264DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__H264DecOptions(struct soap*, ns2__H264DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__H264DecOptions
#define soap_write_PointerTons2__H264DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__H264DecOptions(soap, data), 0) || soap_put_PointerTons2__H264DecOptions(soap, data, "ns2:H264DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264DecOptions ** SOAP_FMAC4 soap_get_PointerTons2__H264DecOptions(struct soap*, ns2__H264DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__H264DecOptions
#define soap_read_PointerTons2__H264DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__H264DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__JpegDecOptions
#define SOAP_TYPE_PointerTons2__JpegDecOptions (1025)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__JpegDecOptions(struct soap*, ns2__JpegDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__JpegDecOptions(struct soap*, const char *, int, ns2__JpegDecOptions *const*, const char *);
SOAP_FMAC3 ns2__JpegDecOptions ** SOAP_FMAC4 soap_in_PointerTons2__JpegDecOptions(struct soap*, const char*, ns2__JpegDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__JpegDecOptions(struct soap*, ns2__JpegDecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__JpegDecOptions
#define soap_write_PointerTons2__JpegDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__JpegDecOptions(soap, data), 0) || soap_put_PointerTons2__JpegDecOptions(soap, data, "ns2:JpegDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JpegDecOptions ** SOAP_FMAC4 soap_get_PointerTons2__JpegDecOptions(struct soap*, ns2__JpegDecOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__JpegDecOptions
#define soap_read_PointerTons2__JpegDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__JpegDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_PointerTons2__PTZStatusFilterOptionsExtension (1024)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZStatusFilterOptionsExtension(struct soap*, ns2__PTZStatusFilterOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZStatusFilterOptionsExtension(struct soap*, const char *, int, ns2__PTZStatusFilterOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__PTZStatusFilterOptionsExtension(struct soap*, const char*, ns2__PTZStatusFilterOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZStatusFilterOptionsExtension(struct soap*, ns2__PTZStatusFilterOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZStatusFilterOptionsExtension
#define soap_write_PointerTons2__PTZStatusFilterOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZStatusFilterOptionsExtension(soap, data), 0) || soap_put_PointerTons2__PTZStatusFilterOptionsExtension(soap, data, "ns2:PTZStatusFilterOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__PTZStatusFilterOptionsExtension(struct soap*, ns2__PTZStatusFilterOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZStatusFilterOptionsExtension
#define soap_read_PointerTons2__PTZStatusFilterOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZStatusFilterOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTons2__MetadataConfigurationOptionsExtension2 (1023)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataConfigurationOptionsExtension2(struct soap*, ns2__MetadataConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataConfigurationOptionsExtension2(struct soap*, const char *, int, ns2__MetadataConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__MetadataConfigurationOptionsExtension2(struct soap*, const char*, ns2__MetadataConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataConfigurationOptionsExtension2(struct soap*, ns2__MetadataConfigurationOptionsExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataConfigurationOptionsExtension2
#define soap_write_PointerTons2__MetadataConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataConfigurationOptionsExtension2(soap, data), 0) || soap_put_PointerTons2__MetadataConfigurationOptionsExtension2(soap, data, "ns2:MetadataConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__MetadataConfigurationOptionsExtension2(struct soap*, ns2__MetadataConfigurationOptionsExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataConfigurationOptionsExtension2
#define soap_read_PointerTons2__MetadataConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_PointerTons2__MetadataConfigurationOptionsExtension (1021)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataConfigurationOptionsExtension(struct soap*, ns2__MetadataConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataConfigurationOptionsExtension(struct soap*, const char *, int, ns2__MetadataConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__MetadataConfigurationOptionsExtension(struct soap*, const char*, ns2__MetadataConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataConfigurationOptionsExtension(struct soap*, ns2__MetadataConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataConfigurationOptionsExtension
#define soap_write_PointerTons2__MetadataConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTons2__MetadataConfigurationOptionsExtension(soap, data, "ns2:MetadataConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__MetadataConfigurationOptionsExtension(struct soap*, ns2__MetadataConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataConfigurationOptionsExtension
#define soap_read_PointerTons2__MetadataConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZStatusFilterOptions
#define SOAP_TYPE_PointerTons2__PTZStatusFilterOptions (1020)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZStatusFilterOptions(struct soap*, ns2__PTZStatusFilterOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZStatusFilterOptions(struct soap*, const char *, int, ns2__PTZStatusFilterOptions *const*, const char *);
SOAP_FMAC3 ns2__PTZStatusFilterOptions ** SOAP_FMAC4 soap_in_PointerTons2__PTZStatusFilterOptions(struct soap*, const char*, ns2__PTZStatusFilterOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZStatusFilterOptions(struct soap*, ns2__PTZStatusFilterOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZStatusFilterOptions
#define soap_write_PointerTons2__PTZStatusFilterOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZStatusFilterOptions(soap, data), 0) || soap_put_PointerTons2__PTZStatusFilterOptions(soap, data, "ns2:PTZStatusFilterOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZStatusFilterOptions ** SOAP_FMAC4 soap_get_PointerTons2__PTZStatusFilterOptions(struct soap*, ns2__PTZStatusFilterOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZStatusFilterOptions
#define soap_read_PointerTons2__PTZStatusFilterOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZStatusFilterOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_ns2__EventSubscription_SubscriptionPolicy (1019)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__EventSubscription_SubscriptionPolicy(struct soap*, _ns2__EventSubscription_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__EventSubscription_SubscriptionPolicy(struct soap*, const char *, int, _ns2__EventSubscription_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _ns2__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_ns2__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _ns2__EventSubscription_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__EventSubscription_SubscriptionPolicy(struct soap*, _ns2__EventSubscription_SubscriptionPolicy *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__EventSubscription_SubscriptionPolicy
#define soap_write_PointerTo_ns2__EventSubscription_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__EventSubscription_SubscriptionPolicy(soap, data), 0) || soap_put_PointerTo_ns2__EventSubscription_SubscriptionPolicy(soap, data, "ns2:EventSubscription-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_ns2__EventSubscription_SubscriptionPolicy(struct soap*, _ns2__EventSubscription_SubscriptionPolicy **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__EventSubscription_SubscriptionPolicy
#define soap_read_PointerTo_ns2__EventSubscription_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__EventSubscription_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__FilterType
#define SOAP_TYPE_PointerTons3__FilterType (1017)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FilterType(struct soap*, ns3__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FilterType(struct soap*, const char *, int, ns3__FilterType *const*, const char *);
SOAP_FMAC3 ns3__FilterType ** SOAP_FMAC4 soap_in_PointerTons3__FilterType(struct soap*, const char*, ns3__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FilterType(struct soap*, ns3__FilterType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__FilterType
#define soap_write_PointerTons3__FilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__FilterType(soap, data), 0) || soap_put_PointerTons3__FilterType(soap, data, "ns3:FilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__FilterType ** SOAP_FMAC4 soap_get_PointerTons3__FilterType(struct soap*, ns3__FilterType **, const char*, const char*);

#ifndef soap_read_PointerTons3__FilterType
#define soap_read_PointerTons3__FilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons3__FilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioEncoderConfigurationOption
#define SOAP_TYPE_PointerTons2__AudioEncoderConfigurationOption (1015)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioEncoderConfigurationOption(struct soap*, ns2__AudioEncoderConfigurationOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioEncoderConfigurationOption(struct soap*, const char *, int, ns2__AudioEncoderConfigurationOption *const*, const char *);
SOAP_FMAC3 ns2__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_in_PointerTons2__AudioEncoderConfigurationOption(struct soap*, const char*, ns2__AudioEncoderConfigurationOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioEncoderConfigurationOption(struct soap*, ns2__AudioEncoderConfigurationOption *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioEncoderConfigurationOption
#define soap_write_PointerTons2__AudioEncoderConfigurationOption(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioEncoderConfigurationOption(soap, data), 0) || soap_put_PointerTons2__AudioEncoderConfigurationOption(soap, data, "ns2:AudioEncoderConfigurationOption", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_get_PointerTons2__AudioEncoderConfigurationOption(struct soap*, ns2__AudioEncoderConfigurationOption **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioEncoderConfigurationOption
#define soap_read_PointerTons2__AudioEncoderConfigurationOption(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioEncoderConfigurationOption(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioSourceOptionsExtension
#define SOAP_TYPE_PointerTons2__AudioSourceOptionsExtension (1014)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioSourceOptionsExtension(struct soap*, ns2__AudioSourceOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioSourceOptionsExtension(struct soap*, const char *, int, ns2__AudioSourceOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__AudioSourceOptionsExtension(struct soap*, const char*, ns2__AudioSourceOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioSourceOptionsExtension(struct soap*, ns2__AudioSourceOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioSourceOptionsExtension
#define soap_write_PointerTons2__AudioSourceOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioSourceOptionsExtension(soap, data), 0) || soap_put_PointerTons2__AudioSourceOptionsExtension(soap, data, "ns2:AudioSourceOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__AudioSourceOptionsExtension(struct soap*, ns2__AudioSourceOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioSourceOptionsExtension
#define soap_read_PointerTons2__AudioSourceOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioSourceOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoEncoderOptionsExtension2
#define SOAP_TYPE_PointerTons2__VideoEncoderOptionsExtension2 (1010)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoEncoderOptionsExtension2(struct soap*, ns2__VideoEncoderOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoEncoderOptionsExtension2(struct soap*, const char *, int, ns2__VideoEncoderOptionsExtension2 *const*, const char *);
SOAP_FMAC3 ns2__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__VideoEncoderOptionsExtension2(struct soap*, const char*, ns2__VideoEncoderOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoEncoderOptionsExtension2(struct soap*, ns2__VideoEncoderOptionsExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoEncoderOptionsExtension2
#define soap_write_PointerTons2__VideoEncoderOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoEncoderOptionsExtension2(soap, data), 0) || soap_put_PointerTons2__VideoEncoderOptionsExtension2(soap, data, "ns2:VideoEncoderOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__VideoEncoderOptionsExtension2(struct soap*, ns2__VideoEncoderOptionsExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoEncoderOptionsExtension2
#define soap_read_PointerTons2__VideoEncoderOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoEncoderOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__H264Options2
#define SOAP_TYPE_PointerTons2__H264Options2 (1009)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__H264Options2(struct soap*, ns2__H264Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__H264Options2(struct soap*, const char *, int, ns2__H264Options2 *const*, const char *);
SOAP_FMAC3 ns2__H264Options2 ** SOAP_FMAC4 soap_in_PointerTons2__H264Options2(struct soap*, const char*, ns2__H264Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__H264Options2(struct soap*, ns2__H264Options2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__H264Options2
#define soap_write_PointerTons2__H264Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__H264Options2(soap, data), 0) || soap_put_PointerTons2__H264Options2(soap, data, "ns2:H264Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Options2 ** SOAP_FMAC4 soap_get_PointerTons2__H264Options2(struct soap*, ns2__H264Options2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__H264Options2
#define soap_read_PointerTons2__H264Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__H264Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Mpeg4Options2
#define SOAP_TYPE_PointerTons2__Mpeg4Options2 (1008)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Mpeg4Options2(struct soap*, ns2__Mpeg4Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Mpeg4Options2(struct soap*, const char *, int, ns2__Mpeg4Options2 *const*, const char *);
SOAP_FMAC3 ns2__Mpeg4Options2 ** SOAP_FMAC4 soap_in_PointerTons2__Mpeg4Options2(struct soap*, const char*, ns2__Mpeg4Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Mpeg4Options2(struct soap*, ns2__Mpeg4Options2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Mpeg4Options2
#define soap_write_PointerTons2__Mpeg4Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Mpeg4Options2(soap, data), 0) || soap_put_PointerTons2__Mpeg4Options2(soap, data, "ns2:Mpeg4Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Options2 ** SOAP_FMAC4 soap_get_PointerTons2__Mpeg4Options2(struct soap*, ns2__Mpeg4Options2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__Mpeg4Options2
#define soap_read_PointerTons2__Mpeg4Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Mpeg4Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__JpegOptions2
#define SOAP_TYPE_PointerTons2__JpegOptions2 (1007)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__JpegOptions2(struct soap*, ns2__JpegOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__JpegOptions2(struct soap*, const char *, int, ns2__JpegOptions2 *const*, const char *);
SOAP_FMAC3 ns2__JpegOptions2 ** SOAP_FMAC4 soap_in_PointerTons2__JpegOptions2(struct soap*, const char*, ns2__JpegOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__JpegOptions2(struct soap*, ns2__JpegOptions2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__JpegOptions2
#define soap_write_PointerTons2__JpegOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__JpegOptions2(soap, data), 0) || soap_put_PointerTons2__JpegOptions2(soap, data, "ns2:JpegOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JpegOptions2 ** SOAP_FMAC4 soap_get_PointerTons2__JpegOptions2(struct soap*, ns2__JpegOptions2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__JpegOptions2
#define soap_read_PointerTons2__JpegOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__JpegOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoEncoderOptionsExtension
#define SOAP_TYPE_PointerTons2__VideoEncoderOptionsExtension (1006)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoEncoderOptionsExtension(struct soap*, ns2__VideoEncoderOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoEncoderOptionsExtension(struct soap*, const char *, int, ns2__VideoEncoderOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoEncoderOptionsExtension(struct soap*, const char*, ns2__VideoEncoderOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoEncoderOptionsExtension(struct soap*, ns2__VideoEncoderOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoEncoderOptionsExtension
#define soap_write_PointerTons2__VideoEncoderOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoEncoderOptionsExtension(soap, data), 0) || soap_put_PointerTons2__VideoEncoderOptionsExtension(soap, data, "ns2:VideoEncoderOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoEncoderOptionsExtension(struct soap*, ns2__VideoEncoderOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoEncoderOptionsExtension
#define soap_read_PointerTons2__VideoEncoderOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoEncoderOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__H264Options
#define SOAP_TYPE_PointerTons2__H264Options (1005)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__H264Options(struct soap*, ns2__H264Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__H264Options(struct soap*, const char *, int, ns2__H264Options *const*, const char *);
SOAP_FMAC3 ns2__H264Options ** SOAP_FMAC4 soap_in_PointerTons2__H264Options(struct soap*, const char*, ns2__H264Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__H264Options(struct soap*, ns2__H264Options *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__H264Options
#define soap_write_PointerTons2__H264Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__H264Options(soap, data), 0) || soap_put_PointerTons2__H264Options(soap, data, "ns2:H264Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__H264Options ** SOAP_FMAC4 soap_get_PointerTons2__H264Options(struct soap*, ns2__H264Options **, const char*, const char*);

#ifndef soap_read_PointerTons2__H264Options
#define soap_read_PointerTons2__H264Options(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__H264Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Mpeg4Options
#define SOAP_TYPE_PointerTons2__Mpeg4Options (1004)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Mpeg4Options(struct soap*, ns2__Mpeg4Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Mpeg4Options(struct soap*, const char *, int, ns2__Mpeg4Options *const*, const char *);
SOAP_FMAC3 ns2__Mpeg4Options ** SOAP_FMAC4 soap_in_PointerTons2__Mpeg4Options(struct soap*, const char*, ns2__Mpeg4Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Mpeg4Options(struct soap*, ns2__Mpeg4Options *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Mpeg4Options
#define soap_write_PointerTons2__Mpeg4Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Mpeg4Options(soap, data), 0) || soap_put_PointerTons2__Mpeg4Options(soap, data, "ns2:Mpeg4Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Mpeg4Options ** SOAP_FMAC4 soap_get_PointerTons2__Mpeg4Options(struct soap*, ns2__Mpeg4Options **, const char*, const char*);

#ifndef soap_read_PointerTons2__Mpeg4Options
#define soap_read_PointerTons2__Mpeg4Options(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Mpeg4Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__JpegOptions
#define SOAP_TYPE_PointerTons2__JpegOptions (1003)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__JpegOptions(struct soap*, ns2__JpegOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__JpegOptions(struct soap*, const char *, int, ns2__JpegOptions *const*, const char *);
SOAP_FMAC3 ns2__JpegOptions ** SOAP_FMAC4 soap_in_PointerTons2__JpegOptions(struct soap*, const char*, ns2__JpegOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__JpegOptions(struct soap*, ns2__JpegOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__JpegOptions
#define soap_write_PointerTons2__JpegOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__JpegOptions(soap, data), 0) || soap_put_PointerTons2__JpegOptions(soap, data, "ns2:JpegOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__JpegOptions ** SOAP_FMAC4 soap_get_PointerTons2__JpegOptions(struct soap*, ns2__JpegOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__JpegOptions
#define soap_read_PointerTons2__JpegOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__JpegOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RotateOptionsExtension
#define SOAP_TYPE_PointerTons2__RotateOptionsExtension (1002)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RotateOptionsExtension(struct soap*, ns2__RotateOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RotateOptionsExtension(struct soap*, const char *, int, ns2__RotateOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__RotateOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__RotateOptionsExtension(struct soap*, const char*, ns2__RotateOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RotateOptionsExtension(struct soap*, ns2__RotateOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RotateOptionsExtension
#define soap_write_PointerTons2__RotateOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RotateOptionsExtension(soap, data), 0) || soap_put_PointerTons2__RotateOptionsExtension(soap, data, "ns2:RotateOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__RotateOptionsExtension(struct soap*, ns2__RotateOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RotateOptionsExtension
#define soap_read_PointerTons2__RotateOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RotateOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IntList
#define SOAP_TYPE_PointerTons2__IntList (1001)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IntList(struct soap*, ns2__IntList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IntList(struct soap*, const char *, int, ns2__IntList *const*, const char *);
SOAP_FMAC3 ns2__IntList ** SOAP_FMAC4 soap_in_PointerTons2__IntList(struct soap*, const char*, ns2__IntList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IntList(struct soap*, ns2__IntList *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IntList
#define soap_write_PointerTons2__IntList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IntList(soap, data), 0) || soap_put_PointerTons2__IntList(soap, data, "ns2:IntList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntList ** SOAP_FMAC4 soap_get_PointerTons2__IntList(struct soap*, ns2__IntList **, const char*, const char*);

#ifndef soap_read_PointerTons2__IntList
#define soap_read_PointerTons2__IntList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IntList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTons2__VideoSourceConfigurationOptionsExtension2 (999)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceConfigurationOptionsExtension2(struct soap*, ns2__VideoSourceConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceConfigurationOptionsExtension2(struct soap*, const char *, int, ns2__VideoSourceConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, ns2__VideoSourceConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceConfigurationOptionsExtension2(struct soap*, ns2__VideoSourceConfigurationOptionsExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceConfigurationOptionsExtension2
#define soap_write_PointerTons2__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceConfigurationOptionsExtension2(soap, data), 0) || soap_put_PointerTons2__VideoSourceConfigurationOptionsExtension2(soap, data, "ns2:VideoSourceConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceConfigurationOptionsExtension2(struct soap*, ns2__VideoSourceConfigurationOptionsExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceConfigurationOptionsExtension2
#define soap_read_PointerTons2__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RotateOptions
#define SOAP_TYPE_PointerTons2__RotateOptions (998)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RotateOptions(struct soap*, ns2__RotateOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RotateOptions(struct soap*, const char *, int, ns2__RotateOptions *const*, const char *);
SOAP_FMAC3 ns2__RotateOptions ** SOAP_FMAC4 soap_in_PointerTons2__RotateOptions(struct soap*, const char*, ns2__RotateOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RotateOptions(struct soap*, ns2__RotateOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RotateOptions
#define soap_write_PointerTons2__RotateOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RotateOptions(soap, data), 0) || soap_put_PointerTons2__RotateOptions(soap, data, "ns2:RotateOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateOptions ** SOAP_FMAC4 soap_get_PointerTons2__RotateOptions(struct soap*, ns2__RotateOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__RotateOptions
#define soap_read_PointerTons2__RotateOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RotateOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_PointerTons2__VideoSourceConfigurationOptionsExtension (997)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceConfigurationOptionsExtension(struct soap*, ns2__VideoSourceConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceConfigurationOptionsExtension(struct soap*, const char *, int, ns2__VideoSourceConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, ns2__VideoSourceConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceConfigurationOptionsExtension(struct soap*, ns2__VideoSourceConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceConfigurationOptionsExtension
#define soap_write_PointerTons2__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTons2__VideoSourceConfigurationOptionsExtension(soap, data, "ns2:VideoSourceConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceConfigurationOptionsExtension(struct soap*, ns2__VideoSourceConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceConfigurationOptionsExtension
#define soap_read_PointerTons2__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IntRectangleRange
#define SOAP_TYPE_PointerTons2__IntRectangleRange (995)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IntRectangleRange(struct soap*, ns2__IntRectangleRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IntRectangleRange(struct soap*, const char *, int, ns2__IntRectangleRange *const*, const char *);
SOAP_FMAC3 ns2__IntRectangleRange ** SOAP_FMAC4 soap_in_PointerTons2__IntRectangleRange(struct soap*, const char*, ns2__IntRectangleRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IntRectangleRange(struct soap*, ns2__IntRectangleRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IntRectangleRange
#define soap_write_PointerTons2__IntRectangleRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IntRectangleRange(soap, data), 0) || soap_put_PointerTons2__IntRectangleRange(soap, data, "ns2:IntRectangleRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntRectangleRange ** SOAP_FMAC4 soap_get_PointerTons2__IntRectangleRange(struct soap*, ns2__IntRectangleRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__IntRectangleRange
#define soap_read_PointerTons2__IntRectangleRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IntRectangleRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__RotateExtension
#define SOAP_TYPE_PointerTons2__RotateExtension (994)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__RotateExtension(struct soap*, ns2__RotateExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__RotateExtension(struct soap*, const char *, int, ns2__RotateExtension *const*, const char *);
SOAP_FMAC3 ns2__RotateExtension ** SOAP_FMAC4 soap_in_PointerTons2__RotateExtension(struct soap*, const char*, ns2__RotateExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__RotateExtension(struct soap*, ns2__RotateExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__RotateExtension
#define soap_write_PointerTons2__RotateExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__RotateExtension(soap, data), 0) || soap_put_PointerTons2__RotateExtension(soap, data, "ns2:RotateExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__RotateExtension ** SOAP_FMAC4 soap_get_PointerTons2__RotateExtension(struct soap*, ns2__RotateExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__RotateExtension
#define soap_read_PointerTons2__RotateExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__RotateExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceConfigurationExtension2
#define SOAP_TYPE_PointerTons2__VideoSourceConfigurationExtension2 (993)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceConfigurationExtension2(struct soap*, ns2__VideoSourceConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceConfigurationExtension2(struct soap*, const char *, int, ns2__VideoSourceConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceConfigurationExtension2(struct soap*, const char*, ns2__VideoSourceConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceConfigurationExtension2(struct soap*, ns2__VideoSourceConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceConfigurationExtension2
#define soap_write_PointerTons2__VideoSourceConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceConfigurationExtension2(soap, data), 0) || soap_put_PointerTons2__VideoSourceConfigurationExtension2(soap, data, "ns2:VideoSourceConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceConfigurationExtension2(struct soap*, ns2__VideoSourceConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceConfigurationExtension2
#define soap_read_PointerTons2__VideoSourceConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Rotate
#define SOAP_TYPE_PointerTons2__Rotate (992)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Rotate(struct soap*, ns2__Rotate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Rotate(struct soap*, const char *, int, ns2__Rotate *const*, const char *);
SOAP_FMAC3 ns2__Rotate ** SOAP_FMAC4 soap_in_PointerTons2__Rotate(struct soap*, const char*, ns2__Rotate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Rotate(struct soap*, ns2__Rotate *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Rotate
#define soap_write_PointerTons2__Rotate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Rotate(soap, data), 0) || soap_put_PointerTons2__Rotate(soap, data, "ns2:Rotate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Rotate ** SOAP_FMAC4 soap_get_PointerTons2__Rotate(struct soap*, ns2__Rotate **, const char*, const char*);

#ifndef soap_read_PointerTons2__Rotate
#define soap_read_PointerTons2__Rotate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Rotate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ProfileExtension2
#define SOAP_TYPE_PointerTons2__ProfileExtension2 (991)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProfileExtension2(struct soap*, ns2__ProfileExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProfileExtension2(struct soap*, const char *, int, ns2__ProfileExtension2 *const*, const char *);
SOAP_FMAC3 ns2__ProfileExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__ProfileExtension2(struct soap*, const char*, ns2__ProfileExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProfileExtension2(struct soap*, ns2__ProfileExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ProfileExtension2
#define soap_write_PointerTons2__ProfileExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ProfileExtension2(soap, data), 0) || soap_put_PointerTons2__ProfileExtension2(soap, data, "ns2:ProfileExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ProfileExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__ProfileExtension2(struct soap*, ns2__ProfileExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ProfileExtension2
#define soap_read_PointerTons2__ProfileExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ProfileExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ProfileExtension
#define SOAP_TYPE_PointerTons2__ProfileExtension (990)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ProfileExtension(struct soap*, ns2__ProfileExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ProfileExtension(struct soap*, const char *, int, ns2__ProfileExtension *const*, const char *);
SOAP_FMAC3 ns2__ProfileExtension ** SOAP_FMAC4 soap_in_PointerTons2__ProfileExtension(struct soap*, const char*, ns2__ProfileExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ProfileExtension(struct soap*, ns2__ProfileExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ProfileExtension
#define soap_write_PointerTons2__ProfileExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ProfileExtension(soap, data), 0) || soap_put_PointerTons2__ProfileExtension(soap, data, "ns2:ProfileExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ProfileExtension ** SOAP_FMAC4 soap_get_PointerTons2__ProfileExtension(struct soap*, ns2__ProfileExtension **, const char*, const char*);

#ifndef soap_read_PointerTons2__ProfileExtension
#define soap_read_PointerTons2__ProfileExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ProfileExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__PTZConfiguration
#define SOAP_TYPE_PointerTons2__PTZConfiguration (989)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PTZConfiguration(struct soap*, ns2__PTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PTZConfiguration(struct soap*, const char *, int, ns2__PTZConfiguration *const*, const char *);
SOAP_FMAC3 ns2__PTZConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__PTZConfiguration(struct soap*, const char*, ns2__PTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PTZConfiguration(struct soap*, ns2__PTZConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__PTZConfiguration
#define soap_write_PointerTons2__PTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__PTZConfiguration(soap, data), 0) || soap_put_PointerTons2__PTZConfiguration(soap, data, "ns2:PTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__PTZConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__PTZConfiguration(struct soap*, ns2__PTZConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__PTZConfiguration
#define soap_read_PointerTons2__PTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__PTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceExtension2
#define SOAP_TYPE_PointerTons2__VideoSourceExtension2 (988)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceExtension2(struct soap*, ns2__VideoSourceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceExtension2(struct soap*, const char *, int, ns2__VideoSourceExtension2 *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceExtension2 ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceExtension2(struct soap*, const char*, ns2__VideoSourceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceExtension2(struct soap*, ns2__VideoSourceExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceExtension2
#define soap_write_PointerTons2__VideoSourceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceExtension2(soap, data), 0) || soap_put_PointerTons2__VideoSourceExtension2(soap, data, "ns2:VideoSourceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceExtension2 ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceExtension2(struct soap*, ns2__VideoSourceExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceExtension2
#define soap_read_PointerTons2__VideoSourceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ImagingSettings20
#define SOAP_TYPE_PointerTons2__ImagingSettings20 (987)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ImagingSettings20(struct soap*, ns2__ImagingSettings20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ImagingSettings20(struct soap*, const char *, int, ns2__ImagingSettings20 *const*, const char *);
SOAP_FMAC3 ns2__ImagingSettings20 ** SOAP_FMAC4 soap_in_PointerTons2__ImagingSettings20(struct soap*, const char*, ns2__ImagingSettings20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ImagingSettings20(struct soap*, ns2__ImagingSettings20 *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ImagingSettings20
#define soap_write_PointerTons2__ImagingSettings20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ImagingSettings20(soap, data), 0) || soap_put_PointerTons2__ImagingSettings20(soap, data, "ns2:ImagingSettings20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__ImagingSettings20 ** SOAP_FMAC4 soap_get_PointerTons2__ImagingSettings20(struct soap*, ns2__ImagingSettings20 **, const char*, const char*);

#ifndef soap_read_PointerTons2__ImagingSettings20
#define soap_read_PointerTons2__ImagingSettings20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ImagingSettings20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__IntRange
#define SOAP_TYPE_PointerTons2__IntRange (984)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__IntRange(struct soap*, ns2__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__IntRange(struct soap*, const char *, int, ns2__IntRange *const*, const char *);
SOAP_FMAC3 ns2__IntRange ** SOAP_FMAC4 soap_in_PointerTons2__IntRange(struct soap*, const char*, ns2__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__IntRange(struct soap*, ns2__IntRange *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__IntRange
#define soap_write_PointerTons2__IntRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__IntRange(soap, data), 0) || soap_put_PointerTons2__IntRange(soap, data, "ns2:IntRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__IntRange ** SOAP_FMAC4 soap_get_PointerTons2__IntRange(struct soap*, ns2__IntRange **, const char*, const char*);

#ifndef soap_read_PointerTons2__IntRange
#define soap_read_PointerTons2__IntRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__IntRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDConfigurationOptions
#define SOAP_TYPE_PointerTons2__OSDConfigurationOptions (983)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDConfigurationOptions(struct soap*, ns2__OSDConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDConfigurationOptions(struct soap*, const char *, int, ns2__OSDConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__OSDConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__OSDConfigurationOptions(struct soap*, const char*, ns2__OSDConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDConfigurationOptions(struct soap*, ns2__OSDConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDConfigurationOptions
#define soap_write_PointerTons2__OSDConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__OSDConfigurationOptions(soap, data, "ns2:OSDConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__OSDConfigurationOptions(struct soap*, ns2__OSDConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDConfigurationOptions
#define soap_read_PointerTons2__OSDConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OSDConfiguration
#define SOAP_TYPE_PointerTons2__OSDConfiguration (981)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OSDConfiguration(struct soap*, ns2__OSDConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OSDConfiguration(struct soap*, const char *, int, ns2__OSDConfiguration *const*, const char *);
SOAP_FMAC3 ns2__OSDConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__OSDConfiguration(struct soap*, const char*, ns2__OSDConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OSDConfiguration(struct soap*, ns2__OSDConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OSDConfiguration
#define soap_write_PointerTons2__OSDConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__OSDConfiguration(soap, data), 0) || soap_put_PointerTons2__OSDConfiguration(soap, data, "ns2:OSDConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__OSDConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__OSDConfiguration(struct soap*, ns2__OSDConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__OSDConfiguration
#define soap_read_PointerTons2__OSDConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OSDConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__VideoSourceMode
#define SOAP_TYPE_PointerTons1__VideoSourceMode (979)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VideoSourceMode(struct soap*, ns1__VideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VideoSourceMode(struct soap*, const char *, int, ns1__VideoSourceMode *const*, const char *);
SOAP_FMAC3 ns1__VideoSourceMode ** SOAP_FMAC4 soap_in_PointerTons1__VideoSourceMode(struct soap*, const char*, ns1__VideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VideoSourceMode(struct soap*, ns1__VideoSourceMode *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__VideoSourceMode
#define soap_write_PointerTons1__VideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__VideoSourceMode(soap, data), 0) || soap_put_PointerTons1__VideoSourceMode(soap, data, "ns1:VideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__VideoSourceMode ** SOAP_FMAC4 soap_get_PointerTons1__VideoSourceMode(struct soap*, ns1__VideoSourceMode **, const char*, const char*);

#ifndef soap_read_PointerTons1__VideoSourceMode
#define soap_read_PointerTons1__VideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__VideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MediaUri
#define SOAP_TYPE_PointerTons2__MediaUri (978)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MediaUri(struct soap*, ns2__MediaUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MediaUri(struct soap*, const char *, int, ns2__MediaUri *const*, const char *);
SOAP_FMAC3 ns2__MediaUri ** SOAP_FMAC4 soap_in_PointerTons2__MediaUri(struct soap*, const char*, ns2__MediaUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MediaUri(struct soap*, ns2__MediaUri *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MediaUri
#define soap_write_PointerTons2__MediaUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MediaUri(soap, data), 0) || soap_put_PointerTons2__MediaUri(soap, data, "ns2:MediaUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MediaUri ** SOAP_FMAC4 soap_get_PointerTons2__MediaUri(struct soap*, ns2__MediaUri **, const char*, const char*);

#ifndef soap_read_PointerTons2__MediaUri
#define soap_read_PointerTons2__MediaUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MediaUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__StreamSetup
#define SOAP_TYPE_PointerTons2__StreamSetup (977)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__StreamSetup(struct soap*, ns2__StreamSetup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__StreamSetup(struct soap*, const char *, int, ns2__StreamSetup *const*, const char *);
SOAP_FMAC3 ns2__StreamSetup ** SOAP_FMAC4 soap_in_PointerTons2__StreamSetup(struct soap*, const char*, ns2__StreamSetup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__StreamSetup(struct soap*, ns2__StreamSetup *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__StreamSetup
#define soap_write_PointerTons2__StreamSetup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__StreamSetup(soap, data), 0) || soap_put_PointerTons2__StreamSetup(soap, data, "ns2:StreamSetup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__StreamSetup ** SOAP_FMAC4 soap_get_PointerTons2__StreamSetup(struct soap*, ns2__StreamSetup **, const char*, const char*);

#ifndef soap_read_PointerTons2__StreamSetup
#define soap_read_PointerTons2__StreamSetup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__StreamSetup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTons2__AudioDecoderConfigurationOptions (976)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioDecoderConfigurationOptions(struct soap*, ns2__AudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioDecoderConfigurationOptions(struct soap*, const char *, int, ns2__AudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__AudioDecoderConfigurationOptions(struct soap*, const char*, ns2__AudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioDecoderConfigurationOptions(struct soap*, ns2__AudioDecoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioDecoderConfigurationOptions
#define soap_write_PointerTons2__AudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioDecoderConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__AudioDecoderConfigurationOptions(soap, data, "ns2:AudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__AudioDecoderConfigurationOptions(struct soap*, ns2__AudioDecoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioDecoderConfigurationOptions
#define soap_read_PointerTons2__AudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTons2__AudioOutputConfigurationOptions (975)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioOutputConfigurationOptions(struct soap*, ns2__AudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioOutputConfigurationOptions(struct soap*, const char *, int, ns2__AudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__AudioOutputConfigurationOptions(struct soap*, const char*, ns2__AudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioOutputConfigurationOptions(struct soap*, ns2__AudioOutputConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioOutputConfigurationOptions
#define soap_write_PointerTons2__AudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioOutputConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__AudioOutputConfigurationOptions(soap, data, "ns2:AudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__AudioOutputConfigurationOptions(struct soap*, ns2__AudioOutputConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioOutputConfigurationOptions
#define soap_read_PointerTons2__AudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataConfigurationOptions
#define SOAP_TYPE_PointerTons2__MetadataConfigurationOptions (974)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataConfigurationOptions(struct soap*, ns2__MetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataConfigurationOptions(struct soap*, const char *, int, ns2__MetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__MetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__MetadataConfigurationOptions(struct soap*, const char*, ns2__MetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataConfigurationOptions(struct soap*, ns2__MetadataConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataConfigurationOptions
#define soap_write_PointerTons2__MetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__MetadataConfigurationOptions(soap, data, "ns2:MetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__MetadataConfigurationOptions(struct soap*, ns2__MetadataConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataConfigurationOptions
#define soap_read_PointerTons2__MetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTons2__AudioEncoderConfigurationOptions (973)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioEncoderConfigurationOptions(struct soap*, ns2__AudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioEncoderConfigurationOptions(struct soap*, const char *, int, ns2__AudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__AudioEncoderConfigurationOptions(struct soap*, const char*, ns2__AudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioEncoderConfigurationOptions(struct soap*, ns2__AudioEncoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioEncoderConfigurationOptions
#define soap_write_PointerTons2__AudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioEncoderConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__AudioEncoderConfigurationOptions(soap, data, "ns2:AudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__AudioEncoderConfigurationOptions(struct soap*, ns2__AudioEncoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioEncoderConfigurationOptions
#define soap_read_PointerTons2__AudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTons2__AudioSourceConfigurationOptions (972)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioSourceConfigurationOptions(struct soap*, ns2__AudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioSourceConfigurationOptions(struct soap*, const char *, int, ns2__AudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__AudioSourceConfigurationOptions(struct soap*, const char*, ns2__AudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioSourceConfigurationOptions(struct soap*, ns2__AudioSourceConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioSourceConfigurationOptions
#define soap_write_PointerTons2__AudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioSourceConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__AudioSourceConfigurationOptions(soap, data, "ns2:AudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__AudioSourceConfigurationOptions(struct soap*, ns2__AudioSourceConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioSourceConfigurationOptions
#define soap_read_PointerTons2__AudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoEncoderConfigurationOptions
#define SOAP_TYPE_PointerTons2__VideoEncoderConfigurationOptions (971)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoEncoderConfigurationOptions(struct soap*, ns2__VideoEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoEncoderConfigurationOptions(struct soap*, const char *, int, ns2__VideoEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__VideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__VideoEncoderConfigurationOptions(struct soap*, const char*, ns2__VideoEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoEncoderConfigurationOptions(struct soap*, ns2__VideoEncoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoEncoderConfigurationOptions
#define soap_write_PointerTons2__VideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoEncoderConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__VideoEncoderConfigurationOptions(soap, data, "ns2:VideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__VideoEncoderConfigurationOptions(struct soap*, ns2__VideoEncoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoEncoderConfigurationOptions
#define soap_read_PointerTons2__VideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTons2__VideoSourceConfigurationOptions (970)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceConfigurationOptions(struct soap*, ns2__VideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceConfigurationOptions(struct soap*, const char *, int, ns2__VideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceConfigurationOptions(struct soap*, const char*, ns2__VideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceConfigurationOptions(struct soap*, ns2__VideoSourceConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceConfigurationOptions
#define soap_write_PointerTons2__VideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceConfigurationOptions(soap, data), 0) || soap_put_PointerTons2__VideoSourceConfigurationOptions(soap, data, "ns2:VideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceConfigurationOptions(struct soap*, ns2__VideoSourceConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceConfigurationOptions
#define soap_read_PointerTons2__VideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioDecoderConfiguration
#define SOAP_TYPE_PointerTons2__AudioDecoderConfiguration (968)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioDecoderConfiguration(struct soap*, ns2__AudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioDecoderConfiguration(struct soap*, const char *, int, ns2__AudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 ns2__AudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__AudioDecoderConfiguration(struct soap*, const char*, ns2__AudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioDecoderConfiguration(struct soap*, ns2__AudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioDecoderConfiguration
#define soap_write_PointerTons2__AudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTons2__AudioDecoderConfiguration(soap, data, "ns2:AudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__AudioDecoderConfiguration(struct soap*, ns2__AudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioDecoderConfiguration
#define soap_read_PointerTons2__AudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioOutputConfiguration
#define SOAP_TYPE_PointerTons2__AudioOutputConfiguration (966)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioOutputConfiguration(struct soap*, ns2__AudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioOutputConfiguration(struct soap*, const char *, int, ns2__AudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 ns2__AudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__AudioOutputConfiguration(struct soap*, const char*, ns2__AudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioOutputConfiguration(struct soap*, ns2__AudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioOutputConfiguration
#define soap_write_PointerTons2__AudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioOutputConfiguration(soap, data), 0) || soap_put_PointerTons2__AudioOutputConfiguration(soap, data, "ns2:AudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__AudioOutputConfiguration(struct soap*, ns2__AudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioOutputConfiguration
#define soap_read_PointerTons2__AudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__MetadataConfiguration
#define SOAP_TYPE_PointerTons2__MetadataConfiguration (964)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__MetadataConfiguration(struct soap*, ns2__MetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__MetadataConfiguration(struct soap*, const char *, int, ns2__MetadataConfiguration *const*, const char *);
SOAP_FMAC3 ns2__MetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__MetadataConfiguration(struct soap*, const char*, ns2__MetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__MetadataConfiguration(struct soap*, ns2__MetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__MetadataConfiguration
#define soap_write_PointerTons2__MetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__MetadataConfiguration(soap, data), 0) || soap_put_PointerTons2__MetadataConfiguration(soap, data, "ns2:MetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__MetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__MetadataConfiguration(struct soap*, ns2__MetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__MetadataConfiguration
#define soap_read_PointerTons2__MetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__MetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTons2__VideoAnalyticsConfiguration (962)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoAnalyticsConfiguration(struct soap*, ns2__VideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoAnalyticsConfiguration(struct soap*, const char *, int, ns2__VideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 ns2__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__VideoAnalyticsConfiguration(struct soap*, const char*, ns2__VideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoAnalyticsConfiguration(struct soap*, ns2__VideoAnalyticsConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoAnalyticsConfiguration
#define soap_write_PointerTons2__VideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoAnalyticsConfiguration(soap, data), 0) || soap_put_PointerTons2__VideoAnalyticsConfiguration(soap, data, "ns2:VideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__VideoAnalyticsConfiguration(struct soap*, ns2__VideoAnalyticsConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoAnalyticsConfiguration
#define soap_read_PointerTons2__VideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioSourceConfiguration
#define SOAP_TYPE_PointerTons2__AudioSourceConfiguration (960)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioSourceConfiguration(struct soap*, ns2__AudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioSourceConfiguration(struct soap*, const char *, int, ns2__AudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 ns2__AudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__AudioSourceConfiguration(struct soap*, const char*, ns2__AudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioSourceConfiguration(struct soap*, ns2__AudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioSourceConfiguration
#define soap_write_PointerTons2__AudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioSourceConfiguration(soap, data), 0) || soap_put_PointerTons2__AudioSourceConfiguration(soap, data, "ns2:AudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__AudioSourceConfiguration(struct soap*, ns2__AudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioSourceConfiguration
#define soap_read_PointerTons2__AudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioEncoderConfiguration
#define SOAP_TYPE_PointerTons2__AudioEncoderConfiguration (958)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioEncoderConfiguration(struct soap*, ns2__AudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioEncoderConfiguration(struct soap*, const char *, int, ns2__AudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 ns2__AudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__AudioEncoderConfiguration(struct soap*, const char*, ns2__AudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioEncoderConfiguration(struct soap*, ns2__AudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioEncoderConfiguration
#define soap_write_PointerTons2__AudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTons2__AudioEncoderConfiguration(soap, data, "ns2:AudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__AudioEncoderConfiguration(struct soap*, ns2__AudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioEncoderConfiguration
#define soap_read_PointerTons2__AudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSourceConfiguration
#define SOAP_TYPE_PointerTons2__VideoSourceConfiguration (956)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSourceConfiguration(struct soap*, ns2__VideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSourceConfiguration(struct soap*, const char *, int, ns2__VideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 ns2__VideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__VideoSourceConfiguration(struct soap*, const char*, ns2__VideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSourceConfiguration(struct soap*, ns2__VideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSourceConfiguration
#define soap_write_PointerTons2__VideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSourceConfiguration(soap, data), 0) || soap_put_PointerTons2__VideoSourceConfiguration(soap, data, "ns2:VideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__VideoSourceConfiguration(struct soap*, ns2__VideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSourceConfiguration
#define soap_read_PointerTons2__VideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoEncoderConfiguration
#define SOAP_TYPE_PointerTons2__VideoEncoderConfiguration (954)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoEncoderConfiguration(struct soap*, ns2__VideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoEncoderConfiguration(struct soap*, const char *, int, ns2__VideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 ns2__VideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTons2__VideoEncoderConfiguration(struct soap*, const char*, ns2__VideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoEncoderConfiguration(struct soap*, ns2__VideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoEncoderConfiguration
#define soap_write_PointerTons2__VideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTons2__VideoEncoderConfiguration(soap, data, "ns2:VideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTons2__VideoEncoderConfiguration(struct soap*, ns2__VideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoEncoderConfiguration
#define soap_read_PointerTons2__VideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Profile
#define SOAP_TYPE_PointerTons2__Profile (952)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Profile(struct soap*, ns2__Profile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Profile(struct soap*, const char *, int, ns2__Profile *const*, const char *);
SOAP_FMAC3 ns2__Profile ** SOAP_FMAC4 soap_in_PointerTons2__Profile(struct soap*, const char*, ns2__Profile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Profile(struct soap*, ns2__Profile *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Profile
#define soap_write_PointerTons2__Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Profile(soap, data), 0) || soap_put_PointerTons2__Profile(soap, data, "ns2:Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__Profile ** SOAP_FMAC4 soap_get_PointerTons2__Profile(struct soap*, ns2__Profile **, const char*, const char*);

#ifndef soap_read_PointerTons2__Profile
#define soap_read_PointerTons2__Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReferenceToken
#define SOAP_TYPE_PointerTons2__ReferenceToken (951)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReferenceToken
#define soap_write_PointerTons2__ReferenceToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__ReferenceToken(soap, data), 0) || soap_put_PointerTons2__ReferenceToken(soap, data, "ns2:ReferenceToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__ReferenceToken(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReferenceToken
#define soap_read_PointerTons2__ReferenceToken(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReferenceToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioOutput
#define SOAP_TYPE_PointerTons2__AudioOutput (949)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioOutput(struct soap*, ns2__AudioOutput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioOutput(struct soap*, const char *, int, ns2__AudioOutput *const*, const char *);
SOAP_FMAC3 ns2__AudioOutput ** SOAP_FMAC4 soap_in_PointerTons2__AudioOutput(struct soap*, const char*, ns2__AudioOutput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioOutput(struct soap*, ns2__AudioOutput *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioOutput
#define soap_write_PointerTons2__AudioOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioOutput(soap, data), 0) || soap_put_PointerTons2__AudioOutput(soap, data, "ns2:AudioOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioOutput ** SOAP_FMAC4 soap_get_PointerTons2__AudioOutput(struct soap*, ns2__AudioOutput **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioOutput
#define soap_read_PointerTons2__AudioOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AudioSource
#define SOAP_TYPE_PointerTons2__AudioSource (947)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AudioSource(struct soap*, ns2__AudioSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AudioSource(struct soap*, const char *, int, ns2__AudioSource *const*, const char *);
SOAP_FMAC3 ns2__AudioSource ** SOAP_FMAC4 soap_in_PointerTons2__AudioSource(struct soap*, const char*, ns2__AudioSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AudioSource(struct soap*, ns2__AudioSource *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AudioSource
#define soap_write_PointerTons2__AudioSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__AudioSource(soap, data), 0) || soap_put_PointerTons2__AudioSource(soap, data, "ns2:AudioSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AudioSource ** SOAP_FMAC4 soap_get_PointerTons2__AudioSource(struct soap*, ns2__AudioSource **, const char*, const char*);

#ifndef soap_read_PointerTons2__AudioSource
#define soap_read_PointerTons2__AudioSource(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AudioSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoSource
#define SOAP_TYPE_PointerTons2__VideoSource (945)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoSource(struct soap*, ns2__VideoSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoSource(struct soap*, const char *, int, ns2__VideoSource *const*, const char *);
SOAP_FMAC3 ns2__VideoSource ** SOAP_FMAC4 soap_in_PointerTons2__VideoSource(struct soap*, const char*, ns2__VideoSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoSource(struct soap*, ns2__VideoSource *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoSource
#define soap_write_PointerTons2__VideoSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoSource(soap, data), 0) || soap_put_PointerTons2__VideoSource(soap, data, "ns2:VideoSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoSource ** SOAP_FMAC4 soap_get_PointerTons2__VideoSource(struct soap*, ns2__VideoSource **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoSource
#define soap_read_PointerTons2__VideoSource(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Capabilities
#define SOAP_TYPE_PointerTons1__Capabilities (944)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Capabilities(struct soap*, ns1__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Capabilities(struct soap*, const char *, int, ns1__Capabilities *const*, const char *);
SOAP_FMAC3 ns1__Capabilities ** SOAP_FMAC4 soap_in_PointerTons1__Capabilities(struct soap*, const char*, ns1__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Capabilities(struct soap*, ns1__Capabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Capabilities
#define soap_write_PointerTons1__Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__Capabilities(soap, data), 0) || soap_put_PointerTons1__Capabilities(soap, data, "ns1:Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Capabilities ** SOAP_FMAC4 soap_get_PointerTons1__Capabilities(struct soap*, ns1__Capabilities **, const char*, const char*);

#ifndef soap_read_PointerTons1__Capabilities
#define soap_read_PointerTons1__Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__VideoSourceModeExtension
#define SOAP_TYPE_PointerTons1__VideoSourceModeExtension (943)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VideoSourceModeExtension(struct soap*, ns1__VideoSourceModeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VideoSourceModeExtension(struct soap*, const char *, int, ns1__VideoSourceModeExtension *const*, const char *);
SOAP_FMAC3 ns1__VideoSourceModeExtension ** SOAP_FMAC4 soap_in_PointerTons1__VideoSourceModeExtension(struct soap*, const char*, ns1__VideoSourceModeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VideoSourceModeExtension(struct soap*, ns1__VideoSourceModeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__VideoSourceModeExtension
#define soap_write_PointerTons1__VideoSourceModeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__VideoSourceModeExtension(soap, data), 0) || soap_put_PointerTons1__VideoSourceModeExtension(soap, data, "ns1:VideoSourceModeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__VideoSourceModeExtension ** SOAP_FMAC4 soap_get_PointerTons1__VideoSourceModeExtension(struct soap*, ns1__VideoSourceModeExtension **, const char*, const char*);

#ifndef soap_read_PointerTons1__VideoSourceModeExtension
#define soap_read_PointerTons1__VideoSourceModeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__VideoSourceModeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Description
#define SOAP_TYPE_PointerTons2__Description (942)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Description(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Description(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__Description(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Description(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Description
#define soap_write_PointerTons2__Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__Description(soap, data), 0) || soap_put_PointerTons2__Description(soap, data, "ns2:Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__Description(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__Description
#define soap_read_PointerTons2__Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__VideoResolution
#define SOAP_TYPE_PointerTons2__VideoResolution (941)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VideoResolution(struct soap*, ns2__VideoResolution *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VideoResolution(struct soap*, const char *, int, ns2__VideoResolution *const*, const char *);
SOAP_FMAC3 ns2__VideoResolution ** SOAP_FMAC4 soap_in_PointerTons2__VideoResolution(struct soap*, const char*, ns2__VideoResolution **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VideoResolution(struct soap*, ns2__VideoResolution *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__VideoResolution
#define soap_write_PointerTons2__VideoResolution(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__VideoResolution(soap, data), 0) || soap_put_PointerTons2__VideoResolution(soap, data, "ns2:VideoResolution", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__VideoResolution ** SOAP_FMAC4 soap_get_PointerTons2__VideoResolution(struct soap*, ns2__VideoResolution **, const char*, const char*);

#ifndef soap_read_PointerTons2__VideoResolution
#define soap_read_PointerTons2__VideoResolution(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__VideoResolution(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (940)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (939)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data), 0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__StreamingCapabilities
#define SOAP_TYPE_PointerTons1__StreamingCapabilities (937)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StreamingCapabilities(struct soap*, const char *, int, ns1__StreamingCapabilities *const*, const char *);
SOAP_FMAC3 ns1__StreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTons1__StreamingCapabilities(struct soap*, const char*, ns1__StreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__StreamingCapabilities
#define soap_write_PointerTons1__StreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__StreamingCapabilities(soap, data), 0) || soap_put_PointerTons1__StreamingCapabilities(soap, data, "ns1:StreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTons1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons1__StreamingCapabilities
#define soap_read_PointerTons1__StreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__StreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ProfileCapabilities
#define SOAP_TYPE_PointerTons1__ProfileCapabilities (936)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProfileCapabilities(struct soap*, const char *, int, ns1__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 ns1__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTons1__ProfileCapabilities(struct soap*, const char*, ns1__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ProfileCapabilities
#define soap_write_PointerTons1__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ProfileCapabilities(soap, data), 0) || soap_put_PointerTons1__ProfileCapabilities(soap, data, "ns1:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTons1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons1__ProfileCapabilities
#define soap_read_PointerTons1__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data), 0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic
#define SOAP_TYPE_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic (1675)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, std::vector<_ns6__TopicNamespaceType_Topic >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, const std::vector<_ns6__TopicNamespaceType_Topic >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, const char*, int, const std::vector<_ns6__TopicNamespaceType_Topic >*, const char*);
SOAP_FMAC3 std::vector<_ns6__TopicNamespaceType_Topic >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_ns6__TopicNamespaceType_Topic >*, const char*);
SOAP_FMAC1 std::vector<_ns6__TopicNamespaceType_Topic > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns6__TopicNamespaceType_Topic > * soap_new_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap *soap, std::vector<_ns6__TopicNamespaceType_Topic >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns6__TopicNamespaceType_Topic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__TopicType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__TopicType (1672)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__TopicType(struct soap*, std::vector<ns6__TopicType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__TopicType(struct soap*, const std::vector<ns6__TopicType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__TopicType(struct soap*, const char*, int, const std::vector<ns6__TopicType * >*, const char*);
SOAP_FMAC3 std::vector<ns6__TopicType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__TopicType(struct soap*, const char*, std::vector<ns6__TopicType * >*, const char*);
SOAP_FMAC1 std::vector<ns6__TopicType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons6__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__TopicType * > * soap_new_std__vectorTemplateOfPointerTons6__TopicType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons6__TopicType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons6__TopicType(struct soap *soap, std::vector<ns6__TopicType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons6__TopicType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description (1665)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, std::vector<_ns3__ResumeFailedFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, const std::vector<_ns3__ResumeFailedFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__ResumeFailedFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__ResumeFailedFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, const char*, std::vector<_ns3__ResumeFailedFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__ResumeFailedFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__ResumeFailedFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap *soap, std::vector<_ns3__ResumeFailedFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__ResumeFailedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description (1658)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, std::vector<_ns3__PauseFailedFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, const std::vector<_ns3__PauseFailedFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__PauseFailedFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__PauseFailedFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, const char*, std::vector<_ns3__PauseFailedFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__PauseFailedFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__PauseFailedFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap *soap, std::vector<_ns3__PauseFailedFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__PauseFailedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description (1651)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap *soap, std::vector<_ns3__UnableToDestroySubscriptionFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnableToDestroySubscriptionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description (1644)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap *soap, std::vector<_ns3__UnacceptableTerminationTimeFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnacceptableTerminationTimeFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description (1637)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnableToCreatePullPointFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnableToCreatePullPointFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnableToCreatePullPointFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap *soap, std::vector<_ns3__UnableToCreatePullPointFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnableToCreatePullPointFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description (1630)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnableToDestroyPullPointFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnableToDestroyPullPointFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap *soap, std::vector<_ns3__UnableToDestroyPullPointFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnableToDestroyPullPointFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description (1623)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, const std::vector<_ns3__UnableToGetMessagesFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnableToGetMessagesFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnableToGetMessagesFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnableToGetMessagesFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnableToGetMessagesFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap *soap, std::vector<_ns3__UnableToGetMessagesFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnableToGetMessagesFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description (1616)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, const char*, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap *soap, std::vector<_ns3__NoCurrentMessageOnTopicFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__NoCurrentMessageOnTopicFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description (1609)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap *soap, std::vector<_ns3__UnacceptableInitialTerminationTimeFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnacceptableInitialTerminationTimeFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description (1602)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, const char*, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap *soap, std::vector<_ns3__NotifyMessageNotSupportedFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__NotifyMessageNotSupportedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description (1595)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap *soap, std::vector<_ns3__UnsupportedPolicyRequestFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnsupportedPolicyRequestFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description (1588)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, const char*, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap *soap, std::vector<_ns3__UnrecognizedPolicyRequestFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__UnrecognizedPolicyRequestFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description (1581)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap *soap, std::vector<_ns3__InvalidMessageContentExpressionFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__InvalidMessageContentExpressionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description (1574)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap *soap, std::vector<_ns3__InvalidProducerPropertiesExpressionFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__InvalidProducerPropertiesExpressionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description (1567)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, const char*, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap *soap, std::vector<_ns3__MultipleTopicsSpecifiedFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__MultipleTopicsSpecifiedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description (1560)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, std::vector<_ns3__TopicNotSupportedFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, const std::vector<_ns3__TopicNotSupportedFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__TopicNotSupportedFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__TopicNotSupportedFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, const char*, std::vector<_ns3__TopicNotSupportedFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__TopicNotSupportedFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__TopicNotSupportedFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap *soap, std::vector<_ns3__TopicNotSupportedFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__TopicNotSupportedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description (1553)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__InvalidTopicExpressionFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__InvalidTopicExpressionFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__InvalidTopicExpressionFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap *soap, std::vector<_ns3__InvalidTopicExpressionFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__InvalidTopicExpressionFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description (1546)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, const char*, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap *soap, std::vector<_ns3__TopicExpressionDialectUnknownFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__TopicExpressionDialectUnknownFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName (1542)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__QName(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description (1538)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, std::vector<_ns3__InvalidFilterFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, const std::vector<_ns3__InvalidFilterFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__InvalidFilterFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__InvalidFilterFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, const char*, std::vector<_ns3__InvalidFilterFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__InvalidFilterFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__InvalidFilterFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap *soap, std::vector<_ns3__InvalidFilterFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__InvalidFilterFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description (1531)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const char*, int, const std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns3__SubscribeCreationFailedFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, const char*, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns3__SubscribeCreationFailedFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__SubscribeCreationFailedFaultType_Description > * soap_new_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap *soap, std::vector<_ns3__SubscribeCreationFailedFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns3__SubscribeCreationFailedFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__BaseFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_ns5__BaseFaultType_Description (1484)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, std::vector<_ns5__BaseFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, const std::vector<_ns5__BaseFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, const char*, int, const std::vector<_ns5__BaseFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_ns5__BaseFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, const char*, std::vector<_ns5__BaseFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_ns5__BaseFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns5__BaseFaultType_Description > * soap_new_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns5__BaseFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap *soap, std::vector<_ns5__BaseFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns5__BaseFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType (1475)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, std::vector<ns3__NotificationMessageHolderType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, const std::vector<ns3__NotificationMessageHolderType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, const char*, int, const std::vector<ns3__NotificationMessageHolderType * >*, const char*);
SOAP_FMAC3 std::vector<ns3__NotificationMessageHolderType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, const char*, std::vector<ns3__NotificationMessageHolderType * >*, const char*);
SOAP_FMAC1 std::vector<ns3__NotificationMessageHolderType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__NotificationMessageHolderType * > * soap_new_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap *soap, std::vector<ns3__NotificationMessageHolderType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__TopicExpressionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__TopicExpressionType (1472)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, std::vector<ns3__TopicExpressionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, const std::vector<ns3__TopicExpressionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, const char*, int, const std::vector<ns3__TopicExpressionType * >*, const char*);
SOAP_FMAC3 std::vector<ns3__TopicExpressionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, const char*, std::vector<ns3__TopicExpressionType * >*, const char*);
SOAP_FMAC1 std::vector<ns3__TopicExpressionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TopicExpressionType * > * soap_new_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__TopicExpressionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap *soap, std::vector<ns3__TopicExpressionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__FileProgress
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__FileProgress (1464)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__FileProgress(struct soap*, std::vector<ns2__FileProgress * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__FileProgress(struct soap*, const std::vector<ns2__FileProgress * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__FileProgress(struct soap*, const char*, int, const std::vector<ns2__FileProgress * >*, const char*);
SOAP_FMAC3 std::vector<ns2__FileProgress * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__FileProgress(struct soap*, const char*, std::vector<ns2__FileProgress * >*, const char*);
SOAP_FMAC1 std::vector<ns2__FileProgress * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__FileProgress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__FileProgress * > * soap_new_std__vectorTemplateOfPointerTons2__FileProgress(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__FileProgress(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__FileProgress(struct soap *soap, std::vector<ns2__FileProgress * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__FileProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__OSDType
#define SOAP_TYPE_std__vectorTemplateOfns2__OSDType (1459)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__OSDType(struct soap*, std::vector<enum ns2__OSDType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__OSDType(struct soap*, const std::vector<enum ns2__OSDType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__OSDType(struct soap*, const char*, int, const std::vector<enum ns2__OSDType >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__OSDType >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__OSDType(struct soap*, const char*, std::vector<enum ns2__OSDType >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__OSDType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__OSDType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__OSDType > * soap_new_std__vectorTemplateOfns2__OSDType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__OSDType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__OSDType(struct soap *soap, std::vector<enum ns2__OSDType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__OSDType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__ColorspaceRange
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__ColorspaceRange (1450)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, std::vector<ns2__ColorspaceRange * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, const std::vector<ns2__ColorspaceRange * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, const char*, int, const std::vector<ns2__ColorspaceRange * >*, const char*);
SOAP_FMAC3 std::vector<ns2__ColorspaceRange * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, const char*, std::vector<ns2__ColorspaceRange * >*, const char*);
SOAP_FMAC1 std::vector<ns2__ColorspaceRange * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__ColorspaceRange * > * soap_new_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__ColorspaceRange(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap *soap, std::vector<ns2__ColorspaceRange * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__ColorspaceRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Color
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Color (1447)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Color(struct soap*, std::vector<ns2__Color * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Color(struct soap*, const std::vector<ns2__Color * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Color(struct soap*, const char*, int, const std::vector<ns2__Color * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Color * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Color(struct soap*, const char*, std::vector<ns2__Color * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Color * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Color(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Color * > * soap_new_std__vectorTemplateOfPointerTons2__Color(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Color(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Color(struct soap *soap, std::vector<ns2__Color * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Color(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioClassCandidate
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioClassCandidate (1441)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap*, std::vector<ns2__AudioClassCandidate * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap*, const std::vector<ns2__AudioClassCandidate * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap*, const char*, int, const std::vector<ns2__AudioClassCandidate * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioClassCandidate * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap*, const char*, std::vector<ns2__AudioClassCandidate * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioClassCandidate * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioClassCandidate * > * soap_new_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioClassCandidate(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap *soap, std::vector<ns2__AudioClassCandidate * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioClassCandidate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__EngineConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__EngineConfiguration (1429)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap*, std::vector<ns2__EngineConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap*, const std::vector<ns2__EngineConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap*, const char*, int, const std::vector<ns2__EngineConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__EngineConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap*, const char*, std::vector<ns2__EngineConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__EngineConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__EngineConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__EngineConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap *soap, std::vector<ns2__EngineConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__EngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack (1426)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap*, std::vector<ns2__RecordingJobStateTrack * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap*, const std::vector<ns2__RecordingJobStateTrack * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap*, const char*, int, const std::vector<ns2__RecordingJobStateTrack * >*, const char*);
SOAP_FMAC3 std::vector<ns2__RecordingJobStateTrack * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap*, const char*, std::vector<ns2__RecordingJobStateTrack * >*, const char*);
SOAP_FMAC1 std::vector<ns2__RecordingJobStateTrack * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RecordingJobStateTrack * > * soap_new_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap *soap, std::vector<ns2__RecordingJobStateTrack * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__RecordingJobStateTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobStateSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobStateSource (1422)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap*, std::vector<ns2__RecordingJobStateSource * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap*, const std::vector<ns2__RecordingJobStateSource * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap*, const char*, int, const std::vector<ns2__RecordingJobStateSource * >*, const char*);
SOAP_FMAC3 std::vector<ns2__RecordingJobStateSource * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap*, const char*, std::vector<ns2__RecordingJobStateSource * >*, const char*);
SOAP_FMAC1 std::vector<ns2__RecordingJobStateSource * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RecordingJobStateSource * > * soap_new_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap *soap, std::vector<ns2__RecordingJobStateSource * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__RecordingJobStateSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobTrack
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobTrack (1419)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap*, std::vector<ns2__RecordingJobTrack * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap*, const std::vector<ns2__RecordingJobTrack * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap*, const char*, int, const std::vector<ns2__RecordingJobTrack * >*, const char*);
SOAP_FMAC3 std::vector<ns2__RecordingJobTrack * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap*, const char*, std::vector<ns2__RecordingJobTrack * >*, const char*);
SOAP_FMAC1 std::vector<ns2__RecordingJobTrack * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RecordingJobTrack * > * soap_new_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobTrack(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap *soap, std::vector<ns2__RecordingJobTrack * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__RecordingJobTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingJobSource (1416)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap*, std::vector<ns2__RecordingJobSource * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap*, const std::vector<ns2__RecordingJobSource * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap*, const char*, int, const std::vector<ns2__RecordingJobSource * >*, const char*);
SOAP_FMAC3 std::vector<ns2__RecordingJobSource * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap*, const char*, std::vector<ns2__RecordingJobSource * >*, const char*);
SOAP_FMAC1 std::vector<ns2__RecordingJobSource * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RecordingJobSource * > * soap_new_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingJobSource(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap *soap, std::vector<ns2__RecordingJobSource * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__RecordingJobSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__GetTracksResponseItem
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__GetTracksResponseItem (1413)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap*, std::vector<ns2__GetTracksResponseItem * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap*, const std::vector<ns2__GetTracksResponseItem * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap*, const char*, int, const std::vector<ns2__GetTracksResponseItem * >*, const char*);
SOAP_FMAC3 std::vector<ns2__GetTracksResponseItem * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap*, const char*, std::vector<ns2__GetTracksResponseItem * >*, const char*);
SOAP_FMAC1 std::vector<ns2__GetTracksResponseItem * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__GetTracksResponseItem * > * soap_new_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap *soap, std::vector<ns2__GetTracksResponseItem * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__GetTracksResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__TrackAttributes
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__TrackAttributes (1404)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap*, std::vector<ns2__TrackAttributes * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap*, const std::vector<ns2__TrackAttributes * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap*, const char*, int, const std::vector<ns2__TrackAttributes * >*, const char*);
SOAP_FMAC3 std::vector<ns2__TrackAttributes * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap*, const char*, std::vector<ns2__TrackAttributes * >*, const char*);
SOAP_FMAC1 std::vector<ns2__TrackAttributes * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__TrackAttributes * > * soap_new_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__TrackAttributes(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap *soap, std::vector<ns2__TrackAttributes * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__TrackAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__TrackInformation
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__TrackInformation (1402)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap*, std::vector<ns2__TrackInformation * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap*, const std::vector<ns2__TrackInformation * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap*, const char*, int, const std::vector<ns2__TrackInformation * >*, const char*);
SOAP_FMAC3 std::vector<ns2__TrackInformation * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap*, const char*, std::vector<ns2__TrackInformation * >*, const char*);
SOAP_FMAC1 std::vector<ns2__TrackInformation * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__TrackInformation * > * soap_new_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__TrackInformation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap *soap, std::vector<ns2__TrackInformation * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__TrackInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__FindMetadataResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__FindMetadataResult (1398)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap*, std::vector<ns2__FindMetadataResult * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap*, const std::vector<ns2__FindMetadataResult * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap*, const char*, int, const std::vector<ns2__FindMetadataResult * >*, const char*);
SOAP_FMAC3 std::vector<ns2__FindMetadataResult * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap*, const char*, std::vector<ns2__FindMetadataResult * >*, const char*);
SOAP_FMAC1 std::vector<ns2__FindMetadataResult * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__FindMetadataResult * > * soap_new_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__FindMetadataResult(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap *soap, std::vector<ns2__FindMetadataResult * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__FindMetadataResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__FindPTZPositionResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__FindPTZPositionResult (1396)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap*, std::vector<ns2__FindPTZPositionResult * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap*, const std::vector<ns2__FindPTZPositionResult * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap*, const char*, int, const std::vector<ns2__FindPTZPositionResult * >*, const char*);
SOAP_FMAC3 std::vector<ns2__FindPTZPositionResult * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap*, const char*, std::vector<ns2__FindPTZPositionResult * >*, const char*);
SOAP_FMAC1 std::vector<ns2__FindPTZPositionResult * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__FindPTZPositionResult * > * soap_new_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap *soap, std::vector<ns2__FindPTZPositionResult * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__FindPTZPositionResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__FindEventResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__FindEventResult (1394)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap*, std::vector<ns2__FindEventResult * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap*, const std::vector<ns2__FindEventResult * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap*, const char*, int, const std::vector<ns2__FindEventResult * >*, const char*);
SOAP_FMAC3 std::vector<ns2__FindEventResult * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap*, const char*, std::vector<ns2__FindEventResult * >*, const char*);
SOAP_FMAC1 std::vector<ns2__FindEventResult * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__FindEventResult * > * soap_new_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__FindEventResult(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap *soap, std::vector<ns2__FindEventResult * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__FindEventResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingInformation
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__RecordingInformation (1392)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap*, std::vector<ns2__RecordingInformation * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap*, const std::vector<ns2__RecordingInformation * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap*, const char*, int, const std::vector<ns2__RecordingInformation * >*, const char*);
SOAP_FMAC3 std::vector<ns2__RecordingInformation * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap*, const char*, std::vector<ns2__RecordingInformation * >*, const char*);
SOAP_FMAC1 std::vector<ns2__RecordingInformation * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__RecordingInformation * > * soap_new_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__RecordingInformation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap *soap, std::vector<ns2__RecordingInformation * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__RecordingInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__RecordingReference
#define SOAP_TYPE_std__vectorTemplateOfns2__RecordingReference (1388)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__RecordingReference(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__RecordingReference(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__RecordingReference(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__RecordingReference(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__RecordingReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfns2__RecordingReference(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__RecordingReference(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__RecordingReference(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__RecordingReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__SourceReference
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__SourceReference (1387)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__SourceReference(struct soap*, std::vector<ns2__SourceReference * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__SourceReference(struct soap*, const std::vector<ns2__SourceReference * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__SourceReference(struct soap*, const char*, int, const std::vector<ns2__SourceReference * >*, const char*);
SOAP_FMAC3 std::vector<ns2__SourceReference * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__SourceReference(struct soap*, const char*, std::vector<ns2__SourceReference * >*, const char*);
SOAP_FMAC1 std::vector<ns2__SourceReference * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__SourceReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__SourceReference * > * soap_new_std__vectorTemplateOfPointerTons2__SourceReference(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__SourceReference(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__SourceReference(struct soap *soap, std::vector<ns2__SourceReference * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__SourceReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Rectangle
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Rectangle (1383)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Rectangle(struct soap*, std::vector<ns2__Rectangle * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Rectangle(struct soap*, const std::vector<ns2__Rectangle * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Rectangle(struct soap*, const char*, int, const std::vector<ns2__Rectangle * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Rectangle * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Rectangle(struct soap*, const char*, std::vector<ns2__Rectangle * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Rectangle * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Rectangle * > * soap_new_std__vectorTemplateOfPointerTons2__Rectangle(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Rectangle(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Rectangle(struct soap *soap, std::vector<ns2__Rectangle * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Rectangle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PaneLayoutOptions
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PaneLayoutOptions (1381)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap*, std::vector<ns2__PaneLayoutOptions * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap*, const std::vector<ns2__PaneLayoutOptions * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap*, const char*, int, const std::vector<ns2__PaneLayoutOptions * >*, const char*);
SOAP_FMAC3 std::vector<ns2__PaneLayoutOptions * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap*, const char*, std::vector<ns2__PaneLayoutOptions * >*, const char*);
SOAP_FMAC1 std::vector<ns2__PaneLayoutOptions * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PaneLayoutOptions * > * soap_new_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap *soap, std::vector<ns2__PaneLayoutOptions * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__PaneLayoutOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PaneLayout
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PaneLayout (1377)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap*, std::vector<ns2__PaneLayout * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap*, const std::vector<ns2__PaneLayout * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap*, const char*, int, const std::vector<ns2__PaneLayout * >*, const char*);
SOAP_FMAC3 std::vector<ns2__PaneLayout * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap*, const char*, std::vector<ns2__PaneLayout * >*, const char*);
SOAP_FMAC1 std::vector<ns2__PaneLayout * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PaneLayout * > * soap_new_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__PaneLayout(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap *soap, std::vector<ns2__PaneLayout * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__PaneLayout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioDescriptor
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioDescriptor (1360)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap*, std::vector<ns2__AudioDescriptor * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap*, const std::vector<ns2__AudioDescriptor * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap*, const char*, int, const std::vector<ns2__AudioDescriptor * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioDescriptor * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap*, const char*, std::vector<ns2__AudioDescriptor * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioDescriptor * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioDescriptor * > * soap_new_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioDescriptor(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap *soap, std::vector<ns2__AudioDescriptor * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Polyline
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Polyline (1346)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Polyline(struct soap*, std::vector<ns2__Polyline * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Polyline(struct soap*, const std::vector<ns2__Polyline * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Polyline(struct soap*, const char*, int, const std::vector<ns2__Polyline * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Polyline * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Polyline(struct soap*, const char*, std::vector<ns2__Polyline * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Polyline * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Polyline(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Polyline * > * soap_new_std__vectorTemplateOfPointerTons2__Polyline(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Polyline(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Polyline(struct soap *soap, std::vector<ns2__Polyline * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Polyline(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__ConfigDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__ConfigDescription (1342)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap*, std::vector<ns2__ConfigDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap*, const std::vector<ns2__ConfigDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap*, const char*, int, const std::vector<ns2__ConfigDescription * >*, const char*);
SOAP_FMAC3 std::vector<ns2__ConfigDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap*, const char*, std::vector<ns2__ConfigDescription * >*, const char*);
SOAP_FMAC1 std::vector<ns2__ConfigDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__ConfigDescription * > * soap_new_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__ConfigDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap *soap, std::vector<ns2__ConfigDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__ConfigDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ConfigDescription_Messages
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ConfigDescription_Messages (1338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, std::vector<_ns2__ConfigDescription_Messages >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, const std::vector<_ns2__ConfigDescription_Messages >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, const char*, int, const std::vector<_ns2__ConfigDescription_Messages >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ConfigDescription_Messages >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, const char*, std::vector<_ns2__ConfigDescription_Messages >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ConfigDescription_Messages > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ConfigDescription_Messages > * soap_new_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ConfigDescription_Messages(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap *soap, std::vector<_ns2__ConfigDescription_Messages >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ConfigDescription_Messages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Config
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Config (1333)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Config(struct soap*, std::vector<ns2__Config * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Config(struct soap*, const std::vector<ns2__Config * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Config(struct soap*, const char*, int, const std::vector<ns2__Config * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Config * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Config(struct soap*, const char*, std::vector<ns2__Config * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Config * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Config(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Config * > * soap_new_std__vectorTemplateOfPointerTons2__Config(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Config(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Config(struct soap *soap, std::vector<ns2__Config * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Config(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Merge
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Merge (1330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Merge(struct soap*, std::vector<ns2__Merge * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Merge(struct soap*, const std::vector<ns2__Merge * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Merge(struct soap*, const char*, int, const std::vector<ns2__Merge * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Merge * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Merge(struct soap*, const char*, std::vector<ns2__Merge * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Merge * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Merge(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Merge * > * soap_new_std__vectorTemplateOfPointerTons2__Merge(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Merge(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Merge(struct soap *soap, std::vector<ns2__Merge * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Merge(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Split
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Split (1328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Split(struct soap*, std::vector<ns2__Split * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Split(struct soap*, const std::vector<ns2__Split * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Split(struct soap*, const char*, int, const std::vector<ns2__Split * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Split * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Split(struct soap*, const char*, std::vector<ns2__Split * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Split * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Split(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Split * > * soap_new_std__vectorTemplateOfPointerTons2__Split(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Split(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Split(struct soap *soap, std::vector<ns2__Split * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Split(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Rename
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Rename (1326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Rename(struct soap*, std::vector<ns2__Rename * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Rename(struct soap*, const std::vector<ns2__Rename * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Rename(struct soap*, const char*, int, const std::vector<ns2__Rename * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Rename * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Rename(struct soap*, const char*, std::vector<ns2__Rename * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Rename * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Rename(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Rename * > * soap_new_std__vectorTemplateOfPointerTons2__Rename(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Rename(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Rename(struct soap *soap, std::vector<ns2__Rename * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Rename(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__ObjectId
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__ObjectId (1318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__ObjectId(struct soap*, std::vector<ns2__ObjectId * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__ObjectId(struct soap*, const std::vector<ns2__ObjectId * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__ObjectId(struct soap*, const char*, int, const std::vector<ns2__ObjectId * >*, const char*);
SOAP_FMAC3 std::vector<ns2__ObjectId * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__ObjectId(struct soap*, const char*, std::vector<ns2__ObjectId * >*, const char*);
SOAP_FMAC1 std::vector<ns2__ObjectId * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__ObjectId(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__ObjectId * > * soap_new_std__vectorTemplateOfPointerTons2__ObjectId(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__ObjectId(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__ObjectId(struct soap *soap, std::vector<ns2__ObjectId * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__ObjectId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Object
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Object (1312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Object(struct soap*, std::vector<ns2__Object * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Object(struct soap*, const std::vector<ns2__Object * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Object(struct soap*, const char*, int, const std::vector<ns2__Object * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Object * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Object(struct soap*, const char*, std::vector<ns2__Object * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Object * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Object(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Object * > * soap_new_std__vectorTemplateOfPointerTons2__Object(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Object(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Object(struct soap *soap, std::vector<ns2__Object * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Object(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__OtherType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__OtherType (1307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__OtherType(struct soap*, std::vector<ns2__OtherType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__OtherType(struct soap*, const std::vector<ns2__OtherType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__OtherType(struct soap*, const char*, int, const std::vector<ns2__OtherType * >*, const char*);
SOAP_FMAC3 std::vector<ns2__OtherType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__OtherType(struct soap*, const char*, std::vector<ns2__OtherType * >*, const char*);
SOAP_FMAC1 std::vector<ns2__OtherType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__OtherType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__OtherType * > * soap_new_std__vectorTemplateOfPointerTons2__OtherType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__OtherType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__OtherType(struct soap *soap, std::vector<ns2__OtherType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__OtherType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate (1303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, std::vector<_ns2__ClassDescriptor_ClassCandidate >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, const std::vector<_ns2__ClassDescriptor_ClassCandidate >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, const char*, int, const std::vector<_ns2__ClassDescriptor_ClassCandidate >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ClassDescriptor_ClassCandidate >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, const char*, std::vector<_ns2__ClassDescriptor_ClassCandidate >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ClassDescriptor_ClassCandidate > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ClassDescriptor_ClassCandidate > * soap_new_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap *soap, std::vector<_ns2__ClassDescriptor_ClassCandidate >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ClassDescriptor_ClassCandidate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster (1299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, std::vector<_ns2__ColorDescriptor_ColorCluster >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, const std::vector<_ns2__ColorDescriptor_ColorCluster >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, const char*, int, const std::vector<_ns2__ColorDescriptor_ColorCluster >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ColorDescriptor_ColorCluster >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, const char*, std::vector<_ns2__ColorDescriptor_ColorCluster >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ColorDescriptor_ColorCluster > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ColorDescriptor_ColorCluster > * soap_new_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap *soap, std::vector<_ns2__ColorDescriptor_ColorCluster >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ColorDescriptor_ColorCluster(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Polygon
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Polygon (1294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Polygon(struct soap*, std::vector<ns2__Polygon * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Polygon(struct soap*, const std::vector<ns2__Polygon * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Polygon(struct soap*, const char*, int, const std::vector<ns2__Polygon * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Polygon * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Polygon(struct soap*, const char*, std::vector<ns2__Polygon * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Polygon * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Polygon(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Polygon * > * soap_new_std__vectorTemplateOfPointerTons2__Polygon(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Polygon(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Polygon(struct soap *soap, std::vector<ns2__Polygon * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Polygon(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Vector
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Vector (1287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Vector(struct soap*, std::vector<ns2__Vector * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Vector(struct soap*, const std::vector<ns2__Vector * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Vector(struct soap*, const char*, int, const std::vector<ns2__Vector * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Vector * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Vector(struct soap*, const char*, std::vector<ns2__Vector * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Vector * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Vector(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Vector * > * soap_new_std__vectorTemplateOfPointerTons2__Vector(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Vector(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Vector(struct soap *soap, std::vector<ns2__Vector * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Vector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription (1283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_ElementItemDescription >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, const std::vector<_ns2__ItemListDescription_ElementItemDescription >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, const char*, int, const std::vector<_ns2__ItemListDescription_ElementItemDescription >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ItemListDescription_ElementItemDescription >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, const char*, std::vector<_ns2__ItemListDescription_ElementItemDescription >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ItemListDescription_ElementItemDescription > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ItemListDescription_ElementItemDescription > * soap_new_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap *soap, std::vector<_ns2__ItemListDescription_ElementItemDescription >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ItemListDescription_ElementItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription (1280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, const std::vector<_ns2__ItemListDescription_SimpleItemDescription >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, const char*, int, const std::vector<_ns2__ItemListDescription_SimpleItemDescription >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ItemListDescription_SimpleItemDescription >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, const char*, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ItemListDescription_SimpleItemDescription > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ItemListDescription_SimpleItemDescription > * soap_new_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap *soap, std::vector<_ns2__ItemListDescription_SimpleItemDescription >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ItemListDescription_SimpleItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ItemList_ElementItem
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ItemList_ElementItem (1274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, std::vector<_ns2__ItemList_ElementItem >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, const std::vector<_ns2__ItemList_ElementItem >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, const char*, int, const std::vector<_ns2__ItemList_ElementItem >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ItemList_ElementItem >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, const char*, std::vector<_ns2__ItemList_ElementItem >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ItemList_ElementItem > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ItemList_ElementItem > * soap_new_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ItemList_ElementItem(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap *soap, std::vector<_ns2__ItemList_ElementItem >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ItemList_ElementItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__ItemList_SimpleItem
#define SOAP_TYPE_std__vectorTemplateOf_ns2__ItemList_SimpleItem (1271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, std::vector<_ns2__ItemList_SimpleItem >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, const std::vector<_ns2__ItemList_SimpleItem >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, const char*, int, const std::vector<_ns2__ItemList_SimpleItem >*, const char*);
SOAP_FMAC3 std::vector<_ns2__ItemList_SimpleItem >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, const char*, std::vector<_ns2__ItemList_SimpleItem >*, const char*);
SOAP_FMAC1 std::vector<_ns2__ItemList_SimpleItem > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__ItemList_SimpleItem > * soap_new_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns2__ItemList_SimpleItem(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap *soap, std::vector<_ns2__ItemList_SimpleItem >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns2__ItemList_SimpleItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__BacklightCompensationMode
#define SOAP_TYPE_std__vectorTemplateOfns2__BacklightCompensationMode (1264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap*, std::vector<enum ns2__BacklightCompensationMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap*, const std::vector<enum ns2__BacklightCompensationMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap*, const char*, int, const std::vector<enum ns2__BacklightCompensationMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__BacklightCompensationMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap*, const char*, std::vector<enum ns2__BacklightCompensationMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__BacklightCompensationMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__BacklightCompensationMode > * soap_new_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__BacklightCompensationMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap *soap, std::vector<enum ns2__BacklightCompensationMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__BacklightCompensationMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__ImageStabilizationMode
#define SOAP_TYPE_std__vectorTemplateOfns2__ImageStabilizationMode (1261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap*, std::vector<enum ns2__ImageStabilizationMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap*, const std::vector<enum ns2__ImageStabilizationMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap*, const char*, int, const std::vector<enum ns2__ImageStabilizationMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__ImageStabilizationMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap*, const char*, std::vector<enum ns2__ImageStabilizationMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__ImageStabilizationMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__ImageStabilizationMode > * soap_new_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__ImageStabilizationMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap *soap, std::vector<enum ns2__ImageStabilizationMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__ImageStabilizationMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment (1236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap*, std::vector<ns2__IrCutFilterAutoAdjustment * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap*, const std::vector<ns2__IrCutFilterAutoAdjustment * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const std::vector<ns2__IrCutFilterAutoAdjustment * >*, const char*);
SOAP_FMAC3 std::vector<ns2__IrCutFilterAutoAdjustment * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap*, const char*, std::vector<ns2__IrCutFilterAutoAdjustment * >*, const char*);
SOAP_FMAC1 std::vector<ns2__IrCutFilterAutoAdjustment * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__IrCutFilterAutoAdjustment * > * soap_new_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap *soap, std::vector<ns2__IrCutFilterAutoAdjustment * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__IrCutFilterAutoAdjustment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__WhiteBalanceMode
#define SOAP_TYPE_std__vectorTemplateOfns2__WhiteBalanceMode (1217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap*, std::vector<enum ns2__WhiteBalanceMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap*, const std::vector<enum ns2__WhiteBalanceMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap*, const char*, int, const std::vector<enum ns2__WhiteBalanceMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__WhiteBalanceMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap*, const char*, std::vector<enum ns2__WhiteBalanceMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__WhiteBalanceMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__WhiteBalanceMode > * soap_new_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__WhiteBalanceMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap *soap, std::vector<enum ns2__WhiteBalanceMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__WhiteBalanceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__ExposurePriority
#define SOAP_TYPE_std__vectorTemplateOfns2__ExposurePriority (1216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__ExposurePriority(struct soap*, std::vector<enum ns2__ExposurePriority >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__ExposurePriority(struct soap*, const std::vector<enum ns2__ExposurePriority >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__ExposurePriority(struct soap*, const char*, int, const std::vector<enum ns2__ExposurePriority >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__ExposurePriority >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__ExposurePriority(struct soap*, const char*, std::vector<enum ns2__ExposurePriority >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__ExposurePriority > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__ExposurePriority(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__ExposurePriority > * soap_new_std__vectorTemplateOfns2__ExposurePriority(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__ExposurePriority(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__ExposurePriority(struct soap *soap, std::vector<enum ns2__ExposurePriority >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__ExposurePriority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__ExposureMode
#define SOAP_TYPE_std__vectorTemplateOfns2__ExposureMode (1215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__ExposureMode(struct soap*, std::vector<enum ns2__ExposureMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__ExposureMode(struct soap*, const std::vector<enum ns2__ExposureMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__ExposureMode(struct soap*, const char*, int, const std::vector<enum ns2__ExposureMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__ExposureMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__ExposureMode(struct soap*, const char*, std::vector<enum ns2__ExposureMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__ExposureMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__ExposureMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__ExposureMode > * soap_new_std__vectorTemplateOfns2__ExposureMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__ExposureMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__ExposureMode(struct soap *soap, std::vector<enum ns2__ExposureMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__ExposureMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__AutoFocusMode
#define SOAP_TYPE_std__vectorTemplateOfns2__AutoFocusMode (1214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__AutoFocusMode(struct soap*, std::vector<enum ns2__AutoFocusMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__AutoFocusMode(struct soap*, const std::vector<enum ns2__AutoFocusMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__AutoFocusMode(struct soap*, const char*, int, const std::vector<enum ns2__AutoFocusMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__AutoFocusMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__AutoFocusMode(struct soap*, const char*, std::vector<enum ns2__AutoFocusMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__AutoFocusMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__AutoFocusMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__AutoFocusMode > * soap_new_std__vectorTemplateOfns2__AutoFocusMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__AutoFocusMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__AutoFocusMode(struct soap *soap, std::vector<enum ns2__AutoFocusMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__AutoFocusMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__WideDynamicMode
#define SOAP_TYPE_std__vectorTemplateOfns2__WideDynamicMode (1213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__WideDynamicMode(struct soap*, std::vector<enum ns2__WideDynamicMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__WideDynamicMode(struct soap*, const std::vector<enum ns2__WideDynamicMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__WideDynamicMode(struct soap*, const char*, int, const std::vector<enum ns2__WideDynamicMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__WideDynamicMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__WideDynamicMode(struct soap*, const char*, std::vector<enum ns2__WideDynamicMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__WideDynamicMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__WideDynamicMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__WideDynamicMode > * soap_new_std__vectorTemplateOfns2__WideDynamicMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__WideDynamicMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__WideDynamicMode(struct soap *soap, std::vector<enum ns2__WideDynamicMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__WideDynamicMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__IrCutFilterMode
#define SOAP_TYPE_std__vectorTemplateOfns2__IrCutFilterMode (1210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__IrCutFilterMode(struct soap*, std::vector<enum ns2__IrCutFilterMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__IrCutFilterMode(struct soap*, const std::vector<enum ns2__IrCutFilterMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__IrCutFilterMode(struct soap*, const char*, int, const std::vector<enum ns2__IrCutFilterMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__IrCutFilterMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__IrCutFilterMode(struct soap*, const char*, std::vector<enum ns2__IrCutFilterMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__IrCutFilterMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__IrCutFilterMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__IrCutFilterMode > * soap_new_std__vectorTemplateOfns2__IrCutFilterMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__IrCutFilterMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__IrCutFilterMode(struct soap *soap, std::vector<enum ns2__IrCutFilterMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__IrCutFilterMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__PTZPresetTourDirection
#define SOAP_TYPE_std__vectorTemplateOfns2__PTZPresetTourDirection (1195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap*, std::vector<enum ns2__PTZPresetTourDirection >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap*, const std::vector<enum ns2__PTZPresetTourDirection >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap*, const char*, int, const std::vector<enum ns2__PTZPresetTourDirection >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__PTZPresetTourDirection >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap*, const char*, std::vector<enum ns2__PTZPresetTourDirection >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__PTZPresetTourDirection > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__PTZPresetTourDirection > * soap_new_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__PTZPresetTourDirection(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap *soap, std::vector<enum ns2__PTZPresetTourDirection >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__PTZPresetTourDirection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot (1181)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap*, std::vector<ns2__PTZPresetTourSpot * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap*, const std::vector<ns2__PTZPresetTourSpot * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap*, const char*, int, const std::vector<ns2__PTZPresetTourSpot * >*, const char*);
SOAP_FMAC3 std::vector<ns2__PTZPresetTourSpot * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap*, const char*, std::vector<ns2__PTZPresetTourSpot * >*, const char*);
SOAP_FMAC1 std::vector<ns2__PTZPresetTourSpot * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PTZPresetTourSpot * > * soap_new_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap *soap, std::vector<ns2__PTZPresetTourSpot * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__PTZPresetTourSpot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Space1DDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Space1DDescription (1168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap*, std::vector<ns2__Space1DDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap*, const std::vector<ns2__Space1DDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap*, const char*, int, const std::vector<ns2__Space1DDescription * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Space1DDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap*, const char*, std::vector<ns2__Space1DDescription * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Space1DDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Space1DDescription * > * soap_new_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Space1DDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap *soap, std::vector<ns2__Space1DDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Space1DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Space2DDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Space2DDescription (1167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap*, std::vector<ns2__Space2DDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap*, const std::vector<ns2__Space2DDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap*, const char*, int, const std::vector<ns2__Space2DDescription * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Space2DDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap*, const char*, std::vector<ns2__Space2DDescription * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Space2DDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Space2DDescription * > * soap_new_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Space2DDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap *soap, std::vector<ns2__Space2DDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Space2DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__ReverseMode
#define SOAP_TYPE_std__vectorTemplateOfns2__ReverseMode (1163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__ReverseMode(struct soap*, std::vector<enum ns2__ReverseMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__ReverseMode(struct soap*, const std::vector<enum ns2__ReverseMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__ReverseMode(struct soap*, const char*, int, const std::vector<enum ns2__ReverseMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__ReverseMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__ReverseMode(struct soap*, const char*, std::vector<enum ns2__ReverseMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__ReverseMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__ReverseMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__ReverseMode > * soap_new_std__vectorTemplateOfns2__ReverseMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__ReverseMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__ReverseMode(struct soap *soap, std::vector<enum ns2__ReverseMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__ReverseMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__EFlipMode
#define SOAP_TYPE_std__vectorTemplateOfns2__EFlipMode (1161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__EFlipMode(struct soap*, std::vector<enum ns2__EFlipMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__EFlipMode(struct soap*, const std::vector<enum ns2__EFlipMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__EFlipMode(struct soap*, const char*, int, const std::vector<enum ns2__EFlipMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__EFlipMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__EFlipMode(struct soap*, const char*, std::vector<enum ns2__EFlipMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__EFlipMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__EFlipMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__EFlipMode > * soap_new_std__vectorTemplateOfns2__EFlipMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__EFlipMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__EFlipMode(struct soap *soap, std::vector<enum ns2__EFlipMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__EFlipMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__PTZPresetTourOperation
#define SOAP_TYPE_std__vectorTemplateOfns2__PTZPresetTourOperation (1146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap*, std::vector<enum ns2__PTZPresetTourOperation >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap*, const std::vector<enum ns2__PTZPresetTourOperation >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap*, const char*, int, const std::vector<enum ns2__PTZPresetTourOperation >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__PTZPresetTourOperation >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap*, const char*, std::vector<enum ns2__PTZPresetTourOperation >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__PTZPresetTourOperation > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__PTZPresetTourOperation > * soap_new_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__PTZPresetTourOperation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap *soap, std::vector<enum ns2__PTZPresetTourOperation >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__PTZPresetTourOperation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__SystemLogUri
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__SystemLogUri (1128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap*, std::vector<ns2__SystemLogUri * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap*, const std::vector<ns2__SystemLogUri * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap*, const char*, int, const std::vector<ns2__SystemLogUri * >*, const char*);
SOAP_FMAC3 std::vector<ns2__SystemLogUri * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap*, const char*, std::vector<ns2__SystemLogUri * >*, const char*);
SOAP_FMAC1 std::vector<ns2__SystemLogUri * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__SystemLogUri * > * soap_new_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__SystemLogUri(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap *soap, std::vector<ns2__SystemLogUri * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__SystemLogUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__OnvifVersion
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__OnvifVersion (1120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap*, std::vector<ns2__OnvifVersion * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap*, const std::vector<ns2__OnvifVersion * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap*, const char*, int, const std::vector<ns2__OnvifVersion * >*, const char*);
SOAP_FMAC3 std::vector<ns2__OnvifVersion * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap*, const char*, std::vector<ns2__OnvifVersion * >*, const char*);
SOAP_FMAC1 std::vector<ns2__OnvifVersion * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__OnvifVersion * > * soap_new_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__OnvifVersion(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap *soap, std::vector<ns2__OnvifVersion * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__OnvifVersion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__AuxiliaryData
#define SOAP_TYPE_std__vectorTemplateOfns2__AuxiliaryData (1109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__AuxiliaryData(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__AuxiliaryData(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__AuxiliaryData(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfns2__AuxiliaryData(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__AuxiliaryData(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__AuxiliaryData(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__AuxiliaryData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__Dot11Cipher
#define SOAP_TYPE_std__vectorTemplateOfns2__Dot11Cipher (1086)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__Dot11Cipher(struct soap*, std::vector<enum ns2__Dot11Cipher >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__Dot11Cipher(struct soap*, const std::vector<enum ns2__Dot11Cipher >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__Dot11Cipher(struct soap*, const char*, int, const std::vector<enum ns2__Dot11Cipher >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__Dot11Cipher >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__Dot11Cipher(struct soap*, const char*, std::vector<enum ns2__Dot11Cipher >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__Dot11Cipher > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__Dot11Cipher(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__Dot11Cipher > * soap_new_std__vectorTemplateOfns2__Dot11Cipher(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__Dot11Cipher(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__Dot11Cipher(struct soap *soap, std::vector<enum ns2__Dot11Cipher >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__Dot11Cipher(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite
#define SOAP_TYPE_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite (1085)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap*, std::vector<enum ns2__Dot11AuthAndMangementSuite >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap*, const std::vector<enum ns2__Dot11AuthAndMangementSuite >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const std::vector<enum ns2__Dot11AuthAndMangementSuite >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__Dot11AuthAndMangementSuite >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap*, const char*, std::vector<enum ns2__Dot11AuthAndMangementSuite >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__Dot11AuthAndMangementSuite > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__Dot11AuthAndMangementSuite > * soap_new_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap *soap, std::vector<enum ns2__Dot11AuthAndMangementSuite >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__Dot11AuthAndMangementSuite(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration (1074)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap*, std::vector<ns2__NetworkZeroConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap*, const std::vector<ns2__NetworkZeroConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap*, const char*, int, const std::vector<ns2__NetworkZeroConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__NetworkZeroConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap*, const char*, std::vector<ns2__NetworkZeroConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__NetworkZeroConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__NetworkZeroConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap *soap, std::vector<ns2__NetworkZeroConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__NetworkZeroConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__IPv6Address
#define SOAP_TYPE_std__vectorTemplateOfns2__IPv6Address (1071)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__IPv6Address(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__IPv6Address(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__IPv6Address(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__IPv6Address(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__IPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfns2__IPv6Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__IPv6Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__IPv6Address(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__IPv6Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__IPv4Address
#define SOAP_TYPE_std__vectorTemplateOfns2__IPv4Address (1070)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__IPv4Address(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__IPv4Address(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__IPv4Address(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__IPv4Address(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__IPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfns2__IPv4Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__IPv4Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__IPv4Address(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__IPv4Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__NetworkHost
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__NetworkHost (1061)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap*, std::vector<ns2__NetworkHost * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap*, const std::vector<ns2__NetworkHost * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap*, const char*, int, const std::vector<ns2__NetworkHost * >*, const char*);
SOAP_FMAC3 std::vector<ns2__NetworkHost * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap*, const char*, std::vector<ns2__NetworkHost * >*, const char*);
SOAP_FMAC1 std::vector<ns2__NetworkHost * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__NetworkHost * > * soap_new_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__NetworkHost(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap *soap, std::vector<ns2__NetworkHost * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__NetworkHost(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__IPAddress
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__IPAddress (1058)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__IPAddress(struct soap*, std::vector<ns2__IPAddress * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__IPAddress(struct soap*, const std::vector<ns2__IPAddress * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__IPAddress(struct soap*, const char*, int, const std::vector<ns2__IPAddress * >*, const char*);
SOAP_FMAC3 std::vector<ns2__IPAddress * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__IPAddress(struct soap*, const char*, std::vector<ns2__IPAddress * >*, const char*);
SOAP_FMAC1 std::vector<ns2__IPAddress * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__IPAddress * > * soap_new_std__vectorTemplateOfPointerTons2__IPAddress(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__IPAddress(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__IPAddress(struct soap *soap, std::vector<ns2__IPAddress * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__IPAddress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__token
#define SOAP_TYPE_std__vectorTemplateOfxsd__token (1057)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__token(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__token(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__token(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__token(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__token(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__token(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__token(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__token(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__token(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address (1048)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap*, std::vector<ns2__PrefixedIPv6Address * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap*, const std::vector<ns2__PrefixedIPv6Address * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap*, const char*, int, const std::vector<ns2__PrefixedIPv6Address * >*, const char*);
SOAP_FMAC3 std::vector<ns2__PrefixedIPv6Address * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap*, const char*, std::vector<ns2__PrefixedIPv6Address * >*, const char*);
SOAP_FMAC1 std::vector<ns2__PrefixedIPv6Address * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PrefixedIPv6Address * > * soap_new_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap *soap, std::vector<ns2__PrefixedIPv6Address * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__PrefixedIPv6Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address (1046)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap*, std::vector<ns2__PrefixedIPv4Address * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap*, const std::vector<ns2__PrefixedIPv4Address * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap*, const char*, int, const std::vector<ns2__PrefixedIPv4Address * >*, const char*);
SOAP_FMAC3 std::vector<ns2__PrefixedIPv4Address * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap*, const char*, std::vector<ns2__PrefixedIPv4Address * >*, const char*);
SOAP_FMAC1 std::vector<ns2__PrefixedIPv4Address * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__PrefixedIPv4Address * > * soap_new_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap *soap, std::vector<ns2__PrefixedIPv4Address * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__PrefixedIPv4Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Dot11Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Dot11Configuration (1039)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap*, std::vector<ns2__Dot11Configuration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap*, const std::vector<ns2__Dot11Configuration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap*, const char*, int, const std::vector<ns2__Dot11Configuration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Dot11Configuration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap*, const char*, std::vector<ns2__Dot11Configuration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Dot11Configuration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Dot11Configuration * > * soap_new_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Dot11Configuration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap *soap, std::vector<ns2__Dot11Configuration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Dot11Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Dot3Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Dot3Configuration (1037)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap*, std::vector<ns2__Dot3Configuration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap*, const std::vector<ns2__Dot3Configuration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap*, const char*, int, const std::vector<ns2__Dot3Configuration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Dot3Configuration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap*, const char*, std::vector<ns2__Dot3Configuration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Dot3Configuration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Dot3Configuration * > * soap_new_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Dot3Configuration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap *soap, std::vector<ns2__Dot3Configuration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Dot3Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (1029)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__anyURI(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__anyURI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (1022)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption (1016)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap*, std::vector<ns2__AudioEncoderConfigurationOption * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap*, const std::vector<ns2__AudioEncoderConfigurationOption * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap*, const char*, int, const std::vector<ns2__AudioEncoderConfigurationOption * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioEncoderConfigurationOption * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap*, const char*, std::vector<ns2__AudioEncoderConfigurationOption * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioEncoderConfigurationOption * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioEncoderConfigurationOption * > * soap_new_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap *soap, std::vector<ns2__AudioEncoderConfigurationOption * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioEncoderConfigurationOption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__H264Profile
#define SOAP_TYPE_std__vectorTemplateOfns2__H264Profile (1013)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__H264Profile(struct soap*, std::vector<enum ns2__H264Profile >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__H264Profile(struct soap*, const std::vector<enum ns2__H264Profile >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__H264Profile(struct soap*, const char*, int, const std::vector<enum ns2__H264Profile >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__H264Profile >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__H264Profile(struct soap*, const char*, std::vector<enum ns2__H264Profile >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__H264Profile > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__H264Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__H264Profile > * soap_new_std__vectorTemplateOfns2__H264Profile(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__H264Profile(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__H264Profile(struct soap *soap, std::vector<enum ns2__H264Profile >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__H264Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__Mpeg4Profile
#define SOAP_TYPE_std__vectorTemplateOfns2__Mpeg4Profile (1012)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__Mpeg4Profile(struct soap*, std::vector<enum ns2__Mpeg4Profile >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__Mpeg4Profile(struct soap*, const std::vector<enum ns2__Mpeg4Profile >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__Mpeg4Profile(struct soap*, const char*, int, const std::vector<enum ns2__Mpeg4Profile >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__Mpeg4Profile >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__Mpeg4Profile(struct soap*, const char*, std::vector<enum ns2__Mpeg4Profile >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__Mpeg4Profile > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__Mpeg4Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__Mpeg4Profile > * soap_new_std__vectorTemplateOfns2__Mpeg4Profile(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__Mpeg4Profile(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__Mpeg4Profile(struct soap *soap, std::vector<enum ns2__Mpeg4Profile >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__Mpeg4Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoResolution
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoResolution (1011)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap*, std::vector<ns2__VideoResolution * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap*, const std::vector<ns2__VideoResolution * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap*, const char*, int, const std::vector<ns2__VideoResolution * >*, const char*);
SOAP_FMAC3 std::vector<ns2__VideoResolution * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap*, const char*, std::vector<ns2__VideoResolution * >*, const char*);
SOAP_FMAC1 std::vector<ns2__VideoResolution * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__VideoResolution * > * soap_new_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__VideoResolution(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap *soap, std::vector<ns2__VideoResolution * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__VideoResolution(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__RotateMode
#define SOAP_TYPE_std__vectorTemplateOfns2__RotateMode (1000)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__RotateMode(struct soap*, std::vector<enum ns2__RotateMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__RotateMode(struct soap*, const std::vector<enum ns2__RotateMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__RotateMode(struct soap*, const char*, int, const std::vector<enum ns2__RotateMode >*, const char*);
SOAP_FMAC3 std::vector<enum ns2__RotateMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__RotateMode(struct soap*, const char*, std::vector<enum ns2__RotateMode >*, const char*);
SOAP_FMAC1 std::vector<enum ns2__RotateMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__RotateMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns2__RotateMode > * soap_new_std__vectorTemplateOfns2__RotateMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__RotateMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__RotateMode(struct soap *soap, std::vector<enum ns2__RotateMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__RotateMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns2__ReferenceToken
#define SOAP_TYPE_std__vectorTemplateOfns2__ReferenceToken (996)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns2__ReferenceToken(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns2__ReferenceToken(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns2__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns2__ReferenceToken(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns2__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfns2__ReferenceToken(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns2__ReferenceToken(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns2__ReferenceToken(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns2__ReferenceToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOffloat
#define SOAP_TYPE_std__vectorTemplateOffloat (986)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOffloat(struct soap*, std::vector<float >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOffloat(struct soap*, const std::vector<float >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOffloat(struct soap*, const char*, int, const std::vector<float >*, const char*);
SOAP_FMAC3 std::vector<float >* SOAP_FMAC4 soap_in_std__vectorTemplateOffloat(struct soap*, const char*, std::vector<float >*, const char*);
SOAP_FMAC1 std::vector<float > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOffloat(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<float > * soap_new_std__vectorTemplateOffloat(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOffloat(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOffloat(struct soap *soap, std::vector<float >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOffloat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (985)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int >*, const char*);
SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int >*, const char*);
SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int > * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__OSDConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__OSDConfiguration (982)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap*, std::vector<ns2__OSDConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap*, const std::vector<ns2__OSDConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap*, const char*, int, const std::vector<ns2__OSDConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__OSDConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap*, const char*, std::vector<ns2__OSDConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__OSDConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__OSDConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__OSDConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap *soap, std::vector<ns2__OSDConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__OSDConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__VideoSourceMode
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__VideoSourceMode (980)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, std::vector<ns1__VideoSourceMode * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, const std::vector<ns1__VideoSourceMode * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, const char*, int, const std::vector<ns1__VideoSourceMode * >*, const char*);
SOAP_FMAC3 std::vector<ns1__VideoSourceMode * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, const char*, std::vector<ns1__VideoSourceMode * >*, const char*);
SOAP_FMAC1 std::vector<ns1__VideoSourceMode * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__VideoSourceMode * > * soap_new_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__VideoSourceMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap *soap, std::vector<ns1__VideoSourceMode * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration (969)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap*, std::vector<ns2__AudioDecoderConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap*, const std::vector<ns2__AudioDecoderConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap*, const char*, int, const std::vector<ns2__AudioDecoderConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioDecoderConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap*, const char*, std::vector<ns2__AudioDecoderConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioDecoderConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioDecoderConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap *soap, std::vector<ns2__AudioDecoderConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration (967)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap*, std::vector<ns2__AudioOutputConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap*, const std::vector<ns2__AudioOutputConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap*, const char*, int, const std::vector<ns2__AudioOutputConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioOutputConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap*, const char*, std::vector<ns2__AudioOutputConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioOutputConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioOutputConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap *soap, std::vector<ns2__AudioOutputConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__MetadataConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__MetadataConfiguration (965)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap*, std::vector<ns2__MetadataConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap*, const std::vector<ns2__MetadataConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap*, const char*, int, const std::vector<ns2__MetadataConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__MetadataConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap*, const char*, std::vector<ns2__MetadataConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__MetadataConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__MetadataConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__MetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap *soap, std::vector<ns2__MetadataConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__MetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration (963)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap*, std::vector<ns2__VideoAnalyticsConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap*, const std::vector<ns2__VideoAnalyticsConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap*, const char*, int, const std::vector<ns2__VideoAnalyticsConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__VideoAnalyticsConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap*, const char*, std::vector<ns2__VideoAnalyticsConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__VideoAnalyticsConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__VideoAnalyticsConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap *soap, std::vector<ns2__VideoAnalyticsConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__VideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration (961)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap*, std::vector<ns2__AudioSourceConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap*, const std::vector<ns2__AudioSourceConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap*, const char*, int, const std::vector<ns2__AudioSourceConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioSourceConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap*, const char*, std::vector<ns2__AudioSourceConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioSourceConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioSourceConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap *soap, std::vector<ns2__AudioSourceConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration (959)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap*, std::vector<ns2__AudioEncoderConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap*, const std::vector<ns2__AudioEncoderConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap*, const char*, int, const std::vector<ns2__AudioEncoderConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioEncoderConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap*, const char*, std::vector<ns2__AudioEncoderConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioEncoderConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioEncoderConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap *soap, std::vector<ns2__AudioEncoderConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration (957)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap*, std::vector<ns2__VideoSourceConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap*, const std::vector<ns2__VideoSourceConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap*, const char*, int, const std::vector<ns2__VideoSourceConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__VideoSourceConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap*, const char*, std::vector<ns2__VideoSourceConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__VideoSourceConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__VideoSourceConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap *soap, std::vector<ns2__VideoSourceConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__VideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration (955)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap*, std::vector<ns2__VideoEncoderConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap*, const std::vector<ns2__VideoEncoderConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap*, const char*, int, const std::vector<ns2__VideoEncoderConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<ns2__VideoEncoderConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap*, const char*, std::vector<ns2__VideoEncoderConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<ns2__VideoEncoderConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__VideoEncoderConfiguration * > * soap_new_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap *soap, std::vector<ns2__VideoEncoderConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__VideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Profile
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Profile (953)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Profile(struct soap*, std::vector<ns2__Profile * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Profile(struct soap*, const std::vector<ns2__Profile * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Profile(struct soap*, const char*, int, const std::vector<ns2__Profile * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Profile * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Profile(struct soap*, const char*, std::vector<ns2__Profile * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Profile * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Profile * > * soap_new_std__vectorTemplateOfPointerTons2__Profile(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Profile(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Profile(struct soap *soap, std::vector<ns2__Profile * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioOutput
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioOutput (950)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap*, std::vector<ns2__AudioOutput * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap*, const std::vector<ns2__AudioOutput * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap*, const char*, int, const std::vector<ns2__AudioOutput * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioOutput * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap*, const char*, std::vector<ns2__AudioOutput * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioOutput * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioOutput * > * soap_new_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioOutput(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap *soap, std::vector<ns2__AudioOutput * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AudioSource (948)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AudioSource(struct soap*, std::vector<ns2__AudioSource * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AudioSource(struct soap*, const std::vector<ns2__AudioSource * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AudioSource(struct soap*, const char*, int, const std::vector<ns2__AudioSource * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AudioSource * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AudioSource(struct soap*, const char*, std::vector<ns2__AudioSource * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AudioSource * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AudioSource * > * soap_new_std__vectorTemplateOfPointerTons2__AudioSource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AudioSource(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AudioSource(struct soap *soap, std::vector<ns2__AudioSource * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AudioSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__VideoSource (946)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__VideoSource(struct soap*, std::vector<ns2__VideoSource * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__VideoSource(struct soap*, const std::vector<ns2__VideoSource * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__VideoSource(struct soap*, const char*, int, const std::vector<ns2__VideoSource * >*, const char*);
SOAP_FMAC3 std::vector<ns2__VideoSource * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__VideoSource(struct soap*, const char*, std::vector<ns2__VideoSource * >*, const char*);
SOAP_FMAC1 std::vector<ns2__VideoSource * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__VideoSource * > * soap_new_std__vectorTemplateOfPointerTons2__VideoSource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__VideoSource(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__VideoSource(struct soap *soap, std::vector<ns2__VideoSource * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__VideoSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (938)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
